export const questions = [
  {
    "id": 1,
    "title": "Two Sum",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 2,
    "title": "Add Two Numbers",
    "difficulty": "medium",
    "category": [
      "linked list",
      "math",
      "recursion"
    ]
  },
  {
    "id": 3,
    "title": "Longest Substring Without Repeating Characters",
    "difficulty": "medium",
    "category": [
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 4,
    "title": "Median of Two Sorted Arrays",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "divide and conquer"
    ]
  },
  {
    "id": 5,
    "title": "Longest Palindromic Substring",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 6,
    "title": "Zigzag Conversion",
    "difficulty": "medium",
    "category": [
      "string"
    ]
  },
  {
    "id": 7,
    "title": "Reverse Integer",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 8,
    "title": "String to Integer (atoi)",
    "difficulty": "medium",
    "category": [
      "string"
    ]
  },
  {
    "id": 9,
    "title": "Palindrome Number",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 10,
    "title": "Regular Expression Matching",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "recursion",
      "string"
    ]
  },
  {
    "id": 11,
    "title": "Container With Most Water",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 12,
    "title": "Integer to Roman",
    "difficulty": "medium",
    "category": [
      "hash table",
      "math",
      "string"
    ]
  },
  {
    "id": 13,
    "title": "Roman to Integer",
    "difficulty": "easy",
    "category": [
      "hash table",
      "math",
      "string"
    ]
  },
  {
    "id": 14,
    "title": "Longest Common Prefix",
    "difficulty": "easy",
    "category": [
      "string",
      "trie"
    ]
  },
  {
    "id": 15,
    "title": "3Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 16,
    "title": "3Sum Closest",
    "difficulty": "medium",
    "category": [
      "array",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 17,
    "title": "Letter Combinations of a Phone Number",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "hash table",
      "string"
    ]
  },
  {
    "id": 18,
    "title": "4Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 19,
    "title": "Remove Nth Node From End of List",
    "difficulty": "medium",
    "category": [
      "linked list",
      "two pointers"
    ]
  },
  {
    "id": 20,
    "title": "Valid Parentheses",
    "difficulty": "easy",
    "category": [
      "stack",
      "string"
    ]
  },
  {
    "id": 21,
    "title": "Merge Two Sorted Lists",
    "difficulty": "easy",
    "category": [
      "linked list",
      "recursion"
    ]
  },
  {
    "id": 22,
    "title": "Generate Parentheses",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 23,
    "title": "Merge k Sorted Lists",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "heap",
      "linked list",
      "sorting"
    ]
  },
  {
    "id": 24,
    "title": "Swap Nodes in Pairs",
    "difficulty": "medium",
    "category": [
      "linked list",
      "recursion"
    ]
  },
  {
    "id": 25,
    "title": "Reverse Nodes in k-Group",
    "difficulty": "hard",
    "category": [
      "linked list",
      "recursion"
    ]
  },
  {
    "id": 26,
    "title": "Remove Duplicates from Sorted Array",
    "difficulty": "easy",
    "category": [
      "array",
      "two pointers"
    ]
  },
  {
    "id": 27,
    "title": "Remove Element",
    "difficulty": "easy",
    "category": [
      "array",
      "two pointers"
    ]
  },
  {
    "id": 28,
    "title": "Find the Index of the First Occurrence in a String",
    "difficulty": "easy",
    "category": [
      "string",
      "string matching",
      "two pointers"
    ]
  },
  {
    "id": 29,
    "title": "Divide Two Integers",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "math"
    ]
  },
  {
    "id": 30,
    "title": "Substring with Concatenation of All Words",
    "difficulty": "hard",
    "category": [
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 31,
    "title": "Next Permutation",
    "difficulty": "medium",
    "category": [
      "array",
      "two pointers"
    ]
  },
  {
    "id": 32,
    "title": "Longest Valid Parentheses",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "stack",
      "string"
    ]
  },
  {
    "id": 33,
    "title": "Search in Rotated Sorted Array",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 34,
    "title": "Find First and Last Position of Element in Sorted Array",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 35,
    "title": "Search Insert Position",
    "difficulty": "easy",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 36,
    "title": "Valid Sudoku",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "matrix"
    ]
  },
  {
    "id": 37,
    "title": "Sudoku Solver",
    "difficulty": "hard",
    "category": [
      "array",
      "backtracking",
      "hash table",
      "matrix"
    ]
  },
  {
    "id": 38,
    "title": "Count and Say",
    "difficulty": "medium",
    "category": [
      "string"
    ]
  },
  {
    "id": 39,
    "title": "Combination Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking"
    ]
  },
  {
    "id": 40,
    "title": "Combination Sum II",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking"
    ]
  },
  {
    "id": 41,
    "title": "First Missing Positive",
    "difficulty": "hard",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 42,
    "title": "Trapping Rain Water",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "monotonic stack",
      "stack",
      "two pointers"
    ]
  },
  {
    "id": 43,
    "title": "Multiply Strings",
    "difficulty": "medium",
    "category": [
      "math",
      "simulation",
      "string"
    ]
  },
  {
    "id": 44,
    "title": "Wildcard Matching",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "recursion",
      "string"
    ]
  },
  {
    "id": 45,
    "title": "Jump Game II",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 46,
    "title": "Permutations",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking"
    ]
  },
  {
    "id": 47,
    "title": "Permutations II",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "sorting"
    ]
  },
  {
    "id": 48,
    "title": "Rotate Image",
    "difficulty": "medium",
    "category": [
      "array",
      "math",
      "matrix"
    ]
  },
  {
    "id": 49,
    "title": "Group Anagrams",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 50,
    "title": "Pow(x, n)",
    "difficulty": "medium",
    "category": [
      "math",
      "recursion"
    ]
  },
  {
    "id": 51,
    "title": "N-Queens",
    "difficulty": "hard",
    "category": [
      "array",
      "backtracking"
    ]
  },
  {
    "id": 52,
    "title": "N-Queens II",
    "difficulty": "hard",
    "category": [
      "backtracking"
    ]
  },
  {
    "id": 53,
    "title": "Maximum Subarray",
    "difficulty": "medium",
    "category": [
      "array",
      "divide and conquer",
      "dynamic programming"
    ]
  },
  {
    "id": 54,
    "title": "Spiral Matrix",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "simulation"
    ]
  },
  {
    "id": 55,
    "title": "Jump Game",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 56,
    "title": "Merge Intervals",
    "difficulty": "medium",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 57,
    "title": "Insert Interval",
    "difficulty": "medium",
    "category": [
      "array"
    ]
  },
  {
    "id": 58,
    "title": "Length of Last Word",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 59,
    "title": "Spiral Matrix II",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "simulation"
    ]
  },
  {
    "id": 60,
    "title": "Permutation Sequence",
    "difficulty": "hard",
    "category": [
      "math",
      "recursion"
    ]
  },
  {
    "id": 61,
    "title": "Rotate List",
    "difficulty": "medium",
    "category": [
      "linked list",
      "two pointers"
    ]
  },
  {
    "id": 62,
    "title": "Unique Paths",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 63,
    "title": "Unique Paths II",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 64,
    "title": "Minimum Path Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 65,
    "title": "Valid Number",
    "difficulty": "hard",
    "category": [
      "string"
    ]
  },
  {
    "id": 66,
    "title": "Plus One",
    "difficulty": "easy",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 67,
    "title": "Add Binary",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "math",
      "simulation",
      "string"
    ]
  },
  {
    "id": 68,
    "title": "Text Justification",
    "difficulty": "hard",
    "category": [
      "array",
      "simulation",
      "string"
    ]
  },
  {
    "id": 69,
    "title": "Sqrt(x)",
    "difficulty": "easy",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 70,
    "title": "Climbing Stairs",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "math",
      "memoization"
    ]
  },
  {
    "id": 71,
    "title": "Simplify Path",
    "difficulty": "medium",
    "category": [
      "stack",
      "string"
    ]
  },
  {
    "id": 72,
    "title": "Edit Distance",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 73,
    "title": "Set Matrix Zeroes",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "matrix"
    ]
  },
  {
    "id": 74,
    "title": "Search a 2D Matrix",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "matrix"
    ]
  },
  {
    "id": 75,
    "title": "Sort Colors",
    "difficulty": "medium",
    "category": [
      "array",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 76,
    "title": "Minimum Window Substring",
    "difficulty": "hard",
    "category": [
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 77,
    "title": "Combinations",
    "difficulty": "medium",
    "category": [
      "backtracking"
    ]
  },
  {
    "id": 78,
    "title": "Subsets",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "bit manipulation"
    ]
  },
  {
    "id": 79,
    "title": "Word Search",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "graph traversal",
      "matrix",
      "string"
    ]
  },
  {
    "id": 80,
    "title": "Remove Duplicates from Sorted Array II",
    "difficulty": "medium",
    "category": [
      "array",
      "two pointers"
    ]
  },
  {
    "id": 81,
    "title": "Search in Rotated Sorted Array II",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 82,
    "title": "Remove Duplicates from Sorted List II",
    "difficulty": "medium",
    "category": [
      "linked list",
      "two pointers"
    ]
  },
  {
    "id": 83,
    "title": "Remove Duplicates from Sorted List",
    "difficulty": "easy",
    "category": [
      "linked list"
    ]
  },
  {
    "id": 84,
    "title": "Largest Rectangle in Histogram",
    "difficulty": "hard",
    "category": [
      "array",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 85,
    "title": "Maximal Rectangle",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "matrix",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 86,
    "title": "Partition List",
    "difficulty": "medium",
    "category": [
      "linked list",
      "two pointers"
    ]
  },
  {
    "id": 87,
    "title": "Scramble String",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 88,
    "title": "Merge Sorted Array",
    "difficulty": "easy",
    "category": [
      "array",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 89,
    "title": "Gray Code",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "bit manipulation",
      "math"
    ]
  },
  {
    "id": 90,
    "title": "Subsets II",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "bit manipulation"
    ]
  },
  {
    "id": 91,
    "title": "Decode Ways",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 92,
    "title": "Reverse Linked List II",
    "difficulty": "medium",
    "category": [
      "linked list"
    ]
  },
  {
    "id": 93,
    "title": "Restore IP Addresses",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "string"
    ]
  },
  {
    "id": 94,
    "title": "Binary Tree Inorder Traversal",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "graph traversal",
      "stack",
      "tree"
    ]
  },
  {
    "id": 95,
    "title": "Unique Binary Search Trees II",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "binary search tree",
      "binary tree",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 96,
    "title": "Unique Binary Search Trees",
    "difficulty": "medium",
    "category": [
      "binary search tree",
      "binary tree",
      "dynamic programming",
      "math",
      "tree"
    ]
  },
  {
    "id": 97,
    "title": "Interleaving String",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 98,
    "title": "Validate Binary Search Tree",
    "difficulty": "medium",
    "category": [
      "binary search tree",
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 99,
    "title": "Recover Binary Search Tree",
    "difficulty": "medium",
    "category": [
      "binary search tree",
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 100,
    "title": "Same Tree",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 101,
    "title": "Symmetric Tree",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 102,
    "title": "Binary Tree Level Order Traversal",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 103,
    "title": "Binary Tree Zigzag Level Order Traversal",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 104,
    "title": "Maximum Depth of Binary Tree",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 105,
    "title": "Construct Binary Tree from Preorder and Inorder Traversal",
    "difficulty": "medium",
    "category": [
      "array",
      "binary tree",
      "divide and conquer",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 106,
    "title": "Construct Binary Tree from Inorder and Postorder Traversal",
    "difficulty": "medium",
    "category": [
      "array",
      "binary tree",
      "divide and conquer",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 107,
    "title": "Binary Tree Level Order Traversal II",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 108,
    "title": "Convert Sorted Array to Binary Search Tree",
    "difficulty": "easy",
    "category": [
      "array",
      "binary search tree",
      "binary tree",
      "divide and conquer",
      "tree"
    ]
  },
  {
    "id": 109,
    "title": "Convert Sorted List to Binary Search Tree",
    "difficulty": "medium",
    "category": [
      "binary search tree",
      "binary tree",
      "divide and conquer",
      "linked list",
      "tree"
    ]
  },
  {
    "id": 110,
    "title": "Balanced Binary Tree",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 111,
    "title": "Minimum Depth of Binary Tree",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 112,
    "title": "Path Sum",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 113,
    "title": "Path Sum II",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 114,
    "title": "Flatten Binary Tree to Linked List",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "linked list",
      "stack",
      "tree"
    ]
  },
  {
    "id": 115,
    "title": "Distinct Subsequences",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 116,
    "title": "Populating Next Right Pointers in Each Node",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "linked list",
      "tree"
    ]
  },
  {
    "id": 117,
    "title": "Populating Next Right Pointers in Each Node II",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "linked list",
      "tree"
    ]
  },
  {
    "id": 118,
    "title": "Pascal's Triangle",
    "difficulty": "easy",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 119,
    "title": "Pascal's Triangle II",
    "difficulty": "easy",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 120,
    "title": "Triangle",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 121,
    "title": "Best Time to Buy and Sell Stock",
    "difficulty": "easy",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 122,
    "title": "Best Time to Buy and Sell Stock II",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 123,
    "title": "Best Time to Buy and Sell Stock III",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 124,
    "title": "Binary Tree Maximum Path Sum",
    "difficulty": "hard",
    "category": [
      "binary tree",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 125,
    "title": "Valid Palindrome",
    "difficulty": "easy",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 126,
    "title": "Word Ladder II",
    "difficulty": "hard",
    "category": [
      "backtracking",
      "graph traversal",
      "hash table",
      "string"
    ]
  },
  {
    "id": 127,
    "title": "Word Ladder",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "hash table",
      "string"
    ]
  },
  {
    "id": 128,
    "title": "Longest Consecutive Sequence",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "union find"
    ]
  },
  {
    "id": 129,
    "title": "Sum Root to Leaf Numbers",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 130,
    "title": "Surrounded Regions",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "matrix",
      "union find"
    ]
  },
  {
    "id": 131,
    "title": "Palindrome Partitioning",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 132,
    "title": "Palindrome Partitioning II",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 133,
    "title": "Clone Graph",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "hash table"
    ]
  },
  {
    "id": 134,
    "title": "Gas Station",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 135,
    "title": "Candy",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 136,
    "title": "Single Number",
    "difficulty": "easy",
    "category": [
      "array",
      "bit manipulation"
    ]
  },
  {
    "id": 137,
    "title": "Single Number II",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation"
    ]
  },
  {
    "id": 138,
    "title": "Copy List with Random Pointer",
    "difficulty": "medium",
    "category": [
      "hash table",
      "linked list"
    ]
  },
  {
    "id": 139,
    "title": "Word Break",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "hash table",
      "memoization",
      "string",
      "trie"
    ]
  },
  {
    "id": 140,
    "title": "Word Break II",
    "difficulty": "hard",
    "category": [
      "array",
      "backtracking",
      "dynamic programming",
      "hash table",
      "memoization",
      "string",
      "trie"
    ]
  },
  {
    "id": 141,
    "title": "Linked List Cycle",
    "difficulty": "easy",
    "category": [
      "hash table",
      "linked list",
      "two pointers"
    ]
  },
  {
    "id": 142,
    "title": "Linked List Cycle II",
    "difficulty": "medium",
    "category": [
      "hash table",
      "linked list",
      "two pointers"
    ]
  },
  {
    "id": 143,
    "title": "Reorder List",
    "difficulty": "medium",
    "category": [
      "linked list",
      "recursion",
      "stack",
      "two pointers"
    ]
  },
  {
    "id": 144,
    "title": "Binary Tree Preorder Traversal",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "graph traversal",
      "stack",
      "tree"
    ]
  },
  {
    "id": 145,
    "title": "Binary Tree Postorder Traversal",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "graph traversal",
      "stack",
      "tree"
    ]
  },
  {
    "id": 146,
    "title": "LRU Cache",
    "difficulty": "medium",
    "category": [
      "design",
      "hash table",
      "linked list"
    ]
  },
  {
    "id": 147,
    "title": "Insertion Sort List",
    "difficulty": "medium",
    "category": [
      "linked list",
      "sorting"
    ]
  },
  {
    "id": 148,
    "title": "Sort List",
    "difficulty": "medium",
    "category": [
      "divide and conquer",
      "linked list",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 149,
    "title": "Max Points on a Line",
    "difficulty": "hard",
    "category": [
      "array",
      "geometry",
      "hash table",
      "math"
    ]
  },
  {
    "id": 150,
    "title": "Evaluate Reverse Polish Notation",
    "difficulty": "medium",
    "category": [
      "array",
      "math",
      "stack"
    ]
  },
  {
    "id": 151,
    "title": "Reverse Words in a String",
    "difficulty": "medium",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 152,
    "title": "Maximum Product Subarray",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 153,
    "title": "Find Minimum in Rotated Sorted Array",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 154,
    "title": "Find Minimum in Rotated Sorted Array II",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 155,
    "title": "Min Stack",
    "difficulty": "medium",
    "category": [
      "design",
      "stack"
    ]
  },
  {
    "id": 156,
    "title": "Binary Tree Upside Down",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 157,
    "title": "Read N Characters Given Read4",
    "difficulty": "easy",
    "category": [
      "array",
      "interactive",
      "simulation"
    ]
  },
  {
    "id": 158,
    "title": "Read N Characters Given read4 II - Call Multiple Times",
    "difficulty": "hard",
    "category": [
      "array",
      "interactive",
      "simulation"
    ]
  },
  {
    "id": 159,
    "title": "Longest Substring with At Most Two Distinct Characters",
    "difficulty": "medium",
    "category": [
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 160,
    "title": "Intersection of Two Linked Lists",
    "difficulty": "easy",
    "category": [
      "hash table",
      "linked list",
      "two pointers"
    ]
  },
  {
    "id": 161,
    "title": "One Edit Distance",
    "difficulty": "medium",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 162,
    "title": "Find Peak Element",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 163,
    "title": "Missing Ranges",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 164,
    "title": "Maximum Gap",
    "difficulty": "medium",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 165,
    "title": "Compare Version Numbers",
    "difficulty": "medium",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 166,
    "title": "Fraction to Recurring Decimal",
    "difficulty": "medium",
    "category": [
      "hash table",
      "math",
      "string"
    ]
  },
  {
    "id": 167,
    "title": "Two Sum II - Input Array Is Sorted",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "two pointers"
    ]
  },
  {
    "id": 168,
    "title": "Excel Sheet Column Title",
    "difficulty": "easy",
    "category": [
      "math",
      "string"
    ]
  },
  {
    "id": 169,
    "title": "Majority Element",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "divide and conquer",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 170,
    "title": "Two Sum III - Data structure design",
    "difficulty": "easy",
    "category": [
      "array",
      "data stream",
      "design",
      "hash table",
      "two pointers"
    ]
  },
  {
    "id": 171,
    "title": "Excel Sheet Column Number",
    "difficulty": "easy",
    "category": [
      "math",
      "string"
    ]
  },
  {
    "id": 172,
    "title": "Factorial Trailing Zeroes",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 173,
    "title": "Binary Search Tree Iterator",
    "difficulty": "medium",
    "category": [
      "binary search tree",
      "binary tree",
      "design",
      "iterator",
      "stack",
      "tree"
    ]
  },
  {
    "id": 174,
    "title": "Dungeon Game",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 175,
    "title": "Combine Two Tables",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 176,
    "title": "Second Highest Salary",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 177,
    "title": "Nth Highest Salary",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 178,
    "title": "Rank Scores",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 179,
    "title": "Largest Number",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting",
      "string"
    ]
  },
  {
    "id": 180,
    "title": "Consecutive Numbers",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 181,
    "title": "Employees Earning More Than Their Managers",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 182,
    "title": "Duplicate Emails",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 183,
    "title": "Customers Who Never Order",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 184,
    "title": "Department Highest Salary",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 185,
    "title": "Department Top Three Salaries",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 186,
    "title": "Reverse Words in a String II",
    "difficulty": "medium",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 187,
    "title": "Repeated DNA Sequences",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "hash table",
      "rolling hash",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 188,
    "title": "Best Time to Buy and Sell Stock IV",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 189,
    "title": "Rotate Array",
    "difficulty": "medium",
    "category": [
      "array",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 190,
    "title": "Reverse Bits",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "divide and conquer"
    ]
  },
  {
    "id": 191,
    "title": "Number of 1 Bits",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "divide and conquer"
    ]
  },
  {
    "id": 192,
    "title": "Word Frequency",
    "difficulty": "medium",
    "category": [
      "shell"
    ]
  },
  {
    "id": 193,
    "title": "Valid Phone Numbers",
    "difficulty": "easy",
    "category": [
      "shell"
    ]
  },
  {
    "id": 194,
    "title": "Transpose File",
    "difficulty": "medium",
    "category": [
      "shell"
    ]
  },
  {
    "id": 195,
    "title": "Tenth Line",
    "difficulty": "easy",
    "category": [
      "shell"
    ]
  },
  {
    "id": 196,
    "title": "Delete Duplicate Emails",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 197,
    "title": "Rising Temperature",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 198,
    "title": "House Robber",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 199,
    "title": "Binary Tree Right Side View",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 200,
    "title": "Number of Islands",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "matrix",
      "union find"
    ]
  },
  {
    "id": 201,
    "title": "Bitwise AND of Numbers Range",
    "difficulty": "medium",
    "category": [
      "bit manipulation"
    ]
  },
  {
    "id": 202,
    "title": "Happy Number",
    "difficulty": "easy",
    "category": [
      "hash table",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 203,
    "title": "Remove Linked List Elements",
    "difficulty": "easy",
    "category": [
      "linked list",
      "recursion"
    ]
  },
  {
    "id": 204,
    "title": "Count Primes",
    "difficulty": "medium",
    "category": [
      "array",
      "enumeration",
      "math",
      "number theory"
    ]
  },
  {
    "id": 205,
    "title": "Isomorphic Strings",
    "difficulty": "easy",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 206,
    "title": "Reverse Linked List",
    "difficulty": "easy",
    "category": [
      "linked list",
      "recursion"
    ]
  },
  {
    "id": 207,
    "title": "Course Schedule",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "topological sort"
    ]
  },
  {
    "id": 208,
    "title": "Implement Trie (Prefix Tree)",
    "difficulty": "medium",
    "category": [
      "design",
      "hash table",
      "string",
      "trie"
    ]
  },
  {
    "id": 209,
    "title": "Minimum Size Subarray Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "prefix sum",
      "sliding window"
    ]
  },
  {
    "id": 210,
    "title": "Course Schedule II",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "topological sort"
    ]
  },
  {
    "id": 211,
    "title": "Design Add and Search Words Data Structure",
    "difficulty": "medium",
    "category": [
      "design",
      "graph traversal",
      "string",
      "trie"
    ]
  },
  {
    "id": 212,
    "title": "Word Search II",
    "difficulty": "hard",
    "category": [
      "array",
      "backtracking",
      "matrix",
      "string",
      "trie"
    ]
  },
  {
    "id": 213,
    "title": "House Robber II",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 214,
    "title": "Shortest Palindrome",
    "difficulty": "hard",
    "category": [
      "hash table",
      "rolling hash",
      "string",
      "string matching"
    ]
  },
  {
    "id": 215,
    "title": "Kth Largest Element in an Array",
    "difficulty": "medium",
    "category": [
      "array",
      "divide and conquer",
      "heap",
      "quickselect",
      "sorting"
    ]
  },
  {
    "id": 216,
    "title": "Combination Sum III",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking"
    ]
  },
  {
    "id": 217,
    "title": "Contains Duplicate",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 218,
    "title": "The Skyline Problem",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree",
      "divide and conquer",
      "heap",
      "line sweep",
      "ordered set",
      "segment tree"
    ]
  },
  {
    "id": 219,
    "title": "Contains Duplicate II",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "sliding window"
    ]
  },
  {
    "id": 220,
    "title": "Contains Duplicate III",
    "difficulty": "hard",
    "category": [
      "array",
      "ordered set",
      "sliding window",
      "sorting"
    ]
  },
  {
    "id": 221,
    "title": "Maximal Square",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 222,
    "title": "Count Complete Tree Nodes",
    "difficulty": "easy",
    "category": [
      "binary search",
      "binary tree",
      "bit manipulation",
      "tree"
    ]
  },
  {
    "id": 223,
    "title": "Rectangle Area",
    "difficulty": "medium",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 224,
    "title": "Basic Calculator",
    "difficulty": "hard",
    "category": [
      "math",
      "recursion",
      "stack",
      "string"
    ]
  },
  {
    "id": 225,
    "title": "Implement Stack using Queues",
    "difficulty": "easy",
    "category": [
      "design",
      "queue",
      "stack"
    ]
  },
  {
    "id": 226,
    "title": "Invert Binary Tree",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 227,
    "title": "Basic Calculator II",
    "difficulty": "medium",
    "category": [
      "math",
      "stack",
      "string"
    ]
  },
  {
    "id": 228,
    "title": "Summary Ranges",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 229,
    "title": "Majority Element II",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 230,
    "title": "Kth Smallest Element in a BST",
    "difficulty": "medium",
    "category": [
      "binary search tree",
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 231,
    "title": "Power of Two",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "math",
      "recursion"
    ]
  },
  {
    "id": 232,
    "title": "Implement Queue using Stacks",
    "difficulty": "easy",
    "category": [
      "design",
      "queue",
      "stack"
    ]
  },
  {
    "id": 233,
    "title": "Number of Digit One",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "recursion"
    ]
  },
  {
    "id": 234,
    "title": "Palindrome Linked List",
    "difficulty": "easy",
    "category": [
      "linked list",
      "recursion",
      "stack",
      "two pointers"
    ]
  },
  {
    "id": 235,
    "title": "Lowest Common Ancestor of a Binary Search Tree",
    "difficulty": "medium",
    "category": [
      "binary search tree",
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 236,
    "title": "Lowest Common Ancestor of a Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 237,
    "title": "Delete Node in a Linked List",
    "difficulty": "medium",
    "category": [
      "linked list"
    ]
  },
  {
    "id": 238,
    "title": "Product of Array Except Self",
    "difficulty": "medium",
    "category": [
      "array",
      "prefix sum"
    ]
  },
  {
    "id": 239,
    "title": "Sliding Window Maximum",
    "difficulty": "hard",
    "category": [
      "array",
      "heap",
      "monotonic queue",
      "queue",
      "sliding window"
    ]
  },
  {
    "id": 240,
    "title": "Search a 2D Matrix II",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "divide and conquer",
      "matrix"
    ]
  },
  {
    "id": 241,
    "title": "Different Ways to Add Parentheses",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "math",
      "memoization",
      "recursion",
      "string"
    ]
  },
  {
    "id": 242,
    "title": "Valid Anagram",
    "difficulty": "easy",
    "category": [
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 243,
    "title": "Shortest Word Distance",
    "difficulty": "easy",
    "category": [
      "array",
      "string"
    ]
  },
  {
    "id": 244,
    "title": "Shortest Word Distance II",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "hash table",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 245,
    "title": "Shortest Word Distance III",
    "difficulty": "medium",
    "category": [
      "array",
      "string"
    ]
  },
  {
    "id": 246,
    "title": "Strobogrammatic Number",
    "difficulty": "easy",
    "category": [
      "hash table",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 247,
    "title": "Strobogrammatic Number II",
    "difficulty": "medium",
    "category": [
      "array",
      "recursion",
      "string"
    ]
  },
  {
    "id": 248,
    "title": "Strobogrammatic Number III",
    "difficulty": "hard",
    "category": [
      "array",
      "recursion",
      "string"
    ]
  },
  {
    "id": 249,
    "title": "Group Shifted Strings",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "string"
    ]
  },
  {
    "id": 250,
    "title": "Count Univalue Subtrees",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 251,
    "title": "Flatten 2D Vector",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "iterator",
      "two pointers"
    ]
  },
  {
    "id": 252,
    "title": "Meeting Rooms",
    "difficulty": "easy",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 253,
    "title": "Meeting Rooms II",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "heap",
      "prefix sum",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 254,
    "title": "Factor Combinations",
    "difficulty": "medium",
    "category": [
      "backtracking"
    ]
  },
  {
    "id": 255,
    "title": "Verify Preorder Sequence in Binary Search Tree",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search tree",
      "binary tree",
      "monotonic stack",
      "recursion",
      "stack",
      "tree"
    ]
  },
  {
    "id": 256,
    "title": "Paint House",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 257,
    "title": "Binary Tree Paths",
    "difficulty": "easy",
    "category": [
      "backtracking",
      "binary tree",
      "graph traversal",
      "string",
      "tree"
    ]
  },
  {
    "id": 258,
    "title": "Add Digits",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory",
      "simulation"
    ]
  },
  {
    "id": 259,
    "title": "3Sum Smaller",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 260,
    "title": "Single Number III",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation"
    ]
  },
  {
    "id": 261,
    "title": "Graph Valid Tree",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 262,
    "title": "Trips and Users",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 263,
    "title": "Ugly Number",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 264,
    "title": "Ugly Number II",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "hash table",
      "heap",
      "math"
    ]
  },
  {
    "id": 265,
    "title": "Paint House II",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 266,
    "title": "Palindrome Permutation",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "hash table",
      "string"
    ]
  },
  {
    "id": 267,
    "title": "Palindrome Permutation II",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "hash table",
      "string"
    ]
  },
  {
    "id": 268,
    "title": "Missing Number",
    "difficulty": "easy",
    "category": [
      "array",
      "binary search",
      "bit manipulation",
      "hash table",
      "math",
      "sorting"
    ]
  },
  {
    "id": 269,
    "title": "Alien Dictionary",
    "difficulty": "hard",
    "category": [
      "array",
      "graph",
      "graph traversal",
      "string",
      "topological sort"
    ]
  },
  {
    "id": 270,
    "title": "Closest Binary Search Tree Value",
    "difficulty": "easy",
    "category": [
      "binary search",
      "binary search tree",
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 271,
    "title": "Encode and Decode Strings",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "string"
    ]
  },
  {
    "id": 272,
    "title": "Closest Binary Search Tree Value II",
    "difficulty": "hard",
    "category": [
      "binary search tree",
      "binary tree",
      "graph traversal",
      "heap",
      "stack",
      "tree",
      "two pointers"
    ]
  },
  {
    "id": 273,
    "title": "Integer to English Words",
    "difficulty": "hard",
    "category": [
      "math",
      "recursion",
      "string"
    ]
  },
  {
    "id": 274,
    "title": "H-Index",
    "difficulty": "medium",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 275,
    "title": "H-Index II",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 276,
    "title": "Paint Fence",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 277,
    "title": "Find the Celebrity",
    "difficulty": "medium",
    "category": [
      "graph",
      "interactive",
      "two pointers"
    ]
  },
  {
    "id": 278,
    "title": "First Bad Version",
    "difficulty": "easy",
    "category": [
      "binary search",
      "interactive"
    ]
  },
  {
    "id": 279,
    "title": "Perfect Squares",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 280,
    "title": "Wiggle Sort",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 281,
    "title": "Zigzag Iterator",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "iterator",
      "queue"
    ]
  },
  {
    "id": 282,
    "title": "Expression Add Operators",
    "difficulty": "hard",
    "category": [
      "backtracking",
      "math",
      "string"
    ]
  },
  {
    "id": 283,
    "title": "Move Zeroes",
    "difficulty": "easy",
    "category": [
      "array",
      "two pointers"
    ]
  },
  {
    "id": 284,
    "title": "Peeking Iterator",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "iterator"
    ]
  },
  {
    "id": 285,
    "title": "Inorder Successor in BST",
    "difficulty": "medium",
    "category": [
      "binary search tree",
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 286,
    "title": "Walls and Gates",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 287,
    "title": "Find the Duplicate Number",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "bit manipulation",
      "two pointers"
    ]
  },
  {
    "id": 288,
    "title": "Unique Word Abbreviation",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "hash table",
      "string"
    ]
  },
  {
    "id": 289,
    "title": "Game of Life",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "simulation"
    ]
  },
  {
    "id": 290,
    "title": "Word Pattern",
    "difficulty": "easy",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 291,
    "title": "Word Pattern II",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "hash table",
      "string"
    ]
  },
  {
    "id": 292,
    "title": "Nim Game",
    "difficulty": "easy",
    "category": [
      "brainteaser",
      "game theory",
      "math"
    ]
  },
  {
    "id": 293,
    "title": "Flip Game",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 294,
    "title": "Flip Game II",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "dynamic programming",
      "game theory",
      "math",
      "memoization"
    ]
  },
  {
    "id": 295,
    "title": "Find Median from Data Stream",
    "difficulty": "hard",
    "category": [
      "data stream",
      "design",
      "heap",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 296,
    "title": "Best Meeting Point",
    "difficulty": "hard",
    "category": [
      "array",
      "math",
      "matrix",
      "sorting"
    ]
  },
  {
    "id": 297,
    "title": "Serialize and Deserialize Binary Tree",
    "difficulty": "hard",
    "category": [
      "binary tree",
      "design",
      "graph traversal",
      "string",
      "tree"
    ]
  },
  {
    "id": 298,
    "title": "Binary Tree Longest Consecutive Sequence",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 299,
    "title": "Bulls and Cows",
    "difficulty": "medium",
    "category": [
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 300,
    "title": "Longest Increasing Subsequence",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "dynamic programming"
    ]
  },
  {
    "id": 301,
    "title": "Remove Invalid Parentheses",
    "difficulty": "hard",
    "category": [
      "backtracking",
      "graph traversal",
      "string"
    ]
  },
  {
    "id": 302,
    "title": "Smallest Rectangle Enclosing Black Pixels",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 303,
    "title": "Range Sum Query - Immutable",
    "difficulty": "easy",
    "category": [
      "array",
      "design",
      "prefix sum"
    ]
  },
  {
    "id": 304,
    "title": "Range Sum Query 2D - Immutable",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "matrix",
      "prefix sum"
    ]
  },
  {
    "id": 305,
    "title": "Number of Islands II",
    "difficulty": "hard",
    "category": [
      "array",
      "hash table",
      "union find"
    ]
  },
  {
    "id": 306,
    "title": "Additive Number",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "string"
    ]
  },
  {
    "id": 307,
    "title": "Range Sum Query - Mutable",
    "difficulty": "medium",
    "category": [
      "array",
      "binary indexed tree",
      "design",
      "segment tree"
    ]
  },
  {
    "id": 308,
    "title": "Range Sum Query 2D - Mutable",
    "difficulty": "medium",
    "category": [
      "array",
      "binary indexed tree",
      "design",
      "matrix",
      "segment tree"
    ]
  },
  {
    "id": 309,
    "title": "Best Time to Buy and Sell Stock with Cooldown",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 310,
    "title": "Minimum Height Trees",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "topological sort"
    ]
  },
  {
    "id": 311,
    "title": "Sparse Matrix Multiplication",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "matrix"
    ]
  },
  {
    "id": 312,
    "title": "Burst Balloons",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 313,
    "title": "Super Ugly Number",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 314,
    "title": "Binary Tree Vertical Order Traversal",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "hash table",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 315,
    "title": "Count of Smaller Numbers After Self",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree",
      "binary search",
      "divide and conquer",
      "ordered set",
      "segment tree",
      "sorting"
    ]
  },
  {
    "id": 316,
    "title": "Remove Duplicate Letters",
    "difficulty": "medium",
    "category": [
      "greedy",
      "monotonic stack",
      "stack",
      "string"
    ]
  },
  {
    "id": 317,
    "title": "Shortest Distance from All Buildings",
    "difficulty": "hard",
    "category": [
      "array",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 318,
    "title": "Maximum Product of Word Lengths",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "string"
    ]
  },
  {
    "id": 319,
    "title": "Bulb Switcher",
    "difficulty": "medium",
    "category": [
      "brainteaser",
      "math"
    ]
  },
  {
    "id": 320,
    "title": "Generalized Abbreviation",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "bit manipulation",
      "string"
    ]
  },
  {
    "id": 321,
    "title": "Create Maximum Number",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "monotonic stack",
      "stack",
      "two pointers"
    ]
  },
  {
    "id": 322,
    "title": "Coin Change",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "graph traversal"
    ]
  },
  {
    "id": 323,
    "title": "Number of Connected Components in an Undirected Graph",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 324,
    "title": "Wiggle Sort II",
    "difficulty": "medium",
    "category": [
      "array",
      "divide and conquer",
      "greedy",
      "quickselect",
      "sorting"
    ]
  },
  {
    "id": 325,
    "title": "Maximum Size Subarray Sum Equals k",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "prefix sum"
    ]
  },
  {
    "id": 326,
    "title": "Power of Three",
    "difficulty": "easy",
    "category": [
      "math",
      "recursion"
    ]
  },
  {
    "id": 327,
    "title": "Count of Range Sum",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree",
      "binary search",
      "divide and conquer",
      "ordered set",
      "segment tree",
      "sorting"
    ]
  },
  {
    "id": 328,
    "title": "Odd Even Linked List",
    "difficulty": "medium",
    "category": [
      "linked list"
    ]
  },
  {
    "id": 329,
    "title": "Longest Increasing Path in a Matrix",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "graph",
      "graph traversal",
      "matrix",
      "memoization",
      "topological sort"
    ]
  },
  {
    "id": 330,
    "title": "Patching Array",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 331,
    "title": "Verify Preorder Serialization of a Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "stack",
      "string",
      "tree"
    ]
  },
  {
    "id": 332,
    "title": "Reconstruct Itinerary",
    "difficulty": "hard",
    "category": [
      "eulerian circuit",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 333,
    "title": "Largest BST Subtree",
    "difficulty": "medium",
    "category": [
      "binary search tree",
      "binary tree",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 334,
    "title": "Increasing Triplet Subsequence",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 335,
    "title": "Self Crossing",
    "difficulty": "hard",
    "category": [
      "array",
      "geometry",
      "math"
    ]
  },
  {
    "id": 336,
    "title": "Palindrome Pairs",
    "difficulty": "hard",
    "category": [
      "array",
      "hash table",
      "string",
      "trie"
    ]
  },
  {
    "id": 337,
    "title": "House Robber III",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 338,
    "title": "Counting Bits",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 339,
    "title": "Nested List Weight Sum",
    "difficulty": "medium",
    "category": [
      "graph traversal"
    ]
  },
  {
    "id": 340,
    "title": "Longest Substring with At Most K Distinct Characters",
    "difficulty": "medium",
    "category": [
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 341,
    "title": "Flatten Nested List Iterator",
    "difficulty": "medium",
    "category": [
      "design",
      "graph traversal",
      "iterator",
      "queue",
      "stack",
      "tree"
    ]
  },
  {
    "id": 342,
    "title": "Power of Four",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "math",
      "recursion"
    ]
  },
  {
    "id": 343,
    "title": "Integer Break",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 344,
    "title": "Reverse String",
    "difficulty": "easy",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 345,
    "title": "Reverse Vowels of a String",
    "difficulty": "easy",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 346,
    "title": "Moving Average from Data Stream",
    "difficulty": "easy",
    "category": [
      "array",
      "data stream",
      "design",
      "queue"
    ]
  },
  {
    "id": 347,
    "title": "Top K Frequent Elements",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "divide and conquer",
      "hash table",
      "heap",
      "quickselect",
      "sorting"
    ]
  },
  {
    "id": 348,
    "title": "Design Tic-Tac-Toe",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "hash table",
      "matrix",
      "simulation"
    ]
  },
  {
    "id": 349,
    "title": "Intersection of Two Arrays",
    "difficulty": "easy",
    "category": [
      "array",
      "binary search",
      "hash table",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 350,
    "title": "Intersection of Two Arrays II",
    "difficulty": "easy",
    "category": [
      "array",
      "binary search",
      "hash table",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 351,
    "title": "Android Unlock Patterns",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 352,
    "title": "Data Stream as Disjoint Intervals",
    "difficulty": "hard",
    "category": [
      "binary search",
      "design",
      "ordered set"
    ]
  },
  {
    "id": 353,
    "title": "Design Snake Game",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "hash table",
      "queue",
      "simulation"
    ]
  },
  {
    "id": 354,
    "title": "Russian Doll Envelopes",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 355,
    "title": "Design Twitter",
    "difficulty": "medium",
    "category": [
      "design",
      "hash table",
      "heap",
      "linked list"
    ]
  },
  {
    "id": 356,
    "title": "Line Reflection",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "math"
    ]
  },
  {
    "id": 357,
    "title": "Count Numbers with Unique Digits",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 358,
    "title": "Rearrange String k Distance Apart",
    "difficulty": "hard",
    "category": [
      "counting",
      "greedy",
      "hash table",
      "heap",
      "sorting",
      "string"
    ]
  },
  {
    "id": 359,
    "title": "Logger Rate Limiter",
    "difficulty": "easy",
    "category": [
      "data stream",
      "design",
      "hash table"
    ]
  },
  {
    "id": 360,
    "title": "Sort Transformed Array",
    "difficulty": "medium",
    "category": [
      "array",
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 361,
    "title": "Bomb Enemy",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 362,
    "title": "Design Hit Counter",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "data stream",
      "design",
      "queue"
    ]
  },
  {
    "id": 363,
    "title": "Max Sum of Rectangle No Larger Than K",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "matrix",
      "ordered set",
      "prefix sum"
    ]
  },
  {
    "id": 364,
    "title": "Nested List Weight Sum II",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "stack"
    ]
  },
  {
    "id": 365,
    "title": "Water and Jug Problem",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 366,
    "title": "Find Leaves of Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 367,
    "title": "Valid Perfect Square",
    "difficulty": "easy",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 368,
    "title": "Largest Divisible Subset",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "math",
      "sorting"
    ]
  },
  {
    "id": 369,
    "title": "Plus One Linked List",
    "difficulty": "medium",
    "category": [
      "linked list",
      "math"
    ]
  },
  {
    "id": 370,
    "title": "Range Addition",
    "difficulty": "medium",
    "category": [
      "array",
      "prefix sum"
    ]
  },
  {
    "id": 371,
    "title": "Sum of Two Integers",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "math"
    ]
  },
  {
    "id": 372,
    "title": "Super Pow",
    "difficulty": "medium",
    "category": [
      "divide and conquer",
      "math"
    ]
  },
  {
    "id": 373,
    "title": "Find K Pairs with Smallest Sums",
    "difficulty": "medium",
    "category": [
      "array",
      "heap"
    ]
  },
  {
    "id": 374,
    "title": "Guess Number Higher or Lower",
    "difficulty": "easy",
    "category": [
      "binary search",
      "interactive"
    ]
  },
  {
    "id": 375,
    "title": "Guess Number Higher or Lower II",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "game theory",
      "math"
    ]
  },
  {
    "id": 376,
    "title": "Wiggle Subsequence",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 377,
    "title": "Combination Sum IV",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 378,
    "title": "Kth Smallest Element in a Sorted Matrix",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "heap",
      "matrix",
      "sorting"
    ]
  },
  {
    "id": 379,
    "title": "Design Phone Directory",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "hash table",
      "linked list",
      "queue"
    ]
  },
  {
    "id": 380,
    "title": "Insert Delete GetRandom O(1)",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "hash table",
      "math",
      "randomized"
    ]
  },
  {
    "id": 381,
    "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
    "difficulty": "hard",
    "category": [
      "array",
      "design",
      "hash table",
      "math",
      "randomized"
    ]
  },
  {
    "id": 382,
    "title": "Linked List Random Node",
    "difficulty": "medium",
    "category": [
      "linked list",
      "math",
      "randomized"
    ]
  },
  {
    "id": 383,
    "title": "Ransom Note",
    "difficulty": "easy",
    "category": [
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 384,
    "title": "Shuffle an Array",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "math",
      "randomized"
    ]
  },
  {
    "id": 385,
    "title": "Mini Parser",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "stack",
      "string"
    ]
  },
  {
    "id": 386,
    "title": "Lexicographical Numbers",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "trie"
    ]
  },
  {
    "id": 387,
    "title": "First Unique Character in a String",
    "difficulty": "easy",
    "category": [
      "counting",
      "hash table",
      "queue",
      "string"
    ]
  },
  {
    "id": 388,
    "title": "Longest Absolute File Path",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "stack",
      "string"
    ]
  },
  {
    "id": 389,
    "title": "Find the Difference",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 390,
    "title": "Elimination Game",
    "difficulty": "medium",
    "category": [
      "math",
      "recursion"
    ]
  },
  {
    "id": 391,
    "title": "Perfect Rectangle",
    "difficulty": "hard",
    "category": [
      "array",
      "line sweep"
    ]
  },
  {
    "id": 392,
    "title": "Is Subsequence",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 393,
    "title": "UTF-8 Validation",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation"
    ]
  },
  {
    "id": 394,
    "title": "Decode String",
    "difficulty": "medium",
    "category": [
      "recursion",
      "stack",
      "string"
    ]
  },
  {
    "id": 395,
    "title": "Longest Substring with At Least K Repeating Characters",
    "difficulty": "medium",
    "category": [
      "divide and conquer",
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 396,
    "title": "Rotate Function",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 397,
    "title": "Integer Replacement",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "greedy",
      "memoization"
    ]
  },
  {
    "id": 398,
    "title": "Random Pick Index",
    "difficulty": "medium",
    "category": [
      "hash table",
      "math",
      "randomized"
    ]
  },
  {
    "id": 399,
    "title": "Evaluate Division",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "graph traversal",
      "shortest path",
      "string",
      "union find"
    ]
  },
  {
    "id": 400,
    "title": "Nth Digit",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 401,
    "title": "Binary Watch",
    "difficulty": "easy",
    "category": [
      "backtracking",
      "bit manipulation"
    ]
  },
  {
    "id": 402,
    "title": "Remove K Digits",
    "difficulty": "medium",
    "category": [
      "greedy",
      "monotonic stack",
      "stack",
      "string"
    ]
  },
  {
    "id": 403,
    "title": "Frog Jump",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 404,
    "title": "Sum of Left Leaves",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 405,
    "title": "Convert a Number to Hexadecimal",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "math"
    ]
  },
  {
    "id": 406,
    "title": "Queue Reconstruction by Height",
    "difficulty": "medium",
    "category": [
      "array",
      "binary indexed tree",
      "segment tree",
      "sorting"
    ]
  },
  {
    "id": 407,
    "title": "Trapping Rain Water II",
    "difficulty": "hard",
    "category": [
      "array",
      "graph traversal",
      "heap",
      "matrix"
    ]
  },
  {
    "id": 408,
    "title": "Valid Word Abbreviation",
    "difficulty": "easy",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 409,
    "title": "Longest Palindrome",
    "difficulty": "easy",
    "category": [
      "greedy",
      "hash table",
      "string"
    ]
  },
  {
    "id": 410,
    "title": "Split Array Largest Sum",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "dynamic programming",
      "greedy",
      "prefix sum"
    ]
  },
  {
    "id": 411,
    "title": "Minimum Unique Word Abbreviation",
    "difficulty": "hard",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "string"
    ]
  },
  {
    "id": 412,
    "title": "Fizz Buzz",
    "difficulty": "easy",
    "category": [
      "math",
      "simulation",
      "string"
    ]
  },
  {
    "id": 413,
    "title": "Arithmetic Slices",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "sliding window"
    ]
  },
  {
    "id": 414,
    "title": "Third Maximum Number",
    "difficulty": "easy",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 415,
    "title": "Add Strings",
    "difficulty": "easy",
    "category": [
      "math",
      "simulation",
      "string"
    ]
  },
  {
    "id": 416,
    "title": "Partition Equal Subset Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 417,
    "title": "Pacific Atlantic Water Flow",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 418,
    "title": "Sentence Screen Fitting",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 419,
    "title": "Battleships in a Board",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 420,
    "title": "Strong Password Checker",
    "difficulty": "hard",
    "category": [
      "greedy",
      "heap",
      "string"
    ]
  },
  {
    "id": 421,
    "title": "Maximum XOR of Two Numbers in an Array",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "hash table",
      "trie"
    ]
  },
  {
    "id": 422,
    "title": "Valid Word Square",
    "difficulty": "easy",
    "category": [
      "array",
      "matrix"
    ]
  },
  {
    "id": 423,
    "title": "Reconstruct Original Digits from English",
    "difficulty": "medium",
    "category": [
      "hash table",
      "math",
      "string"
    ]
  },
  {
    "id": 424,
    "title": "Longest Repeating Character Replacement",
    "difficulty": "medium",
    "category": [
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 425,
    "title": "Word Squares",
    "difficulty": "hard",
    "category": [
      "array",
      "backtracking",
      "string",
      "trie"
    ]
  },
  {
    "id": 426,
    "title": "Convert Binary Search Tree to Sorted Doubly Linked List",
    "difficulty": "medium",
    "category": [
      "binary search tree",
      "binary tree",
      "graph traversal",
      "linked list",
      "stack",
      "tree"
    ]
  },
  {
    "id": 427,
    "title": "Construct Quad Tree",
    "difficulty": "medium",
    "category": [
      "array",
      "divide and conquer",
      "matrix",
      "tree"
    ]
  },
  {
    "id": 428,
    "title": "Serialize and Deserialize N-ary Tree",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "string",
      "tree"
    ]
  },
  {
    "id": 429,
    "title": "N-ary Tree Level Order Traversal",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 430,
    "title": "Flatten a Multilevel Doubly Linked List",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "linked list"
    ]
  },
  {
    "id": 431,
    "title": "Encode N-ary Tree to Binary Tree",
    "difficulty": "hard",
    "category": [
      "binary tree",
      "design",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 432,
    "title": "All O`one Data Structure",
    "difficulty": "hard",
    "category": [
      "design",
      "hash table",
      "linked list"
    ]
  },
  {
    "id": 433,
    "title": "Minimum Genetic Mutation",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "hash table",
      "string"
    ]
  },
  {
    "id": 434,
    "title": "Number of Segments in a String",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 435,
    "title": "Non-overlapping Intervals",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 436,
    "title": "Find Right Interval",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "sorting"
    ]
  },
  {
    "id": 437,
    "title": "Path Sum III",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 438,
    "title": "Find All Anagrams in a String",
    "difficulty": "medium",
    "category": [
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 439,
    "title": "Ternary Expression Parser",
    "difficulty": "medium",
    "category": [
      "recursion",
      "stack",
      "string"
    ]
  },
  {
    "id": 440,
    "title": "K-th Smallest in Lexicographical Order",
    "difficulty": "hard",
    "category": [
      "trie"
    ]
  },
  {
    "id": 441,
    "title": "Arranging Coins",
    "difficulty": "easy",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 442,
    "title": "Find All Duplicates in an Array",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 443,
    "title": "String Compression",
    "difficulty": "medium",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 444,
    "title": "Sequence Reconstruction",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "topological sort"
    ]
  },
  {
    "id": 445,
    "title": "Add Two Numbers II",
    "difficulty": "medium",
    "category": [
      "linked list",
      "math",
      "stack"
    ]
  },
  {
    "id": 446,
    "title": "Arithmetic Slices II - Subsequence",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 447,
    "title": "Number of Boomerangs",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "math"
    ]
  },
  {
    "id": 448,
    "title": "Find All Numbers Disappeared in an Array",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 449,
    "title": "Serialize and Deserialize BST",
    "difficulty": "medium",
    "category": [
      "binary search tree",
      "binary tree",
      "design",
      "graph traversal",
      "string",
      "tree"
    ]
  },
  {
    "id": 450,
    "title": "Delete Node in a BST",
    "difficulty": "medium",
    "category": [
      "binary search tree",
      "binary tree",
      "tree"
    ]
  },
  {
    "id": 451,
    "title": "Sort Characters By Frequency",
    "difficulty": "medium",
    "category": [
      "counting",
      "hash table",
      "heap",
      "sorting",
      "string"
    ]
  },
  {
    "id": 452,
    "title": "Minimum Number of Arrows to Burst Balloons",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 453,
    "title": "Minimum Moves to Equal Array Elements",
    "difficulty": "medium",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 454,
    "title": "4Sum II",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 455,
    "title": "Assign Cookies",
    "difficulty": "easy",
    "category": [
      "array",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 456,
    "title": "132 Pattern",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "monotonic stack",
      "ordered set",
      "stack"
    ]
  },
  {
    "id": 457,
    "title": "Circular Array Loop",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "two pointers"
    ]
  },
  {
    "id": 458,
    "title": "Poor Pigs",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 459,
    "title": "Repeated Substring Pattern",
    "difficulty": "easy",
    "category": [
      "string",
      "string matching"
    ]
  },
  {
    "id": 460,
    "title": "LFU Cache",
    "difficulty": "hard",
    "category": [
      "design",
      "hash table",
      "linked list"
    ]
  },
  {
    "id": 461,
    "title": "Hamming Distance",
    "difficulty": "easy",
    "category": [
      "bit manipulation"
    ]
  },
  {
    "id": 462,
    "title": "Minimum Moves to Equal Array Elements II",
    "difficulty": "medium",
    "category": [
      "array",
      "math",
      "sorting"
    ]
  },
  {
    "id": 463,
    "title": "Island Perimeter",
    "difficulty": "easy",
    "category": [
      "array",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 464,
    "title": "Can I Win",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "game theory",
      "math",
      "memoization"
    ]
  },
  {
    "id": 465,
    "title": "Optimal Account Balancing",
    "difficulty": "hard",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 466,
    "title": "Count The Repetitions",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 467,
    "title": "Unique Substrings in Wraparound String",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 468,
    "title": "Validate IP Address",
    "difficulty": "medium",
    "category": [
      "string"
    ]
  },
  {
    "id": 469,
    "title": "Convex Polygon",
    "difficulty": "medium",
    "category": [
      "array",
      "geometry",
      "math"
    ]
  },
  {
    "id": 470,
    "title": "Implement Rand10() Using Rand7()",
    "difficulty": "medium",
    "category": [
      "math",
      "probability",
      "randomized"
    ]
  },
  {
    "id": 471,
    "title": "Encode String with Shortest Length",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 472,
    "title": "Concatenated Words",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "graph traversal",
      "string",
      "trie"
    ]
  },
  {
    "id": 473,
    "title": "Matchsticks to Square",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 474,
    "title": "Ones and Zeroes",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 475,
    "title": "Heaters",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 476,
    "title": "Number Complement",
    "difficulty": "easy",
    "category": [
      "bit manipulation"
    ]
  },
  {
    "id": 477,
    "title": "Total Hamming Distance",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "math"
    ]
  },
  {
    "id": 478,
    "title": "Generate Random Point in a Circle",
    "difficulty": "medium",
    "category": [
      "geometry",
      "math",
      "randomized"
    ]
  },
  {
    "id": 479,
    "title": "Largest Palindrome Product",
    "difficulty": "hard",
    "category": [
      "enumeration",
      "math"
    ]
  },
  {
    "id": 480,
    "title": "Sliding Window Median",
    "difficulty": "hard",
    "category": [
      "array",
      "hash table",
      "heap",
      "sliding window"
    ]
  },
  {
    "id": 481,
    "title": "Magical String",
    "difficulty": "medium",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 482,
    "title": "License Key Formatting",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 483,
    "title": "Smallest Good Base",
    "difficulty": "hard",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 484,
    "title": "Find Permutation",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "stack",
      "string"
    ]
  },
  {
    "id": 485,
    "title": "Max Consecutive Ones",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 486,
    "title": "Predict the Winner",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "game theory",
      "math",
      "recursion"
    ]
  },
  {
    "id": 487,
    "title": "Max Consecutive Ones II",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "sliding window"
    ]
  },
  {
    "id": 488,
    "title": "Zuma Game",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "memoization",
      "stack",
      "string"
    ]
  },
  {
    "id": 489,
    "title": "Robot Room Cleaner",
    "difficulty": "hard",
    "category": [
      "backtracking",
      "interactive"
    ]
  },
  {
    "id": 490,
    "title": "The Maze",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 491,
    "title": "Non-decreasing Subsequences",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "hash table"
    ]
  },
  {
    "id": 492,
    "title": "Construct the Rectangle",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 493,
    "title": "Reverse Pairs",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree",
      "binary search",
      "divide and conquer",
      "ordered set",
      "segment tree",
      "sorting"
    ]
  },
  {
    "id": 494,
    "title": "Target Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "dynamic programming"
    ]
  },
  {
    "id": 495,
    "title": "Teemo Attacking",
    "difficulty": "easy",
    "category": [
      "array",
      "simulation"
    ]
  },
  {
    "id": 496,
    "title": "Next Greater Element I",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 497,
    "title": "Random Point in Non-overlapping Rectangles",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "math",
      "ordered set",
      "prefix sum",
      "randomized"
    ]
  },
  {
    "id": 498,
    "title": "Diagonal Traverse",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "simulation"
    ]
  },
  {
    "id": 499,
    "title": "The Maze III",
    "difficulty": "hard",
    "category": [
      "array",
      "graph",
      "graph traversal",
      "heap",
      "matrix",
      "shortest path",
      "string"
    ]
  },
  {
    "id": 500,
    "title": "Keyboard Row",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "string"
    ]
  },
  {
    "id": 501,
    "title": "Find Mode in Binary Search Tree",
    "difficulty": "easy",
    "category": [
      "binary search tree",
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 502,
    "title": "IPO",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 503,
    "title": "Next Greater Element II",
    "difficulty": "medium",
    "category": [
      "array",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 504,
    "title": "Base 7",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 505,
    "title": "The Maze II",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "graph traversal",
      "heap",
      "matrix",
      "shortest path"
    ]
  },
  {
    "id": 506,
    "title": "Relative Ranks",
    "difficulty": "easy",
    "category": [
      "array",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 507,
    "title": "Perfect Number",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 508,
    "title": "Most Frequent Subtree Sum",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 509,
    "title": "Fibonacci Number",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "math",
      "memoization",
      "recursion"
    ]
  },
  {
    "id": 510,
    "title": "Inorder Successor in BST II",
    "difficulty": "medium",
    "category": [
      "binary search tree",
      "binary tree",
      "tree"
    ]
  },
  {
    "id": 511,
    "title": "Game Play Analysis I",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 512,
    "title": "Game Play Analysis II",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 513,
    "title": "Find Bottom Left Tree Value",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 514,
    "title": "Freedom Trail",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "string"
    ]
  },
  {
    "id": 515,
    "title": "Find Largest Value in Each Tree Row",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 516,
    "title": "Longest Palindromic Subsequence",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 517,
    "title": "Super Washing Machines",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 518,
    "title": "Coin Change II",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 519,
    "title": "Random Flip Matrix",
    "difficulty": "medium",
    "category": [
      "hash table",
      "math",
      "randomized"
    ]
  },
  {
    "id": 520,
    "title": "Detect Capital",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 521,
    "title": "Longest Uncommon Subsequence I",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 522,
    "title": "Longest Uncommon Subsequence II",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sorting",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 523,
    "title": "Continuous Subarray Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "math",
      "prefix sum"
    ]
  },
  {
    "id": 524,
    "title": "Longest Word in Dictionary through Deleting",
    "difficulty": "medium",
    "category": [
      "array",
      "sorting",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 525,
    "title": "Contiguous Array",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "prefix sum"
    ]
  },
  {
    "id": 526,
    "title": "Beautiful Arrangement",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 527,
    "title": "Word Abbreviation",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "sorting",
      "string",
      "trie"
    ]
  },
  {
    "id": 528,
    "title": "Random Pick with Weight",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "math",
      "prefix sum",
      "randomized"
    ]
  },
  {
    "id": 529,
    "title": "Minesweeper",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 530,
    "title": "Minimum Absolute Difference in BST",
    "difficulty": "easy",
    "category": [
      "binary search tree",
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 531,
    "title": "Lonely Pixel I",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "matrix"
    ]
  },
  {
    "id": 532,
    "title": "K-diff Pairs in an Array",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "hash table",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 533,
    "title": "Lonely Pixel II",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "matrix"
    ]
  },
  {
    "id": 534,
    "title": "Game Play Analysis III",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 535,
    "title": "Encode and Decode TinyURL",
    "difficulty": "medium",
    "category": [
      "design",
      "hash table",
      "string"
    ]
  },
  {
    "id": 536,
    "title": "Construct Binary Tree from String",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "stack",
      "string",
      "tree"
    ]
  },
  {
    "id": 537,
    "title": "Complex Number Multiplication",
    "difficulty": "medium",
    "category": [
      "math",
      "simulation",
      "string"
    ]
  },
  {
    "id": 538,
    "title": "Convert BST to Greater Tree",
    "difficulty": "medium",
    "category": [
      "binary search tree",
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 539,
    "title": "Minimum Time Difference",
    "difficulty": "medium",
    "category": [
      "array",
      "math",
      "sorting",
      "string"
    ]
  },
  {
    "id": 540,
    "title": "Single Element in a Sorted Array",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 541,
    "title": "Reverse String II",
    "difficulty": "easy",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 542,
    "title": "01 Matrix",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 543,
    "title": "Diameter of Binary Tree",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 544,
    "title": "Output Contest Matches",
    "difficulty": "medium",
    "category": [
      "recursion",
      "simulation",
      "string"
    ]
  },
  {
    "id": 545,
    "title": "Boundary of Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 546,
    "title": "Remove Boxes",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "memoization"
    ]
  },
  {
    "id": 547,
    "title": "Number of Provinces",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 548,
    "title": "Split Array with Equal Sum",
    "difficulty": "hard",
    "category": [
      "array",
      "hash table",
      "prefix sum"
    ]
  },
  {
    "id": 549,
    "title": "Binary Tree Longest Consecutive Sequence II",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 550,
    "title": "Game Play Analysis IV",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 551,
    "title": "Student Attendance Record I",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 552,
    "title": "Student Attendance Record II",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 553,
    "title": "Optimal Division",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 554,
    "title": "Brick Wall",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 555,
    "title": "Split Concatenated Strings",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "string"
    ]
  },
  {
    "id": 556,
    "title": "Next Greater Element III",
    "difficulty": "medium",
    "category": [
      "math",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 557,
    "title": "Reverse Words in a String III",
    "difficulty": "easy",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 558,
    "title": "Logical OR of Two Binary Grids Represented as Quad-Trees",
    "difficulty": "medium",
    "category": [
      "divide and conquer",
      "tree"
    ]
  },
  {
    "id": 559,
    "title": "Maximum Depth of N-ary Tree",
    "difficulty": "easy",
    "category": [
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 560,
    "title": "Subarray Sum Equals K",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "prefix sum"
    ]
  },
  {
    "id": 561,
    "title": "Array Partition",
    "difficulty": "easy",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 562,
    "title": "Longest Line of Consecutive One in Matrix",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 563,
    "title": "Binary Tree Tilt",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 564,
    "title": "Find the Closest Palindrome",
    "difficulty": "hard",
    "category": [
      "math",
      "string"
    ]
  },
  {
    "id": 565,
    "title": "Array Nesting",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal"
    ]
  },
  {
    "id": 566,
    "title": "Reshape the Matrix",
    "difficulty": "easy",
    "category": [
      "array",
      "matrix",
      "simulation"
    ]
  },
  {
    "id": 567,
    "title": "Permutation in String",
    "difficulty": "medium",
    "category": [
      "hash table",
      "sliding window",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 568,
    "title": "Maximum Vacation Days",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 569,
    "title": "Median Employee Salary",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 570,
    "title": "Managers with at Least 5 Direct Reports",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 571,
    "title": "Find Median Given Frequency of Numbers",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 572,
    "title": "Subtree of Another Tree",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "graph traversal",
      "hash table",
      "string matching",
      "tree"
    ]
  },
  {
    "id": 573,
    "title": "Squirrel Simulation",
    "difficulty": "medium",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 574,
    "title": "Winning Candidate",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 575,
    "title": "Distribute Candies",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 576,
    "title": "Out of Boundary Paths",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 577,
    "title": "Employee Bonus",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 578,
    "title": "Get Highest Answer Rate Question",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 579,
    "title": "Find Cumulative Salary of an Employee",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 580,
    "title": "Count Student Number in Departments",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 581,
    "title": "Shortest Unsorted Continuous Subarray",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "monotonic stack",
      "sorting",
      "stack",
      "two pointers"
    ]
  },
  {
    "id": 582,
    "title": "Kill Process",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 583,
    "title": "Delete Operation for Two Strings",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 584,
    "title": "Find Customer Referee",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 585,
    "title": "Investments in 2016",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 586,
    "title": "Customer Placing the Largest Number of Orders",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 587,
    "title": "Erect the Fence",
    "difficulty": "hard",
    "category": [
      "array",
      "geometry",
      "math"
    ]
  },
  {
    "id": 588,
    "title": "Design In-Memory File System",
    "difficulty": "hard",
    "category": [
      "design",
      "hash table",
      "sorting",
      "string",
      "trie"
    ]
  },
  {
    "id": 589,
    "title": "N-ary Tree Preorder Traversal",
    "difficulty": "easy",
    "category": [
      "graph traversal",
      "stack",
      "tree"
    ]
  },
  {
    "id": 590,
    "title": "N-ary Tree Postorder Traversal",
    "difficulty": "easy",
    "category": [
      "graph traversal",
      "stack",
      "tree"
    ]
  },
  {
    "id": 591,
    "title": "Tag Validator",
    "difficulty": "hard",
    "category": [
      "stack",
      "string"
    ]
  },
  {
    "id": 592,
    "title": "Fraction Addition and Subtraction",
    "difficulty": "medium",
    "category": [
      "math",
      "simulation",
      "string"
    ]
  },
  {
    "id": 593,
    "title": "Valid Square",
    "difficulty": "medium",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 594,
    "title": "Longest Harmonious Subsequence",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "hash table",
      "sliding window",
      "sorting"
    ]
  },
  {
    "id": 595,
    "title": "Big Countries",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 596,
    "title": "Classes More Than 5 Students",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 597,
    "title": "Friend Requests I: Overall Acceptance Rate",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 598,
    "title": "Range Addition II",
    "difficulty": "easy",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 599,
    "title": "Minimum Index Sum of Two Lists",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "string"
    ]
  },
  {
    "id": 600,
    "title": "Non-negative Integers without Consecutive Ones",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 601,
    "title": "Human Traffic of Stadium",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 602,
    "title": "Friend Requests II: Who Has the Most Friends",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 603,
    "title": "Consecutive Available Seats",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 604,
    "title": "Design Compressed String Iterator",
    "difficulty": "easy",
    "category": [
      "array",
      "design",
      "iterator",
      "string"
    ]
  },
  {
    "id": 605,
    "title": "Can Place Flowers",
    "difficulty": "easy",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 606,
    "title": "Construct String from Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "string",
      "tree"
    ]
  },
  {
    "id": 607,
    "title": "Sales Person",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 608,
    "title": "Tree Node",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 609,
    "title": "Find Duplicate File in System",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "string"
    ]
  },
  {
    "id": 610,
    "title": "Triangle Judgement",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 611,
    "title": "Valid Triangle Number",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 612,
    "title": "Shortest Distance in a Plane",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 613,
    "title": "Shortest Distance in a Line",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 614,
    "title": "Second Degree Follower",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 615,
    "title": "Average Salary: Departments VS Company",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 616,
    "title": "Add Bold Tag in String",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "string",
      "string matching",
      "trie"
    ]
  },
  {
    "id": 617,
    "title": "Merge Two Binary Trees",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 618,
    "title": "Students Report By Geography",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 619,
    "title": "Biggest Single Number",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 620,
    "title": "Not Boring Movies",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 621,
    "title": "Task Scheduler",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "greedy",
      "hash table",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 622,
    "title": "Design Circular Queue",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "linked list",
      "queue"
    ]
  },
  {
    "id": 623,
    "title": "Add One Row to Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 624,
    "title": "Maximum Distance in Arrays",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 625,
    "title": "Minimum Factorization",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 626,
    "title": "Exchange Seats",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 627,
    "title": "Swap Salary",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 628,
    "title": "Maximum Product of Three Numbers",
    "difficulty": "easy",
    "category": [
      "array",
      "math",
      "sorting"
    ]
  },
  {
    "id": 629,
    "title": "K Inverse Pairs Array",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 630,
    "title": "Course Schedule III",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 631,
    "title": "Design Excel Sum Formula",
    "difficulty": "hard",
    "category": [
      "array",
      "design",
      "graph",
      "hash table",
      "matrix",
      "string",
      "topological sort"
    ]
  },
  {
    "id": 632,
    "title": "Smallest Range Covering Elements from K Lists",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "hash table",
      "heap",
      "sliding window",
      "sorting"
    ]
  },
  {
    "id": 633,
    "title": "Sum of Square Numbers",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 634,
    "title": "Find the Derangement of An Array",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 635,
    "title": "Design Log Storage System",
    "difficulty": "medium",
    "category": [
      "design",
      "hash table",
      "ordered set",
      "string"
    ]
  },
  {
    "id": 636,
    "title": "Exclusive Time of Functions",
    "difficulty": "medium",
    "category": [
      "array",
      "stack"
    ]
  },
  {
    "id": 637,
    "title": "Average of Levels in Binary Tree",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 638,
    "title": "Shopping Offers",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "dynamic programming",
      "memoization"
    ]
  },
  {
    "id": 639,
    "title": "Decode Ways II",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 640,
    "title": "Solve the Equation",
    "difficulty": "medium",
    "category": [
      "math",
      "simulation",
      "string"
    ]
  },
  {
    "id": 641,
    "title": "Design Circular Deque",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "linked list",
      "queue"
    ]
  },
  {
    "id": 642,
    "title": "Design Search Autocomplete System",
    "difficulty": "hard",
    "category": [
      "data stream",
      "design",
      "graph traversal",
      "heap",
      "sorting",
      "string",
      "trie"
    ]
  },
  {
    "id": 643,
    "title": "Maximum Average Subarray I",
    "difficulty": "easy",
    "category": [
      "array",
      "sliding window"
    ]
  },
  {
    "id": 644,
    "title": "Maximum Average Subarray II",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "prefix sum"
    ]
  },
  {
    "id": 645,
    "title": "Set Mismatch",
    "difficulty": "easy",
    "category": [
      "array",
      "bit manipulation",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 646,
    "title": "Maximum Length of Pair Chain",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 647,
    "title": "Palindromic Substrings",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 648,
    "title": "Replace Words",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "string",
      "trie"
    ]
  },
  {
    "id": 649,
    "title": "Dota2 Senate",
    "difficulty": "medium",
    "category": [
      "greedy",
      "queue",
      "string"
    ]
  },
  {
    "id": 650,
    "title": "2 Keys Keyboard",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 651,
    "title": "4 Keys Keyboard",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 652,
    "title": "Find Duplicate Subtrees",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 653,
    "title": "Two Sum IV - Input is a BST",
    "difficulty": "easy",
    "category": [
      "binary search tree",
      "binary tree",
      "graph traversal",
      "hash table",
      "tree",
      "two pointers"
    ]
  },
  {
    "id": 654,
    "title": "Maximum Binary Tree",
    "difficulty": "medium",
    "category": [
      "array",
      "binary tree",
      "divide and conquer",
      "monotonic stack",
      "stack",
      "tree"
    ]
  },
  {
    "id": 655,
    "title": "Print Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 656,
    "title": "Coin Path",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 657,
    "title": "Robot Return to Origin",
    "difficulty": "easy",
    "category": [
      "simulation",
      "string"
    ]
  },
  {
    "id": 658,
    "title": "Find K Closest Elements",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "heap",
      "sliding window",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 659,
    "title": "Split Array into Consecutive Subsequences",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "hash table",
      "heap"
    ]
  },
  {
    "id": 660,
    "title": "Remove 9",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 661,
    "title": "Image Smoother",
    "difficulty": "easy",
    "category": [
      "array",
      "matrix"
    ]
  },
  {
    "id": 662,
    "title": "Maximum Width of Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 663,
    "title": "Equal Tree Partition",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 664,
    "title": "Strange Printer",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 665,
    "title": "Non-decreasing Array",
    "difficulty": "medium",
    "category": [
      "array"
    ]
  },
  {
    "id": 666,
    "title": "Path Sum IV",
    "difficulty": "medium",
    "category": [
      "array",
      "binary tree",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 667,
    "title": "Beautiful Arrangement II",
    "difficulty": "medium",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 668,
    "title": "Kth Smallest Number in Multiplication Table",
    "difficulty": "hard",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 669,
    "title": "Trim a Binary Search Tree",
    "difficulty": "medium",
    "category": [
      "binary search tree",
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 670,
    "title": "Maximum Swap",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 671,
    "title": "Second Minimum Node In a Binary Tree",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 672,
    "title": "Bulb Switcher II",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 673,
    "title": "Number of Longest Increasing Subsequence",
    "difficulty": "medium",
    "category": [
      "array",
      "binary indexed tree",
      "dynamic programming",
      "segment tree"
    ]
  },
  {
    "id": 674,
    "title": "Longest Continuous Increasing Subsequence",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 675,
    "title": "Cut Off Trees for Golf Event",
    "difficulty": "hard",
    "category": [
      "array",
      "graph traversal",
      "heap",
      "matrix"
    ]
  },
  {
    "id": 676,
    "title": "Implement Magic Dictionary",
    "difficulty": "medium",
    "category": [
      "design",
      "graph traversal",
      "hash table",
      "string",
      "trie"
    ]
  },
  {
    "id": 677,
    "title": "Map Sum Pairs",
    "difficulty": "medium",
    "category": [
      "design",
      "hash table",
      "string",
      "trie"
    ]
  },
  {
    "id": 678,
    "title": "Valid Parenthesis String",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "stack",
      "string"
    ]
  },
  {
    "id": 679,
    "title": "24 Game",
    "difficulty": "hard",
    "category": [
      "array",
      "backtracking",
      "math"
    ]
  },
  {
    "id": 680,
    "title": "Valid Palindrome II",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 681,
    "title": "Next Closest Time",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "enumeration",
      "hash table",
      "string"
    ]
  },
  {
    "id": 682,
    "title": "Baseball Game",
    "difficulty": "easy",
    "category": [
      "array",
      "simulation",
      "stack"
    ]
  },
  {
    "id": 683,
    "title": "K Empty Slots",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree",
      "heap",
      "monotonic queue",
      "ordered set",
      "queue",
      "segment tree",
      "sliding window"
    ]
  },
  {
    "id": 684,
    "title": "Redundant Connection",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 685,
    "title": "Redundant Connection II",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 686,
    "title": "Repeated String Match",
    "difficulty": "medium",
    "category": [
      "string",
      "string matching"
    ]
  },
  {
    "id": 687,
    "title": "Longest Univalue Path",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 688,
    "title": "Knight Probability in Chessboard",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 689,
    "title": "Maximum Sum of 3 Non-Overlapping Subarrays",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "prefix sum",
      "sliding window"
    ]
  },
  {
    "id": 690,
    "title": "Employee Importance",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 691,
    "title": "Stickers to Spell Word",
    "difficulty": "hard",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "dynamic programming",
      "hash table",
      "memoization",
      "string"
    ]
  },
  {
    "id": 692,
    "title": "Top K Frequent Words",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "hash table",
      "heap",
      "sorting",
      "string",
      "trie"
    ]
  },
  {
    "id": 693,
    "title": "Binary Number with Alternating Bits",
    "difficulty": "easy",
    "category": [
      "bit manipulation"
    ]
  },
  {
    "id": 694,
    "title": "Number of Distinct Islands",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "hash table",
      "union find"
    ]
  },
  {
    "id": 695,
    "title": "Max Area of Island",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "matrix",
      "union find"
    ]
  },
  {
    "id": 696,
    "title": "Count Binary Substrings",
    "difficulty": "easy",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 697,
    "title": "Degree of an Array",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 698,
    "title": "Partition to K Equal Sum Subsets",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "dynamic programming",
      "memoization"
    ]
  },
  {
    "id": 699,
    "title": "Falling Squares",
    "difficulty": "hard",
    "category": [
      "array",
      "ordered set",
      "segment tree"
    ]
  },
  {
    "id": 700,
    "title": "Search in a Binary Search Tree",
    "difficulty": "easy",
    "category": [
      "binary search tree",
      "binary tree",
      "tree"
    ]
  },
  {
    "id": 701,
    "title": "Insert into a Binary Search Tree",
    "difficulty": "medium",
    "category": [
      "binary search tree",
      "binary tree",
      "tree"
    ]
  },
  {
    "id": 702,
    "title": "Search in a Sorted Array of Unknown Size",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "interactive"
    ]
  },
  {
    "id": 703,
    "title": "Kth Largest Element in a Stream",
    "difficulty": "easy",
    "category": [
      "binary search tree",
      "binary tree",
      "data stream",
      "design",
      "heap",
      "tree"
    ]
  },
  {
    "id": 704,
    "title": "Binary Search",
    "difficulty": "easy",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 705,
    "title": "Design HashSet",
    "difficulty": "easy",
    "category": [
      "array",
      "design",
      "hash table",
      "linked list"
    ]
  },
  {
    "id": 706,
    "title": "Design HashMap",
    "difficulty": "easy",
    "category": [
      "array",
      "design",
      "hash table",
      "linked list"
    ]
  },
  {
    "id": 707,
    "title": "Design Linked List",
    "difficulty": "medium",
    "category": [
      "design",
      "linked list"
    ]
  },
  {
    "id": 708,
    "title": "Insert into a Sorted Circular Linked List",
    "difficulty": "medium",
    "category": [
      "linked list"
    ]
  },
  {
    "id": 709,
    "title": "To Lower Case",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 710,
    "title": "Random Pick with Blacklist",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "hash table",
      "math",
      "randomized",
      "sorting"
    ]
  },
  {
    "id": 711,
    "title": "Number of Distinct Islands II",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "hash table",
      "union find"
    ]
  },
  {
    "id": 712,
    "title": "Minimum ASCII Delete Sum for Two Strings",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 713,
    "title": "Subarray Product Less Than K",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "prefix sum",
      "sliding window"
    ]
  },
  {
    "id": 714,
    "title": "Best Time to Buy and Sell Stock with Transaction Fee",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 715,
    "title": "Range Module",
    "difficulty": "hard",
    "category": [
      "design",
      "ordered set",
      "segment tree"
    ]
  },
  {
    "id": 716,
    "title": "Max Stack",
    "difficulty": "hard",
    "category": [
      "design",
      "linked list",
      "ordered set",
      "stack"
    ]
  },
  {
    "id": 717,
    "title": "1-bit and 2-bit Characters",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 718,
    "title": "Maximum Length of Repeated Subarray",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "dynamic programming",
      "hash table",
      "rolling hash",
      "sliding window"
    ]
  },
  {
    "id": 719,
    "title": "Find K-th Smallest Pair Distance",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 720,
    "title": "Longest Word in Dictionary",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sorting",
      "string",
      "trie"
    ]
  },
  {
    "id": 721,
    "title": "Accounts Merge",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "hash table",
      "sorting",
      "string",
      "union find"
    ]
  },
  {
    "id": 722,
    "title": "Remove Comments",
    "difficulty": "medium",
    "category": [
      "array",
      "string"
    ]
  },
  {
    "id": 723,
    "title": "Candy Crush",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "simulation",
      "two pointers"
    ]
  },
  {
    "id": 724,
    "title": "Find Pivot Index",
    "difficulty": "easy",
    "category": [
      "array",
      "prefix sum"
    ]
  },
  {
    "id": 725,
    "title": "Split Linked List in Parts",
    "difficulty": "medium",
    "category": [
      "linked list"
    ]
  },
  {
    "id": 726,
    "title": "Number of Atoms",
    "difficulty": "hard",
    "category": [
      "hash table",
      "sorting",
      "stack",
      "string"
    ]
  },
  {
    "id": 727,
    "title": "Minimum Window Subsequence",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 728,
    "title": "Self Dividing Numbers",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 729,
    "title": "My Calendar I",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "design",
      "ordered set",
      "segment tree"
    ]
  },
  {
    "id": 730,
    "title": "Count Different Palindromic Subsequences",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 731,
    "title": "My Calendar II",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "design",
      "ordered set",
      "prefix sum",
      "segment tree"
    ]
  },
  {
    "id": 732,
    "title": "My Calendar III",
    "difficulty": "hard",
    "category": [
      "binary search",
      "design",
      "ordered set",
      "prefix sum",
      "segment tree"
    ]
  },
  {
    "id": 733,
    "title": "Flood Fill",
    "difficulty": "easy",
    "category": [
      "array",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 734,
    "title": "Sentence Similarity",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "string"
    ]
  },
  {
    "id": 735,
    "title": "Asteroid Collision",
    "difficulty": "medium",
    "category": [
      "array",
      "simulation",
      "stack"
    ]
  },
  {
    "id": 736,
    "title": "Parse Lisp Expression",
    "difficulty": "hard",
    "category": [
      "hash table",
      "recursion",
      "stack",
      "string"
    ]
  },
  {
    "id": 737,
    "title": "Sentence Similarity II",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "hash table",
      "string",
      "union find"
    ]
  },
  {
    "id": 738,
    "title": "Monotone Increasing Digits",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 739,
    "title": "Daily Temperatures",
    "difficulty": "medium",
    "category": [
      "array",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 740,
    "title": "Delete and Earn",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "hash table"
    ]
  },
  {
    "id": 741,
    "title": "Cherry Pickup",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 742,
    "title": "Closest Leaf in a Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 743,
    "title": "Network Delay Time",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "heap",
      "shortest path"
    ]
  },
  {
    "id": 744,
    "title": "Find Smallest Letter Greater Than Target",
    "difficulty": "easy",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 745,
    "title": "Prefix and Suffix Search",
    "difficulty": "hard",
    "category": [
      "array",
      "design",
      "hash table",
      "string",
      "trie"
    ]
  },
  {
    "id": 746,
    "title": "Min Cost Climbing Stairs",
    "difficulty": "easy",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 747,
    "title": "Largest Number At Least Twice of Others",
    "difficulty": "easy",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 748,
    "title": "Shortest Completing Word",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "string"
    ]
  },
  {
    "id": 749,
    "title": "Contain Virus",
    "difficulty": "hard",
    "category": [
      "array",
      "graph traversal",
      "matrix",
      "simulation"
    ]
  },
  {
    "id": 750,
    "title": "Number Of Corner Rectangles",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "math",
      "matrix"
    ]
  },
  {
    "id": 751,
    "title": "IP to CIDR",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "string"
    ]
  },
  {
    "id": 752,
    "title": "Open the Lock",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "hash table",
      "string"
    ]
  },
  {
    "id": 753,
    "title": "Cracking the Safe",
    "difficulty": "hard",
    "category": [
      "eulerian circuit",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 754,
    "title": "Reach a Number",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 755,
    "title": "Pour Water",
    "difficulty": "medium",
    "category": [
      "array",
      "simulation"
    ]
  },
  {
    "id": 756,
    "title": "Pyramid Transition Matrix",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "graph traversal"
    ]
  },
  {
    "id": 757,
    "title": "Set Intersection Size At Least Two",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 758,
    "title": "Bold Words in String",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "string",
      "string matching",
      "trie"
    ]
  },
  {
    "id": 759,
    "title": "Employee Free Time",
    "difficulty": "hard",
    "category": [
      "array",
      "heap",
      "line sweep",
      "sorting"
    ]
  },
  {
    "id": 760,
    "title": "Find Anagram Mappings",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 761,
    "title": "Special Binary String",
    "difficulty": "hard",
    "category": [
      "recursion",
      "string"
    ]
  },
  {
    "id": 762,
    "title": "Prime Number of Set Bits in Binary Representation",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "math"
    ]
  },
  {
    "id": 763,
    "title": "Partition Labels",
    "difficulty": "medium",
    "category": [
      "greedy",
      "hash table",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 764,
    "title": "Largest Plus Sign",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 765,
    "title": "Couples Holding Hands",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 766,
    "title": "Toeplitz Matrix",
    "difficulty": "easy",
    "category": [
      "array",
      "matrix"
    ]
  },
  {
    "id": 767,
    "title": "Reorganize String",
    "difficulty": "medium",
    "category": [
      "counting",
      "greedy",
      "hash table",
      "heap",
      "sorting",
      "string"
    ]
  },
  {
    "id": 768,
    "title": "Max Chunks To Make Sorted II",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "monotonic stack",
      "sorting",
      "stack"
    ]
  },
  {
    "id": 769,
    "title": "Max Chunks To Make Sorted",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "monotonic stack",
      "sorting",
      "stack"
    ]
  },
  {
    "id": 770,
    "title": "Basic Calculator IV",
    "difficulty": "hard",
    "category": [
      "hash table",
      "math",
      "recursion",
      "stack",
      "string"
    ]
  },
  {
    "id": 771,
    "title": "Jewels and Stones",
    "difficulty": "easy",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 772,
    "title": "Basic Calculator III",
    "difficulty": "hard",
    "category": [
      "math",
      "recursion",
      "stack",
      "string"
    ]
  },
  {
    "id": 773,
    "title": "Sliding Puzzle",
    "difficulty": "hard",
    "category": [
      "array",
      "backtracking",
      "dynamic programming",
      "graph traversal",
      "matrix",
      "memoization"
    ]
  },
  {
    "id": 774,
    "title": "Minimize Max Distance to Gas Station",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 775,
    "title": "Global and Local Inversions",
    "difficulty": "medium",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 776,
    "title": "Split BST",
    "difficulty": "medium",
    "category": [
      "binary search tree",
      "binary tree",
      "recursion",
      "tree"
    ]
  },
  {
    "id": 777,
    "title": "Swap Adjacent in LR String",
    "difficulty": "medium",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 778,
    "title": "Swim in Rising Water",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "graph traversal",
      "heap",
      "matrix",
      "union find"
    ]
  },
  {
    "id": 779,
    "title": "K-th Symbol in Grammar",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "math",
      "recursion"
    ]
  },
  {
    "id": 780,
    "title": "Reaching Points",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 781,
    "title": "Rabbits in Forest",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "hash table",
      "math"
    ]
  },
  {
    "id": 782,
    "title": "Transform to Chessboard",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "math",
      "matrix"
    ]
  },
  {
    "id": 783,
    "title": "Minimum Distance Between BST Nodes",
    "difficulty": "easy",
    "category": [
      "binary search tree",
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 784,
    "title": "Letter Case Permutation",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "bit manipulation",
      "string"
    ]
  },
  {
    "id": 785,
    "title": "Is Graph Bipartite?",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 786,
    "title": "K-th Smallest Prime Fraction",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "heap",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 787,
    "title": "Cheapest Flights Within K Stops",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "heap",
      "shortest path"
    ]
  },
  {
    "id": 788,
    "title": "Rotated Digits",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 789,
    "title": "Escape The Ghosts",
    "difficulty": "medium",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 790,
    "title": "Domino and Tromino Tiling",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 791,
    "title": "Custom Sort String",
    "difficulty": "medium",
    "category": [
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 792,
    "title": "Number of Matching Subsequences",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "dynamic programming",
      "hash table",
      "sorting",
      "string",
      "trie"
    ]
  },
  {
    "id": 793,
    "title": "Preimage Size of Factorial Zeroes Function",
    "difficulty": "hard",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 794,
    "title": "Valid Tic-Tac-Toe State",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix"
    ]
  },
  {
    "id": 795,
    "title": "Number of Subarrays with Bounded Maximum",
    "difficulty": "medium",
    "category": [
      "array",
      "two pointers"
    ]
  },
  {
    "id": 796,
    "title": "Rotate String",
    "difficulty": "easy",
    "category": [
      "string",
      "string matching"
    ]
  },
  {
    "id": 797,
    "title": "All Paths From Source to Target",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 798,
    "title": "Smallest Rotation with Highest Score",
    "difficulty": "hard",
    "category": [
      "array",
      "prefix sum"
    ]
  },
  {
    "id": 799,
    "title": "Champagne Tower",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 800,
    "title": "Similar RGB Color",
    "difficulty": "easy",
    "category": [
      "enumeration",
      "math",
      "string"
    ]
  },
  {
    "id": 801,
    "title": "Minimum Swaps To Make Sequences Increasing",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 802,
    "title": "Find Eventual Safe States",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "topological sort"
    ]
  },
  {
    "id": 803,
    "title": "Bricks Falling When Hit",
    "difficulty": "hard",
    "category": [
      "array",
      "matrix",
      "union find"
    ]
  },
  {
    "id": 804,
    "title": "Unique Morse Code Words",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "string"
    ]
  },
  {
    "id": 805,
    "title": "Split Array With Same Average",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 806,
    "title": "Number of Lines To Write String",
    "difficulty": "easy",
    "category": [
      "array",
      "string"
    ]
  },
  {
    "id": 807,
    "title": "Max Increase to Keep City Skyline",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "matrix"
    ]
  },
  {
    "id": 808,
    "title": "Soup Servings",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 809,
    "title": "Expressive Words",
    "difficulty": "medium",
    "category": [
      "array",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 810,
    "title": "Chalkboard XOR Game",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "brainteaser",
      "game theory",
      "math"
    ]
  },
  {
    "id": 811,
    "title": "Subdomain Visit Count",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 812,
    "title": "Largest Triangle Area",
    "difficulty": "easy",
    "category": [
      "array",
      "geometry",
      "math"
    ]
  },
  {
    "id": 813,
    "title": "Largest Sum of Averages",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "prefix sum"
    ]
  },
  {
    "id": 814,
    "title": "Binary Tree Pruning",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 815,
    "title": "Bus Routes",
    "difficulty": "hard",
    "category": [
      "array",
      "graph traversal",
      "hash table"
    ]
  },
  {
    "id": 816,
    "title": "Ambiguous Coordinates",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "enumeration",
      "string"
    ]
  },
  {
    "id": 817,
    "title": "Linked List Components",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "linked list"
    ]
  },
  {
    "id": 818,
    "title": "Race Car",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 819,
    "title": "Most Common Word",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 820,
    "title": "Short Encoding of Words",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "string",
      "trie"
    ]
  },
  {
    "id": 821,
    "title": "Shortest Distance to a Character",
    "difficulty": "easy",
    "category": [
      "array",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 822,
    "title": "Card Flipping Game",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 823,
    "title": "Binary Trees With Factors",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 824,
    "title": "Goat Latin",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 825,
    "title": "Friends Of Appropriate Ages",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 826,
    "title": "Most Profit Assigning Work",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 827,
    "title": "Making A Large Island",
    "difficulty": "hard",
    "category": [
      "array",
      "graph traversal",
      "matrix",
      "union find"
    ]
  },
  {
    "id": 828,
    "title": "Count Unique Characters of All Substrings of a Given String",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "hash table",
      "string"
    ]
  },
  {
    "id": 829,
    "title": "Consecutive Numbers Sum",
    "difficulty": "hard",
    "category": [
      "enumeration",
      "math"
    ]
  },
  {
    "id": 830,
    "title": "Positions of Large Groups",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 831,
    "title": "Masking Personal Information",
    "difficulty": "medium",
    "category": [
      "string"
    ]
  },
  {
    "id": 832,
    "title": "Flipping an Image",
    "difficulty": "easy",
    "category": [
      "array",
      "bit manipulation",
      "matrix",
      "simulation",
      "two pointers"
    ]
  },
  {
    "id": 833,
    "title": "Find And Replace in String",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 834,
    "title": "Sum of Distances in Tree",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 835,
    "title": "Image Overlap",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix"
    ]
  },
  {
    "id": 836,
    "title": "Rectangle Overlap",
    "difficulty": "easy",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 837,
    "title": "New 21 Game",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "math",
      "probability",
      "sliding window"
    ]
  },
  {
    "id": 838,
    "title": "Push Dominoes",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 839,
    "title": "Similar String Groups",
    "difficulty": "hard",
    "category": [
      "array",
      "graph traversal",
      "hash table",
      "string",
      "union find"
    ]
  },
  {
    "id": 840,
    "title": "Magic Squares In Grid",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "math",
      "matrix"
    ]
  },
  {
    "id": 841,
    "title": "Keys and Rooms",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 842,
    "title": "Split Array into Fibonacci Sequence",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "string"
    ]
  },
  {
    "id": 843,
    "title": "Guess the Word",
    "difficulty": "hard",
    "category": [
      "array",
      "game theory",
      "interactive",
      "math",
      "string"
    ]
  },
  {
    "id": 844,
    "title": "Backspace String Compare",
    "difficulty": "easy",
    "category": [
      "simulation",
      "stack",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 845,
    "title": "Longest Mountain in Array",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "enumeration",
      "two pointers"
    ]
  },
  {
    "id": 846,
    "title": "Hand of Straights",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 847,
    "title": "Shortest Path Visiting All Nodes",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 848,
    "title": "Shifting Letters",
    "difficulty": "medium",
    "category": [
      "array",
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 849,
    "title": "Maximize Distance to Closest Person",
    "difficulty": "medium",
    "category": [
      "array"
    ]
  },
  {
    "id": 850,
    "title": "Rectangle Area II",
    "difficulty": "hard",
    "category": [
      "array",
      "line sweep",
      "ordered set",
      "segment tree"
    ]
  },
  {
    "id": 851,
    "title": "Loud and Rich",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "graph traversal",
      "topological sort"
    ]
  },
  {
    "id": 852,
    "title": "Peak Index in a Mountain Array",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 853,
    "title": "Car Fleet",
    "difficulty": "medium",
    "category": [
      "array",
      "monotonic stack",
      "sorting",
      "stack"
    ]
  },
  {
    "id": 854,
    "title": "K-Similar Strings",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "string"
    ]
  },
  {
    "id": 855,
    "title": "Exam Room",
    "difficulty": "medium",
    "category": [
      "design",
      "heap",
      "ordered set"
    ]
  },
  {
    "id": 856,
    "title": "Score of Parentheses",
    "difficulty": "medium",
    "category": [
      "stack",
      "string"
    ]
  },
  {
    "id": 857,
    "title": "Minimum Cost to Hire K Workers",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 858,
    "title": "Mirror Reflection",
    "difficulty": "medium",
    "category": [
      "geometry",
      "math",
      "number theory"
    ]
  },
  {
    "id": 859,
    "title": "Buddy Strings",
    "difficulty": "easy",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 860,
    "title": "Lemonade Change",
    "difficulty": "easy",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 861,
    "title": "Score After Flipping Matrix",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "greedy",
      "matrix"
    ]
  },
  {
    "id": 862,
    "title": "Shortest Subarray with Sum at Least K",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "heap",
      "monotonic queue",
      "prefix sum",
      "queue",
      "sliding window"
    ]
  },
  {
    "id": 863,
    "title": "All Nodes Distance K in Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 864,
    "title": "Shortest Path to Get All Keys",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 865,
    "title": "Smallest Subtree with all the Deepest Nodes",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 866,
    "title": "Prime Palindrome",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 867,
    "title": "Transpose Matrix",
    "difficulty": "easy",
    "category": [
      "array",
      "matrix",
      "simulation"
    ]
  },
  {
    "id": 868,
    "title": "Binary Gap",
    "difficulty": "easy",
    "category": [
      "bit manipulation"
    ]
  },
  {
    "id": 869,
    "title": "Reordered Power of 2",
    "difficulty": "medium",
    "category": [
      "counting",
      "enumeration",
      "hash table",
      "math",
      "sorting"
    ]
  },
  {
    "id": 870,
    "title": "Advantage Shuffle",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 871,
    "title": "Minimum Number of Refueling Stops",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "greedy",
      "heap"
    ]
  },
  {
    "id": 872,
    "title": "Leaf-Similar Trees",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 873,
    "title": "Length of Longest Fibonacci Subsequence",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "hash table"
    ]
  },
  {
    "id": 874,
    "title": "Walking Robot Simulation",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "simulation"
    ]
  },
  {
    "id": 875,
    "title": "Koko Eating Bananas",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 876,
    "title": "Middle of the Linked List",
    "difficulty": "easy",
    "category": [
      "linked list",
      "two pointers"
    ]
  },
  {
    "id": 877,
    "title": "Stone Game",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "game theory",
      "math"
    ]
  },
  {
    "id": 878,
    "title": "Nth Magical Number",
    "difficulty": "hard",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 879,
    "title": "Profitable Schemes",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 880,
    "title": "Decoded String at Index",
    "difficulty": "medium",
    "category": [
      "stack",
      "string"
    ]
  },
  {
    "id": 881,
    "title": "Boats to Save People",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 882,
    "title": "Reachable Nodes In Subdivided Graph",
    "difficulty": "hard",
    "category": [
      "graph",
      "heap",
      "shortest path"
    ]
  },
  {
    "id": 883,
    "title": "Projection Area of 3D Shapes",
    "difficulty": "easy",
    "category": [
      "array",
      "geometry",
      "math",
      "matrix"
    ]
  },
  {
    "id": 884,
    "title": "Uncommon Words from Two Sentences",
    "difficulty": "easy",
    "category": [
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 885,
    "title": "Spiral Matrix III",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "simulation"
    ]
  },
  {
    "id": 886,
    "title": "Possible Bipartition",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 887,
    "title": "Super Egg Drop",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 888,
    "title": "Fair Candy Swap",
    "difficulty": "easy",
    "category": [
      "array",
      "binary search",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 889,
    "title": "Construct Binary Tree from Preorder and Postorder Traversal",
    "difficulty": "medium",
    "category": [
      "array",
      "binary tree",
      "divide and conquer",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 890,
    "title": "Find and Replace Pattern",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "string"
    ]
  },
  {
    "id": 891,
    "title": "Sum of Subsequence Widths",
    "difficulty": "hard",
    "category": [
      "array",
      "math",
      "sorting"
    ]
  },
  {
    "id": 892,
    "title": "Surface Area of 3D Shapes",
    "difficulty": "easy",
    "category": [
      "array",
      "geometry",
      "math",
      "matrix"
    ]
  },
  {
    "id": 893,
    "title": "Groups of Special-Equivalent Strings",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 894,
    "title": "All Possible Full Binary Trees",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "dynamic programming",
      "memoization",
      "recursion",
      "tree"
    ]
  },
  {
    "id": 895,
    "title": "Maximum Frequency Stack",
    "difficulty": "hard",
    "category": [
      "design",
      "hash table",
      "ordered set",
      "stack"
    ]
  },
  {
    "id": 896,
    "title": "Monotonic Array",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 897,
    "title": "Increasing Order Search Tree",
    "difficulty": "easy",
    "category": [
      "binary search tree",
      "binary tree",
      "graph traversal",
      "stack",
      "tree"
    ]
  },
  {
    "id": 898,
    "title": "Bitwise ORs of Subarrays",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 899,
    "title": "Orderly Queue",
    "difficulty": "hard",
    "category": [
      "math",
      "sorting",
      "string"
    ]
  },
  {
    "id": 900,
    "title": "RLE Iterator",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "design",
      "iterator"
    ]
  },
  {
    "id": 901,
    "title": "Online Stock Span",
    "difficulty": "medium",
    "category": [
      "data stream",
      "design",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 902,
    "title": "Numbers At Most N Given Digit Set",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "dynamic programming",
      "math",
      "string"
    ]
  },
  {
    "id": 903,
    "title": "Valid Permutations for DI Sequence",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 904,
    "title": "Fruit Into Baskets",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sliding window"
    ]
  },
  {
    "id": 905,
    "title": "Sort Array By Parity",
    "difficulty": "easy",
    "category": [
      "array",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 906,
    "title": "Super Palindromes",
    "difficulty": "hard",
    "category": [
      "enumeration",
      "math",
      "string"
    ]
  },
  {
    "id": 907,
    "title": "Sum of Subarray Minimums",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 908,
    "title": "Smallest Range I",
    "difficulty": "easy",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 909,
    "title": "Snakes and Ladders",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 910,
    "title": "Smallest Range II",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 911,
    "title": "Online Election",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "design",
      "hash table"
    ]
  },
  {
    "id": 912,
    "title": "Sort an Array",
    "difficulty": "medium",
    "category": [
      "array",
      "divide and conquer",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 913,
    "title": "Cat and Mouse",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory",
      "graph",
      "math",
      "memoization",
      "topological sort"
    ]
  },
  {
    "id": 914,
    "title": "X of a Kind in a Deck of Cards",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "hash table",
      "math",
      "number theory"
    ]
  },
  {
    "id": 915,
    "title": "Partition Array into Disjoint Intervals",
    "difficulty": "medium",
    "category": [
      "array"
    ]
  },
  {
    "id": 916,
    "title": "Word Subsets",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "string"
    ]
  },
  {
    "id": 917,
    "title": "Reverse Only Letters",
    "difficulty": "easy",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 918,
    "title": "Maximum Sum Circular Subarray",
    "difficulty": "medium",
    "category": [
      "array",
      "divide and conquer",
      "dynamic programming",
      "monotonic queue",
      "queue"
    ]
  },
  {
    "id": 919,
    "title": "Complete Binary Tree Inserter",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "design",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 920,
    "title": "Number of Music Playlists",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 921,
    "title": "Minimum Add to Make Parentheses Valid",
    "difficulty": "medium",
    "category": [
      "greedy",
      "stack",
      "string"
    ]
  },
  {
    "id": 922,
    "title": "Sort Array By Parity II",
    "difficulty": "easy",
    "category": [
      "array",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 923,
    "title": "3Sum With Multiplicity",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "hash table",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 924,
    "title": "Minimize Malware Spread",
    "difficulty": "hard",
    "category": [
      "array",
      "graph",
      "graph traversal",
      "hash table",
      "union find"
    ]
  },
  {
    "id": 925,
    "title": "Long Pressed Name",
    "difficulty": "easy",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 926,
    "title": "Flip String to Monotone Increasing",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 927,
    "title": "Three Equal Parts",
    "difficulty": "hard",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 928,
    "title": "Minimize Malware Spread II",
    "difficulty": "hard",
    "category": [
      "array",
      "graph",
      "graph traversal",
      "hash table",
      "union find"
    ]
  },
  {
    "id": 929,
    "title": "Unique Email Addresses",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "string"
    ]
  },
  {
    "id": 930,
    "title": "Binary Subarrays With Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "prefix sum",
      "sliding window"
    ]
  },
  {
    "id": 931,
    "title": "Minimum Falling Path Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 932,
    "title": "Beautiful Array",
    "difficulty": "medium",
    "category": [
      "array",
      "divide and conquer",
      "math"
    ]
  },
  {
    "id": 933,
    "title": "Number of Recent Calls",
    "difficulty": "easy",
    "category": [
      "data stream",
      "design",
      "queue"
    ]
  },
  {
    "id": 934,
    "title": "Shortest Bridge",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 935,
    "title": "Knight Dialer",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 936,
    "title": "Stamping The Sequence",
    "difficulty": "hard",
    "category": [
      "greedy",
      "queue",
      "stack",
      "string"
    ]
  },
  {
    "id": 937,
    "title": "Reorder Data in Log Files",
    "difficulty": "medium",
    "category": [
      "array",
      "sorting",
      "string"
    ]
  },
  {
    "id": 938,
    "title": "Range Sum of BST",
    "difficulty": "easy",
    "category": [
      "binary search tree",
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 939,
    "title": "Minimum Area Rectangle",
    "difficulty": "medium",
    "category": [
      "array",
      "geometry",
      "hash table",
      "math",
      "sorting"
    ]
  },
  {
    "id": 940,
    "title": "Distinct Subsequences II",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 941,
    "title": "Valid Mountain Array",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 942,
    "title": "DI String Match",
    "difficulty": "easy",
    "category": [
      "array",
      "greedy",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 943,
    "title": "Find the Shortest Superstring",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 944,
    "title": "Delete Columns to Make Sorted",
    "difficulty": "easy",
    "category": [
      "array",
      "string"
    ]
  },
  {
    "id": 945,
    "title": "Minimum Increment to Make Array Unique",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 946,
    "title": "Validate Stack Sequences",
    "difficulty": "medium",
    "category": [
      "array",
      "simulation",
      "stack"
    ]
  },
  {
    "id": 947,
    "title": "Most Stones Removed with Same Row or Column",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "hash table",
      "union find"
    ]
  },
  {
    "id": 948,
    "title": "Bag of Tokens",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 949,
    "title": "Largest Time for Given Digits",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "enumeration",
      "string"
    ]
  },
  {
    "id": 950,
    "title": "Reveal Cards In Increasing Order",
    "difficulty": "medium",
    "category": [
      "array",
      "queue",
      "simulation",
      "sorting"
    ]
  },
  {
    "id": 951,
    "title": "Flip Equivalent Binary Trees",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 952,
    "title": "Largest Component Size by Common Factor",
    "difficulty": "hard",
    "category": [
      "array",
      "hash table",
      "math",
      "number theory",
      "union find"
    ]
  },
  {
    "id": 953,
    "title": "Verifying an Alien Dictionary",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "string"
    ]
  },
  {
    "id": 954,
    "title": "Array of Doubled Pairs",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 955,
    "title": "Delete Columns to Make Sorted II",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "string"
    ]
  },
  {
    "id": 956,
    "title": "Tallest Billboard",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 957,
    "title": "Prison Cells After N Days",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "hash table",
      "math"
    ]
  },
  {
    "id": 958,
    "title": "Check Completeness of a Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 959,
    "title": "Regions Cut By Slashes",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "hash table",
      "matrix",
      "union find"
    ]
  },
  {
    "id": 960,
    "title": "Delete Columns to Make Sorted III",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 961,
    "title": "N-Repeated Element in Size 2N Array",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 962,
    "title": "Maximum Width Ramp",
    "difficulty": "medium",
    "category": [
      "array",
      "monotonic stack",
      "stack",
      "two pointers"
    ]
  },
  {
    "id": 963,
    "title": "Minimum Area Rectangle II",
    "difficulty": "medium",
    "category": [
      "array",
      "geometry",
      "math"
    ]
  },
  {
    "id": 964,
    "title": "Least Operators to Express Number",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "memoization"
    ]
  },
  {
    "id": 965,
    "title": "Univalued Binary Tree",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 966,
    "title": "Vowel Spellchecker",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "string"
    ]
  },
  {
    "id": 967,
    "title": "Numbers With Same Consecutive Differences",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "graph traversal"
    ]
  },
  {
    "id": 968,
    "title": "Binary Tree Cameras",
    "difficulty": "hard",
    "category": [
      "binary tree",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 969,
    "title": "Pancake Sorting",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 970,
    "title": "Powerful Integers",
    "difficulty": "medium",
    "category": [
      "enumeration",
      "hash table",
      "math"
    ]
  },
  {
    "id": 971,
    "title": "Flip Binary Tree To Match Preorder Traversal",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 972,
    "title": "Equal Rational Numbers",
    "difficulty": "hard",
    "category": [
      "math",
      "string"
    ]
  },
  {
    "id": 973,
    "title": "K Closest Points to Origin",
    "difficulty": "medium",
    "category": [
      "array",
      "divide and conquer",
      "geometry",
      "heap",
      "math",
      "quickselect",
      "sorting"
    ]
  },
  {
    "id": 974,
    "title": "Subarray Sums Divisible by K",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "prefix sum"
    ]
  },
  {
    "id": 975,
    "title": "Odd Even Jump",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "monotonic stack",
      "ordered set",
      "stack"
    ]
  },
  {
    "id": 976,
    "title": "Largest Perimeter Triangle",
    "difficulty": "easy",
    "category": [
      "array",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 977,
    "title": "Squares of a Sorted Array",
    "difficulty": "easy",
    "category": [
      "array",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 978,
    "title": "Longest Turbulent Subarray",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "sliding window"
    ]
  },
  {
    "id": 979,
    "title": "Distribute Coins in Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 980,
    "title": "Unique Paths III",
    "difficulty": "hard",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "matrix"
    ]
  },
  {
    "id": 981,
    "title": "Time Based Key-Value Store",
    "difficulty": "medium",
    "category": [
      "binary search",
      "design",
      "hash table",
      "string"
    ]
  },
  {
    "id": 982,
    "title": "Triples with Bitwise AND Equal To Zero",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "hash table"
    ]
  },
  {
    "id": 983,
    "title": "Minimum Cost For Tickets",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 984,
    "title": "String Without AAA or BBB",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 985,
    "title": "Sum of Even Numbers After Queries",
    "difficulty": "medium",
    "category": [
      "array",
      "simulation"
    ]
  },
  {
    "id": 986,
    "title": "Interval List Intersections",
    "difficulty": "medium",
    "category": [
      "array",
      "line sweep",
      "two pointers"
    ]
  },
  {
    "id": 987,
    "title": "Vertical Order Traversal of a Binary Tree",
    "difficulty": "hard",
    "category": [
      "binary tree",
      "graph traversal",
      "hash table",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 988,
    "title": "Smallest String Starting From Leaf",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "binary tree",
      "graph traversal",
      "string",
      "tree"
    ]
  },
  {
    "id": 989,
    "title": "Add to Array-Form of Integer",
    "difficulty": "easy",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 990,
    "title": "Satisfiability of Equality Equations",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "string",
      "union find"
    ]
  },
  {
    "id": 991,
    "title": "Broken Calculator",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 992,
    "title": "Subarrays with K Different Integers",
    "difficulty": "hard",
    "category": [
      "array",
      "counting",
      "hash table",
      "sliding window"
    ]
  },
  {
    "id": 993,
    "title": "Cousins in Binary Tree",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 994,
    "title": "Rotting Oranges",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 995,
    "title": "Minimum Number of K Consecutive Bit Flips",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "prefix sum",
      "queue",
      "sliding window"
    ]
  },
  {
    "id": 996,
    "title": "Number of Squareful Arrays",
    "difficulty": "hard",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "dynamic programming",
      "hash table",
      "math"
    ]
  },
  {
    "id": 997,
    "title": "Find the Town Judge",
    "difficulty": "easy",
    "category": [
      "array",
      "graph",
      "hash table"
    ]
  },
  {
    "id": 998,
    "title": "Maximum Binary Tree II",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "tree"
    ]
  },
  {
    "id": 999,
    "title": "Available Captures for Rook",
    "difficulty": "easy",
    "category": [
      "array",
      "matrix",
      "simulation"
    ]
  },
  {
    "id": 1000,
    "title": "Minimum Cost to Merge Stones",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "prefix sum"
    ]
  },
  {
    "id": 1001,
    "title": "Grid Illumination",
    "difficulty": "hard",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 1002,
    "title": "Find Common Characters",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "string"
    ]
  },
  {
    "id": 1003,
    "title": "Check If Word Is Valid After Substitutions",
    "difficulty": "medium",
    "category": [
      "stack",
      "string"
    ]
  },
  {
    "id": 1004,
    "title": "Max Consecutive Ones III",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "prefix sum",
      "sliding window"
    ]
  },
  {
    "id": 1005,
    "title": "Maximize Sum Of Array After K Negations",
    "difficulty": "easy",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 1006,
    "title": "Clumsy Factorial",
    "difficulty": "medium",
    "category": [
      "math",
      "simulation",
      "stack"
    ]
  },
  {
    "id": 1007,
    "title": "Minimum Domino Rotations For Equal Row",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 1008,
    "title": "Construct Binary Search Tree from Preorder Traversal",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search tree",
      "binary tree",
      "monotonic stack",
      "stack",
      "tree"
    ]
  },
  {
    "id": 1009,
    "title": "Complement of Base 10 Integer",
    "difficulty": "easy",
    "category": [
      "bit manipulation"
    ]
  },
  {
    "id": 1010,
    "title": "Pairs of Songs With Total Durations Divisible by 60",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "hash table"
    ]
  },
  {
    "id": 1011,
    "title": "Capacity To Ship Packages Within D Days",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 1012,
    "title": "Numbers With Repeated Digits",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 1013,
    "title": "Partition Array Into Three Parts With Equal Sum",
    "difficulty": "easy",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 1014,
    "title": "Best Sightseeing Pair",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 1015,
    "title": "Smallest Integer Divisible by K",
    "difficulty": "medium",
    "category": [
      "hash table",
      "math"
    ]
  },
  {
    "id": 1016,
    "title": "Binary String With Substrings Representing 1 To N",
    "difficulty": "medium",
    "category": [
      "string"
    ]
  },
  {
    "id": 1017,
    "title": "Convert to Base -2",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 1018,
    "title": "Binary Prefix Divisible By 5",
    "difficulty": "easy",
    "category": [
      "array",
      "bit manipulation"
    ]
  },
  {
    "id": 1019,
    "title": "Next Greater Node In Linked List",
    "difficulty": "medium",
    "category": [
      "array",
      "linked list",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 1020,
    "title": "Number of Enclaves",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "matrix",
      "union find"
    ]
  },
  {
    "id": 1021,
    "title": "Remove Outermost Parentheses",
    "difficulty": "easy",
    "category": [
      "stack",
      "string"
    ]
  },
  {
    "id": 1022,
    "title": "Sum of Root To Leaf Binary Numbers",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1023,
    "title": "Camelcase Matching",
    "difficulty": "medium",
    "category": [
      "array",
      "string",
      "string matching",
      "trie",
      "two pointers"
    ]
  },
  {
    "id": 1024,
    "title": "Video Stitching",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 1025,
    "title": "Divisor Game",
    "difficulty": "easy",
    "category": [
      "brainteaser",
      "dynamic programming",
      "game theory",
      "math"
    ]
  },
  {
    "id": 1026,
    "title": "Maximum Difference Between Node and Ancestor",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1027,
    "title": "Longest Arithmetic Subsequence",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "dynamic programming",
      "hash table"
    ]
  },
  {
    "id": 1028,
    "title": "Recover a Tree From Preorder Traversal",
    "difficulty": "hard",
    "category": [
      "binary tree",
      "graph traversal",
      "string",
      "tree"
    ]
  },
  {
    "id": 1029,
    "title": "Two City Scheduling",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 1030,
    "title": "Matrix Cells in Distance Order",
    "difficulty": "easy",
    "category": [
      "array",
      "geometry",
      "math",
      "matrix",
      "sorting"
    ]
  },
  {
    "id": 1031,
    "title": "Maximum Sum of Two Non-Overlapping Subarrays",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "sliding window"
    ]
  },
  {
    "id": 1032,
    "title": "Stream of Characters",
    "difficulty": "hard",
    "category": [
      "array",
      "data stream",
      "design",
      "string",
      "trie"
    ]
  },
  {
    "id": 1033,
    "title": "Moving Stones Until Consecutive",
    "difficulty": "medium",
    "category": [
      "brainteaser",
      "math"
    ]
  },
  {
    "id": 1034,
    "title": "Coloring A Border",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 1035,
    "title": "Uncrossed Lines",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 1036,
    "title": "Escape a Large Maze",
    "difficulty": "hard",
    "category": [
      "array",
      "graph traversal",
      "hash table"
    ]
  },
  {
    "id": 1037,
    "title": "Valid Boomerang",
    "difficulty": "easy",
    "category": [
      "array",
      "geometry",
      "math"
    ]
  },
  {
    "id": 1038,
    "title": "Binary Search Tree to Greater Sum Tree",
    "difficulty": "medium",
    "category": [
      "binary search tree",
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1039,
    "title": "Minimum Score Triangulation of Polygon",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 1040,
    "title": "Moving Stones Until Consecutive II",
    "difficulty": "medium",
    "category": [
      "array",
      "math",
      "sliding window",
      "sorting"
    ]
  },
  {
    "id": 1041,
    "title": "Robot Bounded In Circle",
    "difficulty": "medium",
    "category": [
      "math",
      "simulation",
      "string"
    ]
  },
  {
    "id": 1042,
    "title": "Flower Planting With No Adjacent",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 1043,
    "title": "Partition Array for Maximum Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 1044,
    "title": "Longest Duplicate Substring",
    "difficulty": "hard",
    "category": [
      "binary search",
      "hash table",
      "rolling hash",
      "sliding window",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 1045,
    "title": "Customers Who Bought All Products",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1046,
    "title": "Last Stone Weight",
    "difficulty": "easy",
    "category": [
      "array",
      "heap"
    ]
  },
  {
    "id": 1047,
    "title": "Remove All Adjacent Duplicates In String",
    "difficulty": "easy",
    "category": [
      "stack",
      "string"
    ]
  },
  {
    "id": 1048,
    "title": "Longest String Chain",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "hash table",
      "sorting",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 1049,
    "title": "Last Stone Weight II",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 1050,
    "title": "Actors and Directors Who Cooperated At Least Three Times",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1051,
    "title": "Height Checker",
    "difficulty": "easy",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 1052,
    "title": "Grumpy Bookstore Owner",
    "difficulty": "medium",
    "category": [
      "array",
      "sliding window"
    ]
  },
  {
    "id": 1053,
    "title": "Previous Permutation With One Swap",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 1054,
    "title": "Distant Barcodes",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "greedy",
      "hash table",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 1055,
    "title": "Shortest Way to Form String",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 1056,
    "title": "Confusing Number",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 1057,
    "title": "Campus Bikes",
    "difficulty": "medium",
    "category": [
      "array",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 1058,
    "title": "Minimize Rounding Error to Meet Target",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "math",
      "sorting",
      "string"
    ]
  },
  {
    "id": 1059,
    "title": "All Paths from Source Lead to Destination",
    "difficulty": "medium",
    "category": [
      "graph",
      "topological sort"
    ]
  },
  {
    "id": 1060,
    "title": "Missing Element in Sorted Array",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 1061,
    "title": "Lexicographically Smallest Equivalent String",
    "difficulty": "medium",
    "category": [
      "string",
      "union find"
    ]
  },
  {
    "id": 1062,
    "title": "Longest Repeating Substring",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "hash table",
      "rolling hash",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 1063,
    "title": "Number of Valid Subarrays",
    "difficulty": "hard",
    "category": [
      "array",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 1064,
    "title": "Fixed Point",
    "difficulty": "easy",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 1065,
    "title": "Index Pairs of a String",
    "difficulty": "easy",
    "category": [
      "array",
      "sorting",
      "string",
      "trie"
    ]
  },
  {
    "id": 1066,
    "title": "Campus Bikes II",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 1067,
    "title": "Digit Count in Range",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 1068,
    "title": "Product Sales Analysis I",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1069,
    "title": "Product Sales Analysis II",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1070,
    "title": "Product Sales Analysis III",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1071,
    "title": "Greatest Common Divisor of Strings",
    "difficulty": "easy",
    "category": [
      "math",
      "string"
    ]
  },
  {
    "id": 1072,
    "title": "Flip Columns For Maximum Number of Equal Rows",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "matrix"
    ]
  },
  {
    "id": 1073,
    "title": "Adding Two Negabinary Numbers",
    "difficulty": "medium",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 1074,
    "title": "Number of Submatrices That Sum to Target",
    "difficulty": "hard",
    "category": [
      "array",
      "hash table",
      "matrix",
      "prefix sum"
    ]
  },
  {
    "id": 1075,
    "title": "Project Employees I",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1076,
    "title": "Project Employees II",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1077,
    "title": "Project Employees III",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1078,
    "title": "Occurrences After Bigram",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 1079,
    "title": "Letter Tile Possibilities",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 1080,
    "title": "Insufficient Nodes in Root to Leaf Paths",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1081,
    "title": "Smallest Subsequence of Distinct Characters",
    "difficulty": "medium",
    "category": [
      "greedy",
      "monotonic stack",
      "stack",
      "string"
    ]
  },
  {
    "id": 1082,
    "title": "Sales Analysis I",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1083,
    "title": "Sales Analysis II",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1084,
    "title": "Sales Analysis III",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1085,
    "title": "Sum of Digits in the Minimum Number",
    "difficulty": "easy",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 1086,
    "title": "High Five",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 1087,
    "title": "Brace Expansion",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "graph traversal",
      "string"
    ]
  },
  {
    "id": 1088,
    "title": "Confusing Number II",
    "difficulty": "hard",
    "category": [
      "backtracking",
      "math"
    ]
  },
  {
    "id": 1089,
    "title": "Duplicate Zeros",
    "difficulty": "easy",
    "category": [
      "array",
      "two pointers"
    ]
  },
  {
    "id": 1090,
    "title": "Largest Values From Labels",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "greedy",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 1091,
    "title": "Shortest Path in Binary Matrix",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 1092,
    "title": "Shortest Common Supersequence ",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 1093,
    "title": "Statistics from a Large Sample",
    "difficulty": "medium",
    "category": [
      "array",
      "math",
      "probability"
    ]
  },
  {
    "id": 1094,
    "title": "Car Pooling",
    "difficulty": "medium",
    "category": [
      "array",
      "heap",
      "prefix sum",
      "simulation",
      "sorting"
    ]
  },
  {
    "id": 1095,
    "title": "Find in Mountain Array",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "interactive"
    ]
  },
  {
    "id": 1096,
    "title": "Brace Expansion II",
    "difficulty": "hard",
    "category": [
      "backtracking",
      "graph traversal",
      "stack",
      "string"
    ]
  },
  {
    "id": 1097,
    "title": "Game Play Analysis V",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 1098,
    "title": "Unpopular Books",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1099,
    "title": "Two Sum Less Than K",
    "difficulty": "easy",
    "category": [
      "array",
      "binary search",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 1100,
    "title": "Find K-Length Substrings With No Repeated Characters",
    "difficulty": "medium",
    "category": [
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 1101,
    "title": "The Earliest Moment When Everyone Become Friends",
    "difficulty": "medium",
    "category": [
      "array",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 1102,
    "title": "Path With Maximum Minimum Value",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "graph traversal",
      "heap",
      "matrix",
      "union find"
    ]
  },
  {
    "id": 1103,
    "title": "Distribute Candies to People",
    "difficulty": "easy",
    "category": [
      "math",
      "simulation"
    ]
  },
  {
    "id": 1104,
    "title": "Path In Zigzag Labelled Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "math",
      "tree"
    ]
  },
  {
    "id": 1105,
    "title": "Filling Bookcase Shelves",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 1106,
    "title": "Parsing A Boolean Expression",
    "difficulty": "hard",
    "category": [
      "recursion",
      "stack",
      "string"
    ]
  },
  {
    "id": 1107,
    "title": "New Users Daily Count",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1108,
    "title": "Defanging an IP Address",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 1109,
    "title": "Corporate Flight Bookings",
    "difficulty": "medium",
    "category": [
      "array",
      "prefix sum"
    ]
  },
  {
    "id": 1110,
    "title": "Delete Nodes And Return Forest",
    "difficulty": "medium",
    "category": [
      "array",
      "binary tree",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 1111,
    "title": "Maximum Nesting Depth of Two Valid Parentheses Strings",
    "difficulty": "medium",
    "category": [
      "stack",
      "string"
    ]
  },
  {
    "id": 1112,
    "title": "Highest Grade For Each Student",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1113,
    "title": "Reported Posts",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1114,
    "title": "Print in Order",
    "difficulty": "easy",
    "category": [
      "concurrency"
    ]
  },
  {
    "id": 1115,
    "title": "Print FooBar Alternately",
    "difficulty": "medium",
    "category": [
      "concurrency"
    ]
  },
  {
    "id": 1116,
    "title": "Print Zero Even Odd",
    "difficulty": "medium",
    "category": [
      "concurrency"
    ]
  },
  {
    "id": 1117,
    "title": "Building H2O",
    "difficulty": "medium",
    "category": [
      "concurrency"
    ]
  },
  {
    "id": 1118,
    "title": "Number of Days in a Month",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 1119,
    "title": "Remove Vowels from a String",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 1120,
    "title": "Maximum Average Subtree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1121,
    "title": "Divide Array Into Increasing Sequences",
    "difficulty": "hard",
    "category": [
      "array",
      "counting"
    ]
  },
  {
    "id": 1122,
    "title": "Relative Sort Array",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 1123,
    "title": "Lowest Common Ancestor of Deepest Leaves",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 1124,
    "title": "Longest Well-Performing Interval",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "monotonic stack",
      "prefix sum",
      "stack"
    ]
  },
  {
    "id": 1125,
    "title": "Smallest Sufficient Team",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 1126,
    "title": "Active Businesses",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1127,
    "title": "User Purchase Platform",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 1128,
    "title": "Number of Equivalent Domino Pairs",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "hash table"
    ]
  },
  {
    "id": 1129,
    "title": "Shortest Path with Alternating Colors",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 1130,
    "title": "Minimum Cost Tree From Leaf Values",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "greedy",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 1131,
    "title": "Maximum of Absolute Value Expression",
    "difficulty": "medium",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 1132,
    "title": "Reported Posts II",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1133,
    "title": "Largest Unique Number",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 1134,
    "title": "Armstrong Number",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 1135,
    "title": "Connecting Cities With Minimum Cost",
    "difficulty": "medium",
    "category": [
      "graph",
      "heap",
      "minimum spanning tree",
      "union find"
    ]
  },
  {
    "id": 1136,
    "title": "Parallel Courses",
    "difficulty": "medium",
    "category": [
      "graph",
      "topological sort"
    ]
  },
  {
    "id": 1137,
    "title": "N-th Tribonacci Number",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "math",
      "memoization"
    ]
  },
  {
    "id": 1138,
    "title": "Alphabet Board Path",
    "difficulty": "medium",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 1139,
    "title": "Largest 1-Bordered Square",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 1140,
    "title": "Stone Game II",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "game theory",
      "math",
      "prefix sum"
    ]
  },
  {
    "id": 1141,
    "title": "User Activity for the Past 30 Days I",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1142,
    "title": "User Activity for the Past 30 Days II",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1143,
    "title": "Longest Common Subsequence",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 1144,
    "title": "Decrease Elements To Make Array Zigzag",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 1145,
    "title": "Binary Tree Coloring Game",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1146,
    "title": "Snapshot Array",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "design",
      "hash table"
    ]
  },
  {
    "id": 1147,
    "title": "Longest Chunked Palindrome Decomposition",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "hash table",
      "rolling hash",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 1148,
    "title": "Article Views I",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1149,
    "title": "Article Views II",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1150,
    "title": "Check If a Number Is Majority Element in a Sorted Array",
    "difficulty": "easy",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 1151,
    "title": "Minimum Swaps to Group All 1's Together",
    "difficulty": "medium",
    "category": [
      "array",
      "sliding window"
    ]
  },
  {
    "id": 1152,
    "title": "Analyze User Website Visit Pattern",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 1153,
    "title": "String Transforms Into Another String",
    "difficulty": "hard",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 1154,
    "title": "Day of the Year",
    "difficulty": "easy",
    "category": [
      "math",
      "string"
    ]
  },
  {
    "id": 1155,
    "title": "Number of Dice Rolls With Target Sum",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 1156,
    "title": "Swap For Longest Repeated Character Substring",
    "difficulty": "medium",
    "category": [
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 1157,
    "title": "Online Majority Element In Subarray",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree",
      "binary search",
      "design",
      "segment tree"
    ]
  },
  {
    "id": 1158,
    "title": "Market Analysis I",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1159,
    "title": "Market Analysis II",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 1160,
    "title": "Find Words That Can Be Formed by Characters",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 1161,
    "title": "Maximum Level Sum of a Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1162,
    "title": "As Far from Land as Possible",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 1163,
    "title": "Last Substring in Lexicographical Order",
    "difficulty": "hard",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 1164,
    "title": "Product Price at a Given Date",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1165,
    "title": "Single-Row Keyboard",
    "difficulty": "easy",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 1166,
    "title": "Design File System",
    "difficulty": "medium",
    "category": [
      "design",
      "hash table",
      "string",
      "trie"
    ]
  },
  {
    "id": 1167,
    "title": "Minimum Cost to Connect Sticks",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "heap"
    ]
  },
  {
    "id": 1168,
    "title": "Optimize Water Distribution in a Village",
    "difficulty": "hard",
    "category": [
      "graph",
      "heap",
      "minimum spanning tree",
      "union find"
    ]
  },
  {
    "id": 1169,
    "title": "Invalid Transactions",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 1170,
    "title": "Compare Strings by Frequency of the Smallest Character",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 1171,
    "title": "Remove Zero Sum Consecutive Nodes from Linked List",
    "difficulty": "medium",
    "category": [
      "hash table",
      "linked list"
    ]
  },
  {
    "id": 1172,
    "title": "Dinner Plate Stacks",
    "difficulty": "hard",
    "category": [
      "design",
      "hash table",
      "heap",
      "stack"
    ]
  },
  {
    "id": 1173,
    "title": "Immediate Food Delivery I",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1174,
    "title": "Immediate Food Delivery II",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1175,
    "title": "Prime Arrangements",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 1176,
    "title": "Diet Plan Performance",
    "difficulty": "easy",
    "category": [
      "array",
      "sliding window"
    ]
  },
  {
    "id": 1177,
    "title": "Can Make Palindrome from Substring",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "hash table",
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 1178,
    "title": "Number of Valid Words for Each Puzzle",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "hash table",
      "string",
      "trie"
    ]
  },
  {
    "id": 1179,
    "title": "Reformat Department Table",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1180,
    "title": "Count Substrings with Only One Distinct Letter",
    "difficulty": "easy",
    "category": [
      "math",
      "string"
    ]
  },
  {
    "id": 1181,
    "title": "Before and After Puzzle",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 1182,
    "title": "Shortest Distance to Target Color",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "dynamic programming"
    ]
  },
  {
    "id": 1183,
    "title": "Maximum Number of Ones",
    "difficulty": "hard",
    "category": [
      "greedy",
      "heap",
      "math",
      "sorting"
    ]
  },
  {
    "id": 1184,
    "title": "Distance Between Bus Stops",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 1185,
    "title": "Day of the Week",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 1186,
    "title": "Maximum Subarray Sum with One Deletion",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 1187,
    "title": "Make Array Strictly Increasing",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 1188,
    "title": "Design Bounded Blocking Queue",
    "difficulty": "medium",
    "category": [
      "concurrency"
    ]
  },
  {
    "id": 1189,
    "title": "Maximum Number of Balloons",
    "difficulty": "easy",
    "category": [
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 1190,
    "title": "Reverse Substrings Between Each Pair of Parentheses",
    "difficulty": "medium",
    "category": [
      "stack",
      "string"
    ]
  },
  {
    "id": 1191,
    "title": "K-Concatenation Maximum Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 1192,
    "title": "Critical Connections in a Network",
    "difficulty": "hard",
    "category": [
      "biconnected component",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 1193,
    "title": "Monthly Transactions I",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1194,
    "title": "Tournament Winners",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 1195,
    "title": "Fizz Buzz Multithreaded",
    "difficulty": "medium",
    "category": [
      "concurrency"
    ]
  },
  {
    "id": 1196,
    "title": "How Many Apples Can You Put into the Basket",
    "difficulty": "easy",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 1197,
    "title": "Minimum Knight Moves",
    "difficulty": "medium",
    "category": [
      "graph traversal"
    ]
  },
  {
    "id": 1198,
    "title": "Find Smallest Common Element in All Rows",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "counting",
      "hash table",
      "matrix"
    ]
  },
  {
    "id": 1199,
    "title": "Minimum Time to Build Blocks",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "heap",
      "math"
    ]
  },
  {
    "id": 1200,
    "title": "Minimum Absolute Difference",
    "difficulty": "easy",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 1201,
    "title": "Ugly Number III",
    "difficulty": "medium",
    "category": [
      "binary search",
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 1202,
    "title": "Smallest String With Swaps",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "hash table",
      "sorting",
      "string",
      "union find"
    ]
  },
  {
    "id": 1203,
    "title": "Sort Items by Groups Respecting Dependencies",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "topological sort"
    ]
  },
  {
    "id": 1204,
    "title": "Last Person to Fit in the Bus",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1205,
    "title": "Monthly Transactions II",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1206,
    "title": "Design Skiplist",
    "difficulty": "hard",
    "category": [
      "design",
      "linked list"
    ]
  },
  {
    "id": 1207,
    "title": "Unique Number of Occurrences",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 1208,
    "title": "Get Equal Substrings Within Budget",
    "difficulty": "medium",
    "category": [
      "binary search",
      "prefix sum",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 1209,
    "title": "Remove All Adjacent Duplicates in String II",
    "difficulty": "medium",
    "category": [
      "stack",
      "string"
    ]
  },
  {
    "id": 1210,
    "title": "Minimum Moves to Reach Target with Rotations",
    "difficulty": "hard",
    "category": [
      "array",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 1211,
    "title": "Queries Quality and Percentage",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1212,
    "title": "Team Scores in Football Tournament",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1213,
    "title": "Intersection of Three Sorted Arrays",
    "difficulty": "easy",
    "category": [
      "array",
      "binary search",
      "counting",
      "hash table"
    ]
  },
  {
    "id": 1214,
    "title": "Two Sum BSTs",
    "difficulty": "medium",
    "category": [
      "binary search",
      "binary search tree",
      "binary tree",
      "graph traversal",
      "stack",
      "tree",
      "two pointers"
    ]
  },
  {
    "id": 1215,
    "title": "Stepping Numbers",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 1216,
    "title": "Valid Palindrome III",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 1217,
    "title": "Minimum Cost to Move Chips to The Same Position",
    "difficulty": "easy",
    "category": [
      "array",
      "greedy",
      "math"
    ]
  },
  {
    "id": 1218,
    "title": "Longest Arithmetic Subsequence of Given Difference",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "hash table"
    ]
  },
  {
    "id": 1219,
    "title": "Path with Maximum Gold",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "matrix"
    ]
  },
  {
    "id": 1220,
    "title": "Count Vowels Permutation",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 1221,
    "title": "Split a String in Balanced Strings",
    "difficulty": "easy",
    "category": [
      "counting",
      "greedy",
      "string"
    ]
  },
  {
    "id": 1222,
    "title": "Queens That Can Attack the King",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "simulation"
    ]
  },
  {
    "id": 1223,
    "title": "Dice Roll Simulation",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 1224,
    "title": "Maximum Equal Frequency",
    "difficulty": "hard",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 1225,
    "title": "Report Contiguous Dates",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 1226,
    "title": "The Dining Philosophers",
    "difficulty": "medium",
    "category": [
      "concurrency"
    ]
  },
  {
    "id": 1227,
    "title": "Airplane Seat Assignment Probability",
    "difficulty": "medium",
    "category": [
      "brainteaser",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 1228,
    "title": "Missing Number In Arithmetic Progression",
    "difficulty": "easy",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 1229,
    "title": "Meeting Scheduler",
    "difficulty": "medium",
    "category": [
      "array",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 1230,
    "title": "Toss Strange Coins",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 1231,
    "title": "Divide Chocolate",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 1232,
    "title": "Check If It Is a Straight Line",
    "difficulty": "easy",
    "category": [
      "array",
      "geometry",
      "math"
    ]
  },
  {
    "id": 1233,
    "title": "Remove Sub-Folders from the Filesystem",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "string",
      "trie"
    ]
  },
  {
    "id": 1234,
    "title": "Replace the Substring for Balanced String",
    "difficulty": "medium",
    "category": [
      "sliding window",
      "string"
    ]
  },
  {
    "id": 1235,
    "title": "Maximum Profit in Job Scheduling",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 1236,
    "title": "Web Crawler",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "interactive",
      "string"
    ]
  },
  {
    "id": 1237,
    "title": "Find Positive Integer Solution for a Given Equation",
    "difficulty": "medium",
    "category": [
      "binary search",
      "interactive",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 1238,
    "title": "Circular Permutation in Binary Representation",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "bit manipulation",
      "math"
    ]
  },
  {
    "id": 1239,
    "title": "Maximum Length of a Concatenated String with Unique Characters",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "string"
    ]
  },
  {
    "id": 1240,
    "title": "Tiling a Rectangle with the Fewest Squares",
    "difficulty": "hard",
    "category": [
      "backtracking"
    ]
  },
  {
    "id": 1241,
    "title": "Number of Comments per Post",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1242,
    "title": "Web Crawler Multithreaded",
    "difficulty": "medium",
    "category": [
      "concurrency",
      "graph traversal"
    ]
  },
  {
    "id": 1243,
    "title": "Array Transformation",
    "difficulty": "easy",
    "category": [
      "array",
      "simulation"
    ]
  },
  {
    "id": 1244,
    "title": "Design A Leaderboard",
    "difficulty": "medium",
    "category": [
      "design",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 1245,
    "title": "Tree Diameter",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "topological sort",
      "tree"
    ]
  },
  {
    "id": 1246,
    "title": "Palindrome Removal",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 1247,
    "title": "Minimum Swaps to Make Strings Equal",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 1248,
    "title": "Count Number of Nice Subarrays",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "math",
      "prefix sum",
      "sliding window"
    ]
  },
  {
    "id": 1249,
    "title": "Minimum Remove to Make Valid Parentheses",
    "difficulty": "medium",
    "category": [
      "stack",
      "string"
    ]
  },
  {
    "id": 1250,
    "title": "Check If It Is a Good Array",
    "difficulty": "hard",
    "category": [
      "array",
      "math",
      "number theory"
    ]
  },
  {
    "id": 1251,
    "title": "Average Selling Price",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1252,
    "title": "Cells with Odd Values in a Matrix",
    "difficulty": "easy",
    "category": [
      "array",
      "math",
      "simulation"
    ]
  },
  {
    "id": 1253,
    "title": "Reconstruct a 2-Row Binary Matrix",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "matrix"
    ]
  },
  {
    "id": 1254,
    "title": "Number of Closed Islands",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "matrix",
      "union find"
    ]
  },
  {
    "id": 1255,
    "title": "Maximum Score Words Formed by Letters",
    "difficulty": "hard",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 1256,
    "title": "Encode Number",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "math",
      "string"
    ]
  },
  {
    "id": 1257,
    "title": "Smallest Common Region",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "hash table",
      "string",
      "tree"
    ]
  },
  {
    "id": 1258,
    "title": "Synonymous Sentences",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "hash table",
      "string",
      "union find"
    ]
  },
  {
    "id": 1259,
    "title": "Handshakes That Don't Cross",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 1260,
    "title": "Shift 2D Grid",
    "difficulty": "easy",
    "category": [
      "array",
      "matrix",
      "simulation"
    ]
  },
  {
    "id": 1261,
    "title": "Find Elements in a Contaminated Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "design",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 1262,
    "title": "Greatest Sum Divisible by Three",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 1263,
    "title": "Minimum Moves to Move a Box to Their Target Location",
    "difficulty": "hard",
    "category": [
      "array",
      "graph traversal",
      "heap",
      "matrix"
    ]
  },
  {
    "id": 1264,
    "title": "Page Recommendations",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1265,
    "title": "Print Immutable Linked List in Reverse",
    "difficulty": "medium",
    "category": [
      "linked list",
      "recursion",
      "stack",
      "two pointers"
    ]
  },
  {
    "id": 1266,
    "title": "Minimum Time Visiting All Points",
    "difficulty": "easy",
    "category": [
      "array",
      "geometry",
      "math"
    ]
  },
  {
    "id": 1267,
    "title": "Count Servers that Communicate",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "graph traversal",
      "matrix",
      "union find"
    ]
  },
  {
    "id": 1268,
    "title": "Search Suggestions System",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "heap",
      "sorting",
      "string",
      "trie"
    ]
  },
  {
    "id": 1269,
    "title": "Number of Ways to Stay in the Same Place After Some Steps",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 1270,
    "title": "All People Report to the Given Manager",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1271,
    "title": "Hexspeak",
    "difficulty": "easy",
    "category": [
      "math",
      "string"
    ]
  },
  {
    "id": 1272,
    "title": "Remove Interval",
    "difficulty": "medium",
    "category": [
      "array"
    ]
  },
  {
    "id": 1273,
    "title": "Delete Tree Nodes",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1274,
    "title": "Number of Ships in a Rectangle",
    "difficulty": "hard",
    "category": [
      "array",
      "divide and conquer",
      "interactive"
    ]
  },
  {
    "id": 1275,
    "title": "Find Winner on a Tic Tac Toe Game",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "matrix",
      "simulation"
    ]
  },
  {
    "id": 1276,
    "title": "Number of Burgers with No Waste of Ingredients",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 1277,
    "title": "Count Square Submatrices with All Ones",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 1278,
    "title": "Palindrome Partitioning III",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 1279,
    "title": "Traffic Light Controlled Intersection",
    "difficulty": "easy",
    "category": [
      "concurrency"
    ]
  },
  {
    "id": 1280,
    "title": "Students and Examinations",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1281,
    "title": "Subtract the Product and Sum of Digits of an Integer",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 1282,
    "title": "Group the People Given the Group Size They Belong To",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "hash table"
    ]
  },
  {
    "id": 1283,
    "title": "Find the Smallest Divisor Given a Threshold",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 1284,
    "title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "graph traversal",
      "hash table",
      "matrix"
    ]
  },
  {
    "id": 1285,
    "title": "Find the Start and End Number of Continuous Ranges",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1286,
    "title": "Iterator for Combination",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "design",
      "iterator",
      "string"
    ]
  },
  {
    "id": 1287,
    "title": "Element Appearing More Than 25% In Sorted Array",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 1288,
    "title": "Remove Covered Intervals",
    "difficulty": "medium",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 1289,
    "title": "Minimum Falling Path Sum II",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 1290,
    "title": "Convert Binary Number in a Linked List to Integer",
    "difficulty": "easy",
    "category": [
      "linked list",
      "math"
    ]
  },
  {
    "id": 1291,
    "title": "Sequential Digits",
    "difficulty": "medium",
    "category": [
      "enumeration"
    ]
  },
  {
    "id": 1292,
    "title": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "matrix",
      "prefix sum"
    ]
  },
  {
    "id": 1293,
    "title": "Shortest Path in a Grid with Obstacles Elimination",
    "difficulty": "hard",
    "category": [
      "array",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 1294,
    "title": "Weather Type in Each Country",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1295,
    "title": "Find Numbers with Even Number of Digits",
    "difficulty": "easy",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 1296,
    "title": "Divide Array in Sets of K Consecutive Numbers",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 1297,
    "title": "Maximum Number of Occurrences of a Substring",
    "difficulty": "medium",
    "category": [
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 1298,
    "title": "Maximum Candies You Can Get from Boxes",
    "difficulty": "hard",
    "category": [
      "array",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 1299,
    "title": "Replace Elements with Greatest Element on Right Side",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 1300,
    "title": "Sum of Mutated Array Closest to Target",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "sorting"
    ]
  },
  {
    "id": 1301,
    "title": "Number of Paths with Max Score",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 1302,
    "title": "Deepest Leaves Sum",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1303,
    "title": "Find the Team Size",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1304,
    "title": "Find N Unique Integers Sum up to Zero",
    "difficulty": "easy",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 1305,
    "title": "All Elements in Two Binary Search Trees",
    "difficulty": "medium",
    "category": [
      "binary search tree",
      "binary tree",
      "graph traversal",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 1306,
    "title": "Jump Game III",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal"
    ]
  },
  {
    "id": 1307,
    "title": "Verbal Arithmetic Puzzle",
    "difficulty": "hard",
    "category": [
      "array",
      "backtracking",
      "math",
      "string"
    ]
  },
  {
    "id": 1308,
    "title": "Running Total for Different Genders",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1309,
    "title": "Decrypt String from Alphabet to Integer Mapping",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 1310,
    "title": "XOR Queries of a Subarray",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "prefix sum"
    ]
  },
  {
    "id": 1311,
    "title": "Get Watched Videos by Your Friends",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "graph traversal",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 1312,
    "title": "Minimum Insertion Steps to Make a String Palindrome",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 1313,
    "title": "Decompress Run-Length Encoded List",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 1314,
    "title": "Matrix Block Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "prefix sum"
    ]
  },
  {
    "id": 1315,
    "title": "Sum of Nodes with Even-Valued Grandparent",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1316,
    "title": "Distinct Echo Substrings",
    "difficulty": "hard",
    "category": [
      "hash table",
      "rolling hash",
      "string",
      "trie"
    ]
  },
  {
    "id": 1317,
    "title": "Convert Integer to the Sum of Two No-Zero Integers",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 1318,
    "title": "Minimum Flips to Make a OR b Equal to c",
    "difficulty": "medium",
    "category": [
      "bit manipulation"
    ]
  },
  {
    "id": 1319,
    "title": "Number of Operations to Make Network Connected",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 1320,
    "title": "Minimum Distance to Type a Word Using Two Fingers",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 1321,
    "title": "Restaurant Growth",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1322,
    "title": "Ads Performance",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1323,
    "title": "Maximum 69 Number",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 1324,
    "title": "Print Words Vertically",
    "difficulty": "medium",
    "category": [
      "array",
      "simulation",
      "string"
    ]
  },
  {
    "id": 1325,
    "title": "Delete Leaves With a Given Value",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1326,
    "title": "Minimum Number of Taps to Open to Water a Garden",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 1327,
    "title": "List the Products Ordered in a Period",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1328,
    "title": "Break a Palindrome",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 1329,
    "title": "Sort the Matrix Diagonally",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "sorting"
    ]
  },
  {
    "id": 1330,
    "title": "Reverse Subarray To Maximize Array Value",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "math"
    ]
  },
  {
    "id": 1331,
    "title": "Rank Transform of an Array",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 1332,
    "title": "Remove Palindromic Subsequences",
    "difficulty": "easy",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 1333,
    "title": "Filter Restaurants by Vegan-Friendly, Price and Distance",
    "difficulty": "medium",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 1334,
    "title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 1335,
    "title": "Minimum Difficulty of a Job Schedule",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 1336,
    "title": "Number of Transactions per Visit",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 1337,
    "title": "The K Weakest Rows in a Matrix",
    "difficulty": "easy",
    "category": [
      "array",
      "binary search",
      "heap",
      "matrix",
      "sorting"
    ]
  },
  {
    "id": 1338,
    "title": "Reduce Array Size to The Half",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "hash table",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 1339,
    "title": "Maximum Product of Splitted Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1340,
    "title": "Jump Game V",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 1341,
    "title": "Movie Rating",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1342,
    "title": "Number of Steps to Reduce a Number to Zero",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "math"
    ]
  },
  {
    "id": 1343,
    "title": "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold",
    "difficulty": "medium",
    "category": [
      "array",
      "sliding window"
    ]
  },
  {
    "id": 1344,
    "title": "Angle Between Hands of a Clock",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 1345,
    "title": "Jump Game IV",
    "difficulty": "hard",
    "category": [
      "array",
      "graph traversal",
      "hash table"
    ]
  },
  {
    "id": 1346,
    "title": "Check If N and Its Double Exist",
    "difficulty": "easy",
    "category": [
      "array",
      "binary search",
      "hash table",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 1347,
    "title": "Minimum Number of Steps to Make Two Strings Anagram",
    "difficulty": "medium",
    "category": [
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 1348,
    "title": "Tweet Counts Per Frequency",
    "difficulty": "medium",
    "category": [
      "binary search",
      "design",
      "hash table",
      "ordered set",
      "sorting"
    ]
  },
  {
    "id": 1349,
    "title": "Maximum Students Taking Exam",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 1350,
    "title": "Students With Invalid Departments",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1351,
    "title": "Count Negative Numbers in a Sorted Matrix",
    "difficulty": "easy",
    "category": [
      "array",
      "binary search",
      "matrix"
    ]
  },
  {
    "id": 1352,
    "title": "Product of the Last K Numbers",
    "difficulty": "medium",
    "category": [
      "array",
      "data stream",
      "design",
      "math",
      "prefix sum"
    ]
  },
  {
    "id": 1353,
    "title": "Maximum Number of Events That Can Be Attended",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 1354,
    "title": "Construct Target Array With Multiple Sums",
    "difficulty": "hard",
    "category": [
      "array",
      "heap"
    ]
  },
  {
    "id": 1355,
    "title": "Activity Participants",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1356,
    "title": "Sort Integers by The Number of 1 Bits",
    "difficulty": "easy",
    "category": [
      "array",
      "bit manipulation",
      "counting",
      "sorting"
    ]
  },
  {
    "id": 1357,
    "title": "Apply Discount Every n Orders",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "hash table"
    ]
  },
  {
    "id": 1358,
    "title": "Number of Substrings Containing All Three Characters",
    "difficulty": "medium",
    "category": [
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 1359,
    "title": "Count All Valid Pickup and Delivery Options",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 1360,
    "title": "Number of Days Between Two Dates",
    "difficulty": "easy",
    "category": [
      "math",
      "string"
    ]
  },
  {
    "id": 1361,
    "title": "Validate Binary Tree Nodes",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph",
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 1362,
    "title": "Closest Divisors",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 1363,
    "title": "Largest Multiple of Three",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 1364,
    "title": "Number of Trusted Contacts of a Customer",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1365,
    "title": "How Many Numbers Are Smaller Than the Current Number",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 1366,
    "title": "Rank Teams by Votes",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 1367,
    "title": "Linked List in Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "linked list",
      "tree"
    ]
  },
  {
    "id": 1368,
    "title": "Minimum Cost to Make at Least One Valid Path in a Grid",
    "difficulty": "hard",
    "category": [
      "array",
      "graph",
      "graph traversal",
      "heap",
      "matrix",
      "shortest path"
    ]
  },
  {
    "id": 1369,
    "title": "Get the Second Most Recent Activity",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 1370,
    "title": "Increasing Decreasing String",
    "difficulty": "easy",
    "category": [
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 1371,
    "title": "Find the Longest Substring Containing Vowels in Even Counts",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "hash table",
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 1372,
    "title": "Longest ZigZag Path in a Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1373,
    "title": "Maximum Sum BST in Binary Tree",
    "difficulty": "hard",
    "category": [
      "binary search tree",
      "binary tree",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1374,
    "title": "Generate a String With Characters That Have Odd Counts",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 1375,
    "title": "Number of Times Binary String Is Prefix-Aligned",
    "difficulty": "medium",
    "category": [
      "array"
    ]
  },
  {
    "id": 1376,
    "title": "Time Needed to Inform All Employees",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1377,
    "title": "Frog Position After T Seconds",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1378,
    "title": "Replace Employee ID With The Unique Identifier",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1379,
    "title": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1380,
    "title": "Lucky Numbers in a Matrix",
    "difficulty": "easy",
    "category": [
      "array",
      "matrix"
    ]
  },
  {
    "id": 1381,
    "title": "Design a Stack With Increment Operation",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "stack"
    ]
  },
  {
    "id": 1382,
    "title": "Balance a Binary Search Tree",
    "difficulty": "medium",
    "category": [
      "binary search tree",
      "binary tree",
      "divide and conquer",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 1383,
    "title": "Maximum Performance of a Team",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 1384,
    "title": "Total Sales Amount by Year",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 1385,
    "title": "Find the Distance Value Between Two Arrays",
    "difficulty": "easy",
    "category": [
      "array",
      "binary search",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 1386,
    "title": "Cinema Seat Allocation",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "greedy",
      "hash table"
    ]
  },
  {
    "id": 1387,
    "title": "Sort Integers by The Power Value",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "memoization",
      "sorting"
    ]
  },
  {
    "id": 1388,
    "title": "Pizza With 3n Slices",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "greedy",
      "heap"
    ]
  },
  {
    "id": 1389,
    "title": "Create Target Array in the Given Order",
    "difficulty": "easy",
    "category": [
      "array",
      "simulation"
    ]
  },
  {
    "id": 1390,
    "title": "Four Divisors",
    "difficulty": "medium",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 1391,
    "title": "Check if There is a Valid Path in a Grid",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "matrix",
      "union find"
    ]
  },
  {
    "id": 1392,
    "title": "Longest Happy Prefix",
    "difficulty": "hard",
    "category": [
      "hash table",
      "rolling hash",
      "string",
      "string matching"
    ]
  },
  {
    "id": 1393,
    "title": "Capital Gain/Loss",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1394,
    "title": "Find Lucky Integer in an Array",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "hash table"
    ]
  },
  {
    "id": 1395,
    "title": "Count Number of Teams",
    "difficulty": "medium",
    "category": [
      "array",
      "binary indexed tree",
      "dynamic programming",
      "segment tree"
    ]
  },
  {
    "id": 1396,
    "title": "Design Underground System",
    "difficulty": "medium",
    "category": [
      "design",
      "hash table",
      "string"
    ]
  },
  {
    "id": 1397,
    "title": "Find All Good Strings",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string",
      "string matching"
    ]
  },
  {
    "id": 1398,
    "title": "Customers Who Bought Products A and B but Not C",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1399,
    "title": "Count Largest Group",
    "difficulty": "easy",
    "category": [
      "hash table",
      "math"
    ]
  },
  {
    "id": 1400,
    "title": "Construct K Palindrome Strings",
    "difficulty": "medium",
    "category": [
      "counting",
      "greedy",
      "hash table",
      "string"
    ]
  },
  {
    "id": 1401,
    "title": "Circle and Rectangle Overlapping",
    "difficulty": "medium",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 1402,
    "title": "Reducing Dishes",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 1403,
    "title": "Minimum Subsequence in Non-Increasing Order",
    "difficulty": "easy",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 1404,
    "title": "Number of Steps to Reduce a Number in Binary Representation to One",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "simulation",
      "string"
    ]
  },
  {
    "id": 1405,
    "title": "Longest Happy String",
    "difficulty": "medium",
    "category": [
      "greedy",
      "heap",
      "string"
    ]
  },
  {
    "id": 1406,
    "title": "Stone Game III",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "game theory",
      "math"
    ]
  },
  {
    "id": 1407,
    "title": "Top Travellers",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1408,
    "title": "String Matching in an Array",
    "difficulty": "easy",
    "category": [
      "array",
      "string",
      "string matching"
    ]
  },
  {
    "id": 1409,
    "title": "Queries on a Permutation With Key",
    "difficulty": "medium",
    "category": [
      "array",
      "binary indexed tree",
      "simulation"
    ]
  },
  {
    "id": 1410,
    "title": "HTML Entity Parser",
    "difficulty": "medium",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 1411,
    "title": "Number of Ways to Paint N × 3 Grid",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 1412,
    "title": "Find the Quiet Students in All Exams",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 1413,
    "title": "Minimum Value to Get Positive Step by Step Sum",
    "difficulty": "easy",
    "category": [
      "array",
      "prefix sum"
    ]
  },
  {
    "id": 1414,
    "title": "Find the Minimum Number of Fibonacci Numbers Whose Sum Is K",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 1415,
    "title": "The k-th Lexicographical String of All Happy Strings of Length n",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "string"
    ]
  },
  {
    "id": 1416,
    "title": "Restore The Array",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 1417,
    "title": "Reformat The String",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 1418,
    "title": "Display Table of Food Orders in a Restaurant",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "ordered set",
      "sorting",
      "string"
    ]
  },
  {
    "id": 1419,
    "title": "Minimum Number of Frogs Croaking",
    "difficulty": "medium",
    "category": [
      "counting",
      "string"
    ]
  },
  {
    "id": 1420,
    "title": "Build Array Where You Can Find The Maximum Exactly K Comparisons",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "prefix sum"
    ]
  },
  {
    "id": 1421,
    "title": "NPV Queries",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1422,
    "title": "Maximum Score After Splitting a String",
    "difficulty": "easy",
    "category": [
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 1423,
    "title": "Maximum Points You Can Obtain from Cards",
    "difficulty": "medium",
    "category": [
      "array",
      "prefix sum",
      "sliding window"
    ]
  },
  {
    "id": 1424,
    "title": "Diagonal Traverse II",
    "difficulty": "medium",
    "category": [
      "array",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 1425,
    "title": "Constrained Subsequence Sum",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "heap",
      "monotonic queue",
      "queue",
      "sliding window"
    ]
  },
  {
    "id": 1426,
    "title": "Counting Elements",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 1427,
    "title": "Perform String Shifts",
    "difficulty": "easy",
    "category": [
      "array",
      "math",
      "string"
    ]
  },
  {
    "id": 1428,
    "title": "Leftmost Column with at Least a One",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "interactive",
      "matrix"
    ]
  },
  {
    "id": 1429,
    "title": "First Unique Number",
    "difficulty": "medium",
    "category": [
      "array",
      "data stream",
      "design",
      "hash table",
      "queue"
    ]
  },
  {
    "id": 1430,
    "title": "Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1431,
    "title": "Kids With the Greatest Number of Candies",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 1432,
    "title": "Max Difference You Can Get From Changing an Integer",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 1433,
    "title": "Check If a String Can Break Another String",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting",
      "string"
    ]
  },
  {
    "id": 1434,
    "title": "Number of Ways to Wear Different Hats to Each Other",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 1435,
    "title": "Create a Session Bar Chart",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1436,
    "title": "Destination City",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "string"
    ]
  },
  {
    "id": 1437,
    "title": "Check If All 1's Are at Least Length K Places Away",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 1438,
    "title": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
    "difficulty": "medium",
    "category": [
      "array",
      "heap",
      "monotonic queue",
      "ordered set",
      "queue",
      "sliding window"
    ]
  },
  {
    "id": 1439,
    "title": "Find the Kth Smallest Sum of a Matrix With Sorted Rows",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "heap",
      "matrix"
    ]
  },
  {
    "id": 1440,
    "title": "Evaluate Boolean Expression",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1441,
    "title": "Build an Array With Stack Operations",
    "difficulty": "medium",
    "category": [
      "array",
      "simulation",
      "stack"
    ]
  },
  {
    "id": 1442,
    "title": "Count Triplets That Can Form Two Arrays of Equal XOR",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "hash table",
      "math",
      "prefix sum"
    ]
  },
  {
    "id": 1443,
    "title": "Minimum Time to Collect All Apples in a Tree",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 1444,
    "title": "Number of Ways of Cutting a Pizza",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "matrix",
      "memoization",
      "prefix sum"
    ]
  },
  {
    "id": 1445,
    "title": "Apples & Oranges",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1446,
    "title": "Consecutive Characters",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 1447,
    "title": "Simplified Fractions",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory",
      "string"
    ]
  },
  {
    "id": 1448,
    "title": "Count Good Nodes in Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1449,
    "title": "Form Largest Integer With Digits That Add up to Target",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 1450,
    "title": "Number of Students Doing Homework at a Given Time",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 1451,
    "title": "Rearrange Words in a Sentence",
    "difficulty": "medium",
    "category": [
      "sorting",
      "string"
    ]
  },
  {
    "id": 1452,
    "title": "People Whose List of Favorite Companies Is Not a Subset of Another List",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "string"
    ]
  },
  {
    "id": 1453,
    "title": "Maximum Number of Darts Inside of a Circular Dartboard",
    "difficulty": "hard",
    "category": [
      "array",
      "geometry",
      "math"
    ]
  },
  {
    "id": 1454,
    "title": "Active Users",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1455,
    "title": "Check If a Word Occurs As a Prefix of Any Word in a Sentence",
    "difficulty": "easy",
    "category": [
      "string",
      "string matching",
      "two pointers"
    ]
  },
  {
    "id": 1456,
    "title": "Maximum Number of Vowels in a Substring of Given Length",
    "difficulty": "medium",
    "category": [
      "sliding window",
      "string"
    ]
  },
  {
    "id": 1457,
    "title": "Pseudo-Palindromic Paths in a Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "bit manipulation",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1458,
    "title": "Max Dot Product of Two Subsequences",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 1459,
    "title": "Rectangles Area",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1460,
    "title": "Make Two Arrays Equal by Reversing Subarrays",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 1461,
    "title": "Check If a String Contains All Binary Codes of Size K",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "hash table",
      "rolling hash",
      "string"
    ]
  },
  {
    "id": 1462,
    "title": "Course Schedule IV",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "topological sort"
    ]
  },
  {
    "id": 1463,
    "title": "Cherry Pickup II",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 1464,
    "title": "Maximum Product of Two Elements in an Array",
    "difficulty": "easy",
    "category": [
      "array",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 1465,
    "title": "Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 1466,
    "title": "Reorder Routes to Make All Paths Lead to the City Zero",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 1467,
    "title": "Probability of a Two Boxes Having The Same Number of Distinct Balls",
    "difficulty": "hard",
    "category": [
      "array",
      "backtracking",
      "combinatorics",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 1468,
    "title": "Calculate Salaries",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1469,
    "title": "Find All The Lonely Nodes",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1470,
    "title": "Shuffle the Array",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 1471,
    "title": "The k Strongest Values in an Array",
    "difficulty": "medium",
    "category": [
      "array",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 1472,
    "title": "Design Browser History",
    "difficulty": "medium",
    "category": [
      "array",
      "data stream",
      "design",
      "linked list",
      "stack"
    ]
  },
  {
    "id": 1473,
    "title": "Paint House III",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 1474,
    "title": "Delete N Nodes After M Nodes of a Linked List",
    "difficulty": "easy",
    "category": [
      "linked list"
    ]
  },
  {
    "id": 1475,
    "title": "Final Prices With a Special Discount in a Shop",
    "difficulty": "easy",
    "category": [
      "array",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 1476,
    "title": "Subrectangle Queries",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "matrix"
    ]
  },
  {
    "id": 1477,
    "title": "Find Two Non-overlapping Sub-arrays Each With Target Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "dynamic programming",
      "hash table",
      "sliding window"
    ]
  },
  {
    "id": 1478,
    "title": "Allocate Mailboxes",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "math",
      "sorting"
    ]
  },
  {
    "id": 1479,
    "title": "Sales by Day of the Week",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 1480,
    "title": "Running Sum of 1d Array",
    "difficulty": "easy",
    "category": [
      "array",
      "prefix sum"
    ]
  },
  {
    "id": 1481,
    "title": "Least Number of Unique Integers after K Removals",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "greedy",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 1482,
    "title": "Minimum Number of Days to Make m Bouquets",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 1483,
    "title": "Kth Ancestor of a Tree Node",
    "difficulty": "hard",
    "category": [
      "binary search",
      "design",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1484,
    "title": "Group Sold Products By The Date",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1485,
    "title": "Clone Binary Tree With Random Pointer",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 1486,
    "title": "XOR Operation in an Array",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "math"
    ]
  },
  {
    "id": 1487,
    "title": "Making File Names Unique",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "string"
    ]
  },
  {
    "id": 1488,
    "title": "Avoid Flood in The City",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "greedy",
      "hash table",
      "heap"
    ]
  },
  {
    "id": 1489,
    "title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
    "difficulty": "hard",
    "category": [
      "graph",
      "minimum spanning tree",
      "sorting",
      "strongly connected component",
      "union find"
    ]
  },
  {
    "id": 1490,
    "title": "Clone N-ary Tree",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 1491,
    "title": "Average Salary Excluding the Minimum and Maximum Salary",
    "difficulty": "easy",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 1492,
    "title": "The kth Factor of n",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 1493,
    "title": "Longest Subarray of 1's After Deleting One Element",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "sliding window"
    ]
  },
  {
    "id": 1494,
    "title": "Parallel Courses II",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "graph"
    ]
  },
  {
    "id": 1495,
    "title": "Friendly Movies Streamed Last Month",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1496,
    "title": "Path Crossing",
    "difficulty": "easy",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 1497,
    "title": "Check If Array Pairs Are Divisible by k",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "hash table"
    ]
  },
  {
    "id": 1498,
    "title": "Number of Subsequences That Satisfy the Given Sum Condition",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 1499,
    "title": "Max Value of Equation",
    "difficulty": "hard",
    "category": [
      "array",
      "heap",
      "monotonic queue",
      "queue",
      "sliding window"
    ]
  },
  {
    "id": 1500,
    "title": "Design a File Sharing System",
    "difficulty": "medium",
    "category": [
      "data stream",
      "design",
      "hash table",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 1501,
    "title": "Countries You Can Safely Invest In",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1502,
    "title": "Can Make Arithmetic Progression From Sequence",
    "difficulty": "easy",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 1503,
    "title": "Last Moment Before All Ants Fall Out of a Plank",
    "difficulty": "medium",
    "category": [
      "array",
      "brainteaser",
      "simulation"
    ]
  },
  {
    "id": 1504,
    "title": "Count Submatrices With All Ones",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "matrix",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 1505,
    "title": "Minimum Possible Integer After at Most K Adjacent Swaps On Digits",
    "difficulty": "hard",
    "category": [
      "binary indexed tree",
      "greedy",
      "segment tree",
      "string"
    ]
  },
  {
    "id": 1506,
    "title": "Find Root of N-Ary Tree",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 1507,
    "title": "Reformat Date",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 1508,
    "title": "Range Sum of Sorted Subarray Sums",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "prefix sum",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 1509,
    "title": "Minimum Difference Between Largest and Smallest Value in Three Moves",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 1510,
    "title": "Stone Game IV",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory",
      "math"
    ]
  },
  {
    "id": 1511,
    "title": "Customer Order Frequency",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1512,
    "title": "Number of Good Pairs",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "hash table",
      "math"
    ]
  },
  {
    "id": 1513,
    "title": "Number of Substrings With Only 1s",
    "difficulty": "medium",
    "category": [
      "math",
      "string"
    ]
  },
  {
    "id": 1514,
    "title": "Path with Maximum Probability",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "heap",
      "shortest path"
    ]
  },
  {
    "id": 1515,
    "title": "Best Position for a Service Centre",
    "difficulty": "hard",
    "category": [
      "array",
      "geometry",
      "math",
      "randomized"
    ]
  },
  {
    "id": 1516,
    "title": "Move Sub-Tree of N-Ary Tree",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1517,
    "title": "Find Users With Valid E-Mails",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1518,
    "title": "Water Bottles",
    "difficulty": "easy",
    "category": [
      "math",
      "simulation"
    ]
  },
  {
    "id": 1519,
    "title": "Number of Nodes in the Sub-Tree With the Same Label",
    "difficulty": "medium",
    "category": [
      "counting",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 1520,
    "title": "Maximum Number of Non-Overlapping Substrings",
    "difficulty": "hard",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 1521,
    "title": "Find a Value of a Mysterious Function Closest to Target",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "bit manipulation",
      "segment tree"
    ]
  },
  {
    "id": 1522,
    "title": "Diameter of N-Ary Tree",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1523,
    "title": "Count Odd Numbers in an Interval Range",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 1524,
    "title": "Number of Sub-arrays With Odd Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "math",
      "prefix sum"
    ]
  },
  {
    "id": 1525,
    "title": "Number of Good Ways to Split a String",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "hash table",
      "string"
    ]
  },
  {
    "id": 1526,
    "title": "Minimum Number of Increments on Subarrays to Form a Target Array",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "greedy",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 1527,
    "title": "Patients With a Condition",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1528,
    "title": "Shuffle String",
    "difficulty": "easy",
    "category": [
      "array",
      "string"
    ]
  },
  {
    "id": 1529,
    "title": "Minimum Suffix Flips",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 1530,
    "title": "Number of Good Leaf Nodes Pairs",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1531,
    "title": "String Compression II",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 1532,
    "title": "The Most Recent Three Orders",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1533,
    "title": "Find the Index of the Large Integer",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "interactive"
    ]
  },
  {
    "id": 1534,
    "title": "Count Good Triplets",
    "difficulty": "easy",
    "category": [
      "array",
      "enumeration"
    ]
  },
  {
    "id": 1535,
    "title": "Find the Winner of an Array Game",
    "difficulty": "medium",
    "category": [
      "array",
      "simulation"
    ]
  },
  {
    "id": 1536,
    "title": "Minimum Swaps to Arrange a Binary Grid",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "matrix"
    ]
  },
  {
    "id": 1537,
    "title": "Get the Maximum Score",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 1538,
    "title": "Guess the Majority in a Hidden Array",
    "difficulty": "medium",
    "category": [
      "array",
      "interactive",
      "math"
    ]
  },
  {
    "id": 1539,
    "title": "Kth Missing Positive Number",
    "difficulty": "easy",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 1540,
    "title": "Can Convert String in K Moves",
    "difficulty": "medium",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 1541,
    "title": "Minimum Insertions to Balance a Parentheses String",
    "difficulty": "medium",
    "category": [
      "greedy",
      "stack",
      "string"
    ]
  },
  {
    "id": 1542,
    "title": "Find Longest Awesome Substring",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "hash table",
      "string"
    ]
  },
  {
    "id": 1543,
    "title": "Fix Product Name Format",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1544,
    "title": "Make The String Great",
    "difficulty": "easy",
    "category": [
      "stack",
      "string"
    ]
  },
  {
    "id": 1545,
    "title": "Find Kth Bit in Nth Binary String",
    "difficulty": "medium",
    "category": [
      "recursion",
      "simulation",
      "string"
    ]
  },
  {
    "id": 1546,
    "title": "Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "hash table",
      "prefix sum"
    ]
  },
  {
    "id": 1547,
    "title": "Minimum Cost to Cut a Stick",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 1548,
    "title": "The Most Similar Path in a Graph",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph"
    ]
  },
  {
    "id": 1549,
    "title": "The Most Recent Orders for Each Product",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1550,
    "title": "Three Consecutive Odds",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 1551,
    "title": "Minimum Operations to Make Array Equal",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 1552,
    "title": "Magnetic Force Between Two Balls",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "sorting"
    ]
  },
  {
    "id": 1553,
    "title": "Minimum Number of Days to Eat N Oranges",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "memoization"
    ]
  },
  {
    "id": 1554,
    "title": "Strings Differ by One Character",
    "difficulty": "medium",
    "category": [
      "hash table",
      "rolling hash",
      "string"
    ]
  },
  {
    "id": 1555,
    "title": "Bank Account Summary",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1556,
    "title": "Thousand Separator",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 1557,
    "title": "Minimum Number of Vertices to Reach All Nodes",
    "difficulty": "medium",
    "category": [
      "graph"
    ]
  },
  {
    "id": 1558,
    "title": "Minimum Numbers of Function Calls to Make Target Array",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "greedy"
    ]
  },
  {
    "id": 1559,
    "title": "Detect Cycles in 2D Grid",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "matrix",
      "union find"
    ]
  },
  {
    "id": 1560,
    "title": "Most Visited Sector in  a Circular Track",
    "difficulty": "easy",
    "category": [
      "array",
      "simulation"
    ]
  },
  {
    "id": 1561,
    "title": "Maximum Number of Coins You Can Get",
    "difficulty": "medium",
    "category": [
      "array",
      "game theory",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 1562,
    "title": "Find Latest Group of Size M",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "hash table",
      "simulation"
    ]
  },
  {
    "id": 1563,
    "title": "Stone Game V",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "game theory",
      "math"
    ]
  },
  {
    "id": 1564,
    "title": "Put Boxes Into the Warehouse I",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 1565,
    "title": "Unique Orders and Customers Per Month",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1566,
    "title": "Detect Pattern of Length M Repeated K or More Times",
    "difficulty": "easy",
    "category": [
      "array",
      "enumeration"
    ]
  },
  {
    "id": 1567,
    "title": "Maximum Length of Subarray With Positive Product",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 1568,
    "title": "Minimum Number of Days to Disconnect Island",
    "difficulty": "hard",
    "category": [
      "array",
      "graph traversal",
      "matrix",
      "strongly connected component"
    ]
  },
  {
    "id": 1569,
    "title": "Number of Ways to Reorder Array to Get Same BST",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search tree",
      "binary tree",
      "combinatorics",
      "divide and conquer",
      "dynamic programming",
      "math",
      "memoization",
      "tree",
      "union find"
    ]
  },
  {
    "id": 1570,
    "title": "Dot Product of Two Sparse Vectors",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "hash table",
      "two pointers"
    ]
  },
  {
    "id": 1571,
    "title": "Warehouse Manager",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1572,
    "title": "Matrix Diagonal Sum",
    "difficulty": "easy",
    "category": [
      "array",
      "matrix"
    ]
  },
  {
    "id": 1573,
    "title": "Number of Ways to Split a String",
    "difficulty": "medium",
    "category": [
      "math",
      "string"
    ]
  },
  {
    "id": 1574,
    "title": "Shortest Subarray to be Removed to Make Array Sorted",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "monotonic stack",
      "stack",
      "two pointers"
    ]
  },
  {
    "id": 1575,
    "title": "Count All Possible Routes",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "memoization"
    ]
  },
  {
    "id": 1576,
    "title": "Replace All ?'s to Avoid Consecutive Repeating Characters",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 1577,
    "title": "Number of Ways Where Square of Number Is Equal to Product of Two Numbers",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 1578,
    "title": "Minimum Time to Make Rope Colorful",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "greedy",
      "string"
    ]
  },
  {
    "id": 1579,
    "title": "Remove Max Number of Edges to Keep Graph Fully Traversable",
    "difficulty": "hard",
    "category": [
      "graph",
      "union find"
    ]
  },
  {
    "id": 1580,
    "title": "Put Boxes Into the Warehouse II",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 1581,
    "title": "Customer Who Visited but Did Not Make Any Transactions",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1582,
    "title": "Special Positions in a Binary Matrix",
    "difficulty": "easy",
    "category": [
      "array",
      "matrix"
    ]
  },
  {
    "id": 1583,
    "title": "Count Unhappy Friends",
    "difficulty": "medium",
    "category": [
      "array",
      "simulation"
    ]
  },
  {
    "id": 1584,
    "title": "Min Cost to Connect All Points",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "minimum spanning tree",
      "union find"
    ]
  },
  {
    "id": 1585,
    "title": "Check If String Is Transformable With Substring Sort Operations",
    "difficulty": "hard",
    "category": [
      "greedy",
      "sorting",
      "string"
    ]
  },
  {
    "id": 1586,
    "title": "Binary Search Tree Iterator II",
    "difficulty": "medium",
    "category": [
      "binary search tree",
      "binary tree",
      "design",
      "iterator",
      "stack",
      "tree"
    ]
  },
  {
    "id": 1587,
    "title": "Bank Account Summary II",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1588,
    "title": "Sum of All Odd Length Subarrays",
    "difficulty": "easy",
    "category": [
      "array",
      "math",
      "prefix sum"
    ]
  },
  {
    "id": 1589,
    "title": "Maximum Sum Obtained of Any Permutation",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "prefix sum",
      "sorting"
    ]
  },
  {
    "id": 1590,
    "title": "Make Sum Divisible by P",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "prefix sum"
    ]
  },
  {
    "id": 1591,
    "title": "Strange Printer II",
    "difficulty": "hard",
    "category": [
      "array",
      "graph",
      "matrix",
      "topological sort"
    ]
  },
  {
    "id": 1592,
    "title": "Rearrange Spaces Between Words",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 1593,
    "title": "Split a String Into the Max Number of Unique Substrings",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "hash table",
      "string"
    ]
  },
  {
    "id": 1594,
    "title": "Maximum Non Negative Product in a Matrix",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 1595,
    "title": "Minimum Cost to Connect Two Groups of Points",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 1596,
    "title": "The Most Frequently Ordered Products for Each Customer",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1597,
    "title": "Build Binary Expression Tree From Infix Expression",
    "difficulty": "hard",
    "category": [
      "binary tree",
      "stack",
      "string",
      "tree"
    ]
  },
  {
    "id": 1598,
    "title": "Crawler Log Folder",
    "difficulty": "easy",
    "category": [
      "array",
      "stack",
      "string"
    ]
  },
  {
    "id": 1599,
    "title": "Maximum Profit of Operating a Centennial Wheel",
    "difficulty": "medium",
    "category": [
      "array",
      "simulation"
    ]
  },
  {
    "id": 1600,
    "title": "Throne Inheritance",
    "difficulty": "medium",
    "category": [
      "design",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 1601,
    "title": "Maximum Number of Achievable Transfer Requests",
    "difficulty": "hard",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "enumeration"
    ]
  },
  {
    "id": 1602,
    "title": "Find Nearest Right Node in Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1603,
    "title": "Design Parking System",
    "difficulty": "easy",
    "category": [
      "counting",
      "design",
      "simulation"
    ]
  },
  {
    "id": 1604,
    "title": "Alert Using Same Key-Card Three or More Times in a One Hour Period",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 1605,
    "title": "Find Valid Matrix Given Row and Column Sums",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "matrix"
    ]
  },
  {
    "id": 1606,
    "title": "Find Servers That Handled Most Number of Requests",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "heap",
      "ordered set"
    ]
  },
  {
    "id": 1607,
    "title": "Sellers With No Sales",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1608,
    "title": "Special Array With X Elements Greater Than or Equal X",
    "difficulty": "easy",
    "category": [
      "array",
      "binary search",
      "sorting"
    ]
  },
  {
    "id": 1609,
    "title": "Even Odd Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1610,
    "title": "Maximum Number of Visible Points",
    "difficulty": "hard",
    "category": [
      "array",
      "geometry",
      "math",
      "sliding window",
      "sorting"
    ]
  },
  {
    "id": 1611,
    "title": "Minimum One Bit Operations to Make Integers Zero",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "memoization"
    ]
  },
  {
    "id": 1612,
    "title": "Check If Two Expression Trees are Equivalent",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "counting",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 1613,
    "title": "Find the Missing IDs",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1614,
    "title": "Maximum Nesting Depth of the Parentheses",
    "difficulty": "easy",
    "category": [
      "stack",
      "string"
    ]
  },
  {
    "id": 1615,
    "title": "Maximal Network Rank",
    "difficulty": "medium",
    "category": [
      "graph"
    ]
  },
  {
    "id": 1616,
    "title": "Split Two Strings to Make Palindrome",
    "difficulty": "medium",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 1617,
    "title": "Count Subtrees With Max Distance Between Cities",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "enumeration",
      "tree"
    ]
  },
  {
    "id": 1618,
    "title": "Maximum Font to Fit a Sentence in a Screen",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "interactive",
      "string"
    ]
  },
  {
    "id": 1619,
    "title": "Mean of Array After Removing Some Elements",
    "difficulty": "easy",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 1620,
    "title": "Coordinate With Maximum Network Quality",
    "difficulty": "medium",
    "category": [
      "array",
      "enumeration"
    ]
  },
  {
    "id": 1621,
    "title": "Number of Sets of K Non-Overlapping Line Segments",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 1622,
    "title": "Fancy Sequence",
    "difficulty": "hard",
    "category": [
      "design",
      "math",
      "segment tree"
    ]
  },
  {
    "id": 1623,
    "title": "All Valid Triplets That Can Represent a Country",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1624,
    "title": "Largest Substring Between Two Equal Characters",
    "difficulty": "easy",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 1625,
    "title": "Lexicographically Smallest String After Applying Operations",
    "difficulty": "medium",
    "category": [
      "enumeration",
      "graph traversal",
      "string"
    ]
  },
  {
    "id": 1626,
    "title": "Best Team With No Conflicts",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 1627,
    "title": "Graph Connectivity With Threshold",
    "difficulty": "hard",
    "category": [
      "array",
      "math",
      "number theory",
      "union find"
    ]
  },
  {
    "id": 1628,
    "title": "Design an Expression Tree With Evaluate Function",
    "difficulty": "medium",
    "category": [
      "array",
      "binary tree",
      "design",
      "math",
      "stack",
      "tree"
    ]
  },
  {
    "id": 1629,
    "title": "Slowest Key",
    "difficulty": "easy",
    "category": [
      "array",
      "string"
    ]
  },
  {
    "id": 1630,
    "title": "Arithmetic Subarrays",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 1631,
    "title": "Path With Minimum Effort",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "graph traversal",
      "heap",
      "matrix",
      "union find"
    ]
  },
  {
    "id": 1632,
    "title": "Rank Transform of a Matrix",
    "difficulty": "hard",
    "category": [
      "array",
      "graph",
      "matrix",
      "sorting",
      "topological sort",
      "union find"
    ]
  },
  {
    "id": 1633,
    "title": "Percentage of Users Attended a Contest",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1634,
    "title": "Add Two Polynomials Represented as Linked Lists",
    "difficulty": "medium",
    "category": [
      "linked list",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 1635,
    "title": "Hopper Company Queries I",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 1636,
    "title": "Sort Array by Increasing Frequency",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 1637,
    "title": "Widest Vertical Area Between Two Points Containing No Points",
    "difficulty": "easy",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 1638,
    "title": "Count Substrings That Differ by One Character",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "enumeration",
      "hash table",
      "string"
    ]
  },
  {
    "id": 1639,
    "title": "Number of Ways to Form a Target String Given a Dictionary",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 1640,
    "title": "Check Array Formation Through Concatenation",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 1641,
    "title": "Count Sorted Vowel Strings",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 1642,
    "title": "Furthest Building You Can Reach",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "heap"
    ]
  },
  {
    "id": 1643,
    "title": "Kth Smallest Instructions",
    "difficulty": "hard",
    "category": [
      "array",
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 1644,
    "title": "Lowest Common Ancestor of a Binary Tree II",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1645,
    "title": "Hopper Company Queries II",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 1646,
    "title": "Get Maximum in Generated Array",
    "difficulty": "easy",
    "category": [
      "array",
      "simulation"
    ]
  },
  {
    "id": 1647,
    "title": "Minimum Deletions to Make Character Frequencies Unique",
    "difficulty": "medium",
    "category": [
      "greedy",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 1648,
    "title": "Sell Diminishing-Valued Colored Balls",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "greedy",
      "heap",
      "math",
      "sorting"
    ]
  },
  {
    "id": 1649,
    "title": "Create Sorted Array through Instructions",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree",
      "binary search",
      "divide and conquer",
      "ordered set",
      "segment tree",
      "sorting"
    ]
  },
  {
    "id": 1650,
    "title": "Lowest Common Ancestor of a Binary Tree III",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "hash table",
      "tree",
      "two pointers"
    ]
  },
  {
    "id": 1651,
    "title": "Hopper Company Queries III",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 1652,
    "title": "Defuse the Bomb",
    "difficulty": "easy",
    "category": [
      "array",
      "sliding window"
    ]
  },
  {
    "id": 1653,
    "title": "Minimum Deletions to Make String Balanced",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "stack",
      "string"
    ]
  },
  {
    "id": 1654,
    "title": "Minimum Jumps to Reach Home",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "graph traversal"
    ]
  },
  {
    "id": 1655,
    "title": "Distribute Repeating Integers",
    "difficulty": "hard",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 1656,
    "title": "Design an Ordered Stream",
    "difficulty": "easy",
    "category": [
      "array",
      "data stream",
      "design",
      "hash table"
    ]
  },
  {
    "id": 1657,
    "title": "Determine if Two Strings Are Close",
    "difficulty": "medium",
    "category": [
      "counting",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 1658,
    "title": "Minimum Operations to Reduce X to Zero",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "hash table",
      "prefix sum",
      "sliding window"
    ]
  },
  {
    "id": 1659,
    "title": "Maximize Grid Happiness",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "memoization"
    ]
  },
  {
    "id": 1660,
    "title": "Correct a Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 1661,
    "title": "Average Time of Process per Machine",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1662,
    "title": "Check If Two String Arrays are Equivalent",
    "difficulty": "easy",
    "category": [
      "array",
      "string"
    ]
  },
  {
    "id": 1663,
    "title": "Smallest String With A Given Numeric Value",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 1664,
    "title": "Ways to Make a Fair Array",
    "difficulty": "medium",
    "category": [
      "array",
      "prefix sum"
    ]
  },
  {
    "id": 1665,
    "title": "Minimum Initial Energy to Finish Tasks",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 1666,
    "title": "Change the Root of a Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1667,
    "title": "Fix Names in a Table",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1668,
    "title": "Maximum Repeating Substring",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "string",
      "string matching"
    ]
  },
  {
    "id": 1669,
    "title": "Merge In Between Linked Lists",
    "difficulty": "medium",
    "category": [
      "linked list"
    ]
  },
  {
    "id": 1670,
    "title": "Design Front Middle Back Queue",
    "difficulty": "medium",
    "category": [
      "array",
      "data stream",
      "design",
      "linked list",
      "queue"
    ]
  },
  {
    "id": 1671,
    "title": "Minimum Number of Removals to Make Mountain Array",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 1672,
    "title": "Richest Customer Wealth",
    "difficulty": "easy",
    "category": [
      "array",
      "matrix"
    ]
  },
  {
    "id": 1673,
    "title": "Find the Most Competitive Subsequence",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 1674,
    "title": "Minimum Moves to Make Array Complementary",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "prefix sum"
    ]
  },
  {
    "id": 1675,
    "title": "Minimize Deviation in Array",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "heap",
      "ordered set"
    ]
  },
  {
    "id": 1676,
    "title": "Lowest Common Ancestor of a Binary Tree IV",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 1677,
    "title": "Product's Worth Over Invoices",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1678,
    "title": "Goal Parser Interpretation",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 1679,
    "title": "Max Number of K-Sum Pairs",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 1680,
    "title": "Concatenation of Consecutive Binary Numbers",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "math",
      "simulation"
    ]
  },
  {
    "id": 1681,
    "title": "Minimum Incompatibility",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 1682,
    "title": "Longest Palindromic Subsequence II",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 1683,
    "title": "Invalid Tweets",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1684,
    "title": "Count the Number of Consistent Strings",
    "difficulty": "easy",
    "category": [
      "array",
      "bit manipulation",
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 1685,
    "title": "Sum of Absolute Differences in a Sorted Array",
    "difficulty": "medium",
    "category": [
      "array",
      "math",
      "prefix sum"
    ]
  },
  {
    "id": 1686,
    "title": "Stone Game VI",
    "difficulty": "medium",
    "category": [
      "array",
      "game theory",
      "greedy",
      "heap",
      "math",
      "sorting"
    ]
  },
  {
    "id": 1687,
    "title": "Delivering Boxes from Storage to Ports",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "heap",
      "monotonic queue",
      "prefix sum",
      "queue",
      "segment tree"
    ]
  },
  {
    "id": 1688,
    "title": "Count of Matches in Tournament",
    "difficulty": "easy",
    "category": [
      "math",
      "simulation"
    ]
  },
  {
    "id": 1689,
    "title": "Partitioning Into Minimum Number Of Deci-Binary Numbers",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 1690,
    "title": "Stone Game VII",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "game theory",
      "math"
    ]
  },
  {
    "id": 1691,
    "title": "Maximum Height by Stacking Cuboids ",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 1692,
    "title": "Count Ways to Distribute Candies",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 1693,
    "title": "Daily Leads and Partners",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1694,
    "title": "Reformat Phone Number",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 1695,
    "title": "Maximum Erasure Value",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sliding window"
    ]
  },
  {
    "id": 1696,
    "title": "Jump Game VI",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "heap",
      "monotonic queue",
      "queue"
    ]
  },
  {
    "id": 1697,
    "title": "Checking Existence of Edge Length Limited Paths",
    "difficulty": "hard",
    "category": [
      "array",
      "graph",
      "sorting",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 1698,
    "title": "Number of Distinct Substrings in a String",
    "difficulty": "medium",
    "category": [
      "hash table",
      "rolling hash",
      "string",
      "string suffix structures",
      "trie"
    ]
  },
  {
    "id": 1699,
    "title": "Number of Calls Between Two Persons",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1700,
    "title": "Number of Students Unable to Eat Lunch",
    "difficulty": "easy",
    "category": [
      "array",
      "queue",
      "simulation",
      "stack"
    ]
  },
  {
    "id": 1701,
    "title": "Average Waiting Time",
    "difficulty": "medium",
    "category": [
      "array",
      "simulation"
    ]
  },
  {
    "id": 1702,
    "title": "Maximum Binary String After Change",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 1703,
    "title": "Minimum Adjacent Swaps for K Consecutive Ones",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "prefix sum",
      "sliding window"
    ]
  },
  {
    "id": 1704,
    "title": "Determine if String Halves Are Alike",
    "difficulty": "easy",
    "category": [
      "counting",
      "string"
    ]
  },
  {
    "id": 1705,
    "title": "Maximum Number of Eaten Apples",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "heap"
    ]
  },
  {
    "id": 1706,
    "title": "Where Will the Ball Fall",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "simulation"
    ]
  },
  {
    "id": 1707,
    "title": "Maximum XOR With an Element From Array",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "trie"
    ]
  },
  {
    "id": 1708,
    "title": "Largest Subarray Length K",
    "difficulty": "easy",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 1709,
    "title": "Biggest Window Between Visits",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1710,
    "title": "Maximum Units on a Truck",
    "difficulty": "easy",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 1711,
    "title": "Count Good Meals",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 1712,
    "title": "Ways to Split Array Into Three Subarrays",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "prefix sum",
      "two pointers"
    ]
  },
  {
    "id": 1713,
    "title": "Minimum Operations to Make a Subsequence",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "greedy",
      "hash table"
    ]
  },
  {
    "id": 1714,
    "title": "Sum Of Special Evenly-Spaced Elements In Array",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 1715,
    "title": "Count Apples and Oranges",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1716,
    "title": "Calculate Money in Leetcode Bank",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 1717,
    "title": "Maximum Score From Removing Substrings",
    "difficulty": "medium",
    "category": [
      "greedy",
      "stack",
      "string"
    ]
  },
  {
    "id": 1718,
    "title": "Construct the Lexicographically Largest Valid Sequence",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking"
    ]
  },
  {
    "id": 1719,
    "title": "Number Of Ways To Reconstruct A Tree",
    "difficulty": "hard",
    "category": [
      "graph",
      "tree"
    ]
  },
  {
    "id": 1720,
    "title": "Decode XORed Array",
    "difficulty": "easy",
    "category": [
      "array",
      "bit manipulation"
    ]
  },
  {
    "id": 1721,
    "title": "Swapping Nodes in a Linked List",
    "difficulty": "medium",
    "category": [
      "linked list",
      "two pointers"
    ]
  },
  {
    "id": 1722,
    "title": "Minimize Hamming Distance After Swap Operations",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 1723,
    "title": "Find Minimum Time to Finish All Jobs",
    "difficulty": "hard",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 1724,
    "title": "Checking Existence of Edge Length Limited Paths II",
    "difficulty": "hard",
    "category": [
      "graph",
      "minimum spanning tree",
      "union find"
    ]
  },
  {
    "id": 1725,
    "title": "Number Of Rectangles That Can Form The Largest Square",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 1726,
    "title": "Tuple with Same Product",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "hash table"
    ]
  },
  {
    "id": 1727,
    "title": "Largest Submatrix With Rearrangements",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "matrix",
      "sorting"
    ]
  },
  {
    "id": 1728,
    "title": "Cat and Mouse II",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "game theory",
      "graph",
      "math",
      "matrix",
      "memoization",
      "topological sort"
    ]
  },
  {
    "id": 1729,
    "title": "Find Followers Count",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1730,
    "title": "Shortest Path to Get Food",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 1731,
    "title": "The Number of Employees Which Report to Each Employee",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1732,
    "title": "Find the Highest Altitude",
    "difficulty": "easy",
    "category": [
      "array",
      "prefix sum"
    ]
  },
  {
    "id": 1733,
    "title": "Minimum Number of People to Teach",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "hash table"
    ]
  },
  {
    "id": 1734,
    "title": "Decode XORed Permutation",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation"
    ]
  },
  {
    "id": 1735,
    "title": "Count Ways to Make Array With Product",
    "difficulty": "hard",
    "category": [
      "array",
      "combinatorics",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 1736,
    "title": "Latest Time by Replacing Hidden Digits",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 1737,
    "title": "Change Minimum Characters to Satisfy One of Three Conditions",
    "difficulty": "medium",
    "category": [
      "counting",
      "hash table",
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 1738,
    "title": "Find Kth Largest XOR Coordinate Value",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "divide and conquer",
      "heap",
      "matrix",
      "prefix sum",
      "quickselect",
      "sorting"
    ]
  },
  {
    "id": 1739,
    "title": "Building Boxes",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "math"
    ]
  },
  {
    "id": 1740,
    "title": "Find Distance in a Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 1741,
    "title": "Find Total Time Spent by Each Employee",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1742,
    "title": "Maximum Number of Balls in a Box",
    "difficulty": "easy",
    "category": [
      "counting",
      "hash table",
      "math"
    ]
  },
  {
    "id": 1743,
    "title": "Restore the Array From Adjacent Pairs",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "hash table"
    ]
  },
  {
    "id": 1744,
    "title": "Can You Eat Your Favorite Candy on Your Favorite Day?",
    "difficulty": "medium",
    "category": [
      "array",
      "prefix sum"
    ]
  },
  {
    "id": 1745,
    "title": "Palindrome Partitioning IV",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 1746,
    "title": "Maximum Subarray Sum After One Operation",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 1747,
    "title": "Leetflex Banned Accounts",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1748,
    "title": "Sum of Unique Elements",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "hash table"
    ]
  },
  {
    "id": 1749,
    "title": "Maximum Absolute Sum of Any Subarray",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 1750,
    "title": "Minimum Length of String After Deleting Similar Ends",
    "difficulty": "medium",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 1751,
    "title": "Maximum Number of Events That Can Be Attended II",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 1752,
    "title": "Check if Array Is Sorted and Rotated",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 1753,
    "title": "Maximum Score From Removing Stones",
    "difficulty": "medium",
    "category": [
      "greedy",
      "heap",
      "math"
    ]
  },
  {
    "id": 1754,
    "title": "Largest Merge Of Two Strings",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 1755,
    "title": "Closest Subsequence Sum",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 1756,
    "title": "Design Most Recently Used Queue",
    "difficulty": "medium",
    "category": [
      "array",
      "binary indexed tree",
      "design",
      "hash table",
      "ordered set",
      "stack"
    ]
  },
  {
    "id": 1757,
    "title": "Recyclable and Low Fat Products",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1758,
    "title": "Minimum Changes To Make Alternating Binary String",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 1759,
    "title": "Count Number of Homogenous Substrings",
    "difficulty": "medium",
    "category": [
      "math",
      "string"
    ]
  },
  {
    "id": 1760,
    "title": "Minimum Limit of Balls in a Bag",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 1761,
    "title": "Minimum Degree of a Connected Trio in a Graph",
    "difficulty": "hard",
    "category": [
      "graph"
    ]
  },
  {
    "id": 1762,
    "title": "Buildings With an Ocean View",
    "difficulty": "medium",
    "category": [
      "array",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 1763,
    "title": "Longest Nice Substring",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "divide and conquer",
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 1764,
    "title": "Form Array by Concatenating Subarrays of Another Array",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "string matching",
      "two pointers"
    ]
  },
  {
    "id": 1765,
    "title": "Map of Highest Peak",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 1766,
    "title": "Tree of Coprimes",
    "difficulty": "hard",
    "category": [
      "array",
      "graph traversal",
      "math",
      "number theory",
      "tree"
    ]
  },
  {
    "id": 1767,
    "title": "Find the Subtasks That Did Not Execute",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 1768,
    "title": "Merge Strings Alternately",
    "difficulty": "easy",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 1769,
    "title": "Minimum Number of Operations to Move All Balls to Each Box",
    "difficulty": "medium",
    "category": [
      "array",
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 1770,
    "title": "Maximum Score from Performing Multiplication Operations",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 1771,
    "title": "Maximize Palindrome Length From Subsequences",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 1772,
    "title": "Sort Features by Popularity",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 1773,
    "title": "Count Items Matching a Rule",
    "difficulty": "easy",
    "category": [
      "array",
      "string"
    ]
  },
  {
    "id": 1774,
    "title": "Closest Dessert Cost",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "dynamic programming"
    ]
  },
  {
    "id": 1775,
    "title": "Equal Sum Arrays With Minimum Number of Operations",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "greedy",
      "hash table"
    ]
  },
  {
    "id": 1776,
    "title": "Car Fleet II",
    "difficulty": "hard",
    "category": [
      "array",
      "heap",
      "math",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 1777,
    "title": "Product's Price for Each Store",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1778,
    "title": "Shortest Path in a Hidden Grid",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "interactive",
      "matrix"
    ]
  },
  {
    "id": 1779,
    "title": "Find Nearest Point That Has the Same X or Y Coordinate",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 1780,
    "title": "Check if Number is a Sum of Powers of Three",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 1781,
    "title": "Sum of Beauty of All Substrings",
    "difficulty": "medium",
    "category": [
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 1782,
    "title": "Count Pairs Of Nodes",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "graph",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 1783,
    "title": "Grand Slam Titles",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1784,
    "title": "Check if Binary String Has at Most One Segment of Ones",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 1785,
    "title": "Minimum Elements to Add to Form a Given Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 1786,
    "title": "Number of Restricted Paths From First to Last Node",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "heap",
      "shortest path",
      "topological sort"
    ]
  },
  {
    "id": 1787,
    "title": "Make the XOR of All Segments Equal to Zero",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 1788,
    "title": "Maximize the Beauty of the Garden",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "hash table",
      "prefix sum"
    ]
  },
  {
    "id": 1789,
    "title": "Primary Department for Each Employee",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1790,
    "title": "Check if One String Swap Can Make Strings Equal",
    "difficulty": "easy",
    "category": [
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 1791,
    "title": "Find Center of Star Graph",
    "difficulty": "easy",
    "category": [
      "graph"
    ]
  },
  {
    "id": 1792,
    "title": "Maximum Average Pass Ratio",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "heap"
    ]
  },
  {
    "id": 1793,
    "title": "Maximum Score of a Good Subarray",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "monotonic stack",
      "stack",
      "two pointers"
    ]
  },
  {
    "id": 1794,
    "title": "Count Pairs of Equal Substrings With Minimum Difference",
    "difficulty": "medium",
    "category": [
      "greedy",
      "hash table",
      "string"
    ]
  },
  {
    "id": 1795,
    "title": "Rearrange Products Table",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1796,
    "title": "Second Largest Digit in a String",
    "difficulty": "easy",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 1797,
    "title": "Design Authentication Manager",
    "difficulty": "medium",
    "category": [
      "design",
      "hash table",
      "linked list"
    ]
  },
  {
    "id": 1798,
    "title": "Maximum Number of Consecutive Values You Can Make",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 1799,
    "title": "Maximize Score After N Operations",
    "difficulty": "hard",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 1800,
    "title": "Maximum Ascending Subarray Sum",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 1801,
    "title": "Number of Orders in the Backlog",
    "difficulty": "medium",
    "category": [
      "array",
      "heap",
      "simulation"
    ]
  },
  {
    "id": 1802,
    "title": "Maximum Value at a Given Index in a Bounded Array",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 1803,
    "title": "Count Pairs With XOR in a Range",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "trie"
    ]
  },
  {
    "id": 1804,
    "title": "Implement Trie II (Prefix Tree)",
    "difficulty": "medium",
    "category": [
      "design",
      "hash table",
      "string",
      "trie"
    ]
  },
  {
    "id": 1805,
    "title": "Number of Different Integers in a String",
    "difficulty": "easy",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 1806,
    "title": "Minimum Number of Operations to Reinitialize a Permutation",
    "difficulty": "medium",
    "category": [
      "array",
      "math",
      "simulation"
    ]
  },
  {
    "id": 1807,
    "title": "Evaluate the Bracket Pairs of a String",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "string"
    ]
  },
  {
    "id": 1808,
    "title": "Maximize Number of Nice Divisors",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory",
      "recursion"
    ]
  },
  {
    "id": 1809,
    "title": "Ad-Free Sessions",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1810,
    "title": "Minimum Path Cost in a Hidden Grid",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "graph traversal",
      "heap",
      "interactive",
      "matrix",
      "shortest path"
    ]
  },
  {
    "id": 1811,
    "title": "Find Interview Candidates",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1812,
    "title": "Determine Color of a Chessboard Square",
    "difficulty": "easy",
    "category": [
      "math",
      "string"
    ]
  },
  {
    "id": 1813,
    "title": "Sentence Similarity III",
    "difficulty": "medium",
    "category": [
      "array",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 1814,
    "title": "Count Nice Pairs in an Array",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "hash table",
      "math"
    ]
  },
  {
    "id": 1815,
    "title": "Maximum Number of Groups Getting Fresh Donuts",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming",
      "memoization"
    ]
  },
  {
    "id": 1816,
    "title": "Truncate Sentence",
    "difficulty": "easy",
    "category": [
      "array",
      "string"
    ]
  },
  {
    "id": 1817,
    "title": "Finding the Users Active Minutes",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 1818,
    "title": "Minimum Absolute Sum Difference",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "ordered set",
      "sorting"
    ]
  },
  {
    "id": 1819,
    "title": "Number of Different Subsequences GCDs",
    "difficulty": "hard",
    "category": [
      "array",
      "counting",
      "math",
      "number theory"
    ]
  },
  {
    "id": 1820,
    "title": "Maximum Number of Accepted Invitations",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 1821,
    "title": "Find Customers With Positive Revenue this Year",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1822,
    "title": "Sign of the Product of an Array",
    "difficulty": "easy",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 1823,
    "title": "Find the Winner of the Circular Game",
    "difficulty": "medium",
    "category": [
      "array",
      "math",
      "queue",
      "recursion",
      "simulation"
    ]
  },
  {
    "id": 1824,
    "title": "Minimum Sideway Jumps",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 1825,
    "title": "Finding MK Average",
    "difficulty": "hard",
    "category": [
      "data stream",
      "design",
      "heap",
      "ordered set",
      "queue"
    ]
  },
  {
    "id": 1826,
    "title": "Faulty Sensor",
    "difficulty": "easy",
    "category": [
      "array",
      "two pointers"
    ]
  },
  {
    "id": 1827,
    "title": "Minimum Operations to Make the Array Increasing",
    "difficulty": "easy",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 1828,
    "title": "Queries on Number of Points Inside a Circle",
    "difficulty": "medium",
    "category": [
      "array",
      "geometry",
      "math"
    ]
  },
  {
    "id": 1829,
    "title": "Maximum XOR for Each Query",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "prefix sum"
    ]
  },
  {
    "id": 1830,
    "title": "Minimum Number of Operations to Make String Sorted",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "string"
    ]
  },
  {
    "id": 1831,
    "title": "Maximum Transaction Each Day",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1832,
    "title": "Check if the Sentence Is Pangram",
    "difficulty": "easy",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 1833,
    "title": "Maximum Ice Cream Bars",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 1834,
    "title": "Single-Threaded CPU",
    "difficulty": "medium",
    "category": [
      "array",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 1835,
    "title": "Find XOR Sum of All Pairs Bitwise AND",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "math"
    ]
  },
  {
    "id": 1836,
    "title": "Remove Duplicates From an Unsorted Linked List",
    "difficulty": "medium",
    "category": [
      "hash table",
      "linked list"
    ]
  },
  {
    "id": 1837,
    "title": "Sum of Digits in Base K",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 1838,
    "title": "Frequency of the Most Frequent Element",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "greedy",
      "prefix sum",
      "sliding window",
      "sorting"
    ]
  },
  {
    "id": 1839,
    "title": "Longest Substring Of All Vowels in Order",
    "difficulty": "medium",
    "category": [
      "sliding window",
      "string"
    ]
  },
  {
    "id": 1840,
    "title": "Maximum Building Height",
    "difficulty": "hard",
    "category": [
      "array",
      "math",
      "sorting"
    ]
  },
  {
    "id": 1841,
    "title": "League Statistics",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1842,
    "title": "Next Palindrome Using Same Digits",
    "difficulty": "hard",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 1843,
    "title": "Suspicious Bank Accounts",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1844,
    "title": "Replace All Digits with Characters",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 1845,
    "title": "Seat Reservation Manager",
    "difficulty": "medium",
    "category": [
      "design",
      "heap"
    ]
  },
  {
    "id": 1846,
    "title": "Maximum Element After Decreasing and Rearranging",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 1847,
    "title": "Closest Room",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "ordered set",
      "sorting"
    ]
  },
  {
    "id": 1848,
    "title": "Minimum Distance to the Target Element",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 1849,
    "title": "Splitting a String Into Descending Consecutive Values",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "string"
    ]
  },
  {
    "id": 1850,
    "title": "Minimum Adjacent Swaps to Reach the Kth Smallest Number",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 1851,
    "title": "Minimum Interval to Include Each Query",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "heap",
      "line sweep",
      "sorting"
    ]
  },
  {
    "id": 1852,
    "title": "Distinct Numbers in Each Subarray",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sliding window"
    ]
  },
  {
    "id": 1853,
    "title": "Convert Date Format",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1854,
    "title": "Maximum Population Year",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "prefix sum"
    ]
  },
  {
    "id": 1855,
    "title": "Maximum Distance Between a Pair of Values",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "two pointers"
    ]
  },
  {
    "id": 1856,
    "title": "Maximum Subarray Min-Product",
    "difficulty": "medium",
    "category": [
      "array",
      "monotonic stack",
      "prefix sum",
      "stack"
    ]
  },
  {
    "id": 1857,
    "title": "Largest Color Value in a Directed Graph",
    "difficulty": "hard",
    "category": [
      "counting",
      "dynamic programming",
      "graph",
      "hash table",
      "memoization",
      "topological sort"
    ]
  },
  {
    "id": 1858,
    "title": "Longest Word With All Prefixes",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "trie"
    ]
  },
  {
    "id": 1859,
    "title": "Sorting the Sentence",
    "difficulty": "easy",
    "category": [
      "sorting",
      "string"
    ]
  },
  {
    "id": 1860,
    "title": "Incremental Memory Leak",
    "difficulty": "medium",
    "category": [
      "math",
      "simulation"
    ]
  },
  {
    "id": 1861,
    "title": "Rotating the Box",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "two pointers"
    ]
  },
  {
    "id": 1862,
    "title": "Sum of Floored Pairs",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "math",
      "prefix sum"
    ]
  },
  {
    "id": 1863,
    "title": "Sum of All Subset XOR Totals",
    "difficulty": "easy",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "combinatorics",
      "enumeration",
      "math"
    ]
  },
  {
    "id": 1864,
    "title": "Minimum Number of Swaps to Make the Binary String Alternating",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 1865,
    "title": "Finding Pairs With a Certain Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "hash table"
    ]
  },
  {
    "id": 1866,
    "title": "Number of Ways to Rearrange Sticks With K Sticks Visible",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 1867,
    "title": "Orders With Maximum Quantity Above Average",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1868,
    "title": "Product of Two Run-Length Encoded Arrays",
    "difficulty": "medium",
    "category": [
      "array",
      "two pointers"
    ]
  },
  {
    "id": 1869,
    "title": "Longer Contiguous Segments of Ones than Zeros",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 1870,
    "title": "Minimum Speed to Arrive on Time",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 1871,
    "title": "Jump Game VII",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "prefix sum",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 1872,
    "title": "Stone Game VIII",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "game theory",
      "math",
      "prefix sum"
    ]
  },
  {
    "id": 1873,
    "title": "Calculate Special Bonus",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1874,
    "title": "Minimize Product Sum of Two Arrays",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 1875,
    "title": "Group Employees of the Same Salary",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1876,
    "title": "Substrings of Size Three with Distinct Characters",
    "difficulty": "easy",
    "category": [
      "counting",
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 1877,
    "title": "Minimize Maximum Pair Sum in Array",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 1878,
    "title": "Get Biggest Three Rhombus Sums in a Grid",
    "difficulty": "medium",
    "category": [
      "array",
      "heap",
      "math",
      "matrix",
      "prefix sum",
      "sorting"
    ]
  },
  {
    "id": 1879,
    "title": "Minimum XOR Sum of Two Arrays",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 1880,
    "title": "Check if Word Equals Summation of Two Words",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 1881,
    "title": "Maximum Value after Insertion",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 1882,
    "title": "Process Tasks Using Servers",
    "difficulty": "medium",
    "category": [
      "array",
      "heap"
    ]
  },
  {
    "id": 1883,
    "title": "Minimum Skips to Arrive at Meeting On Time",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 1884,
    "title": "Egg Drop With 2 Eggs and N Floors",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 1885,
    "title": "Count Pairs in Two Arrays",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 1886,
    "title": "Determine Whether Matrix Can Be Obtained By Rotation",
    "difficulty": "easy",
    "category": [
      "array",
      "matrix"
    ]
  },
  {
    "id": 1887,
    "title": "Reduction Operations to Make the Array Elements Equal",
    "difficulty": "medium",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 1888,
    "title": "Minimum Number of Flips to Make the Binary String Alternating",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 1889,
    "title": "Minimum Space Wasted From Packaging",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "prefix sum",
      "sorting"
    ]
  },
  {
    "id": 1890,
    "title": "The Latest Login in 2020",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1891,
    "title": "Cutting Ribbons",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 1892,
    "title": "Page Recommendations II",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 1893,
    "title": "Check if All the Integers in a Range Are Covered",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "prefix sum"
    ]
  },
  {
    "id": 1894,
    "title": "Find the Student that Will Replace the Chalk",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "prefix sum",
      "simulation"
    ]
  },
  {
    "id": 1895,
    "title": "Largest Magic Square",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "prefix sum"
    ]
  },
  {
    "id": 1896,
    "title": "Minimum Cost to Change the Final Value of Expression",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "stack",
      "string"
    ]
  },
  {
    "id": 1897,
    "title": "Redistribute Characters to Make All Strings Equal",
    "difficulty": "easy",
    "category": [
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 1898,
    "title": "Maximum Number of Removable Characters",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 1899,
    "title": "Merge Triplets to Form Target Triplet",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 1900,
    "title": "The Earliest and Latest Rounds Where Players Compete",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "memoization"
    ]
  },
  {
    "id": 1901,
    "title": "Find a Peak Element II",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "matrix"
    ]
  },
  {
    "id": 1902,
    "title": "Depth of BST Given Insertion Order",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search tree",
      "binary tree",
      "ordered set",
      "tree"
    ]
  },
  {
    "id": 1903,
    "title": "Largest Odd Number in String",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 1904,
    "title": "The Number of Full Rounds You Have Played",
    "difficulty": "medium",
    "category": [
      "math",
      "string"
    ]
  },
  {
    "id": 1905,
    "title": "Count Sub Islands",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "matrix",
      "union find"
    ]
  },
  {
    "id": 1906,
    "title": "Minimum Absolute Difference Queries",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 1907,
    "title": "Count Salary Categories",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1908,
    "title": "Game of Nim",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "brainteaser",
      "dynamic programming",
      "game theory",
      "math"
    ]
  },
  {
    "id": 1909,
    "title": "Remove One Element to Make the Array Strictly Increasing",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 1910,
    "title": "Remove All Occurrences of a Substring",
    "difficulty": "medium",
    "category": [
      "simulation",
      "stack",
      "string"
    ]
  },
  {
    "id": 1911,
    "title": "Maximum Alternating Subsequence Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 1912,
    "title": "Design Movie Rental System",
    "difficulty": "hard",
    "category": [
      "array",
      "design",
      "hash table",
      "heap",
      "ordered set"
    ]
  },
  {
    "id": 1913,
    "title": "Maximum Product Difference Between Two Pairs",
    "difficulty": "easy",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 1914,
    "title": "Cyclically Rotating a Grid",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "simulation"
    ]
  },
  {
    "id": 1915,
    "title": "Number of Wonderful Substrings",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "hash table",
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 1916,
    "title": "Count Ways to Build Rooms in an Ant Colony",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph",
      "math",
      "topological sort",
      "tree"
    ]
  },
  {
    "id": 1917,
    "title": "Leetcodify Friends Recommendations",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 1918,
    "title": "Kth Smallest Subarray Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "sliding window"
    ]
  },
  {
    "id": 1919,
    "title": "Leetcodify Similar Friends",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 1920,
    "title": "Build Array from Permutation",
    "difficulty": "easy",
    "category": [
      "array",
      "simulation"
    ]
  },
  {
    "id": 1921,
    "title": "Eliminate Maximum Number of Monsters",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 1922,
    "title": "Count Good Numbers",
    "difficulty": "medium",
    "category": [
      "math",
      "recursion"
    ]
  },
  {
    "id": 1923,
    "title": "Longest Common Subpath",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "hash table",
      "rolling hash",
      "string suffix structures"
    ]
  },
  {
    "id": 1924,
    "title": "Erect the Fence II",
    "difficulty": "hard",
    "category": [
      "array",
      "geometry",
      "math"
    ]
  },
  {
    "id": 1925,
    "title": "Count Square Sum Triples",
    "difficulty": "easy",
    "category": [
      "enumeration",
      "math"
    ]
  },
  {
    "id": 1926,
    "title": "Nearest Exit from Entrance in Maze",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 1927,
    "title": "Sum Game",
    "difficulty": "medium",
    "category": [
      "game theory",
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 1928,
    "title": "Minimum Cost to Reach Destination in Time",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "graph"
    ]
  },
  {
    "id": 1929,
    "title": "Concatenation of Array",
    "difficulty": "easy",
    "category": [
      "array",
      "simulation"
    ]
  },
  {
    "id": 1930,
    "title": "Unique Length-3 Palindromic Subsequences",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "hash table",
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 1931,
    "title": "Painting a Grid With Three Different Colors",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 1932,
    "title": "Merge BSTs to Create Single BST",
    "difficulty": "hard",
    "category": [
      "binary search",
      "binary tree",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 1933,
    "title": "Check if String Is Decomposable Into Value-Equal Substrings",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 1934,
    "title": "Confirmation Rate",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1935,
    "title": "Maximum Number of Words You Can Type",
    "difficulty": "easy",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 1936,
    "title": "Add Minimum Number of Rungs",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 1937,
    "title": "Maximum Number of Points with Cost",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 1938,
    "title": "Maximum Genetic Difference Query",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "graph traversal",
      "hash table",
      "trie"
    ]
  },
  {
    "id": 1939,
    "title": "Users That Actively Request Confirmation Messages",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1940,
    "title": "Longest Common Subsequence Between Sorted Arrays",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "hash table"
    ]
  },
  {
    "id": 1941,
    "title": "Check if All Characters Have Equal Number of Occurrences",
    "difficulty": "easy",
    "category": [
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 1942,
    "title": "The Number of the Smallest Unoccupied Chair",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "heap"
    ]
  },
  {
    "id": 1943,
    "title": "Describe the Painting",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "prefix sum",
      "sorting"
    ]
  },
  {
    "id": 1944,
    "title": "Number of Visible People in a Queue",
    "difficulty": "hard",
    "category": [
      "array",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 1945,
    "title": "Sum of Digits of String After Convert",
    "difficulty": "easy",
    "category": [
      "simulation",
      "string"
    ]
  },
  {
    "id": 1946,
    "title": "Largest Number After Mutating Substring",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "string"
    ]
  },
  {
    "id": 1947,
    "title": "Maximum Compatibility Score Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 1948,
    "title": "Delete Duplicate Folders in System",
    "difficulty": "hard",
    "category": [
      "array",
      "hash table",
      "string",
      "trie"
    ]
  },
  {
    "id": 1949,
    "title": "Strong Friendship",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1950,
    "title": "Maximum of Minimum Values in All Subarrays",
    "difficulty": "medium",
    "category": [
      "array",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 1951,
    "title": "All the Pairs With the Maximum Number of Common Followers",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1952,
    "title": "Three Divisors",
    "difficulty": "easy",
    "category": [
      "enumeration",
      "math",
      "number theory"
    ]
  },
  {
    "id": 1953,
    "title": "Maximum Number of Weeks for Which You Can Work",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 1954,
    "title": "Minimum Garden Perimeter to Collect Enough Apples",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 1955,
    "title": "Count Number of Special Subsequences",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 1956,
    "title": "Minimum Time For K Virus Variants to Spread",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "enumeration",
      "geometry",
      "math"
    ]
  },
  {
    "id": 1957,
    "title": "Delete Characters to Make Fancy String",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 1958,
    "title": "Check if Move is Legal",
    "difficulty": "medium",
    "category": [
      "array",
      "enumeration",
      "matrix"
    ]
  },
  {
    "id": 1959,
    "title": "Minimum Total Space Wasted With K Resizing Operations",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 1960,
    "title": "Maximum Product of the Length of Two Palindromic Substrings",
    "difficulty": "hard",
    "category": [
      "hash table",
      "rolling hash",
      "string"
    ]
  },
  {
    "id": 1961,
    "title": "Check If String Is a Prefix of Array",
    "difficulty": "easy",
    "category": [
      "array",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 1962,
    "title": "Remove Stones to Minimize the Total",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "heap"
    ]
  },
  {
    "id": 1963,
    "title": "Minimum Number of Swaps to Make the String Balanced",
    "difficulty": "medium",
    "category": [
      "greedy",
      "stack",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 1964,
    "title": "Find the Longest Valid Obstacle Course at Each Position",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree",
      "binary search"
    ]
  },
  {
    "id": 1965,
    "title": "Employees With Missing Information",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1966,
    "title": "Binary Searchable Numbers in an Unsorted Array",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 1967,
    "title": "Number of Strings That Appear as Substrings in Word",
    "difficulty": "easy",
    "category": [
      "array",
      "string"
    ]
  },
  {
    "id": 1968,
    "title": "Array With Elements Not Equal to Average of Neighbors",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 1969,
    "title": "Minimum Non-Zero Product of the Array Elements",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "recursion"
    ]
  },
  {
    "id": 1970,
    "title": "Last Day Where You Can Still Cross",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "graph traversal",
      "matrix",
      "union find"
    ]
  },
  {
    "id": 1971,
    "title": "Find if Path Exists in Graph",
    "difficulty": "easy",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 1972,
    "title": "First and Last Call On the Same Day",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 1973,
    "title": "Count Nodes Equal to Sum of Descendants",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 1974,
    "title": "Minimum Time to Type Word Using Special Typewriter",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 1975,
    "title": "Maximum Matrix Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "matrix"
    ]
  },
  {
    "id": 1976,
    "title": "Number of Ways to Arrive at Destination",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "shortest path",
      "topological sort"
    ]
  },
  {
    "id": 1977,
    "title": "Number of Ways to Separate Numbers",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 1978,
    "title": "Employees Whose Manager Left the Company",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 1979,
    "title": "Find Greatest Common Divisor of Array",
    "difficulty": "easy",
    "category": [
      "array",
      "math",
      "number theory"
    ]
  },
  {
    "id": 1980,
    "title": "Find Unique Binary String",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "hash table",
      "string"
    ]
  },
  {
    "id": 1981,
    "title": "Minimize the Difference Between Target and Chosen Elements",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 1982,
    "title": "Find Array Given Subset Sums",
    "difficulty": "hard",
    "category": [
      "array",
      "divide and conquer"
    ]
  },
  {
    "id": 1983,
    "title": "Widest Pair of Indices With Equal Range Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "prefix sum"
    ]
  },
  {
    "id": 1984,
    "title": "Minimum Difference Between Highest and Lowest of K Scores",
    "difficulty": "easy",
    "category": [
      "array",
      "sliding window",
      "sorting"
    ]
  },
  {
    "id": 1985,
    "title": "Find the Kth Largest Integer in the Array",
    "difficulty": "medium",
    "category": [
      "array",
      "divide and conquer",
      "heap",
      "quickselect",
      "sorting",
      "string"
    ]
  },
  {
    "id": 1986,
    "title": "Minimum Number of Work Sessions to Finish the Tasks",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 1987,
    "title": "Number of Unique Good Subsequences",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 1988,
    "title": "Find Cutoff Score for Each School",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1989,
    "title": "Maximum Number of People That Can Be Caught in Tag",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 1990,
    "title": "Count the Number of Experiments",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 1991,
    "title": "Find the Middle Index in Array",
    "difficulty": "easy",
    "category": [
      "array",
      "prefix sum"
    ]
  },
  {
    "id": 1992,
    "title": "Find All Groups of Farmland",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 1993,
    "title": "Operations on Tree",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 1994,
    "title": "The Number of Good Subsets",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 1995,
    "title": "Count Special Quadruplets",
    "difficulty": "easy",
    "category": [
      "array",
      "enumeration",
      "hash table"
    ]
  },
  {
    "id": 1996,
    "title": "The Number of Weak Characters in the Game",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "monotonic stack",
      "sorting",
      "stack"
    ]
  },
  {
    "id": 1997,
    "title": "First Day Where You Have Been in All the Rooms",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 1998,
    "title": "GCD Sort of an Array",
    "difficulty": "hard",
    "category": [
      "array",
      "math",
      "number theory",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 1999,
    "title": "Smallest Greater Multiple Made of Two Digits",
    "difficulty": "medium",
    "category": [
      "enumeration",
      "math"
    ]
  },
  {
    "id": 2000,
    "title": "Reverse Prefix of Word",
    "difficulty": "easy",
    "category": [
      "stack",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 2001,
    "title": "Number of Pairs of Interchangeable Rectangles",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "hash table",
      "math",
      "number theory"
    ]
  },
  {
    "id": 2002,
    "title": "Maximum Product of the Length of Two Palindromic Subsequences",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "bit manipulation",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 2003,
    "title": "Smallest Missing Genetic Value in Each Subtree",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 2004,
    "title": "The Number of Seniors and Juniors to Join the Company",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 2005,
    "title": "Subtree Removal Game with Fibonacci Tree",
    "difficulty": "hard",
    "category": [
      "binary tree",
      "dynamic programming",
      "game theory",
      "math",
      "tree"
    ]
  },
  {
    "id": 2006,
    "title": "Count Number of Pairs With Absolute Difference K",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "hash table"
    ]
  },
  {
    "id": 2007,
    "title": "Find Original Array From Doubled Array",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 2008,
    "title": "Maximum Earnings From Taxi",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "dynamic programming",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 2009,
    "title": "Minimum Number of Operations to Make Array Continuous",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "hash table",
      "sliding window"
    ]
  },
  {
    "id": 2010,
    "title": "The Number of Seniors and Juniors to Join the Company II",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 2011,
    "title": "Final Value of Variable After Performing Operations",
    "difficulty": "easy",
    "category": [
      "array",
      "simulation",
      "string"
    ]
  },
  {
    "id": 2012,
    "title": "Sum of Beauty in the Array",
    "difficulty": "medium",
    "category": [
      "array"
    ]
  },
  {
    "id": 2013,
    "title": "Detect Squares",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "design",
      "hash table"
    ]
  },
  {
    "id": 2014,
    "title": "Longest Subsequence Repeated k Times",
    "difficulty": "hard",
    "category": [
      "backtracking",
      "counting",
      "enumeration",
      "greedy",
      "string"
    ]
  },
  {
    "id": 2015,
    "title": "Average Height of Buildings in Each Segment",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 2016,
    "title": "Maximum Difference Between Increasing Elements",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 2017,
    "title": "Grid Game",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "prefix sum"
    ]
  },
  {
    "id": 2018,
    "title": "Check if Word Can Be Placed In Crossword",
    "difficulty": "medium",
    "category": [
      "array",
      "enumeration",
      "matrix"
    ]
  },
  {
    "id": 2019,
    "title": "The Score of Students Solving Math Expression",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "math",
      "memoization",
      "stack",
      "string"
    ]
  },
  {
    "id": 2020,
    "title": "Number of Accounts That Did Not Stream",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2021,
    "title": "Brightest Position on Street",
    "difficulty": "medium",
    "category": [
      "array",
      "ordered set",
      "prefix sum",
      "sorting"
    ]
  },
  {
    "id": 2022,
    "title": "Convert 1D Array Into 2D Array",
    "difficulty": "easy",
    "category": [
      "array",
      "matrix",
      "simulation"
    ]
  },
  {
    "id": 2023,
    "title": "Number of Pairs of Strings With Concatenation Equal to Target",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2024,
    "title": "Maximize the Confusion of an Exam",
    "difficulty": "medium",
    "category": [
      "binary search",
      "prefix sum",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 2025,
    "title": "Maximum Number of Ways to Partition an Array",
    "difficulty": "hard",
    "category": [
      "array",
      "counting",
      "enumeration",
      "hash table",
      "prefix sum"
    ]
  },
  {
    "id": 2026,
    "title": "Low-Quality Problems",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 2027,
    "title": "Minimum Moves to Convert String",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 2028,
    "title": "Find Missing Observations",
    "difficulty": "medium",
    "category": [
      "array",
      "math",
      "simulation"
    ]
  },
  {
    "id": 2029,
    "title": "Stone Game IX",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "game theory",
      "greedy",
      "math"
    ]
  },
  {
    "id": 2030,
    "title": "Smallest K-Length Subsequence With Occurrences of a Letter",
    "difficulty": "hard",
    "category": [
      "greedy",
      "monotonic stack",
      "stack",
      "string"
    ]
  },
  {
    "id": 2031,
    "title": "Count Subarrays With More Ones Than Zeros",
    "difficulty": "medium",
    "category": [
      "array",
      "binary indexed tree",
      "binary search",
      "divide and conquer",
      "ordered set",
      "segment tree",
      "sorting"
    ]
  },
  {
    "id": 2032,
    "title": "Two Out of Three",
    "difficulty": "easy",
    "category": [
      "array",
      "bit manipulation",
      "hash table"
    ]
  },
  {
    "id": 2033,
    "title": "Minimum Operations to Make a Uni-Value Grid",
    "difficulty": "medium",
    "category": [
      "array",
      "math",
      "matrix",
      "sorting"
    ]
  },
  {
    "id": 2034,
    "title": "Stock Price Fluctuation ",
    "difficulty": "medium",
    "category": [
      "data stream",
      "design",
      "hash table",
      "heap",
      "ordered set"
    ]
  },
  {
    "id": 2035,
    "title": "Partition Array Into Two Arrays to Minimize Sum Difference",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "bit manipulation",
      "dynamic programming",
      "ordered set",
      "two pointers"
    ]
  },
  {
    "id": 2036,
    "title": "Maximum Alternating Subarray Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 2037,
    "title": "Minimum Number of Moves to Seat Everyone",
    "difficulty": "easy",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 2038,
    "title": "Remove Colored Pieces if Both Neighbors are the Same Color",
    "difficulty": "medium",
    "category": [
      "game theory",
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 2039,
    "title": "The Time When the Network Becomes Idle",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 2040,
    "title": "Kth Smallest Product of Two Sorted Arrays",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 2041,
    "title": "Accepted Candidates From the Interviews",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2042,
    "title": "Check if Numbers Are Ascending in a Sentence",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 2043,
    "title": "Simple Bank System",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "hash table",
      "simulation"
    ]
  },
  {
    "id": 2044,
    "title": "Count Number of Maximum Bitwise-OR Subsets",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "enumeration"
    ]
  },
  {
    "id": 2045,
    "title": "Second Minimum Time to Reach Destination",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 2046,
    "title": "Sort Linked List Already Sorted Using Absolute Values",
    "difficulty": "medium",
    "category": [
      "linked list",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 2047,
    "title": "Number of Valid Words in a Sentence",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 2048,
    "title": "Next Greater Numerically Balanced Number",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "counting",
      "enumeration",
      "hash table",
      "math"
    ]
  },
  {
    "id": 2049,
    "title": "Count Nodes With the Highest Score",
    "difficulty": "medium",
    "category": [
      "array",
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 2050,
    "title": "Parallel Courses III",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "graph",
      "topological sort"
    ]
  },
  {
    "id": 2051,
    "title": "The Category of Each Member in the Store",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2052,
    "title": "Minimum Cost to Separate Sentence Into Rows",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 2053,
    "title": "Kth Distinct String in an Array",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2054,
    "title": "Two Best Non-Overlapping Events",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "dynamic programming",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 2055,
    "title": "Plates Between Candles",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 2056,
    "title": "Number of Valid Move Combinations On Chessboard",
    "difficulty": "hard",
    "category": [
      "array",
      "backtracking",
      "simulation",
      "string"
    ]
  },
  {
    "id": 2057,
    "title": "Smallest Index With Equal Value",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 2058,
    "title": "Find the Minimum and Maximum Number of Nodes Between Critical Points",
    "difficulty": "medium",
    "category": [
      "linked list"
    ]
  },
  {
    "id": 2059,
    "title": "Minimum Operations to Convert Number",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal"
    ]
  },
  {
    "id": 2060,
    "title": "Check if an Original String Exists Given Two Encoded Strings",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 2061,
    "title": "Number of Spaces Cleaning Robot Cleaned",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "simulation"
    ]
  },
  {
    "id": 2062,
    "title": "Count Vowel Substrings of a String",
    "difficulty": "easy",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 2063,
    "title": "Vowels of All Substrings",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "string"
    ]
  },
  {
    "id": 2064,
    "title": "Minimized Maximum of Products Distributed to Any Store",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 2065,
    "title": "Maximum Path Quality of a Graph",
    "difficulty": "hard",
    "category": [
      "array",
      "backtracking",
      "graph"
    ]
  },
  {
    "id": 2066,
    "title": "Account Balance",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2067,
    "title": "Number of Equal Count Substrings",
    "difficulty": "medium",
    "category": [
      "counting",
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 2068,
    "title": "Check Whether Two Strings are Almost Equivalent",
    "difficulty": "easy",
    "category": [
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2069,
    "title": "Walking Robot Simulation II",
    "difficulty": "medium",
    "category": [
      "design",
      "simulation"
    ]
  },
  {
    "id": 2070,
    "title": "Most Beautiful Item for Each Query",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "sorting"
    ]
  },
  {
    "id": 2071,
    "title": "Maximum Number of Tasks You Can Assign",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "greedy",
      "monotonic queue",
      "queue",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 2072,
    "title": "The Winner University",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 2073,
    "title": "Time Needed to Buy Tickets",
    "difficulty": "easy",
    "category": [
      "array",
      "queue",
      "simulation"
    ]
  },
  {
    "id": 2074,
    "title": "Reverse Nodes in Even Length Groups",
    "difficulty": "medium",
    "category": [
      "linked list"
    ]
  },
  {
    "id": 2075,
    "title": "Decode the Slanted Ciphertext",
    "difficulty": "medium",
    "category": [
      "simulation",
      "string"
    ]
  },
  {
    "id": 2076,
    "title": "Process Restricted Friend Requests",
    "difficulty": "hard",
    "category": [
      "graph",
      "union find"
    ]
  },
  {
    "id": 2077,
    "title": "Paths in Maze That Lead to Same Room",
    "difficulty": "medium",
    "category": [
      "graph"
    ]
  },
  {
    "id": 2078,
    "title": "Two Furthest Houses With Different Colors",
    "difficulty": "easy",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 2079,
    "title": "Watering Plants",
    "difficulty": "medium",
    "category": [
      "array",
      "simulation"
    ]
  },
  {
    "id": 2080,
    "title": "Range Frequency Queries",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "design",
      "hash table",
      "segment tree"
    ]
  },
  {
    "id": 2081,
    "title": "Sum of k-Mirror Numbers",
    "difficulty": "hard",
    "category": [
      "enumeration",
      "math"
    ]
  },
  {
    "id": 2082,
    "title": "The Number of Rich Customers",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 2083,
    "title": "Substrings That Begin and End With the Same Letter",
    "difficulty": "medium",
    "category": [
      "counting",
      "hash table",
      "math",
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 2084,
    "title": "Drop Type 1 Orders for Customers With Type 0 Orders",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2085,
    "title": "Count Common Words With One Occurrence",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2086,
    "title": "Minimum Number of Food Buckets to Feed the Hamsters",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "string"
    ]
  },
  {
    "id": 2087,
    "title": "Minimum Cost Homecoming of a Robot in a Grid",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 2088,
    "title": "Count Fertile Pyramids in a Land",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 2089,
    "title": "Find Target Indices After Sorting Array",
    "difficulty": "easy",
    "category": [
      "array",
      "binary search",
      "sorting"
    ]
  },
  {
    "id": 2090,
    "title": "K Radius Subarray Averages",
    "difficulty": "medium",
    "category": [
      "array",
      "sliding window"
    ]
  },
  {
    "id": 2091,
    "title": "Removing Minimum and Maximum From Array",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 2092,
    "title": "Find All People With Secret",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 2093,
    "title": "Minimum Cost to Reach City With Discounts",
    "difficulty": "medium",
    "category": [
      "graph",
      "heap",
      "shortest path"
    ]
  },
  {
    "id": 2094,
    "title": "Finding 3-Digit Even Numbers",
    "difficulty": "easy",
    "category": [
      "array",
      "enumeration",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 2095,
    "title": "Delete the Middle Node of a Linked List",
    "difficulty": "medium",
    "category": [
      "linked list",
      "two pointers"
    ]
  },
  {
    "id": 2096,
    "title": "Step-By-Step Directions From a Binary Tree Node to Another",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "string",
      "tree"
    ]
  },
  {
    "id": 2097,
    "title": "Valid Arrangement of Pairs",
    "difficulty": "hard",
    "category": [
      "eulerian circuit",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 2098,
    "title": "Subsequence of Size K With the Largest Even Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 2099,
    "title": "Find Subsequence of Length K With the Largest Sum",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 2100,
    "title": "Find Good Days to Rob the Bank",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "prefix sum"
    ]
  },
  {
    "id": 2101,
    "title": "Detonate the Maximum Bombs",
    "difficulty": "medium",
    "category": [
      "array",
      "geometry",
      "graph",
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 2102,
    "title": "Sequentially Ordinal Rank Tracker",
    "difficulty": "hard",
    "category": [
      "data stream",
      "design",
      "heap",
      "ordered set"
    ]
  },
  {
    "id": 2103,
    "title": "Rings and Rods",
    "difficulty": "easy",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 2104,
    "title": "Sum of Subarray Ranges",
    "difficulty": "medium",
    "category": [
      "array",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 2105,
    "title": "Watering Plants II",
    "difficulty": "medium",
    "category": [
      "array",
      "simulation",
      "two pointers"
    ]
  },
  {
    "id": 2106,
    "title": "Maximum Fruits Harvested After at Most K Steps",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "prefix sum",
      "sliding window"
    ]
  },
  {
    "id": 2107,
    "title": "Number of Unique Flavors After Sharing K Candies",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sliding window"
    ]
  },
  {
    "id": 2108,
    "title": "Find First Palindromic String in the Array",
    "difficulty": "easy",
    "category": [
      "array",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 2109,
    "title": "Adding Spaces to a String",
    "difficulty": "medium",
    "category": [
      "array",
      "simulation",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 2110,
    "title": "Number of Smooth Descent Periods of a Stock",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 2111,
    "title": "Minimum Operations to Make the Array K-Increasing",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 2112,
    "title": "The Airport With the Most Traffic",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2113,
    "title": "Elements in Array After Removing and Replacing Elements",
    "difficulty": "medium",
    "category": [
      "array"
    ]
  },
  {
    "id": 2114,
    "title": "Maximum Number of Words Found in Sentences",
    "difficulty": "easy",
    "category": [
      "array",
      "string"
    ]
  },
  {
    "id": 2115,
    "title": "Find All Possible Recipes from Given Supplies",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "hash table",
      "string",
      "topological sort"
    ]
  },
  {
    "id": 2116,
    "title": "Check if a Parentheses String Can Be Valid",
    "difficulty": "medium",
    "category": [
      "greedy",
      "stack",
      "string"
    ]
  },
  {
    "id": 2117,
    "title": "Abbreviating the Product of a Range",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 2118,
    "title": "Build the Equation",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 2119,
    "title": "A Number After a Double Reversal",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 2120,
    "title": "Execution of All Suffix Instructions Staying in a Grid",
    "difficulty": "medium",
    "category": [
      "simulation",
      "string"
    ]
  },
  {
    "id": 2121,
    "title": "Intervals Between Identical Elements",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "prefix sum"
    ]
  },
  {
    "id": 2122,
    "title": "Recover the Original Array",
    "difficulty": "hard",
    "category": [
      "array",
      "enumeration",
      "hash table",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 2123,
    "title": "Minimum Operations to Remove Adjacent Ones in Matrix",
    "difficulty": "hard",
    "category": [
      "array",
      "graph",
      "matrix"
    ]
  },
  {
    "id": 2124,
    "title": "Check if All A's Appears Before All B's",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 2125,
    "title": "Number of Laser Beams in a Bank",
    "difficulty": "medium",
    "category": [
      "array",
      "math",
      "matrix",
      "string"
    ]
  },
  {
    "id": 2126,
    "title": "Destroying Asteroids",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 2127,
    "title": "Maximum Employees to Be Invited to a Meeting",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "topological sort"
    ]
  },
  {
    "id": 2128,
    "title": "Remove All Ones With Row and Column Flips",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "math",
      "matrix"
    ]
  },
  {
    "id": 2129,
    "title": "Capitalize the Title",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 2130,
    "title": "Maximum Twin Sum of a Linked List",
    "difficulty": "medium",
    "category": [
      "linked list",
      "stack",
      "two pointers"
    ]
  },
  {
    "id": 2131,
    "title": "Longest Palindrome by Concatenating Two Letter Words",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "greedy",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2132,
    "title": "Stamping the Grid",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "matrix",
      "prefix sum"
    ]
  },
  {
    "id": 2133,
    "title": "Check if Every Row and Column Contains All Numbers",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "matrix"
    ]
  },
  {
    "id": 2134,
    "title": "Minimum Swaps to Group All 1's Together II",
    "difficulty": "medium",
    "category": [
      "array",
      "sliding window"
    ]
  },
  {
    "id": 2135,
    "title": "Count Words Obtained After Adding a Letter",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 2136,
    "title": "Earliest Possible Day of Full Bloom",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 2137,
    "title": "Pour Water Between Buckets to Make Water Levels Equal",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 2138,
    "title": "Divide a String Into Groups of Size k",
    "difficulty": "easy",
    "category": [
      "simulation",
      "string"
    ]
  },
  {
    "id": 2139,
    "title": "Minimum Moves to Reach Target Score",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 2140,
    "title": "Solving Questions With Brainpower",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 2141,
    "title": "Maximum Running Time of N Computers",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 2142,
    "title": "The Number of Passengers in Each Bus I",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2143,
    "title": "Choose Numbers From Two Arrays in Range",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 2144,
    "title": "Minimum Cost of Buying Candies With Discount",
    "difficulty": "easy",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 2145,
    "title": "Count the Hidden Sequences",
    "difficulty": "medium",
    "category": [
      "array",
      "prefix sum"
    ]
  },
  {
    "id": 2146,
    "title": "K Highest Ranked Items Within a Price Range",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "heap",
      "matrix",
      "sorting"
    ]
  },
  {
    "id": 2147,
    "title": "Number of Ways to Divide a Long Corridor",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "string"
    ]
  },
  {
    "id": 2148,
    "title": "Count Elements With Strictly Smaller and Greater Elements ",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "sorting"
    ]
  },
  {
    "id": 2149,
    "title": "Rearrange Array Elements by Sign",
    "difficulty": "medium",
    "category": [
      "array",
      "simulation",
      "two pointers"
    ]
  },
  {
    "id": 2150,
    "title": "Find All Lonely Numbers in the Array",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "hash table"
    ]
  },
  {
    "id": 2151,
    "title": "Maximum Good People Based on Statements",
    "difficulty": "hard",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "enumeration"
    ]
  },
  {
    "id": 2152,
    "title": "Minimum Number of Lines to Cover Points",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "dynamic programming",
      "geometry",
      "hash table",
      "math"
    ]
  },
  {
    "id": 2153,
    "title": "The Number of Passengers in Each Bus II",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 2154,
    "title": "Keep Multiplying Found Values by Two",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "simulation",
      "sorting"
    ]
  },
  {
    "id": 2155,
    "title": "All Divisions With the Highest Score of a Binary Array",
    "difficulty": "medium",
    "category": [
      "array"
    ]
  },
  {
    "id": 2156,
    "title": "Find Substring With Given Hash Value",
    "difficulty": "hard",
    "category": [
      "hash table",
      "rolling hash",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 2157,
    "title": "Groups of Strings",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "string",
      "union find"
    ]
  },
  {
    "id": 2158,
    "title": "Amount of New Area Painted Each Day",
    "difficulty": "hard",
    "category": [
      "array",
      "ordered set",
      "segment tree"
    ]
  },
  {
    "id": 2159,
    "title": "Order Two Columns Independently",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2160,
    "title": "Minimum Sum of Four Digit Number After Splitting Digits",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 2161,
    "title": "Partition Array According to Given Pivot",
    "difficulty": "medium",
    "category": [
      "array",
      "simulation",
      "two pointers"
    ]
  },
  {
    "id": 2162,
    "title": "Minimum Cost to Set Cooking Time",
    "difficulty": "medium",
    "category": [
      "enumeration",
      "math"
    ]
  },
  {
    "id": 2163,
    "title": "Minimum Difference in Sums After Removal of Elements",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "heap"
    ]
  },
  {
    "id": 2164,
    "title": "Sort Even and Odd Indices Independently",
    "difficulty": "easy",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 2165,
    "title": "Smallest Value of the Rearranged Number",
    "difficulty": "medium",
    "category": [
      "math",
      "sorting"
    ]
  },
  {
    "id": 2166,
    "title": "Design Bitset",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2167,
    "title": "Minimum Time to Remove All Cars Containing Illegal Goods",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 2168,
    "title": "Unique Substrings With Equal Digit Frequency",
    "difficulty": "medium",
    "category": [
      "counting",
      "hash table",
      "rolling hash",
      "string"
    ]
  },
  {
    "id": 2169,
    "title": "Count Operations to Obtain Zero",
    "difficulty": "easy",
    "category": [
      "math",
      "simulation"
    ]
  },
  {
    "id": 2170,
    "title": "Minimum Operations to Make the Array Alternating",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "greedy",
      "hash table"
    ]
  },
  {
    "id": 2171,
    "title": "Removing Minimum Number of Magic Beans",
    "difficulty": "medium",
    "category": [
      "array",
      "enumeration",
      "greedy",
      "prefix sum",
      "sorting"
    ]
  },
  {
    "id": 2172,
    "title": "Maximum AND Sum of Array",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 2173,
    "title": "Longest Winning Streak",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 2174,
    "title": "Remove All Ones With Row and Column Flips II",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 2175,
    "title": "The Change in Global Rankings",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2176,
    "title": "Count Equal and Divisible Pairs in an Array",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 2177,
    "title": "Find Three Consecutive Integers That Sum to a Given Number",
    "difficulty": "medium",
    "category": [
      "math",
      "simulation"
    ]
  },
  {
    "id": 2178,
    "title": "Maximum Split of Positive Even Integers",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "greedy",
      "math"
    ]
  },
  {
    "id": 2179,
    "title": "Count Good Triplets in an Array",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree",
      "binary search",
      "divide and conquer",
      "ordered set",
      "segment tree",
      "sorting"
    ]
  },
  {
    "id": 2180,
    "title": "Count Integers With Even Digit Sum",
    "difficulty": "easy",
    "category": [
      "math",
      "simulation"
    ]
  },
  {
    "id": 2181,
    "title": "Merge Nodes in Between Zeros",
    "difficulty": "medium",
    "category": [
      "linked list",
      "simulation"
    ]
  },
  {
    "id": 2182,
    "title": "Construct String With Repeat Limit",
    "difficulty": "medium",
    "category": [
      "counting",
      "greedy",
      "hash table",
      "heap",
      "string"
    ]
  },
  {
    "id": 2183,
    "title": "Count Array Pairs Divisible by K",
    "difficulty": "hard",
    "category": [
      "array",
      "math",
      "number theory"
    ]
  },
  {
    "id": 2184,
    "title": "Number of Ways to Build Sturdy Brick Wall",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 2185,
    "title": "Counting Words With a Given Prefix",
    "difficulty": "easy",
    "category": [
      "array",
      "string",
      "string matching"
    ]
  },
  {
    "id": 2186,
    "title": "Minimum Number of Steps to Make Two Strings Anagram II",
    "difficulty": "medium",
    "category": [
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2187,
    "title": "Minimum Time to Complete Trips",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 2188,
    "title": "Minimum Time to Finish the Race",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 2189,
    "title": "Number of Ways to Build House of Cards",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 2190,
    "title": "Most Frequent Number Following Key In an Array",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "hash table"
    ]
  },
  {
    "id": 2191,
    "title": "Sort the Jumbled Numbers",
    "difficulty": "medium",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 2192,
    "title": "All Ancestors of a Node in a Directed Acyclic Graph",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "topological sort"
    ]
  },
  {
    "id": 2193,
    "title": "Minimum Number of Moves to Make Palindrome",
    "difficulty": "hard",
    "category": [
      "binary indexed tree",
      "greedy",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 2194,
    "title": "Cells in a Range on an Excel Sheet",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 2195,
    "title": "Append K Integers With Minimal Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 2196,
    "title": "Create Binary Tree From Descriptions",
    "difficulty": "medium",
    "category": [
      "array",
      "binary tree",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 2197,
    "title": "Replace Non-Coprime Numbers in Array",
    "difficulty": "hard",
    "category": [
      "array",
      "math",
      "number theory",
      "stack"
    ]
  },
  {
    "id": 2198,
    "title": "Number of Single Divisor Triplets",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 2199,
    "title": "Finding the Topic of Each Post",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 2200,
    "title": "Find All K-Distant Indices in an Array",
    "difficulty": "easy",
    "category": [
      "array",
      "two pointers"
    ]
  },
  {
    "id": 2201,
    "title": "Count Artifacts That Can Be Extracted",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "simulation"
    ]
  },
  {
    "id": 2202,
    "title": "Maximize the Topmost Element After K Moves",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 2203,
    "title": "Minimum Weighted Subgraph With the Required Paths",
    "difficulty": "hard",
    "category": [
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 2204,
    "title": "Distance to a Cycle in Undirected Graph",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 2205,
    "title": "The Number of Users That Are Eligible for Discount",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 2206,
    "title": "Divide Array Into Equal Pairs",
    "difficulty": "easy",
    "category": [
      "array",
      "bit manipulation",
      "counting",
      "hash table"
    ]
  },
  {
    "id": 2207,
    "title": "Maximize Number of Subsequences in a String",
    "difficulty": "medium",
    "category": [
      "greedy",
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 2208,
    "title": "Minimum Operations to Halve Array Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "heap"
    ]
  },
  {
    "id": 2209,
    "title": "Minimum White Tiles After Covering With Carpets",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 2210,
    "title": "Count Hills and Valleys in an Array",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 2211,
    "title": "Count Collisions on a Road",
    "difficulty": "medium",
    "category": [
      "simulation",
      "stack",
      "string"
    ]
  },
  {
    "id": 2212,
    "title": "Maximum Points in an Archery Competition",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "enumeration"
    ]
  },
  {
    "id": 2213,
    "title": "Longest Substring of One Repeating Character",
    "difficulty": "hard",
    "category": [
      "array",
      "ordered set",
      "segment tree",
      "string"
    ]
  },
  {
    "id": 2214,
    "title": "Minimum Health to Beat Game",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 2215,
    "title": "Find the Difference of Two Arrays",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 2216,
    "title": "Minimum Deletions to Make Array Beautiful",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "stack"
    ]
  },
  {
    "id": 2217,
    "title": "Find Palindrome With Fixed Length",
    "difficulty": "medium",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 2218,
    "title": "Maximum Value of K Coins From Piles",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "prefix sum"
    ]
  },
  {
    "id": 2219,
    "title": "Maximum Sum Score of Array",
    "difficulty": "medium",
    "category": [
      "array",
      "prefix sum"
    ]
  },
  {
    "id": 2220,
    "title": "Minimum Bit Flips to Convert Number",
    "difficulty": "easy",
    "category": [
      "bit manipulation"
    ]
  },
  {
    "id": 2221,
    "title": "Find Triangular Sum of an Array",
    "difficulty": "medium",
    "category": [
      "array",
      "combinatorics",
      "math",
      "simulation"
    ]
  },
  {
    "id": 2222,
    "title": "Number of Ways to Select Buildings",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 2223,
    "title": "Sum of Scores of Built Strings",
    "difficulty": "hard",
    "category": [
      "binary search",
      "hash table",
      "rolling hash",
      "string",
      "string matching",
      "string suffix structures"
    ]
  },
  {
    "id": 2224,
    "title": "Minimum Number of Operations to Convert Time",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 2225,
    "title": "Find Players With Zero or One Losses",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 2226,
    "title": "Maximum Candies Allocated to K Children",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 2227,
    "title": "Encrypt and Decrypt Strings",
    "difficulty": "hard",
    "category": [
      "array",
      "design",
      "hash table",
      "string",
      "trie"
    ]
  },
  {
    "id": 2228,
    "title": "Users With Two Purchases Within Seven Days",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2229,
    "title": "Check if an Array Is Consecutive",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 2230,
    "title": "The Users That Are Eligible for Discount",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 2231,
    "title": "Largest Number After Digit Swaps by Parity",
    "difficulty": "easy",
    "category": [
      "heap",
      "sorting"
    ]
  },
  {
    "id": 2232,
    "title": "Minimize Result by Adding Parentheses to Expression",
    "difficulty": "medium",
    "category": [
      "enumeration",
      "string"
    ]
  },
  {
    "id": 2233,
    "title": "Maximum Product After K Increments",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "heap"
    ]
  },
  {
    "id": 2234,
    "title": "Maximum Total Beauty of the Gardens",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "enumeration",
      "greedy",
      "prefix sum",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 2235,
    "title": "Add Two Integers",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 2236,
    "title": "Root Equals Sum of Children",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "tree"
    ]
  },
  {
    "id": 2237,
    "title": "Count Positions on Street With Required Brightness",
    "difficulty": "medium",
    "category": [
      "array",
      "prefix sum"
    ]
  },
  {
    "id": 2238,
    "title": "Number of Times a Driver Was a Passenger",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2239,
    "title": "Find Closest Number to Zero",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 2240,
    "title": "Number of Ways to Buy Pens and Pencils",
    "difficulty": "medium",
    "category": [
      "enumeration",
      "math"
    ]
  },
  {
    "id": 2241,
    "title": "Design an ATM Machine",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "greedy"
    ]
  },
  {
    "id": 2242,
    "title": "Maximum Score of a Node Sequence",
    "difficulty": "hard",
    "category": [
      "array",
      "enumeration",
      "graph",
      "sorting"
    ]
  },
  {
    "id": 2243,
    "title": "Calculate Digit Sum of a String",
    "difficulty": "easy",
    "category": [
      "simulation",
      "string"
    ]
  },
  {
    "id": 2244,
    "title": "Minimum Rounds to Complete All Tasks",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "greedy",
      "hash table"
    ]
  },
  {
    "id": 2245,
    "title": "Maximum Trailing Zeros in a Cornered Path",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "prefix sum"
    ]
  },
  {
    "id": 2246,
    "title": "Longest Path With Different Adjacent Characters",
    "difficulty": "hard",
    "category": [
      "array",
      "graph",
      "graph traversal",
      "string",
      "topological sort",
      "tree"
    ]
  },
  {
    "id": 2247,
    "title": "Maximum Cost of Trip With K Highways",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "graph"
    ]
  },
  {
    "id": 2248,
    "title": "Intersection of Multiple Arrays",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 2249,
    "title": "Count Lattice Points Inside a Circle",
    "difficulty": "medium",
    "category": [
      "array",
      "enumeration",
      "geometry",
      "hash table",
      "math"
    ]
  },
  {
    "id": 2250,
    "title": "Count Number of Rectangles Containing Each Point",
    "difficulty": "medium",
    "category": [
      "array",
      "binary indexed tree",
      "binary search",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 2251,
    "title": "Number of Flowers in Full Bloom",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "hash table",
      "ordered set",
      "prefix sum",
      "sorting"
    ]
  },
  {
    "id": 2252,
    "title": "Dynamic Pivoting of a Table",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 2253,
    "title": "Dynamic Unpivoting of a Table",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 2254,
    "title": "Design Video Sharing Platform",
    "difficulty": "hard",
    "category": [
      "design",
      "hash table",
      "ordered set",
      "stack"
    ]
  },
  {
    "id": 2255,
    "title": "Count Prefixes of a Given String",
    "difficulty": "easy",
    "category": [
      "array",
      "string"
    ]
  },
  {
    "id": 2256,
    "title": "Minimum Average Difference",
    "difficulty": "medium",
    "category": [
      "array",
      "prefix sum"
    ]
  },
  {
    "id": 2257,
    "title": "Count Unguarded Cells in the Grid",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "simulation"
    ]
  },
  {
    "id": 2258,
    "title": "Escape the Spreading Fire",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 2259,
    "title": "Remove Digit From Number to Maximize Result",
    "difficulty": "easy",
    "category": [
      "enumeration",
      "greedy",
      "string"
    ]
  },
  {
    "id": 2260,
    "title": "Minimum Consecutive Cards to Pick Up",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sliding window"
    ]
  },
  {
    "id": 2261,
    "title": "K Divisible Elements Subarrays",
    "difficulty": "medium",
    "category": [
      "array",
      "enumeration",
      "hash table",
      "rolling hash",
      "trie"
    ]
  },
  {
    "id": 2262,
    "title": "Total Appeal of A String",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2263,
    "title": "Make Array Non-decreasing or Non-increasing",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 2264,
    "title": "Largest 3-Same-Digit Number in String",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 2265,
    "title": "Count Nodes Equal to Average of Subtree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 2266,
    "title": "Count Number of Texts",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "hash table",
      "math",
      "string"
    ]
  },
  {
    "id": 2267,
    "title": " Check if There Is a Valid Parentheses String Path",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 2268,
    "title": "Minimum Number of Keypresses",
    "difficulty": "medium",
    "category": [
      "counting",
      "greedy",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 2269,
    "title": "Find the K-Beauty of a Number",
    "difficulty": "easy",
    "category": [
      "math",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 2270,
    "title": "Number of Ways to Split Array",
    "difficulty": "medium",
    "category": [
      "array",
      "prefix sum"
    ]
  },
  {
    "id": 2271,
    "title": "Maximum White Tiles Covered by a Carpet",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "greedy",
      "prefix sum",
      "sliding window",
      "sorting"
    ]
  },
  {
    "id": 2272,
    "title": "Substring With Largest Variance",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 2273,
    "title": "Find Resultant Array After Removing Anagrams",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 2274,
    "title": "Maximum Consecutive Floors Without Special Floors",
    "difficulty": "medium",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 2275,
    "title": "Largest Combination With Bitwise AND Greater Than Zero",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "counting",
      "hash table"
    ]
  },
  {
    "id": 2276,
    "title": "Count Integers in Intervals",
    "difficulty": "hard",
    "category": [
      "design",
      "ordered set",
      "segment tree"
    ]
  },
  {
    "id": 2277,
    "title": "Closest Node to Path in Tree",
    "difficulty": "hard",
    "category": [
      "array",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 2278,
    "title": "Percentage of Letter in String",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 2279,
    "title": "Maximum Bags With Full Capacity of Rocks",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 2280,
    "title": "Minimum Lines to Represent a Line Chart",
    "difficulty": "medium",
    "category": [
      "array",
      "geometry",
      "math",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 2281,
    "title": "Sum of Total Strength of Wizards",
    "difficulty": "hard",
    "category": [
      "array",
      "monotonic stack",
      "prefix sum",
      "stack"
    ]
  },
  {
    "id": 2282,
    "title": "Number of People That Can Be Seen in a Grid",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 2283,
    "title": "Check if Number Has Equal Digit Count and Digit Value",
    "difficulty": "easy",
    "category": [
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2284,
    "title": "Sender With Largest Word Count",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2285,
    "title": "Maximum Total Importance of Roads",
    "difficulty": "medium",
    "category": [
      "graph",
      "greedy",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 2286,
    "title": "Booking Concert Tickets in Groups",
    "difficulty": "hard",
    "category": [
      "binary indexed tree",
      "binary search",
      "design",
      "segment tree"
    ]
  },
  {
    "id": 2287,
    "title": "Rearrange Characters to Make Target String",
    "difficulty": "easy",
    "category": [
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2288,
    "title": "Apply Discount to Prices",
    "difficulty": "medium",
    "category": [
      "string"
    ]
  },
  {
    "id": 2289,
    "title": "Steps to Make Array Non-decreasing",
    "difficulty": "medium",
    "category": [
      "array",
      "linked list",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 2290,
    "title": "Minimum Obstacle Removal to Reach Corner",
    "difficulty": "hard",
    "category": [
      "array",
      "graph",
      "graph traversal",
      "heap",
      "matrix",
      "shortest path"
    ]
  },
  {
    "id": 2291,
    "title": "Maximum Profit From Trading Stocks",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 2292,
    "title": "Products With Three or More Orders in Two Consecutive Years",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2293,
    "title": "Min Max Game",
    "difficulty": "easy",
    "category": [
      "array",
      "simulation"
    ]
  },
  {
    "id": 2294,
    "title": "Partition Array Such That Maximum Difference Is K",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 2295,
    "title": "Replace Elements in an Array",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "simulation"
    ]
  },
  {
    "id": 2296,
    "title": "Design a Text Editor",
    "difficulty": "hard",
    "category": [
      "design",
      "linked list",
      "simulation",
      "stack",
      "string"
    ]
  },
  {
    "id": 2297,
    "title": "Jump Game VIII",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "graph",
      "monotonic stack",
      "shortest path",
      "stack"
    ]
  },
  {
    "id": 2298,
    "title": "Tasks Count in the Weekend",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2299,
    "title": "Strong Password Checker II",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 2300,
    "title": "Successful Pairs of Spells and Potions",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 2301,
    "title": "Match Substring After Replacement",
    "difficulty": "hard",
    "category": [
      "array",
      "hash table",
      "string",
      "string matching"
    ]
  },
  {
    "id": 2302,
    "title": "Count Subarrays With Score Less Than K",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "prefix sum",
      "sliding window"
    ]
  },
  {
    "id": 2303,
    "title": "Calculate Amount Paid in Taxes",
    "difficulty": "easy",
    "category": [
      "array",
      "simulation"
    ]
  },
  {
    "id": 2304,
    "title": "Minimum Path Cost in a Grid",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 2305,
    "title": "Fair Distribution of Cookies",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 2306,
    "title": "Naming a Company",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "enumeration",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2307,
    "title": "Check for Contradictions in Equations",
    "difficulty": "hard",
    "category": [
      "array",
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 2308,
    "title": "Arrange Table by Gender",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2309,
    "title": "Greatest English Letter in Upper and Lower Case",
    "difficulty": "easy",
    "category": [
      "enumeration",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2310,
    "title": "Sum of Numbers With Units Digit K",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "enumeration",
      "greedy",
      "math"
    ]
  },
  {
    "id": 2311,
    "title": "Longest Binary Subsequence Less Than or Equal to K",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "memoization",
      "string"
    ]
  },
  {
    "id": 2312,
    "title": "Selling Pieces of Wood",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "memoization"
    ]
  },
  {
    "id": 2313,
    "title": "Minimum Flips in Binary Tree to Get Result",
    "difficulty": "hard",
    "category": [
      "binary tree",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 2314,
    "title": "The First Day of the Maximum Recorded Degree in Each City",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2315,
    "title": "Count Asterisks",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 2316,
    "title": "Count Unreachable Pairs of Nodes in an Undirected Graph",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 2317,
    "title": "Maximum XOR After Operations ",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "math"
    ]
  },
  {
    "id": 2318,
    "title": "Number of Distinct Roll Sequences",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "memoization"
    ]
  },
  {
    "id": 2319,
    "title": "Check if Matrix Is X-Matrix",
    "difficulty": "easy",
    "category": [
      "array",
      "matrix"
    ]
  },
  {
    "id": 2320,
    "title": "Count Number of Ways to Place Houses",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 2321,
    "title": "Maximum Score Of Spliced Array",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 2322,
    "title": "Minimum Score After Removals on a Tree",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 2323,
    "title": "Find Minimum Time to Finish All Jobs II",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 2324,
    "title": "Product Sales Analysis IV",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2325,
    "title": "Decode the Message",
    "difficulty": "easy",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 2326,
    "title": "Spiral Matrix IV",
    "difficulty": "medium",
    "category": [
      "array",
      "linked list",
      "matrix",
      "simulation"
    ]
  },
  {
    "id": 2327,
    "title": "Number of People Aware of a Secret",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "queue",
      "simulation"
    ]
  },
  {
    "id": 2328,
    "title": "Number of Increasing Paths in a Grid",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "graph",
      "graph traversal",
      "matrix",
      "memoization",
      "topological sort"
    ]
  },
  {
    "id": 2329,
    "title": "Product Sales Analysis V",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 2330,
    "title": "Valid Palindrome IV",
    "difficulty": "medium",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 2331,
    "title": "Evaluate Boolean Binary Tree",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 2332,
    "title": "The Latest Time to Catch a Bus",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 2333,
    "title": "Minimum Sum of Squared Difference",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "greedy",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 2334,
    "title": "Subarray With Elements Greater Than Varying Threshold",
    "difficulty": "hard",
    "category": [
      "array",
      "monotonic stack",
      "stack",
      "union find"
    ]
  },
  {
    "id": 2335,
    "title": "Minimum Amount of Time to Fill Cups",
    "difficulty": "easy",
    "category": [
      "array",
      "greedy",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 2336,
    "title": "Smallest Number in Infinite Set",
    "difficulty": "medium",
    "category": [
      "design",
      "hash table",
      "heap",
      "ordered set"
    ]
  },
  {
    "id": 2337,
    "title": "Move Pieces to Obtain a String",
    "difficulty": "medium",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 2338,
    "title": "Count the Number of Ideal Arrays",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 2339,
    "title": "All the Matches of the League",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 2340,
    "title": "Minimum Adjacent Swaps to Make a Valid Array",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 2341,
    "title": "Maximum Number of Pairs in Array",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "hash table"
    ]
  },
  {
    "id": 2342,
    "title": "Max Sum of a Pair With Equal Sum of Digits",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 2343,
    "title": "Query Kth Smallest Trimmed Number",
    "difficulty": "medium",
    "category": [
      "array",
      "divide and conquer",
      "heap",
      "quickselect",
      "sorting",
      "string"
    ]
  },
  {
    "id": 2344,
    "title": "Minimum Deletions to Make Array Divisible",
    "difficulty": "hard",
    "category": [
      "array",
      "heap",
      "math",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 2345,
    "title": "Finding the Number of Visible Mountains",
    "difficulty": "medium",
    "category": [
      "array",
      "monotonic stack",
      "sorting",
      "stack"
    ]
  },
  {
    "id": 2346,
    "title": "Compute the Rank as a Percentage",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2347,
    "title": "Best Poker Hand",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "hash table"
    ]
  },
  {
    "id": 2348,
    "title": "Number of Zero-Filled Subarrays",
    "difficulty": "medium",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 2349,
    "title": "Design a Number Container System",
    "difficulty": "medium",
    "category": [
      "design",
      "hash table",
      "heap",
      "ordered set"
    ]
  },
  {
    "id": 2350,
    "title": "Shortest Impossible Sequence of Rolls",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "hash table"
    ]
  },
  {
    "id": 2351,
    "title": "First Letter to Appear Twice",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2352,
    "title": "Equal Row and Column Pairs",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "matrix",
      "simulation"
    ]
  },
  {
    "id": 2353,
    "title": "Design a Food Rating System",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "hash table",
      "heap",
      "ordered set",
      "string"
    ]
  },
  {
    "id": 2354,
    "title": "Number of Excellent Pairs",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "bit manipulation",
      "hash table"
    ]
  },
  {
    "id": 2355,
    "title": "Maximum Number of Books You Can Take",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 2356,
    "title": "Number of Unique Subjects Taught by Each Teacher",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 2357,
    "title": "Make Array Zero by Subtracting Equal Amounts",
    "difficulty": "easy",
    "category": [
      "array",
      "greedy",
      "hash table",
      "heap",
      "simulation",
      "sorting"
    ]
  },
  {
    "id": 2358,
    "title": "Maximum Number of Groups Entering a Competition",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "greedy",
      "math"
    ]
  },
  {
    "id": 2359,
    "title": "Find Closest Node to Given Two Nodes",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 2360,
    "title": "Longest Cycle in a Graph",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "topological sort"
    ]
  },
  {
    "id": 2361,
    "title": "Minimum Costs Using the Train Line",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 2362,
    "title": "Generate the Invoice",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 2363,
    "title": "Merge Similar Items",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "ordered set",
      "sorting"
    ]
  },
  {
    "id": 2364,
    "title": "Count Number of Bad Pairs",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "hash table",
      "math"
    ]
  },
  {
    "id": 2365,
    "title": "Task Scheduler II",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "simulation"
    ]
  },
  {
    "id": 2366,
    "title": "Minimum Replacements to Sort the Array",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "math"
    ]
  },
  {
    "id": 2367,
    "title": "Number of Arithmetic Triplets",
    "difficulty": "easy",
    "category": [
      "array",
      "enumeration",
      "hash table",
      "two pointers"
    ]
  },
  {
    "id": 2368,
    "title": "Reachable Nodes With Restrictions",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "graph traversal",
      "hash table",
      "tree",
      "union find"
    ]
  },
  {
    "id": 2369,
    "title": "Check if There is a Valid Partition For The Array",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 2370,
    "title": "Longest Ideal Subsequence",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2371,
    "title": "Minimize Maximum Value in a Grid",
    "difficulty": "hard",
    "category": [
      "array",
      "graph",
      "matrix",
      "sorting",
      "topological sort",
      "union find"
    ]
  },
  {
    "id": 2372,
    "title": "Calculate the Influence of Each Salesperson",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2373,
    "title": "Largest Local Values in a Matrix",
    "difficulty": "easy",
    "category": [
      "array",
      "matrix"
    ]
  },
  {
    "id": 2374,
    "title": "Node With Highest Edge Score",
    "difficulty": "medium",
    "category": [
      "graph",
      "hash table"
    ]
  },
  {
    "id": 2375,
    "title": "Construct Smallest Number From DI String",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "greedy",
      "stack",
      "string"
    ]
  },
  {
    "id": 2376,
    "title": "Count Special Integers",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 2377,
    "title": "Sort the Olympic Table",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 2378,
    "title": "Choose Edges to Maximize Score in a Tree",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 2379,
    "title": "Minimum Recolors to Get K Consecutive Black Blocks",
    "difficulty": "easy",
    "category": [
      "sliding window",
      "string"
    ]
  },
  {
    "id": 2380,
    "title": "Time Needed to Rearrange a Binary String",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "simulation",
      "string"
    ]
  },
  {
    "id": 2381,
    "title": "Shifting Letters II",
    "difficulty": "medium",
    "category": [
      "array",
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 2382,
    "title": "Maximum Segment Sum After Removals",
    "difficulty": "hard",
    "category": [
      "array",
      "ordered set",
      "prefix sum",
      "union find"
    ]
  },
  {
    "id": 2383,
    "title": "Minimum Hours of Training to Win a Competition",
    "difficulty": "easy",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 2384,
    "title": "Largest Palindromic Number",
    "difficulty": "medium",
    "category": [
      "counting",
      "greedy",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2385,
    "title": "Amount of Time for Binary Tree to Be Infected",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 2386,
    "title": "Find the K-Sum of an Array",
    "difficulty": "hard",
    "category": [
      "array",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 2387,
    "title": "Median of a Row Wise Sorted Matrix",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "matrix"
    ]
  },
  {
    "id": 2388,
    "title": "Change Null Values in a Table to the Previous Value",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2389,
    "title": "Longest Subsequence With Limited Sum",
    "difficulty": "easy",
    "category": [
      "array",
      "binary search",
      "greedy",
      "prefix sum",
      "sorting"
    ]
  },
  {
    "id": 2390,
    "title": "Removing Stars From a String",
    "difficulty": "medium",
    "category": [
      "simulation",
      "stack",
      "string"
    ]
  },
  {
    "id": 2391,
    "title": "Minimum Amount of Time to Collect Garbage",
    "difficulty": "medium",
    "category": [
      "array",
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 2392,
    "title": "Build a Matrix With Conditions",
    "difficulty": "hard",
    "category": [
      "array",
      "graph",
      "matrix",
      "topological sort"
    ]
  },
  {
    "id": 2393,
    "title": "Count Strictly Increasing Subarrays",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 2394,
    "title": "Employees With Deductions",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2395,
    "title": "Find Subarrays With Equal Sum",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 2396,
    "title": "Strictly Palindromic Number",
    "difficulty": "medium",
    "category": [
      "brainteaser",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 2397,
    "title": "Maximum Rows Covered by Columns",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "enumeration",
      "matrix"
    ]
  },
  {
    "id": 2398,
    "title": "Maximum Number of Robots Within Budget",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "heap",
      "monotonic queue",
      "prefix sum",
      "queue",
      "sliding window"
    ]
  },
  {
    "id": 2399,
    "title": "Check Distances Between Same Letters",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2400,
    "title": "Number of Ways to Reach a Position After Exactly k Steps",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 2401,
    "title": "Longest Nice Subarray",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "sliding window"
    ]
  },
  {
    "id": 2402,
    "title": "Meeting Rooms III",
    "difficulty": "hard",
    "category": [
      "array",
      "hash table",
      "heap",
      "simulation",
      "sorting"
    ]
  },
  {
    "id": 2403,
    "title": "Minimum Time to Kill All Monsters",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 2404,
    "title": "Most Frequent Even Element",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "hash table"
    ]
  },
  {
    "id": 2405,
    "title": "Optimal Partition of String",
    "difficulty": "medium",
    "category": [
      "greedy",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2406,
    "title": "Divide Intervals Into Minimum Number of Groups",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "heap",
      "prefix sum",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 2407,
    "title": "Longest Increasing Subsequence II",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree",
      "divide and conquer",
      "dynamic programming",
      "monotonic queue",
      "queue",
      "segment tree"
    ]
  },
  {
    "id": 2408,
    "title": "Design SQL",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2409,
    "title": "Count Days Spent Together",
    "difficulty": "easy",
    "category": [
      "math",
      "string"
    ]
  },
  {
    "id": 2410,
    "title": "Maximum Matching of Players With Trainers",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 2411,
    "title": "Smallest Subarrays With Maximum Bitwise OR",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "bit manipulation",
      "sliding window"
    ]
  },
  {
    "id": 2412,
    "title": "Minimum Money Required Before Transactions",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 2413,
    "title": "Smallest Even Multiple",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 2414,
    "title": "Length of the Longest Alphabetical Continuous Substring",
    "difficulty": "medium",
    "category": [
      "string"
    ]
  },
  {
    "id": 2415,
    "title": "Reverse Odd Levels of Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 2416,
    "title": "Sum of Prefix Scores of Strings",
    "difficulty": "hard",
    "category": [
      "array",
      "counting",
      "string",
      "trie"
    ]
  },
  {
    "id": 2417,
    "title": "Closest Fair Integer",
    "difficulty": "medium",
    "category": [
      "enumeration",
      "math"
    ]
  },
  {
    "id": 2418,
    "title": "Sort the People",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 2419,
    "title": "Longest Subarray With Maximum Bitwise AND",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "brainteaser"
    ]
  },
  {
    "id": 2420,
    "title": "Find All Good Indices",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "prefix sum"
    ]
  },
  {
    "id": 2421,
    "title": "Number of Good Paths",
    "difficulty": "hard",
    "category": [
      "array",
      "graph",
      "hash table",
      "sorting",
      "tree",
      "union find"
    ]
  },
  {
    "id": 2422,
    "title": "Merge Operations to Turn Array Into a Palindrome",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 2423,
    "title": "Remove Letter To Equalize Frequency",
    "difficulty": "easy",
    "category": [
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2424,
    "title": "Longest Uploaded Prefix",
    "difficulty": "medium",
    "category": [
      "binary indexed tree",
      "binary search",
      "design",
      "heap",
      "ordered set",
      "segment tree",
      "union find"
    ]
  },
  {
    "id": 2425,
    "title": "Bitwise XOR of All Pairings",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "brainteaser"
    ]
  },
  {
    "id": 2426,
    "title": "Number of Pairs Satisfying Inequality",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree",
      "binary search",
      "divide and conquer",
      "ordered set",
      "segment tree",
      "sorting"
    ]
  },
  {
    "id": 2427,
    "title": "Number of Common Factors",
    "difficulty": "easy",
    "category": [
      "enumeration",
      "math",
      "number theory"
    ]
  },
  {
    "id": 2428,
    "title": "Maximum Sum of an Hourglass",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "prefix sum"
    ]
  },
  {
    "id": 2429,
    "title": "Minimize XOR",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "greedy"
    ]
  },
  {
    "id": 2430,
    "title": "Maximum Deletions on a String",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "hash table",
      "rolling hash",
      "string",
      "string matching"
    ]
  },
  {
    "id": 2431,
    "title": "Maximize Total Tastiness of Purchased Fruits",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 2432,
    "title": "The Employee That Worked on the Longest Task",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 2433,
    "title": "Find The Original Array of Prefix Xor",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation"
    ]
  },
  {
    "id": 2434,
    "title": "Using a Robot to Print the Lexicographically Smallest String",
    "difficulty": "medium",
    "category": [
      "greedy",
      "hash table",
      "stack",
      "string"
    ]
  },
  {
    "id": 2435,
    "title": "Paths in Matrix Whose Sum Is Divisible by K",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 2436,
    "title": "Minimum Split Into Subarrays With GCD Greater Than One",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 2437,
    "title": "Number of Valid Clock Times",
    "difficulty": "easy",
    "category": [
      "enumeration",
      "string"
    ]
  },
  {
    "id": 2438,
    "title": "Range Product Queries of Powers",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "prefix sum"
    ]
  },
  {
    "id": 2439,
    "title": "Minimize Maximum of Array",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "dynamic programming",
      "greedy",
      "prefix sum"
    ]
  },
  {
    "id": 2440,
    "title": "Create Components With Same Value",
    "difficulty": "hard",
    "category": [
      "array",
      "enumeration",
      "graph traversal",
      "math",
      "tree"
    ]
  },
  {
    "id": 2441,
    "title": "Largest Positive Integer That Exists With Its Negative",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 2442,
    "title": "Count Number of Distinct Integers After Reverse Operations",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "hash table",
      "math"
    ]
  },
  {
    "id": 2443,
    "title": "Sum of Number and Its Reverse",
    "difficulty": "medium",
    "category": [
      "enumeration",
      "math"
    ]
  },
  {
    "id": 2444,
    "title": "Count Subarrays With Fixed Bounds",
    "difficulty": "hard",
    "category": [
      "array",
      "monotonic queue",
      "queue",
      "sliding window"
    ]
  },
  {
    "id": 2445,
    "title": "Number of Nodes With Value One",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 2446,
    "title": "Determine if Two Events Have Conflict",
    "difficulty": "easy",
    "category": [
      "array",
      "string"
    ]
  },
  {
    "id": 2447,
    "title": "Number of Subarrays With GCD Equal to K",
    "difficulty": "medium",
    "category": [
      "array",
      "math",
      "number theory"
    ]
  },
  {
    "id": 2448,
    "title": "Minimum Cost to Make Array Equal",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "greedy",
      "prefix sum",
      "sorting"
    ]
  },
  {
    "id": 2449,
    "title": "Minimum Number of Operations to Make Arrays Similar",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 2450,
    "title": "Number of Distinct Binary Strings After Applying Operations",
    "difficulty": "medium",
    "category": [
      "math",
      "string"
    ]
  },
  {
    "id": 2451,
    "title": "Odd String Difference",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2452,
    "title": "Words Within Two Edits of Dictionary",
    "difficulty": "medium",
    "category": [
      "array",
      "string",
      "trie"
    ]
  },
  {
    "id": 2453,
    "title": "Destroy Sequential Targets",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "hash table"
    ]
  },
  {
    "id": 2454,
    "title": "Next Greater Element IV",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "heap",
      "monotonic stack",
      "sorting",
      "stack"
    ]
  },
  {
    "id": 2455,
    "title": "Average Value of Even Numbers That Are Divisible by Three",
    "difficulty": "easy",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 2456,
    "title": "Most Popular Video Creator",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "heap",
      "sorting",
      "string"
    ]
  },
  {
    "id": 2457,
    "title": "Minimum Addition to Make Integer Beautiful",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 2458,
    "title": "Height of Binary Tree After Subtree Removal Queries",
    "difficulty": "hard",
    "category": [
      "array",
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 2459,
    "title": "Sort Array by Moving Items to Empty Space",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 2460,
    "title": "Apply Operations to an Array",
    "difficulty": "easy",
    "category": [
      "array",
      "simulation",
      "two pointers"
    ]
  },
  {
    "id": 2461,
    "title": "Maximum Sum of Distinct Subarrays With Length K",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sliding window"
    ]
  },
  {
    "id": 2462,
    "title": "Total Cost to Hire K Workers",
    "difficulty": "medium",
    "category": [
      "array",
      "heap",
      "simulation",
      "two pointers"
    ]
  },
  {
    "id": 2463,
    "title": "Minimum Total Distance Traveled",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 2464,
    "title": "Minimum Subarrays in a Valid Split",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 2465,
    "title": "Number of Distinct Averages",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 2466,
    "title": "Count Ways To Build Good Strings",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 2467,
    "title": "Most Profitable Path in a Tree",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 2468,
    "title": "Split Message Based on Limit",
    "difficulty": "hard",
    "category": [
      "binary search",
      "enumeration",
      "string"
    ]
  },
  {
    "id": 2469,
    "title": "Convert the Temperature",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 2470,
    "title": "Number of Subarrays With LCM Equal to K",
    "difficulty": "medium",
    "category": [
      "array",
      "math",
      "number theory"
    ]
  },
  {
    "id": 2471,
    "title": "Minimum Number of Operations to Sort a Binary Tree by Level",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 2472,
    "title": "Maximum Number of Non-overlapping Palindrome Substrings",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 2473,
    "title": "Minimum Cost to Buy Apples",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "heap",
      "shortest path"
    ]
  },
  {
    "id": 2474,
    "title": "Customers With Strictly Increasing Purchases",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 2475,
    "title": "Number of Unequal Triplets in Array",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 2476,
    "title": "Closest Nodes Queries in a Binary Search Tree",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "binary search tree",
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 2477,
    "title": "Minimum Fuel Cost to Report to the Capital",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 2478,
    "title": "Number of Beautiful Partitions",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 2479,
    "title": "Maximum XOR of Two Non-Overlapping Subtrees",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "tree",
      "trie"
    ]
  },
  {
    "id": 2480,
    "title": "Form a Chemical Bond",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 2481,
    "title": "Minimum Cuts to Divide a Circle",
    "difficulty": "easy",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 2482,
    "title": "Difference Between Ones and Zeros in Row and Column",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "simulation"
    ]
  },
  {
    "id": 2483,
    "title": "Minimum Penalty for a Shop",
    "difficulty": "medium",
    "category": [
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 2484,
    "title": "Count Palindromic Subsequences",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 2485,
    "title": "Find the Pivot Integer",
    "difficulty": "easy",
    "category": [
      "math",
      "prefix sum"
    ]
  },
  {
    "id": 2486,
    "title": "Append Characters to String to Make Subsequence",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 2487,
    "title": "Remove Nodes From Linked List",
    "difficulty": "medium",
    "category": [
      "linked list",
      "monotonic stack",
      "recursion",
      "stack"
    ]
  },
  {
    "id": 2488,
    "title": "Count Subarrays With Median K",
    "difficulty": "hard",
    "category": [
      "array",
      "hash table",
      "prefix sum"
    ]
  },
  {
    "id": 2489,
    "title": "Number of Substrings With Fixed Ratio",
    "difficulty": "medium",
    "category": [
      "hash table",
      "math",
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 2490,
    "title": "Circular Sentence",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 2491,
    "title": "Divide Players Into Teams of Equal Skill",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 2492,
    "title": "Minimum Score of a Path Between Two Cities",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 2493,
    "title": "Divide Nodes Into the Maximum Number of Groups",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 2494,
    "title": "Merge Overlapping Events in the Same Hall",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 2495,
    "title": "Number of Subarrays Having Even Product",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 2496,
    "title": "Maximum Value of a String in an Array",
    "difficulty": "easy",
    "category": [
      "array",
      "string"
    ]
  },
  {
    "id": 2497,
    "title": "Maximum Star Sum of a Graph",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "greedy",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 2498,
    "title": "Frog Jump II",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 2499,
    "title": "Minimum Total Cost to Make Arrays Unequal",
    "difficulty": "hard",
    "category": [
      "array",
      "counting",
      "greedy",
      "hash table"
    ]
  },
  {
    "id": 2500,
    "title": "Delete Greatest Value in Each Row",
    "difficulty": "easy",
    "category": [
      "array",
      "heap",
      "matrix",
      "simulation",
      "sorting"
    ]
  },
  {
    "id": 2501,
    "title": "Longest Square Streak in an Array",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "dynamic programming",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 2502,
    "title": "Design Memory Allocator",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "hash table",
      "simulation"
    ]
  },
  {
    "id": 2503,
    "title": "Maximum Number of Points From Grid Queries",
    "difficulty": "hard",
    "category": [
      "array",
      "graph traversal",
      "heap",
      "matrix",
      "sorting",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 2504,
    "title": "Concatenate the Name and the Profession",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 2505,
    "title": "Bitwise OR of All Subsequence Sums",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "brainteaser",
      "math"
    ]
  },
  {
    "id": 2506,
    "title": "Count Pairs Of Similar Strings",
    "difficulty": "easy",
    "category": [
      "array",
      "bit manipulation",
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2507,
    "title": "Smallest Value After Replacing With Sum of Prime Factors",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory",
      "simulation"
    ]
  },
  {
    "id": 2508,
    "title": "Add Edges to Make Degrees of All Nodes Even",
    "difficulty": "hard",
    "category": [
      "graph",
      "hash table"
    ]
  },
  {
    "id": 2509,
    "title": "Cycle Length Queries in a Tree",
    "difficulty": "hard",
    "category": [
      "array",
      "binary tree",
      "tree"
    ]
  },
  {
    "id": 2510,
    "title": "Check if There is a Path With Equal Number of 0's And 1's",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 2511,
    "title": "Maximum Enemy Forts That Can Be Captured",
    "difficulty": "easy",
    "category": [
      "array",
      "two pointers"
    ]
  },
  {
    "id": 2512,
    "title": "Reward Top K Students",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "heap",
      "sorting",
      "string"
    ]
  },
  {
    "id": 2513,
    "title": "Minimize the Maximum of Two Arrays",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math",
      "number theory"
    ]
  },
  {
    "id": 2514,
    "title": "Count Anagrams",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "counting",
      "hash table",
      "math",
      "string"
    ]
  },
  {
    "id": 2515,
    "title": "Shortest Distance to Target String in a Circular Array",
    "difficulty": "easy",
    "category": [
      "array",
      "string"
    ]
  },
  {
    "id": 2516,
    "title": "Take K of Each Character From Left and Right",
    "difficulty": "medium",
    "category": [
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 2517,
    "title": "Maximum Tastiness of Candy Basket",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 2518,
    "title": "Number of Great Partitions",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 2519,
    "title": "Count the Number of K-Big Indices",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree",
      "binary search",
      "divide and conquer",
      "ordered set",
      "segment tree",
      "sorting"
    ]
  },
  {
    "id": 2520,
    "title": "Count the Digits That Divide a Number",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 2521,
    "title": "Distinct Prime Factors of Product of Array",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "math",
      "number theory"
    ]
  },
  {
    "id": 2522,
    "title": "Partition String Into Substrings With Values at Most K",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "string"
    ]
  },
  {
    "id": 2523,
    "title": "Closest Prime Numbers in Range",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 2524,
    "title": "Maximum Frequency Score of a Subarray",
    "difficulty": "hard",
    "category": [
      "array",
      "hash table",
      "math",
      "sliding window",
      "stack"
    ]
  },
  {
    "id": 2525,
    "title": "Categorize Box According to Criteria",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 2526,
    "title": "Find Consecutive Integers from a Data Stream",
    "difficulty": "medium",
    "category": [
      "counting",
      "data stream",
      "design",
      "hash table",
      "queue"
    ]
  },
  {
    "id": 2527,
    "title": "Find Xor-Beauty of Array",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "math"
    ]
  },
  {
    "id": 2528,
    "title": "Maximize the Minimum Powered City",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "greedy",
      "prefix sum",
      "queue",
      "sliding window"
    ]
  },
  {
    "id": 2529,
    "title": "Maximum Count of Positive Integer and Negative Integer",
    "difficulty": "easy",
    "category": [
      "array",
      "binary search",
      "counting"
    ]
  },
  {
    "id": 2530,
    "title": "Maximal Score After Applying K Operations",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "heap"
    ]
  },
  {
    "id": 2531,
    "title": "Make Number of Distinct Characters Equal",
    "difficulty": "medium",
    "category": [
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2532,
    "title": "Time to Cross a Bridge",
    "difficulty": "hard",
    "category": [
      "array",
      "heap",
      "simulation"
    ]
  },
  {
    "id": 2533,
    "title": "Number of Good Binary Strings",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 2534,
    "title": "Time Taken to Cross the Door",
    "difficulty": "hard",
    "category": [
      "array",
      "queue",
      "simulation"
    ]
  },
  {
    "id": 2535,
    "title": "Difference Between Element Sum and Digit Sum of an Array",
    "difficulty": "easy",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 2536,
    "title": "Increment Submatrices by One",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "prefix sum"
    ]
  },
  {
    "id": 2537,
    "title": "Count the Number of Good Subarrays",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sliding window"
    ]
  },
  {
    "id": 2538,
    "title": "Difference Between Maximum and Minimum Price Sum",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 2539,
    "title": "Count the Number of Good Subsequences",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "counting",
      "hash table",
      "math",
      "string"
    ]
  },
  {
    "id": 2540,
    "title": "Minimum Common Value",
    "difficulty": "easy",
    "category": [
      "array",
      "binary search",
      "hash table",
      "two pointers"
    ]
  },
  {
    "id": 2541,
    "title": "Minimum Operations to Make Array Equal II",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "math"
    ]
  },
  {
    "id": 2542,
    "title": "Maximum Subsequence Score",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 2543,
    "title": "Check if Point Is Reachable",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 2544,
    "title": "Alternating Digit Sum",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 2545,
    "title": "Sort the Students by Their Kth Score",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "sorting"
    ]
  },
  {
    "id": 2546,
    "title": "Apply Bitwise Operations to Make Strings Equal",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "string"
    ]
  },
  {
    "id": 2547,
    "title": "Minimum Cost to Split an Array",
    "difficulty": "hard",
    "category": [
      "array",
      "counting",
      "dynamic programming",
      "hash table"
    ]
  },
  {
    "id": 2548,
    "title": "Maximum Price to Fill a Bag",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 2549,
    "title": "Count Distinct Numbers on Board",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "math",
      "simulation"
    ]
  },
  {
    "id": 2550,
    "title": "Count Collisions of Monkeys on a Polygon",
    "difficulty": "medium",
    "category": [
      "math",
      "recursion"
    ]
  },
  {
    "id": 2551,
    "title": "Put Marbles in Bags",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 2552,
    "title": "Count Increasing Quadruplets",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree",
      "dynamic programming",
      "enumeration",
      "prefix sum"
    ]
  },
  {
    "id": 2553,
    "title": "Separate the Digits in an Array",
    "difficulty": "easy",
    "category": [
      "array",
      "simulation"
    ]
  },
  {
    "id": 2554,
    "title": "Maximum Number of Integers to Choose From a Range I",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "greedy",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 2555,
    "title": "Maximize Win From Two Segments",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "sliding window"
    ]
  },
  {
    "id": 2556,
    "title": "Disconnect Path in a Binary Matrix by at Most One Flip",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 2557,
    "title": "Maximum Number of Integers to Choose From a Range II",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 2558,
    "title": "Take Gifts From the Richest Pile",
    "difficulty": "easy",
    "category": [
      "array",
      "heap",
      "simulation"
    ]
  },
  {
    "id": 2559,
    "title": "Count Vowel Strings in Ranges",
    "difficulty": "medium",
    "category": [
      "array",
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 2560,
    "title": "House Robber IV",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 2561,
    "title": "Rearranging Fruits",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "hash table"
    ]
  },
  {
    "id": 2562,
    "title": "Find the Array Concatenation Value",
    "difficulty": "easy",
    "category": [
      "array",
      "simulation",
      "two pointers"
    ]
  },
  {
    "id": 2563,
    "title": "Count the Number of Fair Pairs",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 2564,
    "title": "Substring XOR Queries",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2565,
    "title": "Subsequence With the Minimum Score",
    "difficulty": "hard",
    "category": [
      "binary search",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 2566,
    "title": "Maximum Difference by Remapping a Digit",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 2567,
    "title": "Minimum Score by Changing Two Elements",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 2568,
    "title": "Minimum Impossible OR",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "brainteaser"
    ]
  },
  {
    "id": 2569,
    "title": "Handling Sum Queries After Update",
    "difficulty": "hard",
    "category": [
      "array",
      "segment tree"
    ]
  },
  {
    "id": 2570,
    "title": "Merge Two 2D Arrays by Summing Values",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "two pointers"
    ]
  },
  {
    "id": 2571,
    "title": "Minimum Operations to Reduce an Integer to 0",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 2572,
    "title": "Count the Number of Square-Free Subsets",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 2573,
    "title": "Find the String with LCP",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "greedy",
      "matrix",
      "string",
      "union find"
    ]
  },
  {
    "id": 2574,
    "title": "Left and Right Sum Differences",
    "difficulty": "easy",
    "category": [
      "array",
      "prefix sum"
    ]
  },
  {
    "id": 2575,
    "title": "Find the Divisibility Array of a String",
    "difficulty": "medium",
    "category": [
      "array",
      "math",
      "string"
    ]
  },
  {
    "id": 2576,
    "title": "Find the Maximum Number of Marked Indices",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 2577,
    "title": "Minimum Time to Visit a Cell In a Grid",
    "difficulty": "hard",
    "category": [
      "array",
      "graph",
      "graph traversal",
      "heap",
      "matrix",
      "shortest path"
    ]
  },
  {
    "id": 2578,
    "title": "Split With Minimum Sum",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 2579,
    "title": "Count Total Number of Colored Cells",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 2580,
    "title": "Count Ways to Group Overlapping Ranges",
    "difficulty": "medium",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 2581,
    "title": "Count Number of Possible Root Nodes",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 2582,
    "title": "Pass the Pillow",
    "difficulty": "easy",
    "category": [
      "math",
      "simulation"
    ]
  },
  {
    "id": 2583,
    "title": "Kth Largest Sum in a Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 2584,
    "title": "Split the Array to Make Coprime Products",
    "difficulty": "hard",
    "category": [
      "array",
      "hash table",
      "math",
      "number theory"
    ]
  },
  {
    "id": 2585,
    "title": "Number of Ways to Earn Points",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 2586,
    "title": "Count the Number of Vowel Strings in Range",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "string"
    ]
  },
  {
    "id": 2587,
    "title": "Rearrange Array to Maximize Prefix Score",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "prefix sum",
      "sorting"
    ]
  },
  {
    "id": 2588,
    "title": "Count the Number of Beautiful Subarrays",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "hash table",
      "prefix sum"
    ]
  },
  {
    "id": 2589,
    "title": "Minimum Time to Complete All Tasks",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "greedy",
      "sorting",
      "stack"
    ]
  },
  {
    "id": 2590,
    "title": "Design a Todo List",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 2591,
    "title": "Distribute Money to Maximum Children",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 2592,
    "title": "Maximize Greatness of an Array",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 2593,
    "title": "Find Score of an Array After Marking All Elements",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "heap",
      "simulation",
      "sorting"
    ]
  },
  {
    "id": 2594,
    "title": "Minimum Time to Repair Cars",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 2595,
    "title": "Number of Even and Odd Bits",
    "difficulty": "easy",
    "category": [
      "bit manipulation"
    ]
  },
  {
    "id": 2596,
    "title": "Check Knight Tour Configuration",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "matrix",
      "simulation"
    ]
  },
  {
    "id": 2597,
    "title": "The Number of Beautiful Subsets",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "combinatorics",
      "dynamic programming",
      "hash table",
      "math",
      "sorting"
    ]
  },
  {
    "id": 2598,
    "title": "Smallest Missing Non-negative Integer After Operations",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "hash table",
      "math"
    ]
  },
  {
    "id": 2599,
    "title": "Make the Prefix Sum Non-negative",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "heap"
    ]
  },
  {
    "id": 2600,
    "title": "K Items With the Maximum Sum",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 2601,
    "title": "Prime Subtraction Operation",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 2602,
    "title": "Minimum Operations to Make All Array Elements Equal",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "prefix sum",
      "sorting"
    ]
  },
  {
    "id": 2603,
    "title": "Collect Coins in a Tree",
    "difficulty": "hard",
    "category": [
      "array",
      "graph",
      "topological sort",
      "tree"
    ]
  },
  {
    "id": 2604,
    "title": "Minimum Time to Eat All Grains",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 2605,
    "title": "Form Smallest Number From Two Digit Arrays",
    "difficulty": "easy",
    "category": [
      "array",
      "enumeration",
      "hash table"
    ]
  },
  {
    "id": 2606,
    "title": "Find the Substring With Maximum Cost",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2607,
    "title": "Make K-Subarray Sums Equal",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "math",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 2608,
    "title": "Shortest Cycle in a Graph",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 2609,
    "title": "Find the Longest Balanced Substring of a Binary String",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 2610,
    "title": "Convert an Array Into a 2D Array With Conditions",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 2611,
    "title": "Mice and Cheese",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 2612,
    "title": "Minimum Reverse Operations",
    "difficulty": "hard",
    "category": [
      "array",
      "graph traversal",
      "ordered set"
    ]
  },
  {
    "id": 2613,
    "title": "Beautiful Pairs",
    "difficulty": "hard",
    "category": [
      "array",
      "divide and conquer",
      "geometry",
      "math",
      "ordered set",
      "sorting"
    ]
  },
  {
    "id": 2614,
    "title": "Prime In Diagonal",
    "difficulty": "easy",
    "category": [
      "array",
      "math",
      "matrix",
      "number theory"
    ]
  },
  {
    "id": 2615,
    "title": "Sum of Distances",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "prefix sum"
    ]
  },
  {
    "id": 2616,
    "title": "Minimize the Maximum Difference of Pairs",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 2617,
    "title": "Minimum Number of Visited Cells in a Grid",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "graph traversal",
      "heap",
      "matrix",
      "monotonic stack",
      "stack",
      "union find"
    ]
  },
  {
    "id": 2618,
    "title": "Check if Object Instance of Class",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2619,
    "title": "Array Prototype Last",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2620,
    "title": "Counter",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2621,
    "title": "Sleep",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2622,
    "title": "Cache With Time Limit",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2623,
    "title": "Memoize",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2624,
    "title": "Snail Traversal",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2625,
    "title": "Flatten Deeply Nested Array",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2626,
    "title": "Array Reduce Transformation",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2627,
    "title": "Debounce",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2628,
    "title": "JSON Deep Equal",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2629,
    "title": "Function Composition",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2630,
    "title": "Memoize II",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 2631,
    "title": "Group By",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2632,
    "title": "Curry",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2633,
    "title": "Convert Object to JSON String",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2634,
    "title": "Filter Elements from Array",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2635,
    "title": "Apply Transform Over Each Element in Array",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2636,
    "title": "Promise Pool",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2637,
    "title": "Promise Time Limit",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2638,
    "title": "Count the Number of K-Free Subsets",
    "difficulty": "medium",
    "category": [
      "array",
      "combinatorics",
      "dynamic programming",
      "math",
      "sorting"
    ]
  },
  {
    "id": 2639,
    "title": "Find the Width of Columns of a Grid",
    "difficulty": "easy",
    "category": [
      "array",
      "matrix"
    ]
  },
  {
    "id": 2640,
    "title": "Find the Score of All Prefixes of an Array",
    "difficulty": "medium",
    "category": [
      "array",
      "prefix sum"
    ]
  },
  {
    "id": 2641,
    "title": "Cousins in Binary Tree II",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 2642,
    "title": "Design Graph With Shortest Path Calculator",
    "difficulty": "hard",
    "category": [
      "design",
      "graph",
      "heap",
      "shortest path"
    ]
  },
  {
    "id": 2643,
    "title": "Row With Maximum Ones",
    "difficulty": "easy",
    "category": [
      "array",
      "matrix"
    ]
  },
  {
    "id": 2644,
    "title": "Find the Maximum Divisibility Score",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 2645,
    "title": "Minimum Additions to Make Valid String",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "stack",
      "string"
    ]
  },
  {
    "id": 2646,
    "title": "Minimize the Total Price of the Trips",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 2647,
    "title": "Color the Triangle Red",
    "difficulty": "hard",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 2648,
    "title": "Generate Fibonacci Sequence",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2649,
    "title": "Nested Array Generator",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2650,
    "title": "Design Cancellable Function",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 2651,
    "title": "Calculate Delayed Arrival Time",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 2652,
    "title": "Sum Multiples",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 2653,
    "title": "Sliding Subarray Beauty",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sliding window"
    ]
  },
  {
    "id": 2654,
    "title": "Minimum Number of Operations to Make All Array Elements Equal to 1",
    "difficulty": "medium",
    "category": [
      "array",
      "math",
      "number theory"
    ]
  },
  {
    "id": 2655,
    "title": "Find Maximal Uncovered Ranges",
    "difficulty": "medium",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 2656,
    "title": "Maximum Sum With Exactly K Elements ",
    "difficulty": "easy",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 2657,
    "title": "Find the Prefix Common Array of Two Arrays",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "hash table"
    ]
  },
  {
    "id": 2658,
    "title": "Maximum Number of Fish in a Grid",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "matrix",
      "union find"
    ]
  },
  {
    "id": 2659,
    "title": "Make Array Empty",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree",
      "binary search",
      "greedy",
      "ordered set",
      "segment tree",
      "sorting"
    ]
  },
  {
    "id": 2660,
    "title": "Determine the Winner of a Bowling Game",
    "difficulty": "easy",
    "category": [
      "array",
      "simulation"
    ]
  },
  {
    "id": 2661,
    "title": "First Completely Painted Row or Column",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "matrix"
    ]
  },
  {
    "id": 2662,
    "title": "Minimum Cost of a Path With Special Roads",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "heap",
      "shortest path"
    ]
  },
  {
    "id": 2663,
    "title": "Lexicographically Smallest Beautiful String",
    "difficulty": "hard",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 2664,
    "title": "The Knight's Tour",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "matrix"
    ]
  },
  {
    "id": 2665,
    "title": "Counter II",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2666,
    "title": "Allow One Function Call",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2667,
    "title": "Create Hello World Function",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2668,
    "title": "Find Latest Salaries",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 2669,
    "title": "Count Artist Occurrences On Spotify Ranking List",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 2670,
    "title": "Find the Distinct Difference Array",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 2671,
    "title": "Frequency Tracker",
    "difficulty": "medium",
    "category": [
      "design",
      "hash table"
    ]
  },
  {
    "id": 2672,
    "title": "Number of Adjacent Elements With the Same Color",
    "difficulty": "medium",
    "category": [
      "array"
    ]
  },
  {
    "id": 2673,
    "title": "Make Costs of Paths Equal in a Binary Tree",
    "difficulty": "medium",
    "category": [
      "array",
      "binary tree",
      "dynamic programming",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 2674,
    "title": "Split a Circular Linked List",
    "difficulty": "medium",
    "category": [
      "linked list",
      "two pointers"
    ]
  },
  {
    "id": 2675,
    "title": "Array of Objects to Matrix",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 2676,
    "title": "Throttle",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2677,
    "title": "Chunk Array",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2678,
    "title": "Number of Senior Citizens",
    "difficulty": "easy",
    "category": [
      "array",
      "string"
    ]
  },
  {
    "id": 2679,
    "title": "Sum in a Matrix",
    "difficulty": "medium",
    "category": [
      "array",
      "heap",
      "matrix",
      "simulation",
      "sorting"
    ]
  },
  {
    "id": 2680,
    "title": "Maximum OR",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "greedy",
      "prefix sum"
    ]
  },
  {
    "id": 2681,
    "title": "Power of Heroes",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "math",
      "prefix sum",
      "sorting"
    ]
  },
  {
    "id": 2682,
    "title": "Find the Losers of the Circular Game",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "simulation"
    ]
  },
  {
    "id": 2683,
    "title": "Neighboring Bitwise XOR",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation"
    ]
  },
  {
    "id": 2684,
    "title": "Maximum Number of Moves in a Grid",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 2685,
    "title": "Count the Number of Complete Components",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 2686,
    "title": "Immediate Food Delivery III",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2687,
    "title": "Bikes Last Time Used ",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 2688,
    "title": "Find Active Users",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2689,
    "title": "Extract Kth Character From The Rope Tree",
    "difficulty": "easy",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 2690,
    "title": "Infinite Method Object",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2691,
    "title": "Immutability Helper",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 2692,
    "title": "Make Object Immutable",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2693,
    "title": "Call Function with Custom Context",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2694,
    "title": "Event Emitter",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2695,
    "title": "Array Wrapper",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2696,
    "title": "Minimum String Length After Removing Substrings",
    "difficulty": "easy",
    "category": [
      "simulation",
      "stack",
      "string"
    ]
  },
  {
    "id": 2697,
    "title": "Lexicographically Smallest Palindrome",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 2698,
    "title": "Find the Punishment Number of an Integer",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "math"
    ]
  },
  {
    "id": 2699,
    "title": "Modify Graph Edge Weights",
    "difficulty": "hard",
    "category": [
      "graph",
      "heap",
      "shortest path"
    ]
  },
  {
    "id": 2700,
    "title": "Differences Between Two Objects",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2701,
    "title": "Consecutive Transactions with Increasing Amounts",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 2702,
    "title": "Minimum Operations to Make Numbers Non-positive",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 2703,
    "title": "Return Length of Arguments Passed",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2704,
    "title": "To Be Or Not To Be",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2705,
    "title": "Compact Object",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2706,
    "title": "Buy Two Chocolates",
    "difficulty": "easy",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 2707,
    "title": "Extra Characters in a String",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "hash table",
      "string",
      "trie"
    ]
  },
  {
    "id": 2708,
    "title": "Maximum Strength of a Group",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "dynamic programming",
      "enumeration",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 2709,
    "title": "Greatest Common Divisor Traversal",
    "difficulty": "hard",
    "category": [
      "array",
      "math",
      "number theory",
      "union find"
    ]
  },
  {
    "id": 2710,
    "title": "Remove Trailing Zeros From a String",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 2711,
    "title": "Difference of Number of Distinct Values on Diagonals",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "matrix"
    ]
  },
  {
    "id": 2712,
    "title": "Minimum Cost to Make All Characters Equal",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "string"
    ]
  },
  {
    "id": 2713,
    "title": "Maximum Strictly Increasing Cells in a Matrix",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "dynamic programming",
      "hash table",
      "matrix",
      "memoization",
      "ordered set",
      "sorting"
    ]
  },
  {
    "id": 2714,
    "title": "Find Shortest Path with K Hops",
    "difficulty": "hard",
    "category": [
      "graph",
      "heap",
      "shortest path"
    ]
  },
  {
    "id": 2715,
    "title": "Timeout Cancellation",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2716,
    "title": "Minimize String Length",
    "difficulty": "easy",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 2717,
    "title": "Semi-Ordered Permutation",
    "difficulty": "easy",
    "category": [
      "array",
      "simulation"
    ]
  },
  {
    "id": 2718,
    "title": "Sum of Matrix After Queries",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 2719,
    "title": "Count of Integers",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "string"
    ]
  },
  {
    "id": 2720,
    "title": "Popularity Percentage",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 2721,
    "title": "Execute Asynchronous Functions in Parallel",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2722,
    "title": "Join Two Arrays by ID",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2723,
    "title": "Add Two Promises",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2724,
    "title": "Sort By",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2725,
    "title": "Interval Cancellation",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2726,
    "title": "Calculator with Method Chaining",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2727,
    "title": "Is Object Empty",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2728,
    "title": "Count Houses in a Circular Street",
    "difficulty": "easy",
    "category": [
      "array",
      "interactive"
    ]
  },
  {
    "id": 2729,
    "title": "Check if The Number is Fascinating",
    "difficulty": "easy",
    "category": [
      "hash table",
      "math"
    ]
  },
  {
    "id": 2730,
    "title": "Find the Longest Semi-Repetitive Substring",
    "difficulty": "medium",
    "category": [
      "sliding window",
      "string"
    ]
  },
  {
    "id": 2731,
    "title": "Movement of Robots",
    "difficulty": "medium",
    "category": [
      "array",
      "brainteaser",
      "prefix sum",
      "sorting"
    ]
  },
  {
    "id": 2732,
    "title": "Find a Good Subset of the Matrix",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "hash table",
      "matrix"
    ]
  },
  {
    "id": 2733,
    "title": "Neither Minimum nor Maximum",
    "difficulty": "easy",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 2734,
    "title": "Lexicographically Smallest String After Substring Operation",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 2735,
    "title": "Collecting Chocolates",
    "difficulty": "medium",
    "category": [
      "array",
      "enumeration"
    ]
  },
  {
    "id": 2736,
    "title": "Maximum Sum Queries",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree",
      "binary search",
      "monotonic stack",
      "segment tree",
      "sorting",
      "stack"
    ]
  },
  {
    "id": 2737,
    "title": "Find the Closest Marked Node",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "heap",
      "shortest path"
    ]
  },
  {
    "id": 2738,
    "title": "Count Occurrences in Text",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2739,
    "title": "Total Distance Traveled",
    "difficulty": "easy",
    "category": [
      "math",
      "simulation"
    ]
  },
  {
    "id": 2740,
    "title": "Find the Value of the Partition",
    "difficulty": "medium",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 2741,
    "title": "Special Permutations",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 2742,
    "title": "Painting the Walls",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 2743,
    "title": "Count Substrings Without Repeating Character",
    "difficulty": "medium",
    "category": [
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 2744,
    "title": "Find Maximum Number of String Pairs",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "simulation",
      "string"
    ]
  },
  {
    "id": 2745,
    "title": "Construct the Longest New String",
    "difficulty": "medium",
    "category": [
      "brainteaser",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 2746,
    "title": "Decremental String Concatenation",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 2747,
    "title": "Count Zero Request Servers",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sliding window",
      "sorting"
    ]
  },
  {
    "id": 2748,
    "title": "Number of Beautiful Pairs",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "hash table",
      "math",
      "number theory"
    ]
  },
  {
    "id": 2749,
    "title": "Minimum Operations to Make the Integer Zero",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brainteaser",
      "enumeration"
    ]
  },
  {
    "id": 2750,
    "title": "Ways to Split Array Into Good Subarrays",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 2751,
    "title": "Robot Collisions",
    "difficulty": "hard",
    "category": [
      "array",
      "simulation",
      "sorting",
      "stack"
    ]
  },
  {
    "id": 2752,
    "title": "Customers with Maximum Number of Transactions on Consecutive Days",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 2753,
    "title": "Count Houses in a Circular Street II",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 2754,
    "title": "Bind Function to Context",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2755,
    "title": "Deep Merge of Two Objects",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2756,
    "title": "Query Batching",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 2757,
    "title": "Generate Circular Array Values",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2758,
    "title": "Next Day",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2759,
    "title": "Convert JSON String to Object",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 2760,
    "title": "Longest Even Odd Subarray With Threshold",
    "difficulty": "easy",
    "category": [
      "array",
      "sliding window"
    ]
  },
  {
    "id": 2761,
    "title": "Prime Pairs With Target Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "enumeration",
      "math",
      "number theory"
    ]
  },
  {
    "id": 2762,
    "title": "Continuous Subarrays",
    "difficulty": "medium",
    "category": [
      "array",
      "heap",
      "monotonic queue",
      "ordered set",
      "queue",
      "sliding window"
    ]
  },
  {
    "id": 2763,
    "title": "Sum of Imbalance Numbers of All Subarrays",
    "difficulty": "hard",
    "category": [
      "array",
      "hash table",
      "ordered set"
    ]
  },
  {
    "id": 2764,
    "title": "Is Array a Preorder of Some ‌Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "stack",
      "tree"
    ]
  },
  {
    "id": 2765,
    "title": "Longest Alternating Subarray",
    "difficulty": "easy",
    "category": [
      "array",
      "enumeration"
    ]
  },
  {
    "id": 2766,
    "title": "Relocate Marbles",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "simulation",
      "sorting"
    ]
  },
  {
    "id": 2767,
    "title": "Partition String Into Minimum Beautiful Substrings",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "dynamic programming",
      "hash table",
      "string"
    ]
  },
  {
    "id": 2768,
    "title": "Number of Black Blocks",
    "difficulty": "medium",
    "category": [
      "array",
      "enumeration",
      "hash table"
    ]
  },
  {
    "id": 2769,
    "title": "Find the Maximum Achievable Number",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 2770,
    "title": "Maximum Number of Jumps to Reach the Last Index",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 2771,
    "title": "Longest Non-decreasing Subarray From Two Arrays",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 2772,
    "title": "Apply Operations to Make All Array Elements Equal to Zero",
    "difficulty": "medium",
    "category": [
      "array",
      "prefix sum"
    ]
  },
  {
    "id": 2773,
    "title": "Height of Special Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 2774,
    "title": "Array Upper Bound",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2775,
    "title": "Undefined to Null",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2776,
    "title": "Convert Callback Based Function to Promise Based Function",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2777,
    "title": "Date Range Generator",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2778,
    "title": "Sum of Squares of Special Elements ",
    "difficulty": "easy",
    "category": [
      "array",
      "enumeration"
    ]
  },
  {
    "id": 2779,
    "title": "Maximum Beauty of an Array After Applying Operation",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "sliding window",
      "sorting"
    ]
  },
  {
    "id": 2780,
    "title": "Minimum Index of a Valid Split",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 2781,
    "title": "Length of the Longest Valid Substring",
    "difficulty": "hard",
    "category": [
      "array",
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 2782,
    "title": "Number of Unique Categories",
    "difficulty": "medium",
    "category": [
      "counting",
      "interactive",
      "union find"
    ]
  },
  {
    "id": 2783,
    "title": "Flight Occupancy and Waitlist Analysis",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2784,
    "title": "Check if Array is Good",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 2785,
    "title": "Sort Vowels in a String",
    "difficulty": "medium",
    "category": [
      "sorting",
      "string"
    ]
  },
  {
    "id": 2786,
    "title": "Visit Array Positions to Maximize Score",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 2787,
    "title": "Ways to Express an Integer as Sum of Powers",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 2788,
    "title": "Split Strings by Separator",
    "difficulty": "easy",
    "category": [
      "array",
      "string"
    ]
  },
  {
    "id": 2789,
    "title": "Largest Element in an Array after Merge Operations",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 2790,
    "title": "Maximum Number of Groups With Increasing Length",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 2791,
    "title": "Count Paths That Can Form a Palindrome in a Tree",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 2792,
    "title": "Count Nodes That Are Great Enough",
    "difficulty": "hard",
    "category": [
      "binary tree",
      "divide and conquer",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 2793,
    "title": "Status of Flight Tickets",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 2794,
    "title": "Create Object from Two Arrays",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2795,
    "title": "Parallel Execution of Promises for Individual Results Retrieval",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2796,
    "title": "Repeat String",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2797,
    "title": "Partial Function with Placeholders",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2798,
    "title": "Number of Employees Who Met the Target",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 2799,
    "title": "Count Complete Subarrays in an Array",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sliding window"
    ]
  },
  {
    "id": 2800,
    "title": "Shortest String That Contains Three Strings",
    "difficulty": "medium",
    "category": [
      "enumeration",
      "greedy",
      "string"
    ]
  },
  {
    "id": 2801,
    "title": "Count Stepping Numbers in Range",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 2802,
    "title": "Find The K-th Lucky Number",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "math",
      "string"
    ]
  },
  {
    "id": 2803,
    "title": "Factorial Generator",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2804,
    "title": "Array Prototype ForEach",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2805,
    "title": "Custom Interval",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2806,
    "title": "Account Balance After Rounded Purchase",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 2807,
    "title": "Insert Greatest Common Divisors in Linked List",
    "difficulty": "medium",
    "category": [
      "linked list",
      "math",
      "number theory"
    ]
  },
  {
    "id": 2808,
    "title": "Minimum Seconds to Equalize a Circular Array",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 2809,
    "title": "Minimum Time to Make Array Sum At Most x",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 2810,
    "title": "Faulty Keyboard",
    "difficulty": "easy",
    "category": [
      "simulation",
      "string"
    ]
  },
  {
    "id": 2811,
    "title": "Check if it is Possible to Split Array",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 2812,
    "title": "Find the Safest Path in a Grid",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "graph traversal",
      "heap",
      "matrix",
      "union find"
    ]
  },
  {
    "id": 2813,
    "title": "Maximum Elegance of a K-Length Subsequence",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "hash table",
      "heap",
      "sorting",
      "stack"
    ]
  },
  {
    "id": 2814,
    "title": "Minimum Time Takes to Reach Destination Without Drowning",
    "difficulty": "hard",
    "category": [
      "array",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 2815,
    "title": "Max Pair Sum in an Array",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 2816,
    "title": "Double a Number Represented as a Linked List",
    "difficulty": "medium",
    "category": [
      "linked list",
      "math",
      "stack"
    ]
  },
  {
    "id": 2817,
    "title": "Minimum Absolute Difference Between Elements With Constraint",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "ordered set"
    ]
  },
  {
    "id": 2818,
    "title": "Apply Operations to Maximize Score",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "math",
      "monotonic stack",
      "number theory",
      "sorting",
      "stack"
    ]
  },
  {
    "id": 2819,
    "title": "Minimum Relative Loss After Buying Chocolates",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "prefix sum",
      "sorting"
    ]
  },
  {
    "id": 2820,
    "title": "Election Results",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2821,
    "title": "Delay the Resolution of Each Promise",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2822,
    "title": "Inversion of Object",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2823,
    "title": "Deep Object Filter",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 2824,
    "title": "Count Pairs Whose Sum is Less than Target",
    "difficulty": "easy",
    "category": [
      "array",
      "binary search",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 2825,
    "title": "Make String a Subsequence Using Cyclic Increments",
    "difficulty": "medium",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 2826,
    "title": "Sorting Three Groups",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "dynamic programming"
    ]
  },
  {
    "id": 2827,
    "title": "Number of Beautiful Integers in the Range",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 2828,
    "title": "Check if a String Is an Acronym of Words",
    "difficulty": "easy",
    "category": [
      "array",
      "string"
    ]
  },
  {
    "id": 2829,
    "title": "Determine the Minimum Sum of a k-avoiding Array",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 2830,
    "title": "Maximize the Profit as the Salesman",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "dynamic programming",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 2831,
    "title": "Find the Longest Equal Subarray",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "hash table",
      "sliding window"
    ]
  },
  {
    "id": 2832,
    "title": "Maximal Range That Each Element Is Maximum in It",
    "difficulty": "medium",
    "category": [
      "array",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 2833,
    "title": "Furthest Point From Origin",
    "difficulty": "easy",
    "category": [
      "counting",
      "string"
    ]
  },
  {
    "id": 2834,
    "title": "Find the Minimum Possible Sum of a Beautiful Array",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 2835,
    "title": "Minimum Operations to Form Subsequence With Target Sum",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "greedy"
    ]
  },
  {
    "id": 2836,
    "title": "Maximize Value of Function in a Ball Passing Game",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 2837,
    "title": "Total Traveled Distance",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 2838,
    "title": "Maximum Coins Heroes Can Collect",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "prefix sum",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 2839,
    "title": "Check if Strings Can be Made Equal With Operations I",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 2840,
    "title": "Check if Strings Can be Made Equal With Operations II",
    "difficulty": "medium",
    "category": [
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 2841,
    "title": "Maximum Sum of Almost Unique Subarray",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sliding window"
    ]
  },
  {
    "id": 2842,
    "title": "Count K-Subsequences of a String With Maximum Beauty",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "greedy",
      "hash table",
      "math",
      "string"
    ]
  },
  {
    "id": 2843,
    "title": "  Count Symmetric Integers",
    "difficulty": "easy",
    "category": [
      "enumeration",
      "math"
    ]
  },
  {
    "id": 2844,
    "title": "Minimum Operations to Make a Special Number",
    "difficulty": "medium",
    "category": [
      "enumeration",
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 2845,
    "title": "Count of Interesting Subarrays",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "prefix sum"
    ]
  },
  {
    "id": 2846,
    "title": "Minimum Edge Weight Equilibrium Queries in a Tree",
    "difficulty": "hard",
    "category": [
      "array",
      "graph",
      "strongly connected component",
      "tree"
    ]
  },
  {
    "id": 2847,
    "title": "Smallest Number With Given Digit Product",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 2848,
    "title": "Points That Intersect With Cars",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "prefix sum"
    ]
  },
  {
    "id": 2849,
    "title": "Determine if a Cell Is Reachable at a Given Time",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 2850,
    "title": "Minimum Moves to Spread Stones Over Grid",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "graph traversal",
      "matrix"
    ]
  },
  {
    "id": 2851,
    "title": "String Transformation",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "string",
      "string matching"
    ]
  },
  {
    "id": 2852,
    "title": "Sum of Remoteness of All Cells",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "hash table",
      "matrix",
      "union find"
    ]
  },
  {
    "id": 2853,
    "title": "Highest Salaries Difference",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 2854,
    "title": "Rolling Average Steps",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2855,
    "title": "Minimum Right Shifts to Sort the Array",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 2856,
    "title": "Minimum Array Length After Pair Removals",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "counting",
      "greedy",
      "hash table",
      "two pointers"
    ]
  },
  {
    "id": 2857,
    "title": "Count Pairs of Points With Distance k",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "hash table"
    ]
  },
  {
    "id": 2858,
    "title": "Minimum Edge Reversals So Every Node Is Reachable",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 2859,
    "title": "Sum of Values at Indices With K Set Bits",
    "difficulty": "easy",
    "category": [
      "array",
      "bit manipulation"
    ]
  },
  {
    "id": 2860,
    "title": "Happy Students",
    "difficulty": "medium",
    "category": [
      "array",
      "enumeration",
      "sorting"
    ]
  },
  {
    "id": 2861,
    "title": "Maximum Number of Alloys",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 2862,
    "title": "Maximum Element-Sum of a Complete Subset of Indices",
    "difficulty": "hard",
    "category": [
      "array",
      "math",
      "number theory"
    ]
  },
  {
    "id": 2863,
    "title": "Maximum Length of Semi-Decreasing Subarrays",
    "difficulty": "medium",
    "category": [
      "array",
      "monotonic stack",
      "sorting",
      "stack"
    ]
  },
  {
    "id": 2864,
    "title": "Maximum Odd Binary Number",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 2865,
    "title": "Beautiful Towers I",
    "difficulty": "medium",
    "category": [
      "array",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 2866,
    "title": "Beautiful Towers II",
    "difficulty": "medium",
    "category": [
      "array",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 2867,
    "title": "Count Valid Paths in a Tree",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "math",
      "number theory",
      "tree"
    ]
  },
  {
    "id": 2868,
    "title": "The Wording Game",
    "difficulty": "hard",
    "category": [
      "array",
      "game theory",
      "greedy",
      "math",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 2869,
    "title": "Minimum Operations to Collect Elements",
    "difficulty": "easy",
    "category": [
      "array",
      "bit manipulation",
      "hash table"
    ]
  },
  {
    "id": 2870,
    "title": "Minimum Number of Operations to Make Array Empty",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "greedy",
      "hash table"
    ]
  },
  {
    "id": 2871,
    "title": "Split Array Into Maximum Number of Subarrays",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "greedy"
    ]
  },
  {
    "id": 2872,
    "title": "Maximum Number of K-Divisible Components",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 2873,
    "title": "Maximum Value of an Ordered Triplet I",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 2874,
    "title": "Maximum Value of an Ordered Triplet II",
    "difficulty": "medium",
    "category": [
      "array"
    ]
  },
  {
    "id": 2875,
    "title": "Minimum Size Subarray in Infinite Array",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "prefix sum",
      "sliding window"
    ]
  },
  {
    "id": 2876,
    "title": "Count Visited Nodes in a Directed Graph",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "memoization"
    ]
  },
  {
    "id": 2877,
    "title": "Create a DataFrame from List",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2878,
    "title": "Get the Size of a DataFrame",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2879,
    "title": "Display the First Three Rows",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2880,
    "title": "Select Data",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2881,
    "title": "Create a New Column",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2882,
    "title": "Drop Duplicate Rows",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2883,
    "title": "Drop Missing Data",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2884,
    "title": "Modify Columns",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2885,
    "title": "Rename Columns",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2886,
    "title": "Change Data Type",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2887,
    "title": "Fill Missing Data",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2888,
    "title": "Reshape Data: Concatenate",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2889,
    "title": "Reshape Data: Pivot",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2890,
    "title": "Reshape Data: Melt",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2891,
    "title": "Method Chaining",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 2892,
    "title": "Minimizing Array After Replacing Pairs With Their Product",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 2893,
    "title": "Calculate Orders Within Each Interval",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2894,
    "title": "Divisible and Non-divisible Sums Difference",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 2895,
    "title": "Minimum Processing Time",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 2896,
    "title": "Apply Operations to Make Two Strings Equal",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 2897,
    "title": "Apply Operations on Array to Maximize Sum of Squares",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "greedy",
      "hash table"
    ]
  },
  {
    "id": 2898,
    "title": "Maximum Linear Stock Score",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 2899,
    "title": "Last Visited Integers",
    "difficulty": "easy",
    "category": [
      "array",
      "simulation"
    ]
  },
  {
    "id": 2900,
    "title": "Longest Unequal Adjacent Groups Subsequence I",
    "difficulty": "easy",
    "category": [
      "array",
      "dynamic programming",
      "greedy",
      "string"
    ]
  },
  {
    "id": 2901,
    "title": "Longest Unequal Adjacent Groups Subsequence II",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 2902,
    "title": "Count of Sub-Multisets With Bounded Sum",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "hash table",
      "sliding window"
    ]
  },
  {
    "id": 2903,
    "title": "Find Indices With Index and Value Difference I",
    "difficulty": "easy",
    "category": [
      "array",
      "two pointers"
    ]
  },
  {
    "id": 2904,
    "title": "Shortest and Lexicographically Smallest Beautiful String",
    "difficulty": "medium",
    "category": [
      "sliding window",
      "string"
    ]
  },
  {
    "id": 2905,
    "title": "Find Indices With Index and Value Difference II",
    "difficulty": "medium",
    "category": [
      "array",
      "two pointers"
    ]
  },
  {
    "id": 2906,
    "title": "Construct Product Matrix",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "prefix sum"
    ]
  },
  {
    "id": 2907,
    "title": "Maximum Profitable Triplets With Increasing Prices I",
    "difficulty": "medium",
    "category": [
      "array",
      "binary indexed tree",
      "segment tree"
    ]
  },
  {
    "id": 2908,
    "title": "Minimum Sum of Mountain Triplets I",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 2909,
    "title": "Minimum Sum of Mountain Triplets II",
    "difficulty": "medium",
    "category": [
      "array"
    ]
  },
  {
    "id": 2910,
    "title": "Minimum Number of Groups to Create a Valid Assignment",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "hash table"
    ]
  },
  {
    "id": 2911,
    "title": "Minimum Changes to Make K Semi-palindromes",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 2912,
    "title": "Number of Ways to Reach Destination in the Grid",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 2913,
    "title": "Subarrays Distinct Element Sum of Squares I",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 2914,
    "title": "Minimum Number of Changes to Make Binary String Beautiful",
    "difficulty": "medium",
    "category": [
      "string"
    ]
  },
  {
    "id": 2915,
    "title": "Length of the Longest Subsequence That Sums to Target",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 2916,
    "title": "Subarrays Distinct Element Sum of Squares II",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree",
      "dynamic programming",
      "segment tree"
    ]
  },
  {
    "id": 2917,
    "title": "Find the K-or of an Array",
    "difficulty": "easy",
    "category": [
      "array",
      "bit manipulation"
    ]
  },
  {
    "id": 2918,
    "title": "Minimum Equal Sum of Two Arrays After Replacing Zeros",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 2919,
    "title": "Minimum Increment Operations to Make Array Beautiful",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 2920,
    "title": "Maximum Points After Collecting Coins From All Nodes",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming",
      "graph traversal",
      "memoization",
      "tree"
    ]
  },
  {
    "id": 2921,
    "title": "Maximum Profitable Triplets With Increasing Prices II",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree",
      "segment tree"
    ]
  },
  {
    "id": 2922,
    "title": "Market Analysis III",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2923,
    "title": "Find Champion I",
    "difficulty": "easy",
    "category": [
      "array",
      "matrix"
    ]
  },
  {
    "id": 2924,
    "title": "Find Champion II",
    "difficulty": "medium",
    "category": [
      "graph"
    ]
  },
  {
    "id": 2925,
    "title": "Maximum Score After Applying Operations on a Tree",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 2926,
    "title": "Maximum Balanced Subsequence Sum",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree",
      "binary search",
      "dynamic programming",
      "segment tree"
    ]
  },
  {
    "id": 2927,
    "title": "Distribute Candies Among Children III",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 2928,
    "title": "Distribute Candies Among Children I",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "enumeration",
      "math"
    ]
  },
  {
    "id": 2929,
    "title": "Distribute Candies Among Children II",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "enumeration",
      "math"
    ]
  },
  {
    "id": 2930,
    "title": "Number of Strings Which Can Be Rearranged to Contain Substring",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 2931,
    "title": "Maximum Spending After Buying Items",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "heap",
      "matrix",
      "sorting"
    ]
  },
  {
    "id": 2932,
    "title": "Maximum Strong Pair XOR I",
    "difficulty": "easy",
    "category": [
      "array",
      "bit manipulation",
      "hash table",
      "sliding window",
      "trie"
    ]
  },
  {
    "id": 2933,
    "title": "High-Access Employees",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 2934,
    "title": "Minimum Operations to Maximize Last Elements in Arrays",
    "difficulty": "medium",
    "category": [
      "array",
      "enumeration"
    ]
  },
  {
    "id": 2935,
    "title": "Maximum Strong Pair XOR II",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "hash table",
      "sliding window",
      "trie"
    ]
  },
  {
    "id": 2936,
    "title": "Number of Equal Numbers Blocks",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "interactive"
    ]
  },
  {
    "id": 2937,
    "title": "Make Three Strings Equal",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 2938,
    "title": "Separate Black and White Balls",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 2939,
    "title": "Maximum Xor Product",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "greedy",
      "math"
    ]
  },
  {
    "id": 2940,
    "title": "Find Building Where Alice and Bob Can Meet",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree",
      "binary search",
      "heap",
      "monotonic stack",
      "segment tree",
      "stack"
    ]
  },
  {
    "id": 2941,
    "title": "Maximum GCD-Sum of a Subarray",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "math",
      "number theory"
    ]
  },
  {
    "id": 2942,
    "title": "Find Words Containing Character",
    "difficulty": "easy",
    "category": [
      "array",
      "string"
    ]
  },
  {
    "id": 2943,
    "title": "Maximize Area of Square Hole in Grid",
    "difficulty": "medium",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 2944,
    "title": "Minimum Number of Coins for Fruits",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "heap",
      "monotonic queue",
      "queue"
    ]
  },
  {
    "id": 2945,
    "title": "Find Maximum Non-decreasing Array Length",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "dynamic programming",
      "monotonic queue",
      "monotonic stack",
      "queue",
      "stack"
    ]
  },
  {
    "id": 2946,
    "title": "Matrix Similarity After Cyclic Shifts",
    "difficulty": "easy",
    "category": [
      "array",
      "math",
      "matrix",
      "simulation"
    ]
  },
  {
    "id": 2947,
    "title": "Count Beautiful Substrings I",
    "difficulty": "medium",
    "category": [
      "enumeration",
      "hash table",
      "math",
      "number theory",
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 2948,
    "title": "Make Lexicographically Smallest Array by Swapping Elements",
    "difficulty": "medium",
    "category": [
      "array",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 2949,
    "title": "Count Beautiful Substrings II",
    "difficulty": "hard",
    "category": [
      "hash table",
      "math",
      "number theory",
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 2950,
    "title": "Number of Divisible Substrings",
    "difficulty": "medium",
    "category": [
      "counting",
      "hash table",
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 2951,
    "title": "Find the Peaks",
    "difficulty": "easy",
    "category": [
      "array",
      "enumeration"
    ]
  },
  {
    "id": 2952,
    "title": "Minimum Number of Coins to be Added",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 2953,
    "title": "Count Complete Substrings",
    "difficulty": "hard",
    "category": [
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 2954,
    "title": "Count the Number of Infection Sequences",
    "difficulty": "hard",
    "category": [
      "array",
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 2955,
    "title": "Number of Same-End Substrings",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "hash table",
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 2956,
    "title": "Find Common Elements Between Two Arrays",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 2957,
    "title": "Remove Adjacent Almost-Equal Characters",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "string"
    ]
  },
  {
    "id": 2958,
    "title": "Length of Longest Subarray With at Most K Frequency",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sliding window"
    ]
  },
  {
    "id": 2959,
    "title": "Number of Possible Sets of Closing Branches",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "enumeration",
      "graph",
      "heap",
      "shortest path"
    ]
  },
  {
    "id": 2960,
    "title": "Count Tested Devices After Test Operations",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "simulation"
    ]
  },
  {
    "id": 2961,
    "title": "Double Modular Exponentiation",
    "difficulty": "medium",
    "category": [
      "array",
      "math",
      "simulation"
    ]
  },
  {
    "id": 2962,
    "title": "Count Subarrays Where Max Element Appears at Least K Times",
    "difficulty": "medium",
    "category": [
      "array",
      "sliding window"
    ]
  },
  {
    "id": 2963,
    "title": "Count the Number of Good Partitions",
    "difficulty": "hard",
    "category": [
      "array",
      "combinatorics",
      "hash table",
      "math"
    ]
  },
  {
    "id": 2964,
    "title": "Number of Divisible Triplet Sums",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 2965,
    "title": "Find Missing and Repeated Values",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "math",
      "matrix"
    ]
  },
  {
    "id": 2966,
    "title": "Divide Array Into Arrays With Max Difference",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 2967,
    "title": "Minimum Cost to Make Array Equalindromic",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 2968,
    "title": "Apply Operations to Maximize Frequency Score",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "prefix sum",
      "sliding window",
      "sorting"
    ]
  },
  {
    "id": 2969,
    "title": "Minimum Number of Coins for Fruits II",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "heap",
      "monotonic queue",
      "queue"
    ]
  },
  {
    "id": 2970,
    "title": "Count the Number of Incremovable Subarrays I",
    "difficulty": "easy",
    "category": [
      "array",
      "binary search",
      "enumeration",
      "two pointers"
    ]
  },
  {
    "id": 2971,
    "title": "Find Polygon With the Largest Perimeter",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "prefix sum",
      "sorting"
    ]
  },
  {
    "id": 2972,
    "title": "Count the Number of Incremovable Subarrays II",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "two pointers"
    ]
  },
  {
    "id": 2973,
    "title": "Find Number of Coins to Place in Tree Nodes",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "heap",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 2974,
    "title": "Minimum Number Game",
    "difficulty": "easy",
    "category": [
      "array",
      "heap",
      "simulation",
      "sorting"
    ]
  },
  {
    "id": 2975,
    "title": "Maximum Square Area by Removing Fences From a Field",
    "difficulty": "medium",
    "category": [
      "array",
      "enumeration",
      "hash table"
    ]
  },
  {
    "id": 2976,
    "title": "Minimum Cost to Convert String I",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "shortest path",
      "string"
    ]
  },
  {
    "id": 2977,
    "title": "Minimum Cost to Convert String II",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "graph",
      "shortest path",
      "string",
      "trie"
    ]
  },
  {
    "id": 2978,
    "title": "Symmetric Coordinates",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2979,
    "title": "Most Expensive Item That Can Not Be Bought",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 2980,
    "title": "Check if Bitwise OR Has Trailing Zeros",
    "difficulty": "easy",
    "category": [
      "array",
      "bit manipulation"
    ]
  },
  {
    "id": 2981,
    "title": "Find Longest Special Substring That Occurs Thrice I",
    "difficulty": "medium",
    "category": [
      "binary search",
      "counting",
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 2982,
    "title": "Find Longest Special Substring That Occurs Thrice II",
    "difficulty": "medium",
    "category": [
      "binary search",
      "counting",
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 2983,
    "title": "Palindrome Rearrangement Queries",
    "difficulty": "hard",
    "category": [
      "hash table",
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 2984,
    "title": "Find Peak Calling Hours for Each City",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2985,
    "title": "Calculate Compressed Mean",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 2986,
    "title": "Find Third Transaction",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2987,
    "title": "Find Expensive Cities",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 2988,
    "title": "Manager of the Largest Department",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2989,
    "title": "Class Performance",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2990,
    "title": "Loan Types",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 2991,
    "title": "Top Three Wineries ",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 2992,
    "title": "Number of Self-Divisible Permutations",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 2993,
    "title": "Friday Purchases I",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 2994,
    "title": "Friday Purchases II ",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 2995,
    "title": "Viewers Turned Streamers",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 2996,
    "title": "Smallest Missing Integer Greater Than Sequential Prefix Sum",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 2997,
    "title": "Minimum Number of Operations to Make Array XOR Equal to K",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation"
    ]
  },
  {
    "id": 2998,
    "title": "Minimum Number of Operations to Make X and Y Equal",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph traversal",
      "memoization"
    ]
  },
  {
    "id": 2999,
    "title": "Count the Number of Powerful Integers",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "string"
    ]
  },
  {
    "id": 3000,
    "title": "Maximum Area of Longest Diagonal Rectangle",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 3001,
    "title": "Minimum Moves to Capture The Queen",
    "difficulty": "medium",
    "category": [
      "enumeration",
      "math"
    ]
  },
  {
    "id": 3002,
    "title": "Maximum Size of a Set After Removals",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "hash table"
    ]
  },
  {
    "id": 3003,
    "title": "Maximize the Number of Partitions After Operations",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 3004,
    "title": "Maximum Subtree of the Same Color",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 3005,
    "title": "Count Elements With Maximum Frequency",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "hash table"
    ]
  },
  {
    "id": 3006,
    "title": "Find Beautiful Indices in the Given Array I",
    "difficulty": "medium",
    "category": [
      "binary search",
      "hash table",
      "rolling hash",
      "string",
      "string matching",
      "two pointers"
    ]
  },
  {
    "id": 3007,
    "title": "Maximum Number That Sum of the Prices Is Less Than or Equal to K",
    "difficulty": "medium",
    "category": [
      "binary search",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 3008,
    "title": "Find Beautiful Indices in the Given Array II",
    "difficulty": "hard",
    "category": [
      "binary search",
      "hash table",
      "rolling hash",
      "string",
      "string matching",
      "two pointers"
    ]
  },
  {
    "id": 3009,
    "title": "Maximum Number of Intersections on the Chart",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree",
      "geometry",
      "math"
    ]
  },
  {
    "id": 3010,
    "title": "Divide an Array Into Subarrays With Minimum Cost I",
    "difficulty": "easy",
    "category": [
      "array",
      "enumeration",
      "sorting"
    ]
  },
  {
    "id": 3011,
    "title": "Find if Array Can Be Sorted",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "sorting"
    ]
  },
  {
    "id": 3012,
    "title": "Minimize Length of Array Using Operations",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3013,
    "title": "Divide an Array Into Subarrays With Minimum Cost II",
    "difficulty": "hard",
    "category": [
      "array",
      "hash table",
      "heap",
      "sliding window"
    ]
  },
  {
    "id": 3014,
    "title": "Minimum Number of Pushes to Type Word I",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 3015,
    "title": "Count the Number of Houses at a Certain Distance I",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "prefix sum"
    ]
  },
  {
    "id": 3016,
    "title": "Minimum Number of Pushes to Type Word II",
    "difficulty": "medium",
    "category": [
      "counting",
      "greedy",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 3017,
    "title": "Count the Number of Houses at a Certain Distance II",
    "difficulty": "hard",
    "category": [
      "graph",
      "prefix sum"
    ]
  },
  {
    "id": 3018,
    "title": "Maximum Number of Removal Queries That Can Be Processed I",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 3019,
    "title": "Number of Changing Keys",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 3020,
    "title": "Find the Maximum Number of Elements in Subset",
    "difficulty": "medium",
    "category": [
      "array",
      "enumeration",
      "hash table"
    ]
  },
  {
    "id": 3021,
    "title": "Alice and Bob Playing Flower Game",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 3022,
    "title": "Minimize OR of Remaining Elements Using Operations",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "greedy"
    ]
  },
  {
    "id": 3023,
    "title": "Find Pattern in Infinite Stream I",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "rolling hash",
      "sliding window",
      "string matching"
    ]
  },
  {
    "id": 3024,
    "title": "Type of Triangle",
    "difficulty": "easy",
    "category": [
      "array",
      "math",
      "sorting"
    ]
  },
  {
    "id": 3025,
    "title": "Find the Number of Ways to Place People I",
    "difficulty": "medium",
    "category": [
      "array",
      "enumeration",
      "geometry",
      "math",
      "sorting"
    ]
  },
  {
    "id": 3026,
    "title": "Maximum Good Subarray Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "prefix sum"
    ]
  },
  {
    "id": 3027,
    "title": "Find the Number of Ways to Place People II",
    "difficulty": "hard",
    "category": [
      "array",
      "enumeration",
      "geometry",
      "math",
      "sorting"
    ]
  },
  {
    "id": 3028,
    "title": "Ant on the Boundary",
    "difficulty": "easy",
    "category": [
      "array",
      "prefix sum",
      "simulation"
    ]
  },
  {
    "id": 3029,
    "title": "Minimum Time to Revert Word to Initial State I",
    "difficulty": "medium",
    "category": [
      "hash table",
      "rolling hash",
      "string",
      "string matching"
    ]
  },
  {
    "id": 3030,
    "title": "Find the Grid of Region Average",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix"
    ]
  },
  {
    "id": 3031,
    "title": "Minimum Time to Revert Word to Initial State II",
    "difficulty": "hard",
    "category": [
      "hash table",
      "rolling hash",
      "string",
      "string matching"
    ]
  },
  {
    "id": 3032,
    "title": "Count Numbers With Unique Digits II",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "hash table",
      "math"
    ]
  },
  {
    "id": 3033,
    "title": "Modify the Matrix",
    "difficulty": "easy",
    "category": [
      "array",
      "matrix"
    ]
  },
  {
    "id": 3034,
    "title": "Number of Subarrays That Match a Pattern I",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "rolling hash",
      "string matching"
    ]
  },
  {
    "id": 3035,
    "title": "Maximum Palindromes After Operations",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "greedy",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 3036,
    "title": "Number of Subarrays That Match a Pattern II",
    "difficulty": "hard",
    "category": [
      "array",
      "hash table",
      "rolling hash",
      "string matching"
    ]
  },
  {
    "id": 3037,
    "title": "Find Pattern in Infinite Stream II",
    "difficulty": "hard",
    "category": [
      "array",
      "hash table",
      "rolling hash",
      "sliding window",
      "string matching"
    ]
  },
  {
    "id": 3038,
    "title": "Maximum Number of Operations With the Same Score I",
    "difficulty": "easy",
    "category": [
      "array",
      "simulation"
    ]
  },
  {
    "id": 3039,
    "title": "Apply Operations to Make String Empty",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 3040,
    "title": "Maximum Number of Operations With the Same Score II",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "memoization"
    ]
  },
  {
    "id": 3041,
    "title": "Maximize Consecutive Elements in an Array After Modification",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 3042,
    "title": "Count Prefix and Suffix Pairs I",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "rolling hash",
      "string",
      "string matching",
      "trie"
    ]
  },
  {
    "id": 3043,
    "title": "Find the Length of the Longest Common Prefix",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "string",
      "trie"
    ]
  },
  {
    "id": 3044,
    "title": "Most Frequent Prime",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "enumeration",
      "hash table",
      "math",
      "matrix",
      "number theory"
    ]
  },
  {
    "id": 3045,
    "title": "Count Prefix and Suffix Pairs II",
    "difficulty": "hard",
    "category": [
      "array",
      "hash table",
      "rolling hash",
      "string",
      "string matching",
      "trie"
    ]
  },
  {
    "id": 3046,
    "title": "Split the Array",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "hash table"
    ]
  },
  {
    "id": 3047,
    "title": "Find the Largest Area of Square Inside Two Rectangles",
    "difficulty": "medium",
    "category": [
      "array",
      "geometry",
      "math"
    ]
  },
  {
    "id": 3048,
    "title": "Earliest Second to Mark Indices I",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 3049,
    "title": "Earliest Second to Mark Indices II",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "greedy",
      "heap"
    ]
  },
  {
    "id": 3050,
    "title": "Pizza Toppings Cost Analysis",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3051,
    "title": "Find Candidates for Data Scientist Position",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 3052,
    "title": "Maximize Items",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 3053,
    "title": "Classifying Triangles by Lengths",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 3054,
    "title": "Binary Tree Nodes",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3055,
    "title": "Top Percentile Fraud",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3056,
    "title": "Snaps Analysis",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3057,
    "title": "Employees Project Allocation",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 3058,
    "title": "Friends With No Mutual Friends",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3059,
    "title": "Find All Unique Email Domains",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 3060,
    "title": "User Activities within Time Bounds",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 3061,
    "title": "Calculate Trapping Rain Water",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 3062,
    "title": "Winner of the Linked List Game",
    "difficulty": "easy",
    "category": [
      "linked list"
    ]
  },
  {
    "id": 3063,
    "title": "Linked List Frequency",
    "difficulty": "easy",
    "category": [
      "counting",
      "hash table",
      "linked list"
    ]
  },
  {
    "id": 3064,
    "title": "Guess the Number Using Bitwise Questions I",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "interactive"
    ]
  },
  {
    "id": 3065,
    "title": "Minimum Operations to Exceed Threshold Value I",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 3066,
    "title": "Minimum Operations to Exceed Threshold Value II",
    "difficulty": "medium",
    "category": [
      "array",
      "heap",
      "simulation"
    ]
  },
  {
    "id": 3067,
    "title": "Count Pairs of Connectable Servers in a Weighted Tree Network",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 3068,
    "title": "Find the Maximum Sum of Node Values",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming",
      "greedy",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 3069,
    "title": "Distribute Elements Into Two Arrays I",
    "difficulty": "easy",
    "category": [
      "array",
      "simulation"
    ]
  },
  {
    "id": 3070,
    "title": "Count Submatrices with Top-Left Element and Sum Less Than k",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "prefix sum"
    ]
  },
  {
    "id": 3071,
    "title": "Minimum Operations to Write the Letter Y on a Grid",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "hash table",
      "matrix"
    ]
  },
  {
    "id": 3072,
    "title": "Distribute Elements Into Two Arrays II",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree",
      "segment tree",
      "simulation"
    ]
  },
  {
    "id": 3073,
    "title": "Maximum Increasing Triplet Value",
    "difficulty": "medium",
    "category": [
      "array",
      "ordered set"
    ]
  },
  {
    "id": 3074,
    "title": "Apple Redistribution into Boxes",
    "difficulty": "easy",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3075,
    "title": "Maximize Happiness of Selected Children",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3076,
    "title": "Shortest Uncommon Substring in an Array",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "string",
      "trie"
    ]
  },
  {
    "id": 3077,
    "title": "Maximum Strength of K Disjoint Subarrays",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "prefix sum"
    ]
  },
  {
    "id": 3078,
    "title": "Match Alphanumerical Pattern in Matrix I",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "matrix",
      "string"
    ]
  },
  {
    "id": 3079,
    "title": "Find the Sum of Encrypted Integers",
    "difficulty": "easy",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 3080,
    "title": "Mark Elements on Array by Performing Queries",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "heap",
      "simulation",
      "sorting"
    ]
  },
  {
    "id": 3081,
    "title": "Replace Question Marks in String to Minimize Its Value",
    "difficulty": "medium",
    "category": [
      "counting",
      "greedy",
      "hash table",
      "heap",
      "sorting",
      "string"
    ]
  },
  {
    "id": 3082,
    "title": "Find the Sum of the Power of All Subsequences",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 3083,
    "title": "Existence of a Substring in a String and Its Reverse",
    "difficulty": "easy",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 3084,
    "title": "Count Substrings Starting and Ending with Given Character",
    "difficulty": "medium",
    "category": [
      "counting",
      "math",
      "string"
    ]
  },
  {
    "id": 3085,
    "title": "Minimum Deletions to Make String K-Special",
    "difficulty": "medium",
    "category": [
      "counting",
      "greedy",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 3086,
    "title": "Minimum Moves to Pick K Ones",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "prefix sum",
      "sliding window"
    ]
  },
  {
    "id": 3087,
    "title": "Find Trending Hashtags",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3088,
    "title": "Make String Anti-palindrome",
    "difficulty": "hard",
    "category": [
      "greedy",
      "sorting",
      "string"
    ]
  },
  {
    "id": 3089,
    "title": "Find Bursty Behavior",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3090,
    "title": "Maximum Length Substring With Two Occurrences",
    "difficulty": "easy",
    "category": [
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 3091,
    "title": "Apply Operations to Make Sum of Array Greater Than or Equal to k",
    "difficulty": "medium",
    "category": [
      "enumeration",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3092,
    "title": "Most Frequent IDs",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "heap",
      "ordered set"
    ]
  },
  {
    "id": 3093,
    "title": "Longest Common Suffix Queries",
    "difficulty": "hard",
    "category": [
      "array",
      "string",
      "trie"
    ]
  },
  {
    "id": 3094,
    "title": "Guess the Number Using Bitwise Questions II",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "interactive"
    ]
  },
  {
    "id": 3095,
    "title": "Shortest Subarray With OR at Least K I",
    "difficulty": "easy",
    "category": [
      "array",
      "bit manipulation",
      "sliding window"
    ]
  },
  {
    "id": 3096,
    "title": "Minimum Levels to Gain More Points",
    "difficulty": "medium",
    "category": [
      "array",
      "prefix sum"
    ]
  },
  {
    "id": 3097,
    "title": "Shortest Subarray With OR at Least K II",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "sliding window"
    ]
  },
  {
    "id": 3098,
    "title": "Find the Sum of Subsequence Powers",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 3099,
    "title": "Harshad Number",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 3100,
    "title": "Water Bottles II",
    "difficulty": "medium",
    "category": [
      "math",
      "simulation"
    ]
  },
  {
    "id": 3101,
    "title": "Count Alternating Subarrays",
    "difficulty": "medium",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 3102,
    "title": "Minimize Manhattan Distances",
    "difficulty": "hard",
    "category": [
      "array",
      "geometry",
      "math",
      "ordered set",
      "sorting"
    ]
  },
  {
    "id": 3103,
    "title": "Find Trending Hashtags II ",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 3104,
    "title": "Find Longest Self-Contained Substring",
    "difficulty": "hard",
    "category": [
      "binary search",
      "hash table",
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 3105,
    "title": "Longest Strictly Increasing or Strictly Decreasing Subarray",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 3106,
    "title": "Lexicographically Smallest String After Operations With Constraint",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 3107,
    "title": "Minimum Operations to Make Median of Array Equal to K",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3108,
    "title": "Minimum Cost Walk in Weighted Graph",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "graph",
      "union find"
    ]
  },
  {
    "id": 3109,
    "title": "Find the Index of Permutation",
    "difficulty": "medium",
    "category": [
      "array",
      "binary indexed tree",
      "binary search",
      "divide and conquer",
      "ordered set",
      "segment tree",
      "sorting"
    ]
  },
  {
    "id": 3110,
    "title": "Score of a String",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 3111,
    "title": "Minimum Rectangles to Cover Points",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3112,
    "title": "Minimum Time to Visit Disappearing Nodes",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "heap",
      "shortest path"
    ]
  },
  {
    "id": 3113,
    "title": "Find the Number of Subarrays Where Boundary Elements Are Maximum",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 3114,
    "title": "Latest Time You Can Obtain After Replacing Characters",
    "difficulty": "easy",
    "category": [
      "enumeration",
      "string"
    ]
  },
  {
    "id": 3115,
    "title": "Maximum Prime Difference",
    "difficulty": "medium",
    "category": [
      "array",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3116,
    "title": "Kth Smallest Amount With Single Denomination Combination",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "bit manipulation",
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3117,
    "title": "Minimum Sum of Values by Dividing Array",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "bit manipulation",
      "dynamic programming",
      "queue",
      "segment tree"
    ]
  },
  {
    "id": 3118,
    "title": "Friday Purchase III ",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3119,
    "title": "Maximum Number of Potholes That Can Be Fixed",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting",
      "string"
    ]
  },
  {
    "id": 3120,
    "title": "Count the Number of Special Characters I",
    "difficulty": "easy",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 3121,
    "title": "Count the Number of Special Characters II",
    "difficulty": "medium",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 3122,
    "title": "Minimum Number of Operations to Satisfy Conditions",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 3123,
    "title": "Find Edges in Shortest Paths",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "heap",
      "shortest path"
    ]
  },
  {
    "id": 3124,
    "title": "Find Longest Calls",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3125,
    "title": "Maximum Number That Makes Result of Bitwise AND Zero",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting",
      "string"
    ]
  },
  {
    "id": 3126,
    "title": "Server Utilization Time",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3127,
    "title": "Make a Square with the Same Color",
    "difficulty": "easy",
    "category": [
      "array",
      "enumeration",
      "matrix"
    ]
  },
  {
    "id": 3128,
    "title": "Right Triangles",
    "difficulty": "medium",
    "category": [
      "array",
      "combinatorics",
      "counting",
      "hash table",
      "math"
    ]
  },
  {
    "id": 3129,
    "title": "Find All Possible Stable Binary Arrays I",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "prefix sum"
    ]
  },
  {
    "id": 3130,
    "title": "Find All Possible Stable Binary Arrays II",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "prefix sum"
    ]
  },
  {
    "id": 3131,
    "title": "Find the Integer Added to Array I",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 3132,
    "title": "Find the Integer Added to Array II",
    "difficulty": "medium",
    "category": [
      "array",
      "enumeration",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 3133,
    "title": "Minimum Array End",
    "difficulty": "medium",
    "category": [
      "bit manipulation"
    ]
  },
  {
    "id": 3134,
    "title": "Find the Median of the Uniqueness Array",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "hash table",
      "sliding window"
    ]
  },
  {
    "id": 3135,
    "title": "Equalize Strings by Adding or Removing Characters at Ends",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 3136,
    "title": "Valid Word",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 3137,
    "title": "Minimum Number of Operations to Make Word K-Periodic",
    "difficulty": "medium",
    "category": [
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 3138,
    "title": "Minimum Length of Anagram Concatenation",
    "difficulty": "medium",
    "category": [
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 3139,
    "title": "Minimum Cost to Equalize Array",
    "difficulty": "hard",
    "category": [
      "array",
      "enumeration",
      "greedy"
    ]
  },
  {
    "id": 3140,
    "title": "Consecutive Available Seats II",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3141,
    "title": "Maximum Hamming Distances",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "graph traversal"
    ]
  },
  {
    "id": 3142,
    "title": "Check if Grid Satisfies Conditions",
    "difficulty": "easy",
    "category": [
      "array",
      "matrix"
    ]
  },
  {
    "id": 3143,
    "title": "Maximum Points Inside the Square",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 3144,
    "title": "Minimum Substring Partition of Equal Character Frequency",
    "difficulty": "medium",
    "category": [
      "counting",
      "dynamic programming",
      "hash table",
      "string"
    ]
  },
  {
    "id": 3145,
    "title": "Find Products of Elements of Big Array",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "bit manipulation"
    ]
  },
  {
    "id": 3146,
    "title": "Permutation Difference between Two Strings",
    "difficulty": "easy",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 3147,
    "title": "Taking Maximum Energy From the Mystic Dungeon",
    "difficulty": "medium",
    "category": [
      "array",
      "prefix sum"
    ]
  },
  {
    "id": 3148,
    "title": "Maximum Difference Score in a Grid",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 3149,
    "title": "Find the Minimum Cost Array Permutation",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 3150,
    "title": "Invalid Tweets II",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 3151,
    "title": "Special Array I",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 3152,
    "title": "Special Array II",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "prefix sum"
    ]
  },
  {
    "id": 3153,
    "title": "Sum of Digit Differences of All Pairs",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "hash table",
      "math"
    ]
  },
  {
    "id": 3154,
    "title": "Find Number of Ways to Reach the K-th Stair",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "math",
      "memoization"
    ]
  },
  {
    "id": 3155,
    "title": "Maximum Number of Upgradable Servers",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "math"
    ]
  },
  {
    "id": 3156,
    "title": "Employee Task Duration and Concurrent Tasks",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 3157,
    "title": "Find the Level of Tree with Minimum Sum",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 3158,
    "title": "Find the XOR of Numbers Which Appear Twice",
    "difficulty": "easy",
    "category": [
      "array",
      "bit manipulation",
      "hash table"
    ]
  },
  {
    "id": 3159,
    "title": "Find Occurrences of an Element in an Array",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 3160,
    "title": "Find the Number of Distinct Colors Among the Balls",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "simulation"
    ]
  },
  {
    "id": 3161,
    "title": "Block Placement Queries",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree",
      "binary search",
      "segment tree"
    ]
  },
  {
    "id": 3162,
    "title": "Find the Number of Good Pairs I",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 3163,
    "title": "String Compression III",
    "difficulty": "medium",
    "category": [
      "string"
    ]
  },
  {
    "id": 3164,
    "title": "Find the Number of Good Pairs II",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 3165,
    "title": "Maximum Sum of Subsequence With Non-adjacent Elements",
    "difficulty": "hard",
    "category": [
      "array",
      "divide and conquer",
      "dynamic programming",
      "segment tree"
    ]
  },
  {
    "id": 3166,
    "title": "Calculate Parking Fees and Duration",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3167,
    "title": "Better Compression of String",
    "difficulty": "medium",
    "category": [
      "counting",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 3168,
    "title": "Minimum Number of Chairs in a Waiting Room",
    "difficulty": "easy",
    "category": [
      "simulation",
      "string"
    ]
  },
  {
    "id": 3169,
    "title": "Count Days Without Meetings",
    "difficulty": "medium",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 3170,
    "title": "Lexicographically Minimum String After Removing Stars",
    "difficulty": "medium",
    "category": [
      "greedy",
      "hash table",
      "heap",
      "stack",
      "string"
    ]
  },
  {
    "id": 3171,
    "title": "Find Subarray With Bitwise OR Closest to K",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "bit manipulation",
      "segment tree"
    ]
  },
  {
    "id": 3172,
    "title": "Second Day Verification",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 3173,
    "title": "Bitwise OR of Adjacent Elements",
    "difficulty": "easy",
    "category": [
      "array",
      "bit manipulation"
    ]
  },
  {
    "id": 3174,
    "title": "Clear Digits",
    "difficulty": "easy",
    "category": [
      "simulation",
      "stack",
      "string"
    ]
  },
  {
    "id": 3175,
    "title": "Find The First Player to win K Games in a Row",
    "difficulty": "medium",
    "category": [
      "array",
      "simulation"
    ]
  },
  {
    "id": 3176,
    "title": "Find the Maximum Length of a Good Subsequence I",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "hash table"
    ]
  },
  {
    "id": 3177,
    "title": "Find the Maximum Length of a Good Subsequence II",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "hash table"
    ]
  },
  {
    "id": 3178,
    "title": "Find the Child Who Has the Ball After K Seconds",
    "difficulty": "easy",
    "category": [
      "math",
      "simulation"
    ]
  },
  {
    "id": 3179,
    "title": "Find the N-th Value After K Seconds",
    "difficulty": "medium",
    "category": [
      "array",
      "combinatorics",
      "math",
      "prefix sum",
      "simulation"
    ]
  },
  {
    "id": 3180,
    "title": "Maximum Total Reward Using Operations I",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 3181,
    "title": "Maximum Total Reward Using Operations II",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 3182,
    "title": "Find Top Scoring Students",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3183,
    "title": "The Number of Ways to Make the Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 3184,
    "title": "Count Pairs That Form a Complete Day I",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "hash table"
    ]
  },
  {
    "id": 3185,
    "title": "Count Pairs That Form a Complete Day II",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "hash table"
    ]
  },
  {
    "id": 3186,
    "title": "Maximum Total Damage With Spell Casting",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "counting",
      "dynamic programming",
      "hash table",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 3187,
    "title": "Peaks in Array",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree",
      "segment tree"
    ]
  },
  {
    "id": 3188,
    "title": "Find Top Scoring Students II",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 3189,
    "title": "Minimum Moves to Get a Peaceful Board",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3190,
    "title": "Find Minimum Operations to Make All Elements Divisible by Three",
    "difficulty": "easy",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 3191,
    "title": "Minimum Operations to Make Binary Array Elements Equal to One I",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "prefix sum",
      "queue",
      "sliding window"
    ]
  },
  {
    "id": 3192,
    "title": "Minimum Operations to Make Binary Array Elements Equal to One II",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 3193,
    "title": "Count the Number of Inversions",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 3194,
    "title": "Minimum Average of Smallest and Largest Elements",
    "difficulty": "easy",
    "category": [
      "array",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 3195,
    "title": "Find the Minimum Area to Cover All Ones I",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix"
    ]
  },
  {
    "id": 3196,
    "title": "Maximize Total Cost of Alternating Subarrays",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 3197,
    "title": "Find the Minimum Area to Cover All Ones II",
    "difficulty": "hard",
    "category": [
      "array",
      "enumeration",
      "matrix"
    ]
  },
  {
    "id": 3198,
    "title": "Find Cities in Each State",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 3199,
    "title": "Count Triplets with Even XOR Set Bits I",
    "difficulty": "easy",
    "category": [
      "array",
      "bit manipulation"
    ]
  },
  {
    "id": 3200,
    "title": "Maximum Height of a Triangle",
    "difficulty": "easy",
    "category": [
      "array",
      "enumeration"
    ]
  },
  {
    "id": 3201,
    "title": "Find the Maximum Length of Valid Subsequence I",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 3202,
    "title": "Find the Maximum Length of Valid Subsequence II",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 3203,
    "title": "Find Minimum Diameter After Merging Two Trees",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 3204,
    "title": "Bitwise User Permissions Analysis",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3205,
    "title": "Maximum Array Hopping Score I",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "greedy",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 3206,
    "title": "Alternating Groups I",
    "difficulty": "easy",
    "category": [
      "array",
      "sliding window"
    ]
  },
  {
    "id": 3207,
    "title": "Maximum Points After Enemy Battles",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 3208,
    "title": "Alternating Groups II",
    "difficulty": "medium",
    "category": [
      "array",
      "sliding window"
    ]
  },
  {
    "id": 3209,
    "title": "Number of Subarrays With AND Value of K",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "bit manipulation",
      "segment tree"
    ]
  },
  {
    "id": 3210,
    "title": "Find the Encrypted String",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 3211,
    "title": "Generate Binary Strings Without Adjacent Zeros",
    "difficulty": "medium",
    "category": [
      "backtracking",
      "bit manipulation",
      "string"
    ]
  },
  {
    "id": 3212,
    "title": "Count Submatrices With Equal Frequency of X and Y",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "prefix sum"
    ]
  },
  {
    "id": 3213,
    "title": "Construct String with Minimum Cost",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 3214,
    "title": "Year on Year Growth Rate",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 3215,
    "title": "Count Triplets with Even XOR Set Bits II",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation"
    ]
  },
  {
    "id": 3216,
    "title": "Lexicographically Smallest String After a Swap",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 3217,
    "title": "Delete Nodes From Linked List Present in Array",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "linked list"
    ]
  },
  {
    "id": 3218,
    "title": "Minimum Cost for Cutting Cake I",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3219,
    "title": "Minimum Cost for Cutting Cake II",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3220,
    "title": "Odd and Even Transactions",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3221,
    "title": "Maximum Array Hopping Score II",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 3222,
    "title": "Find the Winning Player in Coin Game",
    "difficulty": "easy",
    "category": [
      "game theory",
      "math",
      "simulation"
    ]
  },
  {
    "id": 3223,
    "title": "Minimum Length of String After Operations",
    "difficulty": "medium",
    "category": [
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 3224,
    "title": "Minimum Array Changes to Make Differences Equal",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "prefix sum"
    ]
  },
  {
    "id": 3225,
    "title": "Maximum Score From Grid Operations",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "matrix",
      "prefix sum"
    ]
  },
  {
    "id": 3226,
    "title": "Number of Bit Changes to Make Two Integers Equal",
    "difficulty": "easy",
    "category": [
      "bit manipulation"
    ]
  },
  {
    "id": 3227,
    "title": "Vowels Game in a String",
    "difficulty": "medium",
    "category": [
      "brainteaser",
      "game theory",
      "math",
      "string"
    ]
  },
  {
    "id": 3228,
    "title": "Maximum Number of Operations to Move Ones to the End",
    "difficulty": "medium",
    "category": [
      "counting",
      "greedy",
      "string"
    ]
  },
  {
    "id": 3229,
    "title": "Minimum Operations to Make Array Equal to Target",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "greedy",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 3230,
    "title": "Customer Purchasing Behavior Analysis",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3231,
    "title": "Minimum Number of Increasing Subsequence to Be Removed",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 3232,
    "title": "Find if Digit Game Can Be Won",
    "difficulty": "easy",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 3233,
    "title": "Find the Count of Numbers Which Are Not Special",
    "difficulty": "medium",
    "category": [
      "array",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3234,
    "title": "Count the Number of Substrings With Dominant Ones",
    "difficulty": "medium",
    "category": [
      "enumeration",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 3235,
    "title": "Check if the Rectangle Corner Is Reachable",
    "difficulty": "hard",
    "category": [
      "array",
      "geometry",
      "graph traversal",
      "math",
      "union find"
    ]
  },
  {
    "id": 3236,
    "title": "CEO Subordinate Hierarchy",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 3237,
    "title": "Alt and Tab Simulation",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "simulation"
    ]
  },
  {
    "id": 3238,
    "title": "Find the Number of Winning Players",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "hash table"
    ]
  },
  {
    "id": 3239,
    "title": "Minimum Number of Flips to Make Binary Grid Palindromic I",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "two pointers"
    ]
  },
  {
    "id": 3240,
    "title": "Minimum Number of Flips to Make Binary Grid Palindromic II",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "two pointers"
    ]
  },
  {
    "id": 3241,
    "title": "Time Taken to Mark All Nodes",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 3242,
    "title": "Design Neighbor Sum Service",
    "difficulty": "easy",
    "category": [
      "array",
      "design",
      "hash table",
      "matrix",
      "simulation"
    ]
  },
  {
    "id": 3243,
    "title": "Shortest Distance After Road Addition Queries I",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 3244,
    "title": "Shortest Distance After Road Addition Queries II",
    "difficulty": "hard",
    "category": [
      "array",
      "graph",
      "greedy",
      "ordered set"
    ]
  },
  {
    "id": 3245,
    "title": "Alternating Groups III",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree"
    ]
  },
  {
    "id": 3246,
    "title": "Premier League Table Ranking",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 3247,
    "title": "Number of Subsequences with Odd Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 3248,
    "title": "Snake in Matrix",
    "difficulty": "easy",
    "category": [
      "array",
      "simulation",
      "string"
    ]
  },
  {
    "id": 3249,
    "title": "Count the Number of Good Nodes",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 3250,
    "title": "Find the Count of Monotonic Pairs I",
    "difficulty": "hard",
    "category": [
      "array",
      "combinatorics",
      "dynamic programming",
      "math",
      "prefix sum"
    ]
  },
  {
    "id": 3251,
    "title": "Find the Count of Monotonic Pairs II",
    "difficulty": "hard",
    "category": [
      "array",
      "combinatorics",
      "dynamic programming",
      "math",
      "prefix sum"
    ]
  },
  {
    "id": 3252,
    "title": "Premier League Table Ranking II",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3253,
    "title": "Construct String with Minimum Cost (Easy)",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 3254,
    "title": "Find the Power of K-Size Subarrays I",
    "difficulty": "medium",
    "category": [
      "array",
      "sliding window"
    ]
  },
  {
    "id": 3255,
    "title": "Find the Power of K-Size Subarrays II",
    "difficulty": "medium",
    "category": [
      "array",
      "sliding window"
    ]
  },
  {
    "id": 3256,
    "title": "Maximum Value Sum by Placing Three Rooks I",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "enumeration",
      "matrix"
    ]
  },
  {
    "id": 3257,
    "title": "Maximum Value Sum by Placing Three Rooks II",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "enumeration",
      "matrix"
    ]
  },
  {
    "id": 3258,
    "title": "Count Substrings That Satisfy K-Constraint I",
    "difficulty": "easy",
    "category": [
      "sliding window",
      "string"
    ]
  },
  {
    "id": 3259,
    "title": "Maximum Energy Boost From Two Drinks",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 3260,
    "title": "Find the Largest Palindrome Divisible by K",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "math",
      "number theory",
      "string"
    ]
  },
  {
    "id": 3261,
    "title": "Count Substrings That Satisfy K-Constraint II",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "prefix sum",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 3262,
    "title": "Find Overlapping Shifts",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3263,
    "title": "Convert Doubly Linked List to Array I",
    "difficulty": "easy",
    "category": [
      "array",
      "linked list"
    ]
  },
  {
    "id": 3264,
    "title": "Final Array State After K Multiplication Operations I",
    "difficulty": "easy",
    "category": [
      "array",
      "heap",
      "math",
      "simulation"
    ]
  },
  {
    "id": 3265,
    "title": "Count Almost Equal Pairs I",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "enumeration",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 3266,
    "title": "Final Array State After K Multiplication Operations II",
    "difficulty": "hard",
    "category": [
      "array",
      "heap",
      "simulation"
    ]
  },
  {
    "id": 3267,
    "title": "Count Almost Equal Pairs II",
    "difficulty": "hard",
    "category": [
      "array",
      "counting",
      "enumeration",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 3268,
    "title": "Find Overlapping Shifts II",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 3269,
    "title": "Constructing Two Increasing Arrays",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 3270,
    "title": "Find the Key of the Numbers",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 3271,
    "title": "Hash Divided String",
    "difficulty": "medium",
    "category": [
      "simulation",
      "string"
    ]
  },
  {
    "id": 3272,
    "title": "Find the Count of Good Integers",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "enumeration",
      "hash table",
      "math"
    ]
  },
  {
    "id": 3273,
    "title": "Minimum Amount of Damage Dealt to Bob",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3274,
    "title": "Check if Two Chessboard Squares Have the Same Color",
    "difficulty": "easy",
    "category": [
      "math",
      "string"
    ]
  },
  {
    "id": 3275,
    "title": "K-th Nearest Obstacle Queries",
    "difficulty": "medium",
    "category": [
      "array",
      "heap"
    ]
  },
  {
    "id": 3276,
    "title": "Select Cells in Grid With Maximum Score",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 3277,
    "title": "Maximum XOR Score Subarray Queries",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 3278,
    "title": "Find Candidates for Data Scientist Position II",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3279,
    "title": "Maximum Total Area Occupied by Pistons",
    "difficulty": "hard",
    "category": [
      "array",
      "counting",
      "hash table",
      "prefix sum",
      "simulation",
      "string"
    ]
  },
  {
    "id": 3280,
    "title": "Convert Date to Binary",
    "difficulty": "easy",
    "category": [
      "math",
      "string"
    ]
  },
  {
    "id": 3281,
    "title": "Maximize Score of Numbers in Ranges",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3282,
    "title": "Reach End of Array With Max Score",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 3283,
    "title": "Maximum Number of Moves to Kill All Pawns",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "game theory",
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 3284,
    "title": "Sum of Consecutive Subarrays",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 3285,
    "title": "Find Indices of Stable Mountains",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 3286,
    "title": "Find a Safe Walk Through a Grid",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "graph traversal",
      "heap",
      "matrix",
      "shortest path"
    ]
  },
  {
    "id": 3287,
    "title": "Find the Maximum Sequence Value of Array",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 3288,
    "title": "Length of the Longest Increasing Path",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "sorting"
    ]
  },
  {
    "id": 3289,
    "title": "The Two Sneaky Numbers of Digitville",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "math"
    ]
  },
  {
    "id": 3290,
    "title": "Maximum Multiplication Score",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 3291,
    "title": "Minimum Number of Valid Strings to Form Target I",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "dynamic programming",
      "hash table",
      "rolling hash",
      "segment tree",
      "string",
      "string matching",
      "trie"
    ]
  },
  {
    "id": 3292,
    "title": "Minimum Number of Valid Strings to Form Target II",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "dynamic programming",
      "hash table",
      "rolling hash",
      "segment tree",
      "string",
      "string matching"
    ]
  },
  {
    "id": 3293,
    "title": "Calculate Product Final Price",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3294,
    "title": "Convert Doubly Linked List to Array II",
    "difficulty": "medium",
    "category": [
      "array",
      "linked list"
    ]
  },
  {
    "id": 3295,
    "title": "Report Spam Message",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "string"
    ]
  },
  {
    "id": 3296,
    "title": "Minimum Number of Seconds to Make Mountain Height Zero",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "greedy",
      "heap",
      "math"
    ]
  },
  {
    "id": 3297,
    "title": "Count Substrings That Can Be Rearranged to Contain a String I",
    "difficulty": "medium",
    "category": [
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 3298,
    "title": "Count Substrings That Can Be Rearranged to Contain a String II",
    "difficulty": "hard",
    "category": [
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 3299,
    "title": "Sum of Consecutive Subsequences",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "hash table"
    ]
  },
  {
    "id": 3300,
    "title": "Minimum Element After Replacement With Digit Sum",
    "difficulty": "easy",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 3301,
    "title": "Maximize the Total Height of Unique Towers",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3302,
    "title": "Find the Lexicographically Smallest Valid Sequence",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 3303,
    "title": "Find the Occurrence of First Almost Equal Substring",
    "difficulty": "hard",
    "category": [
      "string",
      "string matching"
    ]
  },
  {
    "id": 3304,
    "title": "Find the K-th Character in String Game I",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "math",
      "recursion",
      "simulation"
    ]
  },
  {
    "id": 3305,
    "title": "Count of Substrings Containing Every Vowel and K Consonants I",
    "difficulty": "medium",
    "category": [
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 3306,
    "title": "Count of Substrings Containing Every Vowel and K Consonants II",
    "difficulty": "medium",
    "category": [
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 3307,
    "title": "Find the K-th Character in String Game II",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "math",
      "recursion"
    ]
  },
  {
    "id": 3308,
    "title": "Find Top Performing Driver",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3309,
    "title": "Maximum Possible Number by Binary Concatenation",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "enumeration"
    ]
  },
  {
    "id": 3310,
    "title": "Remove Methods From Project",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 3311,
    "title": "Construct 2D Grid Matching Graph Layout",
    "difficulty": "hard",
    "category": [
      "array",
      "graph",
      "hash table",
      "matrix"
    ]
  },
  {
    "id": 3312,
    "title": "Sorted GCD Pair Queries",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "combinatorics",
      "counting",
      "hash table",
      "math",
      "number theory",
      "prefix sum"
    ]
  },
  {
    "id": 3313,
    "title": "Find the Last Marked Nodes in Tree",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 3314,
    "title": "Construct the Minimum Bitwise Array I",
    "difficulty": "easy",
    "category": [
      "array",
      "bit manipulation"
    ]
  },
  {
    "id": 3315,
    "title": "Construct the Minimum Bitwise Array II",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation"
    ]
  },
  {
    "id": 3316,
    "title": "Find Maximum Removals From Source String",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "hash table",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 3317,
    "title": "Find the Number of Possible Ways for an Event",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 3318,
    "title": "Find X-Sum of All K-Long Subarrays I",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "heap",
      "sliding window"
    ]
  },
  {
    "id": 3319,
    "title": "K-th Largest Perfect Subtree Size in Binary Tree",
    "difficulty": "medium",
    "category": [
      "binary tree",
      "graph traversal",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 3320,
    "title": "Count The Number of Winning Sequences",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 3321,
    "title": "Find X-Sum of All K-Long Subarrays II",
    "difficulty": "hard",
    "category": [
      "array",
      "hash table",
      "heap",
      "sliding window"
    ]
  },
  {
    "id": 3322,
    "title": "Premier League Table Ranking III",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3323,
    "title": "Minimize Connected Groups by Inserting Interval",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "sliding window",
      "sorting"
    ]
  },
  {
    "id": 3324,
    "title": "Find the Sequence of Strings Appeared on the Screen",
    "difficulty": "medium",
    "category": [
      "simulation",
      "string"
    ]
  },
  {
    "id": 3325,
    "title": "Count Substrings With K-Frequency Characters I",
    "difficulty": "medium",
    "category": [
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 3326,
    "title": "Minimum Division Operations to Make Array Non Decreasing",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3327,
    "title": "Check if DFS Strings Are Palindromes",
    "difficulty": "hard",
    "category": [
      "array",
      "graph traversal",
      "hash table",
      "string",
      "tree"
    ]
  },
  {
    "id": 3328,
    "title": "Find Cities in Each State II",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3329,
    "title": "Count Substrings With K-Frequency Characters II",
    "difficulty": "hard",
    "category": [
      "hash table",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 3330,
    "title": "Find the Original Typed String I",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 3331,
    "title": "Find Subtree Sizes After Changes",
    "difficulty": "medium",
    "category": [
      "array",
      "graph traversal",
      "hash table",
      "string",
      "tree"
    ]
  },
  {
    "id": 3332,
    "title": "Maximum Points Tourist Can Earn",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 3333,
    "title": "Find the Original Typed String II",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 3334,
    "title": "Find the Maximum Factor Score of Array",
    "difficulty": "medium",
    "category": [
      "array",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3335,
    "title": "Total Characters in String After Transformations I",
    "difficulty": "medium",
    "category": [
      "counting",
      "dynamic programming",
      "hash table",
      "math",
      "string"
    ]
  },
  {
    "id": 3336,
    "title": "Find the Number of Subsequences With Equal GCD",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3337,
    "title": "Total Characters in String After Transformations II",
    "difficulty": "hard",
    "category": [
      "counting",
      "dynamic programming",
      "hash table",
      "math",
      "string"
    ]
  },
  {
    "id": 3338,
    "title": "Second Highest Salary II",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3339,
    "title": "Find the Number of K-Even Arrays",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 3340,
    "title": "Check Balanced String",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 3341,
    "title": "Find Minimum Time to Reach Last Room I",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "heap",
      "matrix",
      "shortest path"
    ]
  },
  {
    "id": 3342,
    "title": "Find Minimum Time to Reach Last Room II",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "heap",
      "matrix",
      "shortest path"
    ]
  },
  {
    "id": 3343,
    "title": "Count Number of Balanced Permutations",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "string"
    ]
  },
  {
    "id": 3344,
    "title": "Maximum Sized Array",
    "difficulty": "medium",
    "category": [
      "binary search",
      "bit manipulation"
    ]
  },
  {
    "id": 3345,
    "title": "Smallest Divisible Digit Product I",
    "difficulty": "easy",
    "category": [
      "enumeration",
      "math"
    ]
  },
  {
    "id": 3346,
    "title": "Maximum Frequency of an Element After Performing Operations I",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "prefix sum",
      "sliding window",
      "sorting"
    ]
  },
  {
    "id": 3347,
    "title": "Maximum Frequency of an Element After Performing Operations II",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "prefix sum",
      "sliding window",
      "sorting"
    ]
  },
  {
    "id": 3348,
    "title": "Smallest Divisible Digit Product II",
    "difficulty": "hard",
    "category": [
      "backtracking",
      "greedy",
      "math",
      "number theory",
      "string"
    ]
  },
  {
    "id": 3349,
    "title": "Adjacent Increasing Subarrays Detection I",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 3350,
    "title": "Adjacent Increasing Subarrays Detection II",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 3351,
    "title": "Sum of Good Subsequences",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "hash table"
    ]
  },
  {
    "id": 3352,
    "title": "Count K-Reducible Numbers Less Than N",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "string"
    ]
  },
  {
    "id": 3353,
    "title": "Minimum Total Operations",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 3354,
    "title": "Make Array Elements Equal to Zero",
    "difficulty": "easy",
    "category": [
      "array",
      "prefix sum",
      "simulation"
    ]
  },
  {
    "id": 3355,
    "title": "Zero Array Transformation I",
    "difficulty": "medium",
    "category": [
      "array",
      "prefix sum"
    ]
  },
  {
    "id": 3356,
    "title": "Zero Array Transformation II",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "prefix sum"
    ]
  },
  {
    "id": 3357,
    "title": "Minimize the Maximum Adjacent Element Difference",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 3358,
    "title": "Books with NULL Ratings",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 3359,
    "title": "Find Sorted Submatrices With Maximum Element at Most K",
    "difficulty": "hard",
    "category": [
      "array",
      "matrix",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 3360,
    "title": "Stone Removal Game",
    "difficulty": "easy",
    "category": [
      "math",
      "simulation"
    ]
  },
  {
    "id": 3361,
    "title": "Shift Distance Between Two Strings",
    "difficulty": "medium",
    "category": [
      "array",
      "prefix sum",
      "string"
    ]
  },
  {
    "id": 3362,
    "title": "Zero Array Transformation III",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "heap",
      "prefix sum",
      "sorting"
    ]
  },
  {
    "id": 3363,
    "title": "Find the Maximum Number of Fruits Collected",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 3364,
    "title": "Minimum Positive Sum Subarray ",
    "difficulty": "easy",
    "category": [
      "array",
      "prefix sum",
      "sliding window"
    ]
  },
  {
    "id": 3365,
    "title": "Rearrange K Substrings to Form Target String",
    "difficulty": "medium",
    "category": [
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 3366,
    "title": "Minimum Array Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 3367,
    "title": "Maximize Sum of Weights after Edge Removals",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 3368,
    "title": "First Letter Capitalization",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 3369,
    "title": "Design an Array Statistics Tracker ",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data stream",
      "design",
      "hash table",
      "heap",
      "ordered set",
      "queue"
    ]
  },
  {
    "id": 3370,
    "title": "Smallest Number With All Set Bits",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "math"
    ]
  },
  {
    "id": 3371,
    "title": "Identify the Largest Outlier in an Array",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "enumeration",
      "hash table"
    ]
  },
  {
    "id": 3372,
    "title": "Maximize the Number of Target Nodes After Connecting Trees I",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 3373,
    "title": "Maximize the Number of Target Nodes After Connecting Trees II",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 3374,
    "title": "First Letter Capitalization II",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 3375,
    "title": "Minimum Operations to Make Array Values Equal to K",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 3376,
    "title": "Minimum Time to Break Locks I",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking",
      "bit manipulation",
      "dynamic programming",
      "graph traversal"
    ]
  },
  {
    "id": 3377,
    "title": "Digit Operations to Make Two Integers Equal",
    "difficulty": "medium",
    "category": [
      "graph",
      "heap",
      "math",
      "number theory",
      "shortest path"
    ]
  },
  {
    "id": 3378,
    "title": "Count Connected Components in LCM Graph",
    "difficulty": "hard",
    "category": [
      "array",
      "hash table",
      "math",
      "number theory",
      "union find"
    ]
  },
  {
    "id": 3379,
    "title": "Transformed Array",
    "difficulty": "easy",
    "category": [
      "array",
      "simulation"
    ]
  },
  {
    "id": 3380,
    "title": "Maximum Area Rectangle With Point Constraints I",
    "difficulty": "medium",
    "category": [
      "array",
      "binary indexed tree",
      "enumeration",
      "geometry",
      "math",
      "segment tree",
      "sorting"
    ]
  },
  {
    "id": 3381,
    "title": "Maximum Subarray Sum With Length Divisible by K",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "prefix sum"
    ]
  },
  {
    "id": 3382,
    "title": "Maximum Area Rectangle With Point Constraints II",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree",
      "geometry",
      "math",
      "segment tree",
      "sorting"
    ]
  },
  {
    "id": 3383,
    "title": "Minimum Runes to Add to Cast Spell",
    "difficulty": "hard",
    "category": [
      "array",
      "graph",
      "graph traversal",
      "topological sort",
      "union find"
    ]
  },
  {
    "id": 3384,
    "title": "Team Dominance by Pass Success",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 3385,
    "title": "Minimum Time to Break Locks II",
    "difficulty": "hard",
    "category": [
      "array",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 3386,
    "title": "Button with Longest Push Time",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 3387,
    "title": "Maximize Amount After Two Days of Conversions",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "graph traversal",
      "string"
    ]
  },
  {
    "id": 3388,
    "title": "Count Beautiful Splits in an Array",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 3389,
    "title": "Minimum Operations to Make Character Frequencies Equal",
    "difficulty": "hard",
    "category": [
      "counting",
      "dynamic programming",
      "enumeration",
      "hash table",
      "string"
    ]
  },
  {
    "id": 3390,
    "title": "Longest Team Pass Streak",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 3391,
    "title": "Design a 3D Binary Matrix with Efficient Layer Tracking",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "hash table",
      "heap",
      "matrix",
      "ordered set"
    ]
  },
  {
    "id": 3392,
    "title": "Count Subarrays of Length Three With a Condition",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 3393,
    "title": "Count Paths With the Given XOR Value",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 3394,
    "title": "Check if Grid can be Cut into Sections",
    "difficulty": "medium",
    "category": [
      "array",
      "sorting"
    ]
  },
  {
    "id": 3395,
    "title": "Subsequences with a Unique Middle Mode I",
    "difficulty": "hard",
    "category": [
      "array",
      "combinatorics",
      "hash table",
      "math"
    ]
  },
  {
    "id": 3396,
    "title": "Minimum Number of Operations to Make Elements in Array Distinct",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 3397,
    "title": "Maximum Number of Distinct Elements After Operations",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3398,
    "title": "Smallest Substring With Identical Characters I",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "enumeration"
    ]
  },
  {
    "id": 3399,
    "title": "Smallest Substring With Identical Characters II",
    "difficulty": "hard",
    "category": [
      "binary search",
      "string"
    ]
  },
  {
    "id": 3400,
    "title": "Maximum Number of Matching Indices After Right Shifts",
    "difficulty": "medium",
    "category": [
      "array",
      "simulation",
      "two pointers"
    ]
  },
  {
    "id": 3401,
    "title": "Find Circular Gift Exchange Chains",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 3402,
    "title": "Minimum Operations to Make Columns Strictly Increasing",
    "difficulty": "easy",
    "category": [
      "array",
      "greedy",
      "matrix"
    ]
  },
  {
    "id": 3403,
    "title": "Find the Lexicographically Largest String From the Box I",
    "difficulty": "medium",
    "category": [
      "enumeration",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 3404,
    "title": "Count Special Subsequences",
    "difficulty": "medium",
    "category": [
      "array",
      "enumeration",
      "hash table",
      "math"
    ]
  },
  {
    "id": 3405,
    "title": "Count the Number of Arrays with K Matching Adjacent Elements",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 3406,
    "title": "Find the Lexicographically Largest String From the Box II",
    "difficulty": "hard",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 3407,
    "title": "Substring Matching Pattern",
    "difficulty": "easy",
    "category": [
      "string",
      "string matching"
    ]
  },
  {
    "id": 3408,
    "title": "Design Task Manager",
    "difficulty": "medium",
    "category": [
      "design",
      "hash table",
      "heap",
      "ordered set"
    ]
  },
  {
    "id": 3409,
    "title": "Longest Subsequence With Decreasing Adjacent Difference",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 3410,
    "title": "Maximize Subarray Sum After Removing All Occurrences of One Element",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "segment tree"
    ]
  },
  {
    "id": 3411,
    "title": "Maximum Subarray With Equal Products",
    "difficulty": "easy",
    "category": [
      "array",
      "enumeration",
      "math",
      "number theory",
      "sliding window"
    ]
  },
  {
    "id": 3412,
    "title": "Find Mirror Score of a String",
    "difficulty": "medium",
    "category": [
      "hash table",
      "simulation",
      "stack",
      "string"
    ]
  },
  {
    "id": 3413,
    "title": "Maximum Coins From K Consecutive Bags",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "greedy",
      "prefix sum",
      "sliding window",
      "sorting"
    ]
  },
  {
    "id": 3414,
    "title": "Maximum Score of Non-overlapping Intervals",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 3415,
    "title": "Find Products with Three Consecutive Digits ",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 3416,
    "title": "Subsequences with a Unique Middle Mode II",
    "difficulty": "hard",
    "category": [
      "array",
      "combinatorics",
      "hash table",
      "math"
    ]
  },
  {
    "id": 3417,
    "title": "Zigzag Grid Traversal With Skip",
    "difficulty": "easy",
    "category": [
      "array",
      "matrix",
      "simulation"
    ]
  },
  {
    "id": 3418,
    "title": "Maximum Amount of Money Robot Can Earn",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 3419,
    "title": "Minimize the Maximum Edge Weight of Graph",
    "difficulty": "medium",
    "category": [
      "binary search",
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 3420,
    "title": "Count Non-Decreasing Subarrays After K Operations",
    "difficulty": "hard",
    "category": [
      "array",
      "monotonic queue",
      "monotonic stack",
      "queue",
      "segment tree",
      "sliding window",
      "stack"
    ]
  },
  {
    "id": 3421,
    "title": "Find Students Who Improved",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3422,
    "title": "Minimum Operations to Make Subarray Elements Equal",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "heap",
      "math",
      "sliding window"
    ]
  },
  {
    "id": 3423,
    "title": "Maximum Difference Between Adjacent Elements in a Circular Array",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 3424,
    "title": "Minimum Cost to Make Arrays Identical",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3425,
    "title": "Longest Special Path",
    "difficulty": "hard",
    "category": [
      "array",
      "graph traversal",
      "hash table",
      "prefix sum",
      "tree"
    ]
  },
  {
    "id": 3426,
    "title": "Manhattan Distances of All Arrangements of Pieces",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 3427,
    "title": "Sum of Variable Length Subarrays",
    "difficulty": "easy",
    "category": [
      "array",
      "prefix sum"
    ]
  },
  {
    "id": 3428,
    "title": "Maximum and Minimum Sums of at Most Size K Subsequences",
    "difficulty": "medium",
    "category": [
      "array",
      "combinatorics",
      "dynamic programming",
      "math",
      "sorting"
    ]
  },
  {
    "id": 3429,
    "title": "Paint House IV",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 3430,
    "title": "Maximum and Minimum Sums of at Most Size K Subarrays",
    "difficulty": "hard",
    "category": [
      "array",
      "math",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 3431,
    "title": "Minimum Unlocked Indices to Sort Nums",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 3432,
    "title": "Count Partitions with Even Sum Difference",
    "difficulty": "easy",
    "category": [
      "array",
      "math",
      "prefix sum"
    ]
  },
  {
    "id": 3433,
    "title": "Count Mentions Per User",
    "difficulty": "medium",
    "category": [
      "array",
      "math",
      "simulation",
      "sorting"
    ]
  },
  {
    "id": 3434,
    "title": "Maximum Frequency After Subarray Operation",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "enumeration",
      "greedy",
      "hash table",
      "prefix sum"
    ]
  },
  {
    "id": 3435,
    "title": "Frequencies of Shortest Supersequences",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "enumeration",
      "graph",
      "string",
      "topological sort"
    ]
  },
  {
    "id": 3436,
    "title": "Find Valid Emails",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 3437,
    "title": "Permutations III",
    "difficulty": "medium",
    "category": [
      "array",
      "backtracking"
    ]
  },
  {
    "id": 3438,
    "title": "Find Valid Pair of Adjacent Digits in String",
    "difficulty": "easy",
    "category": [
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 3439,
    "title": "Reschedule Meetings for Maximum Free Time I",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sliding window"
    ]
  },
  {
    "id": 3440,
    "title": "Reschedule Meetings for Maximum Free Time II",
    "difficulty": "medium",
    "category": [
      "array",
      "enumeration",
      "greedy"
    ]
  },
  {
    "id": 3441,
    "title": "Minimum Cost Good Caption",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 3442,
    "title": "Maximum Difference Between Even and Odd Frequency I",
    "difficulty": "easy",
    "category": [
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 3443,
    "title": "Maximum Manhattan Distance After K Changes",
    "difficulty": "medium",
    "category": [
      "counting",
      "hash table",
      "math",
      "string"
    ]
  },
  {
    "id": 3444,
    "title": "Minimum Increments for Target Multiples in an Array",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3445,
    "title": "Maximum Difference Between Even and Odd Frequency II",
    "difficulty": "hard",
    "category": [
      "enumeration",
      "prefix sum",
      "sliding window",
      "string"
    ]
  },
  {
    "id": 3446,
    "title": "Sort Matrix by Diagonals",
    "difficulty": "medium",
    "category": [
      "array",
      "matrix",
      "sorting"
    ]
  },
  {
    "id": 3447,
    "title": "Assign Elements to Groups with Constraints",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 3448,
    "title": "Count Substrings Divisible By Last Digit",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 3449,
    "title": "Maximize the Minimum Game Score",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 3450,
    "title": "Maximum Students on a Single Bench",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 3451,
    "title": "Find Invalid IP Addresses",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 3452,
    "title": "Sum of Good Numbers",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 3453,
    "title": "Separate Squares I",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search"
    ]
  },
  {
    "id": 3454,
    "title": "Separate Squares II",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "line sweep",
      "segment tree"
    ]
  },
  {
    "id": 3455,
    "title": "Shortest Matching Substring",
    "difficulty": "hard",
    "category": [
      "binary search",
      "string",
      "string matching",
      "two pointers"
    ]
  },
  {
    "id": 3456,
    "title": "Find Special Substring of Length K",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 3457,
    "title": "Eat Pizzas!",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3458,
    "title": "Select K Disjoint Special Substrings",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 3459,
    "title": "Length of Longest V-Shaped Diagonal Segment",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "matrix",
      "memoization"
    ]
  },
  {
    "id": 3460,
    "title": "Longest Common Prefix After at Most One Removal",
    "difficulty": "medium",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 3461,
    "title": "Check If Digits Are Equal in String After Operations I",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "math",
      "number theory",
      "simulation",
      "string"
    ]
  },
  {
    "id": 3462,
    "title": "Maximum Sum With at Most K Elements",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "heap",
      "matrix",
      "sorting"
    ]
  },
  {
    "id": 3463,
    "title": "Check If Digits Are Equal in String After Operations II",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "number theory",
      "string"
    ]
  },
  {
    "id": 3464,
    "title": "Maximize the Distance Between Points on a Square",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 3465,
    "title": "Find Products with Valid Serial Numbers",
    "difficulty": "easy",
    "category": [
      "database"
    ]
  },
  {
    "id": 3466,
    "title": "Maximum Coin Collection ",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 3467,
    "title": "Transform Array by Parity",
    "difficulty": "easy",
    "category": [
      "array",
      "counting",
      "sorting"
    ]
  },
  {
    "id": 3468,
    "title": "Find the Number of Copy Arrays",
    "difficulty": "medium",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 3469,
    "title": "Find Minimum Cost to Remove Array Elements",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 3470,
    "title": "Permutations IV",
    "difficulty": "hard",
    "category": [
      "array",
      "combinatorics",
      "enumeration",
      "math"
    ]
  },
  {
    "id": 3471,
    "title": "Find the Largest Almost Missing Integer",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table"
    ]
  },
  {
    "id": 3472,
    "title": "Longest Palindromic Subsequence After at Most K Operations",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 3473,
    "title": "Sum of K Subarrays With Length at Least M",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "prefix sum"
    ]
  },
  {
    "id": 3474,
    "title": "Lexicographically Smallest Generated String",
    "difficulty": "hard",
    "category": [
      "greedy",
      "string",
      "string matching"
    ]
  },
  {
    "id": 3475,
    "title": "DNA Pattern Recognition ",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3476,
    "title": "Maximize Profit from Task Assignment",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 3477,
    "title": "Fruits Into Baskets II",
    "difficulty": "easy",
    "category": [
      "array",
      "binary search",
      "segment tree",
      "simulation"
    ]
  },
  {
    "id": 3478,
    "title": "Choose K Elements With Maximum Sum",
    "difficulty": "medium",
    "category": [
      "array",
      "heap",
      "sorting"
    ]
  },
  {
    "id": 3479,
    "title": "Fruits Into Baskets III",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "ordered set",
      "segment tree"
    ]
  },
  {
    "id": 3480,
    "title": "Maximize Subarrays After Removing One Conflicting Pair",
    "difficulty": "hard",
    "category": [
      "array",
      "enumeration",
      "prefix sum",
      "segment tree"
    ]
  },
  {
    "id": 3481,
    "title": "Apply Substitutions",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "graph traversal",
      "hash table",
      "string",
      "topological sort"
    ]
  },
  {
    "id": 3482,
    "title": "Analyze Organization Hierarchy",
    "difficulty": "hard",
    "category": [
      "database"
    ]
  },
  {
    "id": 3483,
    "title": "Unique 3-Digit Even Numbers",
    "difficulty": "easy",
    "category": [
      "array",
      "enumeration",
      "hash table",
      "recursion"
    ]
  },
  {
    "id": 3484,
    "title": "Design Spreadsheet",
    "difficulty": "medium",
    "category": [
      "array",
      "design",
      "hash table",
      "matrix",
      "string"
    ]
  },
  {
    "id": 3485,
    "title": "Longest Common Prefix of K Strings After Removal",
    "difficulty": "hard",
    "category": [
      "array",
      "string",
      "trie"
    ]
  },
  {
    "id": 3486,
    "title": "Longest Special Path II",
    "difficulty": "hard",
    "category": [
      "array",
      "graph traversal",
      "hash table",
      "prefix sum",
      "tree"
    ]
  },
  {
    "id": 3487,
    "title": "Maximum Unique Subarray Sum After Deletion",
    "difficulty": "easy",
    "category": [
      "array",
      "greedy",
      "hash table"
    ]
  },
  {
    "id": 3488,
    "title": "Closest Equal Element Queries",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "hash table"
    ]
  },
  {
    "id": 3489,
    "title": "Zero Array Transformation IV",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming"
    ]
  },
  {
    "id": 3490,
    "title": "Count Beautiful Numbers",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 3491,
    "title": "Phone Number Prefix",
    "difficulty": "easy",
    "category": [
      "array",
      "sorting",
      "string",
      "trie"
    ]
  },
  {
    "id": 3492,
    "title": "Maximum Containers on a Ship",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 3493,
    "title": "Properties Graph",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "graph traversal",
      "hash table",
      "union find"
    ]
  },
  {
    "id": 3494,
    "title": "Find the Minimum Amount of Time to Brew Potions",
    "difficulty": "medium",
    "category": [
      "array",
      "prefix sum",
      "simulation"
    ]
  },
  {
    "id": 3495,
    "title": "Minimum Operations to Make Array Elements Zero",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "math"
    ]
  },
  {
    "id": 3496,
    "title": "Maximize Score After Pair Deletions",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy"
    ]
  },
  {
    "id": 3497,
    "title": "Analyze Subscription Conversion ",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3498,
    "title": "Reverse Degree of a String",
    "difficulty": "easy",
    "category": [
      "simulation",
      "string"
    ]
  },
  {
    "id": 3499,
    "title": "Maximize Active Section with Trade I",
    "difficulty": "medium",
    "category": [
      "enumeration",
      "string"
    ]
  },
  {
    "id": 3500,
    "title": "Minimum Cost to Divide Array Into Subarrays",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "prefix sum"
    ]
  },
  {
    "id": 3501,
    "title": "Maximize Active Section with Trade II",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "segment tree",
      "string"
    ]
  },
  {
    "id": 3502,
    "title": "Minimum Cost to Reach Every Position",
    "difficulty": "easy",
    "category": [
      "array"
    ]
  },
  {
    "id": 3503,
    "title": "Longest Palindrome After Substring Concatenation I",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "enumeration",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 3504,
    "title": "Longest Palindrome After Substring Concatenation II",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 3505,
    "title": "Minimum Operations to Make Elements Within K Subarrays Equal",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "hash table",
      "heap",
      "math",
      "sliding window"
    ]
  },
  {
    "id": 3506,
    "title": "Find Time Required to Eliminate Bacterial Strains",
    "difficulty": "hard",
    "category": [
      "array",
      "greedy",
      "heap",
      "math"
    ]
  },
  {
    "id": 3507,
    "title": "Minimum Pair Removal to Sort Array I",
    "difficulty": "easy",
    "category": [
      "array",
      "hash table",
      "heap",
      "linked list",
      "ordered set",
      "simulation"
    ]
  },
  {
    "id": 3508,
    "title": "Implement Router",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "design",
      "hash table",
      "ordered set",
      "queue"
    ]
  },
  {
    "id": 3509,
    "title": "Maximum Product of Subsequences With an Alternating Sum Equal to K",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "hash table"
    ]
  },
  {
    "id": 3510,
    "title": "Minimum Pair Removal to Sort Array II",
    "difficulty": "hard",
    "category": [
      "array",
      "hash table",
      "heap",
      "linked list",
      "ordered set",
      "simulation"
    ]
  },
  {
    "id": 3511,
    "title": "Make a Positive Array",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "prefix sum"
    ]
  },
  {
    "id": 3512,
    "title": "Minimum Operations to Make Array Sum Divisible by K",
    "difficulty": "easy",
    "category": [
      "array",
      "math"
    ]
  },
  {
    "id": 3513,
    "title": "Number of Unique XOR Triplets I",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "math"
    ]
  },
  {
    "id": 3514,
    "title": "Number of Unique XOR Triplets II",
    "difficulty": "medium",
    "category": [
      "array",
      "bit manipulation",
      "enumeration",
      "math"
    ]
  },
  {
    "id": 3515,
    "title": "Shortest Path in a Weighted Tree",
    "difficulty": "hard",
    "category": [
      "array",
      "binary indexed tree",
      "graph traversal",
      "segment tree",
      "tree"
    ]
  },
  {
    "id": 3516,
    "title": "Find Closest Person",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 3517,
    "title": "Smallest Palindromic Rearrangement I",
    "difficulty": "medium",
    "category": [
      "sorting",
      "string"
    ]
  },
  {
    "id": 3518,
    "title": "Smallest Palindromic Rearrangement II",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "counting",
      "hash table",
      "math",
      "string"
    ]
  },
  {
    "id": 3519,
    "title": "Count Numbers with Non-Decreasing Digits ",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "string"
    ]
  },
  {
    "id": 3520,
    "title": "Minimum Threshold for Inversion Pairs Count",
    "difficulty": "medium",
    "category": [
      "array",
      "binary indexed tree",
      "binary search",
      "segment tree"
    ]
  },
  {
    "id": 3521,
    "title": "Find Product Recommendation Pairs",
    "difficulty": "medium",
    "category": [
      "database"
    ]
  },
  {
    "id": 3522,
    "title": "Calculate Score After Performing Instructions",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "simulation",
      "string"
    ]
  },
  {
    "id": 3523,
    "title": "Make Array Non-decreasing",
    "difficulty": "medium",
    "category": [
      "array",
      "greedy",
      "monotonic stack",
      "stack"
    ]
  },
  {
    "id": 3524,
    "title": "Find X Value of Array I",
    "difficulty": "medium",
    "category": [
      "array",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 3525,
    "title": "Find X Value of Array II",
    "difficulty": "hard",
    "category": [
      "array",
      "math",
      "segment tree"
    ]
  },
  {
    "id": 3526,
    "title": "Range XOR Queries with Subarray Reversals",
    "difficulty": "hard",
    "category": [
      "array",
      "binary tree",
      "tree"
    ]
  },
  {
    "id": 3527,
    "title": "Find the Most Common Response",
    "difficulty": "medium",
    "category": [
      "array",
      "counting",
      "hash table",
      "string"
    ]
  },
  {
    "id": 3528,
    "title": "Unit Conversion I",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 3529,
    "title": "Count Cells in Overlapping Horizontal and Vertical Substrings",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "matrix",
      "rolling hash",
      "string",
      "string matching"
    ]
  },
  {
    "id": 3530,
    "title": "Maximum Profit from Valid Topological Order in DAG",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming",
      "graph",
      "topological sort"
    ]
  },
  {
    "id": 3531,
    "title": "Count Covered Buildings",
    "difficulty": "medium",
    "category": [
      "array",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 3532,
    "title": "Path Existence Queries in a Graph I",
    "difficulty": "medium",
    "category": [
      "array",
      "binary search",
      "graph",
      "hash table",
      "union find"
    ]
  },
  {
    "id": 3533,
    "title": "Concatenated Divisibility",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 3534,
    "title": "Path Existence Queries in a Graph II",
    "difficulty": "hard",
    "category": [
      "array",
      "binary search",
      "graph",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3535,
    "title": "Unit Conversion II",
    "difficulty": "medium",
    "category": [
      "array",
      "graph",
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 3536,
    "title": "Maximum Product of Two Digits",
    "difficulty": "easy",
    "category": [
      "math",
      "sorting"
    ]
  },
  {
    "id": 3537,
    "title": "Fill a Special Grid",
    "difficulty": "medium",
    "category": [
      "array",
      "divide and conquer",
      "matrix"
    ]
  },
  {
    "id": 3538,
    "title": "Merge Operations for Minimum Travel Time",
    "difficulty": "hard",
    "category": [
      "array",
      "dynamic programming",
      "prefix sum"
    ]
  },
  {
    "id": 3539,
    "title": "Find Sum of Array Product of Magical Sequences",
    "difficulty": "hard",
    "category": [
      "array",
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 3540,
    "title": "Minimum Time to Visit All Houses",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 3541,
    "title": "Pathless",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 3542,
    "title": "Submission is All You Need",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 3543,
    "title": "Top-K Tracker (Hard Version)",
    "difficulty": "easy",
    "category": [
      "interactive"
    ]
  },
  {
    "id": 3544,
    "title": "Top-K Tracker (Easy Version)",
    "difficulty": "easy",
    "category": [
      "interactive"
    ]
  },
  {
    "id": 3545,
    "title": "Induced Subgraph Queries",
    "difficulty": "easy",
    "category": [
      "data structures",
      "graph",
      "sorting"
    ]
  },
  {
    "id": 3546,
    "title": "Permutation Blackhole",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 3547,
    "title": "Interactive RBS (Hard Version)",
    "difficulty": "easy",
    "category": [
      "binary search",
      "bit manipulation",
      "constructive algorithms",
      "dynamic programming",
      "interactive"
    ]
  },
  {
    "id": 3548,
    "title": "Interactive RBS (Medium Version)",
    "difficulty": "easy",
    "category": [
      "binary search",
      "bit manipulation",
      "constructive algorithms",
      "interactive"
    ]
  },
  {
    "id": 3549,
    "title": "Interactive RBS (Easy Version)",
    "difficulty": "easy",
    "category": [
      "binary search",
      "bit manipulation",
      "constructive algorithms",
      "interactive",
      "union find"
    ]
  },
  {
    "id": 3550,
    "title": "Stay or Mirror",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3551,
    "title": "Double Perspective",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 3552,
    "title": "Strict Triangle",
    "difficulty": "easy",
    "category": [
      "graph",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 3553,
    "title": "Submedians (Hard Version)",
    "difficulty": "easy",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 3554,
    "title": "Submedians (Easy Version)",
    "difficulty": "easy",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3555,
    "title": "Sum of LDS",
    "difficulty": "easy",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3556,
    "title": "Leftmost Below",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 3557,
    "title": "Deque Process",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 3558,
    "title": "Recycling Center",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3559,
    "title": "Big Wins!  (hard version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "divide and conquer",
      "tree",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 3560,
    "title": "Big Wins! (easy version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 3561,
    "title": "1-1-1, Free Tree!",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "graph",
      "graph traversal",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 3562,
    "title": "G-C-D, Unlucky!",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 3563,
    "title": "This Is the Last Time",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3564,
    "title": "I Will Definitely Make It",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3565,
    "title": "No Casino in the Mountains",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 3566,
    "title": "Only One Digit",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 3567,
    "title": "Timofey and Docker",
    "difficulty": "easy",
    "category": [
      "binary search",
      "divide and conquer",
      "dynamic programming"
    ]
  },
  {
    "id": 3568,
    "title": "Sets of Complementary Sums",
    "difficulty": "easy",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 3569,
    "title": "Segments Covering",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 3570,
    "title": "Count Good Numbers",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3571,
    "title": "Left and Down",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 3572,
    "title": "Difficult Contest",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation",
      "sorting",
      "string"
    ]
  },
  {
    "id": 3573,
    "title": "Lexicographic Partition",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math",
      "tree"
    ]
  },
  {
    "id": 3574,
    "title": "Longest Good Subsequence",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "tree"
    ]
  },
  {
    "id": 3575,
    "title": "Maximise Sum",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 3576,
    "title": "Appending Permutations (Hard Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 3577,
    "title": "Appending Permutations (Easy Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 3578,
    "title": "Make it Zero",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3579,
    "title": "Make a Palindrome",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 3580,
    "title": "Subset Multiplication",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3581,
    "title": "Minimise Sum",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 3582,
    "title": "Deranged Deletions",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3583,
    "title": "Modular Sorting",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "greedy",
      "math",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 3584,
    "title": "Minimize Fixed Points",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "number theory"
    ]
  },
  {
    "id": 3585,
    "title": "MEX Count",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 3586,
    "title": "Binary String Battle",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 3587,
    "title": "Prefix Min and Suffix Max",
    "difficulty": "easy",
    "category": [
      "brute force",
      "data structures"
    ]
  },
  {
    "id": 3588,
    "title": "Tournament",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 3589,
    "title": "Blackboard Game",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 3590,
    "title": "Tree Parking",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "fast fourier transform",
      "math",
      "tree"
    ]
  },
  {
    "id": 3591,
    "title": "Colorful Polygon",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "divide and conquer",
      "geometry"
    ]
  },
  {
    "id": 3592,
    "title": "Greedy Grid Counting",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3593,
    "title": "Traffic Lights",
    "difficulty": "easy",
    "category": [
      "brute force",
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "graph",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 3594,
    "title": "Manhattan Pairs",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "geometry",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 3595,
    "title": "Pile Shuffling",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 3596,
    "title": "Greedy Grid",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 3597,
    "title": "Ice Baby",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "dynamic programming",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 3598,
    "title": "Gangsta",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "math",
      "sorting"
    ]
  },
  {
    "id": 3599,
    "title": "Yamakasi",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 3600,
    "title": "Sponsor of Your Problems",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 3601,
    "title": "1709",
    "difficulty": "medium",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 3602,
    "title": "Those Who Are With Us",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 3603,
    "title": "Above the Clouds",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "string"
    ]
  },
  {
    "id": 3604,
    "title": "Letter Home",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 3605,
    "title": "Eulerian Line Graph",
    "difficulty": "hard",
    "category": [
      "graph",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3606,
    "title": "Superb Graphs",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "graph"
    ]
  },
  {
    "id": 3607,
    "title": "Lanes of Cars",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "ternary search"
    ]
  },
  {
    "id": 3608,
    "title": "Matrix game",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 3609,
    "title": "Divine Tree",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 3610,
    "title": "Square Pool",
    "difficulty": "easy",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 3611,
    "title": "Square of Rectangles",
    "difficulty": "easy",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 3612,
    "title": "Volcanic Eruptions",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "greedy",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 3613,
    "title": "And Constraint",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 3614,
    "title": "Token Removing",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 3615,
    "title": "A Good Problem",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 3616,
    "title": "Line Segments",
    "difficulty": "medium",
    "category": [
      "geometry",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3617,
    "title": "Add or XOR",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3618,
    "title": "Shifts and Swaps",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 3619,
    "title": "Grid Coloring",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "geometry",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3620,
    "title": "Red Light, Green Light (Hard version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "dynamic programming",
      "graph",
      "graph traversal",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3621,
    "title": "Red Light, Green Light (Easy version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "graph",
      "graph traversal",
      "implementation",
      "number theory"
    ]
  },
  {
    "id": 3622,
    "title": "Make It Beautiful",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "data structures",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3623,
    "title": "Make It Permutation",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 3624,
    "title": "Equal Subsequences",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 3625,
    "title": "Incessant Rain",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "sorting"
    ]
  },
  {
    "id": 3626,
    "title": "Omg Graph",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph",
      "greedy",
      "shortest path",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 3627,
    "title": "Wildflower",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 3628,
    "title": "Lost Soul",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 3629,
    "title": "Retaliation",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3630,
    "title": "Cool Partition",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 3631,
    "title": "Shrink",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 3632,
    "title": "False Alarm",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 3633,
    "title": "Gellyfish and Baby's Breath",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 3634,
    "title": "Gellyfish and Tricolor Pansy",
    "difficulty": "easy",
    "category": [
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 3635,
    "title": "Gellyfish and Lycoris Radiata (Hard Version)",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 3636,
    "title": "Gellyfish and Lycoris Radiata (Easy Version)",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 3637,
    "title": "Gellyfish and Mayflower",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph"
    ]
  },
  {
    "id": 3638,
    "title": "Gellyfish and Forget-Me-Not",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "game theory",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3639,
    "title": "Gellyfish and Eternal Violet",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "greedy",
      "math",
      "probability"
    ]
  },
  {
    "id": 3640,
    "title": "Gellyfish and Camellia Japonica",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 3641,
    "title": "Gellyfish and Flaming Peony",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3642,
    "title": "Build an Array",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3643,
    "title": "Small Operations",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "dynamic programming",
      "graph traversal",
      "math",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 3644,
    "title": "Kirei Attacks the Estate",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 3645,
    "title": "Come a Little Closer",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 3646,
    "title": "Need More Arrays",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 3647,
    "title": "Not Quite a Palindromic String",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 3648,
    "title": "Square Year",
    "difficulty": "easy",
    "category": [
      "binary search",
      "brute force",
      "math"
    ]
  },
  {
    "id": 3649,
    "title": "Two Arrays",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 3650,
    "title": "From Kazan with Love",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 3651,
    "title": "Cheater",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 3652,
    "title": "Smilo and Minecraft",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 3653,
    "title": "Good Start",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 3654,
    "title": "Shashliks",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 3655,
    "title": "Variables and Operations",
    "difficulty": "hard",
    "category": [
      "graph",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 3656,
    "title": "Tree Colorings",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph",
      "graph traversal",
      "math",
      "number theory",
      "tree"
    ]
  },
  {
    "id": 3657,
    "title": "Reachability and Tree",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 3658,
    "title": "Coloring Game",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 3659,
    "title": "Shrinking Array",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 3660,
    "title": "Race",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 3661,
    "title": "Divisible Subarrays",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force",
      "data structures",
      "interactive"
    ]
  },
  {
    "id": 3662,
    "title": "Puzzle",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3663,
    "title": "Changing the String",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "implementation",
      "sorting",
      "string"
    ]
  },
  {
    "id": 3664,
    "title": "Creating a Schedule",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 3665,
    "title": "Equal Values",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 3666,
    "title": "Fibonacci Cubes",
    "difficulty": "easy",
    "category": [
      "brute force",
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 3667,
    "title": "Energy Crystals",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 3668,
    "title": "Faculty",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3669,
    "title": "Melody",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 3670,
    "title": "Fewer Batteries",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "hash table"
    ]
  },
  {
    "id": 3671,
    "title": "Racing",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 3672,
    "title": "Down with Brackets",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 3673,
    "title": "Fashionable Array",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 3674,
    "title": "Penguin Steps",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph",
      "graph traversal",
      "max flow",
      "shortest path"
    ]
  },
  {
    "id": 3675,
    "title": "Binary String Wowee",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 3676,
    "title": "D/D/D",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 3677,
    "title": "Hacking Numbers (Hard Version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "interactive",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3678,
    "title": "Hacking Numbers (Medium Version)",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "interactive",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3679,
    "title": "Hacking Numbers (Easy Version)",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "interactive",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3680,
    "title": "Slice to Survive",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3681,
    "title": "It's Time To Duel",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 3682,
    "title": "Fallen Towers",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 3683,
    "title": "Spruce Dispute",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy",
      "implementation",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 3684,
    "title": "Needle in a Numstack",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "implementation",
      "interactive"
    ]
  },
  {
    "id": 3685,
    "title": "Neo's Escape",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "dynamic programming",
      "graph",
      "greedy",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 3686,
    "title": "SUMdamental Decomposition",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 3687,
    "title": "Permutation Warm-Up",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3688,
    "title": "Cycling (Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 3689,
    "title": "Cycling (Easy Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 3690,
    "title": "Ain and Apple Tree",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "math",
      "tree"
    ]
  },
  {
    "id": 3691,
    "title": "Apple Tree Traversing",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph traversal",
      "greedy",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 3692,
    "title": "Maximum Subarray Sum",
    "difficulty": "medium",
    "category": [
      "binary search",
      "constructive algorithms",
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 3693,
    "title": "Apples in Boxes",
    "difficulty": "easy",
    "category": [
      "game theory",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3694,
    "title": "LRC and VIP",
    "difficulty": "easy",
    "category": [
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 3695,
    "title": "Baudelaire (hard version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "divide and conquer",
      "graph traversal",
      "implementation",
      "interactive",
      "tree"
    ]
  },
  {
    "id": 3696,
    "title": "Baudelaire (easy version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "divide and conquer",
      "greedy",
      "interactive",
      "tree"
    ]
  },
  {
    "id": 3697,
    "title": "Goblin",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "greedy",
      "math",
      "union find"
    ]
  },
  {
    "id": 3698,
    "title": "Wolf",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3699,
    "title": "Flower Boy",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 3700,
    "title": "Cherry Bomb",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 3701,
    "title": "St. Chroma",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3702,
    "title": "Dr. TC",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 3703,
    "title": "Modulo 3",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "graph",
      "tree",
      "union find"
    ]
  },
  {
    "id": 3704,
    "title": "Numbers and Strings",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "dynamic programming",
      "graph traversal",
      "implementation",
      "math"
    ]
  },
  {
    "id": 3705,
    "title": "Unpleasant Strings",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy",
      "string"
    ]
  },
  {
    "id": 3706,
    "title": "Array and GCD",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3707,
    "title": "Card Game",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "game theory",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3708,
    "title": "Move to the End",
    "difficulty": "easy",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 3709,
    "title": "Three Decks",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 3710,
    "title": "Maximize Nor",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "dynamic programming",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 3711,
    "title": "Keep the Sum",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 3712,
    "title": "Local Construction",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 3713,
    "title": "Median Splits",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 3714,
    "title": "Binary Typewriter",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 3715,
    "title": "Common Multiple",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 3716,
    "title": "The Picky Cat",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 3717,
    "title": "Dinner Time",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 3718,
    "title": "Shoo Shatters the Sunshine",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 3719,
    "title": "Kia Bakes a Cake",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 3720,
    "title": "Mani and Segments",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 3721,
    "title": "23 Kingdom",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "greedy",
      "ternary search",
      "two pointers"
    ]
  },
  {
    "id": 3722,
    "title": "Quartet Swapping",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "divide and conquer",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3723,
    "title": "Mex in the Grid",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 3724,
    "title": "Sasha and the Apartment Purchase",
    "difficulty": "medium",
    "category": [
      "math",
      "sorting"
    ]
  },
  {
    "id": 3725,
    "title": "Vadim's Collection",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 3726,
    "title": "Lost Luggage",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "max flow"
    ]
  },
  {
    "id": 3727,
    "title": "Clearing the Snowdrift",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 3728,
    "title": "Homework",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "math",
      "matrix"
    ]
  },
  {
    "id": 3729,
    "title": "Bermuda Triangle",
    "difficulty": "hard",
    "category": [
      "chinese remainder theorem",
      "geometry",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3730,
    "title": "Baggage Claim",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph",
      "graph traversal",
      "implementation",
      "math",
      "tree",
      "union find"
    ]
  },
  {
    "id": 3731,
    "title": "Sports Betting",
    "difficulty": "medium",
    "category": [
      "2-sat",
      "brute force",
      "math",
      "sorting"
    ]
  },
  {
    "id": 3732,
    "title": "Wonderful XOR Problem",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 3733,
    "title": "Wonderful Guessing Game",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "interactive"
    ]
  },
  {
    "id": 3734,
    "title": "Wonderful Impostors",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 3735,
    "title": "Wonderful Teddy Bears",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 3736,
    "title": "Wonderful Lightbulbs",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 3737,
    "title": "Wonderful City",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 3738,
    "title": "Wonderful Gloves",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 3739,
    "title": "Wonderful Sticks",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 3740,
    "title": "Premiere at a Wrong Time",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 3741,
    "title": "Mysterious Script",
    "difficulty": "easy",
    "category": [
      "number theory",
      "parsing",
      "special problem"
    ]
  },
  {
    "id": 3742,
    "title": "Blurry Vision",
    "difficulty": "easy",
    "category": [
      "fast fourier transform",
      "math",
      "special problem"
    ]
  },
  {
    "id": 3743,
    "title": "Definitely a Geometry Problem",
    "difficulty": "easy",
    "category": [
      "geometry",
      "special problem"
    ]
  },
  {
    "id": 3744,
    "title": "⅓ оf а Рrоblеm",
    "difficulty": "easy",
    "category": [
      "math",
      "special problem"
    ]
  },
  {
    "id": 3745,
    "title": "Pair Count",
    "difficulty": "easy",
    "category": [
      "number theory",
      "special problem"
    ]
  },
  {
    "id": 3746,
    "title": "Where Am I?",
    "difficulty": "easy",
    "category": [
      "geometry",
      "special problem"
    ]
  },
  {
    "id": 3747,
    "title": "Would It Be Unrated?",
    "difficulty": "easy",
    "category": [
      "binary search",
      "brute force",
      "special problem"
    ]
  },
  {
    "id": 3748,
    "title": "Plinko",
    "difficulty": "easy",
    "category": [
      "game theory",
      "interactive",
      "special problem"
    ]
  },
  {
    "id": 3749,
    "title": "Piecing It Together",
    "difficulty": "easy",
    "category": [
      "special problem",
      "string suffix structures"
    ]
  },
  {
    "id": 3750,
    "title": "La Vaca Saturno Saturnita",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3751,
    "title": "Chimpanzini Bananini",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation",
      "math"
    ]
  },
  {
    "id": 3752,
    "title": "Trulimero Trulicina",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 3753,
    "title": "Boneca Ambalabu",
    "difficulty": "medium",
    "category": [
      "bit manipulation"
    ]
  },
  {
    "id": 3754,
    "title": "Tung Tung Sahur",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 3755,
    "title": "Brr Brrr Patapim",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 3756,
    "title": "Bobritto Bandito",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms"
    ]
  },
  {
    "id": 3757,
    "title": "Trippi Troppi",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 3758,
    "title": "Shorten the Array",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "data structures",
      "graph traversal",
      "greedy",
      "string",
      "tree",
      "two pointers"
    ]
  },
  {
    "id": 3759,
    "title": "Hackers and Neural Networks",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 3760,
    "title": "Min Max MEX",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 3761,
    "title": "Skibidi Table",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "implementation"
    ]
  },
  {
    "id": 3762,
    "title": "Simple Repetition",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 3763,
    "title": "Expensive Number",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 3764,
    "title": "Ideal Generator",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 3765,
    "title": "Andryusha and CCB",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math",
      "number theory",
      "string"
    ]
  },
  {
    "id": 3766,
    "title": "She knows...",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "graph",
      "math"
    ]
  },
  {
    "id": 3767,
    "title": "Mishkin Energizer",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 3768,
    "title": "Asuna and the Mosquitoes",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3769,
    "title": "Lady Bug",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 3770,
    "title": "Kamilka and the Sheep",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 3771,
    "title": "Gleb and Boating",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "graph",
      "greedy",
      "math",
      "number theory",
      "shortest path"
    ]
  },
  {
    "id": 3772,
    "title": "Igor and Mountain",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 3773,
    "title": "Interesting Ratio",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math",
      "number theory",
      "two pointers"
    ]
  },
  {
    "id": 3774,
    "title": "Place of the Olympiad",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3775,
    "title": "Combination Lock",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 3776,
    "title": "Team Training",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3777,
    "title": "Olympiad Date",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 3778,
    "title": "Dining Hall",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 3779,
    "title": "Pushing Balls",
    "difficulty": "easy",
    "category": [
      "brute force",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 3780,
    "title": "Treasure Hunt",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 3781,
    "title": "Black Cat Collapse",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 3782,
    "title": "Conditional Operators",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 3783,
    "title": "Key of Like (Hard Version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 3784,
    "title": "Key of Like (Easy Version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory",
      "math",
      "probability"
    ]
  },
  {
    "id": 3785,
    "title": "Canteen (Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "max flow",
      "two pointers"
    ]
  },
  {
    "id": 3786,
    "title": "Canteen (Easy Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "max flow",
      "two pointers"
    ]
  },
  {
    "id": 3787,
    "title": "Simple Permutation",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "number theory"
    ]
  },
  {
    "id": 3788,
    "title": "Hamiltonian Partition",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 3789,
    "title": "Nim with Special Numbers",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 3790,
    "title": "Esports in Berland",
    "difficulty": "easy",
    "category": [
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 3791,
    "title": "Weapon Upgrade",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "special problem"
    ]
  },
  {
    "id": 3792,
    "title": "Color the Arrows",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "special problem"
    ]
  },
  {
    "id": 3793,
    "title": "Uppercase or Lowercase?",
    "difficulty": "easy",
    "category": [
      "interactive",
      "special problem"
    ]
  },
  {
    "id": 3794,
    "title": "Coin Game",
    "difficulty": "easy",
    "category": [
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 3795,
    "title": "Showmatch",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 3796,
    "title": "Password Generator",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 3797,
    "title": "Online Palindrome",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "interactive"
    ]
  },
  {
    "id": 3798,
    "title": "Zebra-like Numbers",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3799,
    "title": "Even String",
    "difficulty": "medium",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "math",
      "string"
    ]
  },
  {
    "id": 3800,
    "title": "Disappearing Permutation",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 3801,
    "title": "Large Array and Segments",
    "difficulty": "easy",
    "category": [
      "binary search",
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 3802,
    "title": "Cloudberry Jam",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 3803,
    "title": "Serval and Colorful Array (Hard Version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 3804,
    "title": "Serval and Colorful Array (Easy Version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 3805,
    "title": "Serval and Modulo",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3806,
    "title": "Serval and Kaitenzushi Buffet",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph matching",
      "greedy"
    ]
  },
  {
    "id": 3807,
    "title": "Serval and The Formula",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 3808,
    "title": "Serval and Final MEX",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 3809,
    "title": "Serval and String Theory",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 3810,
    "title": "Turtle and Nediam 2",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 3811,
    "title": "Wish Upon a Satellite (Hard Version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 3812,
    "title": "Wish Upon a Satellite (Easy Version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory"
    ]
  },
  {
    "id": 3813,
    "title": "Skyscape",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 3814,
    "title": "Blossom",
    "difficulty": "hard",
    "category": [
      "binary search",
      "combinatorics",
      "dynamic programming",
      "implementation",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 3815,
    "title": "Arcology On Permafrost",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3816,
    "title": "You Soared Afar With Grace",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 3817,
    "title": "MIN = GCD",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3818,
    "title": "Max and Mod",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 3819,
    "title": "Floor or Ceil",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 3820,
    "title": "Binary Matrix",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 3821,
    "title": "Hard Formula (Hard Version)",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 3822,
    "title": "Hard Formula",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 3823,
    "title": "Hot Matrix",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 3824,
    "title": "Quantifier",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 3825,
    "title": "MST in Modulo Graph",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy",
      "math",
      "number theory",
      "sorting",
      "tree",
      "union find"
    ]
  },
  {
    "id": 3826,
    "title": "Quaternary Matrix",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "greedy",
      "implementation",
      "matrix"
    ]
  },
  {
    "id": 3827,
    "title": "Balancing",
    "difficulty": "hard",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 3828,
    "title": "Math Division",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 3829,
    "title": "Order Statistics",
    "difficulty": "hard",
    "category": [
      "binary search",
      "special problem"
    ]
  },
  {
    "id": 3830,
    "title": "Card Flip",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 3831,
    "title": "Best Runner",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 3832,
    "title": "Strong Connectivity Strikes Back",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "special problem"
    ]
  },
  {
    "id": 3833,
    "title": "Cute Subsequences",
    "difficulty": "medium",
    "category": [
      "sorting",
      "special problem"
    ]
  },
  {
    "id": 3834,
    "title": "Dreaming Is Not Harmful",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 3835,
    "title": "Arithmetic Exercise",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 3836,
    "title": "Alice, Bob, And Two Arrays",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "game theory",
      "special problem"
    ]
  },
  {
    "id": 3837,
    "title": "Scammy Game Ad",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 3838,
    "title": "Vicious Labyrinth",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 3839,
    "title": "Final Verdict",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 3840,
    "title": "RGB Walking",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "chinese remainder theorem",
      "graph",
      "graph traversal",
      "number theory"
    ]
  },
  {
    "id": 3841,
    "title": "AND x OR",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "dynamic programming"
    ]
  },
  {
    "id": 3842,
    "title": "Another Folding Strip",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3843,
    "title": "Maximum Polygon",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 3844,
    "title": "Binary Subsequence Value Sum",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "dynamic programming",
      "fast fourier transform",
      "math",
      "matrix"
    ]
  },
  {
    "id": 3845,
    "title": "Finding OR Sum",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "implementation",
      "interactive",
      "math"
    ]
  },
  {
    "id": 3846,
    "title": "Breach of Faith",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 3847,
    "title": "Beautiful Sequence Returns",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 3848,
    "title": "XOR Matrix",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 3849,
    "title": "Equalization",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "graph",
      "math"
    ]
  },
  {
    "id": 3850,
    "title": "Two Colors",
    "difficulty": "medium",
    "category": [
      "binary search",
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 3851,
    "title": "Array Recoloring",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 3852,
    "title": "To Zero",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 3853,
    "title": "Game With Triangles: Season 2",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "geometry"
    ]
  },
  {
    "id": 3854,
    "title": "Counting Necessary Nodes",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "divide and conquer",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 3855,
    "title": "Empty Triangle",
    "difficulty": "medium",
    "category": [
      "geometry",
      "interactive",
      "probability"
    ]
  },
  {
    "id": 3856,
    "title": "Counting Points",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "geometry",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 3857,
    "title": "XOR and Triangle",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "brute force",
      "geometry",
      "greedy",
      "probability"
    ]
  },
  {
    "id": 3858,
    "title": "The Third Side",
    "difficulty": "easy",
    "category": [
      "geometry",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3859,
    "title": "Draw a Square",
    "difficulty": "easy",
    "category": [
      "geometry",
      "implementation"
    ]
  },
  {
    "id": 3860,
    "title": "Can You Reach There?",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 3861,
    "title": "Boarding Queue",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 3862,
    "title": "Book Sorting",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 3863,
    "title": "Gathering Sharks",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 3864,
    "title": "Squares on Grid Lines",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 3865,
    "title": "Secret Lilies and Roses",
    "difficulty": "hard",
    "category": [
      "interactive"
    ]
  },
  {
    "id": 3866,
    "title": "Corrupted File",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 3867,
    "title": "Hold the Star",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 3868,
    "title": "Minus Operator",
    "difficulty": "hard",
    "category": [
      "interactive"
    ]
  },
  {
    "id": 3869,
    "title": "Tower of Hanoi",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 3870,
    "title": "Cactus Connectivity",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 3871,
    "title": "Three-Dimensional Embedding",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 3872,
    "title": "Control Towers",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 3873,
    "title": "I've Been Flipping Numbers for 300 Years and Calculated the Sum",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "combinatorics",
      "divide and conquer",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3874,
    "title": "Goodbye, Banker Life",
    "difficulty": "medium",
    "category": [
      "2-sat",
      "bit manipulation",
      "combinatorics",
      "constructive algorithms",
      "fast fourier transform",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3875,
    "title": "Do You Love Your Hero and His Two-Hit Multi-Target Attacks?",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "geometry",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3876,
    "title": "For Wizards, the Exam Is Easy, but I Couldn't Handle It",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 3877,
    "title": "Creating Keys for StORages Has Become My Main Skill",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 3878,
    "title": "Having Been a Treasurer in the Past, I Help Goblins Deceive",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "string"
    ]
  },
  {
    "id": 3879,
    "title": "New World, New Me, New Array",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 3880,
    "title": "Towering Arrays",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 3881,
    "title": "LeaFall",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "probability",
      "tree"
    ]
  },
  {
    "id": 3882,
    "title": "Infinite Sequence (Hard Version)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 3883,
    "title": "Infinite Sequence (Easy Version)",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 3884,
    "title": "Trapmigiano Reggiano",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 3885,
    "title": "Perfecto",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3886,
    "title": "The Play Never Ends",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 3887,
    "title": "Friends and Pizza",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "divide and conquer",
      "dynamic programming",
      "fast fourier transform"
    ]
  },
  {
    "id": 3888,
    "title": "Game with Binary String",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "divide and conquer",
      "game theory",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3889,
    "title": "Tree Jumps",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 3890,
    "title": "Limited Repainting",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 3891,
    "title": "Robot Program",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 3892,
    "title": "FizzBuzz Remixed",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 3893,
    "title": "Graph Inclusion",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 3894,
    "title": "A, B, AB and BA",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting",
      "string"
    ]
  },
  {
    "id": 3895,
    "title": "Palindrome Shuffle",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "hash table",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 3896,
    "title": "Beautiful Sequence",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 3897,
    "title": "Set of Strangers",
    "difficulty": "medium",
    "category": [
      "greedy",
      "matrix"
    ]
  },
  {
    "id": 3898,
    "title": "Was there an Array?",
    "difficulty": "easy",
    "category": [
      "graph matching",
      "greedy"
    ]
  },
  {
    "id": 3899,
    "title": "Amusement Park Rides",
    "difficulty": "hard",
    "category": [
      "graph",
      "max flow"
    ]
  },
  {
    "id": 3900,
    "title": "The Ultimate Wine Tasting Event",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "greedy"
    ]
  },
  {
    "id": 3901,
    "title": "Pinball",
    "difficulty": "hard",
    "category": [
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 3902,
    "title": "Statues",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3903,
    "title": "A Very Long Hike",
    "difficulty": "hard",
    "category": [
      "shortest path"
    ]
  },
  {
    "id": 3904,
    "title": "Mascot Naming",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 3905,
    "title": "Porto Vs. Benfica",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "shortest path",
      "union find"
    ]
  },
  {
    "id": 3906,
    "title": "Morse Code",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 3907,
    "title": "Ads",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 3908,
    "title": "Urban Planning",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 3909,
    "title": "Condorcet Elections",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy",
      "probability"
    ]
  },
  {
    "id": 3910,
    "title": "Devyatkino",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph traversal",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3911,
    "title": "Two Large Bags",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3912,
    "title": "Adjacent Digit Sums",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 3913,
    "title": "Curse",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 3914,
    "title": "Tropical Season",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 3915,
    "title": "Club of Young Aircraft Builders (hard version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 3916,
    "title": "Club of Young Aircraft Builders (easy version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 3917,
    "title": "Bitwise Slides",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 3918,
    "title": "White Magic",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 3919,
    "title": "Object Identification",
    "difficulty": "medium",
    "category": [
      "graph",
      "greedy",
      "implementation",
      "interactive"
    ]
  },
  {
    "id": 3920,
    "title": "Bro Thinks He's Him",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "math",
      "matrix"
    ]
  },
  {
    "id": 3921,
    "title": "Skibidus and Capping",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 3922,
    "title": "Skibidus and Slay",
    "difficulty": "medium",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 3923,
    "title": "Skibidus and Rizz",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "string"
    ]
  },
  {
    "id": 3924,
    "title": "Skibidus and Sigma",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3925,
    "title": "Skibidus and Fanum Tax (hard version)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 3926,
    "title": "Skibidus and Fanum Tax (easy version)",
    "difficulty": "easy",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 3927,
    "title": "Skibidus and Ohio",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 3928,
    "title": "Skibidus and Amog'u",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 3929,
    "title": "We Be Summing",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 3930,
    "title": "Mycraft Sand Sort",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "greedy",
      "math",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 3931,
    "title": "Eating",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy",
      "tree",
      "two pointers"
    ]
  },
  {
    "id": 3932,
    "title": "Remove the Ends",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 3933,
    "title": "Variety is Discouraged",
    "difficulty": "easy",
    "category": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 3934,
    "title": "Brogramming Contest",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 3935,
    "title": "Counting Is Not Fun (Hard Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "graph",
      "graph traversal",
      "implementation",
      "tree",
      "union find"
    ]
  },
  {
    "id": 3936,
    "title": "Counting Is Not Fun (Easy Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "dynamic programming",
      "graph",
      "graph traversal",
      "hash table",
      "implementation",
      "math",
      "tree",
      "union find"
    ]
  },
  {
    "id": 3937,
    "title": "Triangle Tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 3938,
    "title": "Game With Triangles",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "geometry",
      "greedy",
      "implementation",
      "math",
      "ternary search",
      "two pointers"
    ]
  },
  {
    "id": 3939,
    "title": "Remove Exactly Two",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 3940,
    "title": "Subsequence Update",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3941,
    "title": "Minimal Coprime",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 3942,
    "title": "Galaxy Generator",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 3943,
    "title": "Permutation Factory",
    "difficulty": "hard",
    "category": [
      "geometry",
      "graph",
      "graph matching",
      "max flow"
    ]
  },
  {
    "id": 3944,
    "title": "Traveling Salescat",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "geometry",
      "graph",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 3945,
    "title": "The Game (Hard Version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "game theory",
      "graph",
      "graph traversal",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 3946,
    "title": "The Game (Easy Version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "game theory",
      "graph",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 3947,
    "title": "Balanced Tree",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 3948,
    "title": "Cirno and Operations",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 3949,
    "title": "Clockwork",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 3950,
    "title": "String",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 3951,
    "title": "Kevin and Nivek",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "dynamic programming"
    ]
  },
  {
    "id": 3952,
    "title": "Kevin and Stones (Hard Version)",
    "difficulty": "hard",
    "category": [
      "graph",
      "max flow"
    ]
  },
  {
    "id": 3953,
    "title": "Kevin and Stones (Easy Version)",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph matching",
      "max flow"
    ]
  },
  {
    "id": 3954,
    "title": "Kevin and Teams",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "interactive"
    ]
  },
  {
    "id": 3955,
    "title": "Kevin and Binary String (Hard Version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 3956,
    "title": "Kevin and Binary String (Easy Version)",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 3957,
    "title": "Kevin and And",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 3958,
    "title": "Kevin and Numbers",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "data structures"
    ]
  },
  {
    "id": 3959,
    "title": "Kevin and Puzzle",
    "difficulty": "medium",
    "category": [
      "2-sat",
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 3960,
    "title": "Kevin and Geometry",
    "difficulty": "easy",
    "category": [
      "binary search",
      "geometry"
    ]
  },
  {
    "id": 3961,
    "title": "Kevin and Arithmetic",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 3962,
    "title": "Bugged Sort",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3963,
    "title": "Multiplicative Arrays",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "number theory"
    ]
  },
  {
    "id": 3964,
    "title": "Graph Composition",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 3965,
    "title": "Subtract Min Sort",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 3966,
    "title": "Game of Mathletes",
    "difficulty": "easy",
    "category": [
      "game theory",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 3967,
    "title": "Farmer John's Card Game",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3968,
    "title": "Fibonacciness",
    "difficulty": "easy",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 3969,
    "title": "Stop Gaming (Hard Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "hash table",
      "string"
    ]
  },
  {
    "id": 3970,
    "title": "Stop Gaming (Easy Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "hash table",
      "string"
    ]
  },
  {
    "id": 3971,
    "title": "Graph and Graph",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 3972,
    "title": "Customer Service",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph matching",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 3973,
    "title": "Cost of the Array",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3974,
    "title": "Milya and Two Arrays",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3975,
    "title": "Coffee Break",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3976,
    "title": "Secret Message",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 3977,
    "title": "Formation",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 3978,
    "title": "Another Exercise on Graphs (hard version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "graph",
      "graph traversal",
      "shortest path",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 3979,
    "title": "Another Exercise on Graphs (Easy Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "dynamic programming",
      "graph",
      "shortest path",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 3980,
    "title": "Gifts Order",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "implementation",
      "math",
      "matrix"
    ]
  },
  {
    "id": 3981,
    "title": "Trip to the Olympiad",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3982,
    "title": "Gorilla and the Exam",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3983,
    "title": "MEX Table",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 3984,
    "title": "Xor of Median (Hard Version)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 3985,
    "title": "Xor of Median (Easy Version)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 3986,
    "title": "Nested Segments",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph traversal",
      "math",
      "union find"
    ]
  },
  {
    "id": 3987,
    "title": "Unique Median",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "combinatorics",
      "data structures",
      "divide and conquer",
      "dynamic programming"
    ]
  },
  {
    "id": 3988,
    "title": "Palindromic Subsequences",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 3989,
    "title": "Find the Permutation",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph",
      "graph traversal",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 3990,
    "title": "Shape Perimeter",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 3991,
    "title": "Cosmic Divide",
    "difficulty": "hard",
    "category": [
      "brute force",
      "geometry",
      "hash table",
      "math",
      "string"
    ]
  },
  {
    "id": 3992,
    "title": "Haystacks",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3993,
    "title": "Scarecrow",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 3994,
    "title": "The Trail",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 3995,
    "title": "Crafting",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 3996,
    "title": "Two Frogs",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "game theory",
      "greedy",
      "math"
    ]
  },
  {
    "id": 3997,
    "title": "Affectionate Arrays (Hard Version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph",
      "greedy",
      "math",
      "shortest path",
      "two pointers"
    ]
  },
  {
    "id": 3998,
    "title": "Affectionate Arrays (Easy Version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 3999,
    "title": "Delicate Anti-monotonous Operations",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 4000,
    "title": "Naive String Splits",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "hash table",
      "math",
      "number theory",
      "string"
    ]
  },
  {
    "id": 4001,
    "title": "Earnest Matrix Complement",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4002,
    "title": "Resourceful Caterpillar Sequence",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory",
      "graph",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 4003,
    "title": "Refined Product Optimality",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "math",
      "scheduling",
      "sorting"
    ]
  },
  {
    "id": 4004,
    "title": "Bewitching Stargazer",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "divide and conquer",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 4005,
    "title": "Outstanding Impressionist",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 4006,
    "title": "Tender Carpenter",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "geometry",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4007,
    "title": "Managing Cluster",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "math",
      "tree"
    ]
  },
  {
    "id": 4008,
    "title": "Legacy Screensaver",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 4009,
    "title": "Knowns and Unknowns",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 4010,
    "title": "Judicious Watching",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 4011,
    "title": "Incompetent Delivery Guy",
    "difficulty": "hard",
    "category": [
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 4012,
    "title": "Hunting Hoglins in Hogwarts",
    "difficulty": "hard",
    "category": [
      "interactive"
    ]
  },
  {
    "id": 4013,
    "title": "Geometric Balance",
    "difficulty": "hard",
    "category": [
      "data structures",
      "geometry",
      "implementation"
    ]
  },
  {
    "id": 4014,
    "title": "Fix Flooded Floor",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph"
    ]
  },
  {
    "id": 4015,
    "title": "Expression Correction",
    "difficulty": "hard",
    "category": [
      "brute force",
      "parsing",
      "string"
    ]
  },
  {
    "id": 4016,
    "title": "DAG Serialization",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph"
    ]
  },
  {
    "id": 4017,
    "title": "Cactus without Bridges",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 4018,
    "title": "BitBitJump",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 4019,
    "title": "Adrenaline Rush",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 4020,
    "title": "Snakes",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "graph",
      "union find"
    ]
  },
  {
    "id": 4021,
    "title": "Joker",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4022,
    "title": "Best Price",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 4023,
    "title": "Counting Pairs",
    "difficulty": "medium",
    "category": [
      "binary search",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 4024,
    "title": "Preparing for the Exam",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 4025,
    "title": "Journey",
    "difficulty": "easy",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 4026,
    "title": "Preparing for the Olympiad",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 4027,
    "title": "Tree Destruction",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 4028,
    "title": "Maximum modulo equality",
    "difficulty": "medium",
    "category": [
      "data structures",
      "divide and conquer",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4029,
    "title": "Three Strings",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation",
      "string"
    ]
  },
  {
    "id": 4030,
    "title": "Digital string maximization",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 4031,
    "title": "Uninteresting Number",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 4032,
    "title": "Transfusion",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4033,
    "title": "Line Breaks",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 4034,
    "title": "MEX OR Mania",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "data structures",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 4035,
    "title": "Broken Queries",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "implementation",
      "interactive"
    ]
  },
  {
    "id": 4036,
    "title": "Shift + Esc",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 4037,
    "title": "MEX Cycle",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4038,
    "title": "pspspsps",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph matching",
      "implementation"
    ]
  },
  {
    "id": 4039,
    "title": "MEX Destruction",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4040,
    "title": "Kevin and Puzzle (Hard Version)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 4041,
    "title": "Kevin and Puzzle (Easy Version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 4042,
    "title": "Kevin and Strange Operation",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 4043,
    "title": "Kevin and Matrices",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 4044,
    "title": "Kevin and Math Class",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "implementation",
      "math",
      "tree"
    ]
  },
  {
    "id": 4045,
    "title": "Kevin and Bipartite Graph",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy"
    ]
  },
  {
    "id": 4046,
    "title": "Kevin and Competition Memories",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 4047,
    "title": "Kevin and Binary Strings",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 4048,
    "title": "Kevin and Permutation",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 4049,
    "title": "Kevin and Combination Lock",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4050,
    "title": "Replace Character",
    "difficulty": "easy",
    "category": [
      "brute force",
      "combinatorics",
      "greedy",
      "string"
    ]
  },
  {
    "id": 4051,
    "title": "Alyona and a Square Jigsaw Puzzle",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 4052,
    "title": "Yandex Cuneiform (Hard Version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4053,
    "title": "Yandex Cuneiform (Easy Version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 4054,
    "title": "Cheops and a Contest (Hard Version)",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4055,
    "title": "Cheops and a Contest (Easy Version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 4056,
    "title": "For the Emperor!",
    "difficulty": "hard",
    "category": [
      "graph",
      "max flow"
    ]
  },
  {
    "id": 4057,
    "title": "Adventurers",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "sorting",
      "ternary search",
      "two pointers"
    ]
  },
  {
    "id": 4058,
    "title": "Move Back at a Cost",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 4059,
    "title": "Swap Columns and Find a Path",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 4060,
    "title": "Mirror Maze",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 4061,
    "title": "Buggy DFS",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 4062,
    "title": "GCDDCG",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 4063,
    "title": "Xorderable Array",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures"
    ]
  },
  {
    "id": 4064,
    "title": "Microwavable Subsequence",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 4065,
    "title": "Missing Separators",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "sorting",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 4066,
    "title": "X Aura",
    "difficulty": "hard",
    "category": [
      "graph",
      "math",
      "shortest path"
    ]
  },
  {
    "id": 4067,
    "title": "Grid Game 3-angle",
    "difficulty": "hard",
    "category": [
      "game theory",
      "math"
    ]
  },
  {
    "id": 4068,
    "title": "Narrower Passageway",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures"
    ]
  },
  {
    "id": 4069,
    "title": "Aquatic Dragon",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 4070,
    "title": "Saraga",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 4071,
    "title": "ICPC Square",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 4072,
    "title": "Scrambled Scrabble",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 4073,
    "title": "Hard Demon Problem",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4074,
    "title": "Medium Demon Problem (hard version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "implementation",
      "tree",
      "union find"
    ]
  },
  {
    "id": 4075,
    "title": "Medium Demon Problem (easy version)",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph matching",
      "graph traversal",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 4076,
    "title": "Easy Demon Problem",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4077,
    "title": "Insane Problem",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4078,
    "title": "Harder Problem",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4079,
    "title": "Hard Problem",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 4080,
    "title": "Normal Problem",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 4081,
    "title": "Easy Problem",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 4082,
    "title": "Problem with Queries",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 4083,
    "title": "Nim",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "combinatorics",
      "dynamic programming",
      "game theory",
      "greedy",
      "implementation",
      "shortest path"
    ]
  },
  {
    "id": 4084,
    "title": "Matrix Transformation",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "data structures",
      "graph",
      "graph traversal",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4085,
    "title": "Problem about GCD",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math",
      "max flow",
      "number theory"
    ]
  },
  {
    "id": 4086,
    "title": "Sums on Segments",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4087,
    "title": "Digits",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 4088,
    "title": "Coin Transformation",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 4089,
    "title": "Two Subarrays",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "implementation",
      "matrix"
    ]
  },
  {
    "id": 4090,
    "title": "Vertex Pairs",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "divide and conquer",
      "graph traversal",
      "greedy",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 4091,
    "title": "Recommendations",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 4092,
    "title": "Competitive Fishing",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 4093,
    "title": "Game with Colored Marbles",
    "difficulty": "easy",
    "category": [
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 4094,
    "title": "Greedy Monocarp",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 4095,
    "title": "Railway Construction",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 4096,
    "title": "Selection Sort",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 4097,
    "title": "Building Castle",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 4098,
    "title": "Trophic Balance Species",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 4099,
    "title": "Bottle Arrangement",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 4100,
    "title": "Auto Complete",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "hash table",
      "implementation",
      "sorting",
      "string",
      "tree"
    ]
  },
  {
    "id": 4101,
    "title": "Sheet Music",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 4102,
    "title": "Grid Game",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 4103,
    "title": "Segmentation Folds",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph traversal",
      "number theory"
    ]
  },
  {
    "id": 4104,
    "title": "Beautiful Array",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 4105,
    "title": "Drunken Maze",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 4106,
    "title": "Cube",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "graph traversal"
    ]
  },
  {
    "id": 4107,
    "title": "Bowling Frame",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "math"
    ]
  },
  {
    "id": 4108,
    "title": "The Bento Box Adventure",
    "difficulty": "medium",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 4109,
    "title": "Number of Cubes",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4110,
    "title": "Control of Randomness",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "math",
      "probability",
      "tree"
    ]
  },
  {
    "id": 4111,
    "title": "Non Prime Tree",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph traversal",
      "greedy",
      "number theory",
      "tree",
      "two pointers"
    ]
  },
  {
    "id": 4112,
    "title": "Ordered Permutations",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "combinatorics",
      "constructive algorithms",
      "greedy",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 4113,
    "title": "Paint a Strip",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4114,
    "title": "Game of Division",
    "difficulty": "easy",
    "category": [
      "game theory",
      "math"
    ]
  },
  {
    "id": 4115,
    "title": "Cool Swap Walk (Hard Version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 4116,
    "title": "Cool Swap Walk (Easy Version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 4117,
    "title": "Shohag Loves Pebae",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 4118,
    "title": "Shohag Loves Counting (Hard Version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "number theory"
    ]
  },
  {
    "id": 4119,
    "title": "Shohag Loves Counting (Easy Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4120,
    "title": "Shohag Loves Inversions",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4121,
    "title": "Shohag Loves GCD",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4122,
    "title": "Shohag Loves XOR (Hard Version)",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4123,
    "title": "Shohag Loves XOR (Easy Version)",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4124,
    "title": "Shohag Loves Strings",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 4125,
    "title": "Shohag Loves Mod",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "number theory"
    ]
  },
  {
    "id": 4126,
    "title": "Fixing the Expression",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 4127,
    "title": "Royal Flush",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 4128,
    "title": "Bridge Renovation",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 4129,
    "title": "Grid Walk",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4130,
    "title": "Waiting for...",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4131,
    "title": "Polyathlon",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "hash table",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 4132,
    "title": "Galactic Council",
    "difficulty": "hard",
    "category": [
      "max flow"
    ]
  },
  {
    "id": 4133,
    "title": "Guess One Character",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation",
      "interactive"
    ]
  },
  {
    "id": 4134,
    "title": "Alternative Platforms",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "fast fourier transform",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4135,
    "title": "Barrels",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4136,
    "title": "Divide OR Conquer",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "data structures",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 4137,
    "title": "DIY",
    "difficulty": "medium",
    "category": [
      "data structures",
      "geometry",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 4138,
    "title": "Make It Equal",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4139,
    "title": "Bonus Project",
    "difficulty": "medium",
    "category": [
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 4140,
    "title": "Natlan Exploring",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "data structures",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4141,
    "title": "Ardent Flames",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 4142,
    "title": "Kachina's Favorite Binary String",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "interactive",
      "two pointers"
    ]
  },
  {
    "id": 4143,
    "title": "Sharky Surfing",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 4144,
    "title": "Superultra's Favorite Permutation",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4145,
    "title": "Intercepted Inputs",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 4146,
    "title": "Twice",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 4147,
    "title": "Library of Magic",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "divide and conquer",
      "interactive",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4148,
    "title": "XORificator 3000",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "number theory",
      "two pointers"
    ]
  },
  {
    "id": 4149,
    "title": "Reverse the Rivers",
    "difficulty": "medium",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 4150,
    "title": "I Love 1543",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "matrix"
    ]
  },
  {
    "id": 4151,
    "title": "Anya and 1100",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 4152,
    "title": "Startup",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 4153,
    "title": "Quintomania",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 4154,
    "title": "Peak Productivity Forces",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 4155,
    "title": "Go Learn! (Hard Version)",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "dynamic programming"
    ]
  },
  {
    "id": 4156,
    "title": "Go Learn! (Easy Version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 4157,
    "title": "Tree Operations",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 4158,
    "title": "Monster",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation",
      "math",
      "ternary search"
    ]
  },
  {
    "id": 4159,
    "title": "Yet Another Real Number Problem",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "divide and conquer",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4160,
    "title": "Alya and Permutation",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 4161,
    "title": "Everyone Loves Tres",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4162,
    "title": "Sliding",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 4163,
    "title": "Rayan vs. Rayaneh",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "graph traversal",
      "number theory"
    ]
  },
  {
    "id": 4164,
    "title": "Simurgh's Watch (Hard Version)",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4165,
    "title": "Simurgh's Watch (Easy Version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 4166,
    "title": "Khayyam's Royal Decree (Hard Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4167,
    "title": "Khayyam's Royal Decree (Easy Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4168,
    "title": "Permutations Harmony",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "greedy",
      "hash table",
      "math"
    ]
  },
  {
    "id": 4169,
    "title": "Darius' Wisdom",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 4170,
    "title": "Trapped in the Witch's Labyrinth",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 4171,
    "title": "Rakhsh's Revival",
    "difficulty": "easy",
    "category": [
      "data structures",
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 4172,
    "title": "King Keykhosrow's Mystery",
    "difficulty": "easy",
    "category": [
      "brute force",
      "chinese remainder theorem",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4173,
    "title": "Sakurako and Chefir",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 4174,
    "title": "Kosuke's Sloth",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4175,
    "title": "Sakurako, Kosuke, and the Permutation",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "graph",
      "graph traversal",
      "greedy",
      "math",
      "union find"
    ]
  },
  {
    "id": 4176,
    "title": "Kousuke's Assignment",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "math",
      "union find"
    ]
  },
  {
    "id": 4177,
    "title": "Sakurako's Field Trip",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 4178,
    "title": "Sakurako and Water",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 4179,
    "title": "Sakurako and Kosuke",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4180,
    "title": "Peanuts",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "game theory",
      "math"
    ]
  },
  {
    "id": 4181,
    "title": "Balanced",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4182,
    "title": "Genokraken",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "graph",
      "greedy",
      "implementation",
      "interactive",
      "tree",
      "two pointers"
    ]
  },
  {
    "id": 4183,
    "title": "Trinity",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 4184,
    "title": "Medians",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4185,
    "title": "Circuit",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4186,
    "title": "Penchick and Even Medians",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "interactive",
      "probability"
    ]
  },
  {
    "id": 4187,
    "title": "Penchick and Chloe's Trees",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "implementation",
      "math",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 4188,
    "title": "Penchick and Desert Rabbit",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "implementation",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 4189,
    "title": "Penchick and BBQ Buns",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4190,
    "title": "Penchick and Satay Sticks",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 4191,
    "title": "Penchick and Modern Monument",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4192,
    "title": "The Destruction of the Universe (Hard Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 4193,
    "title": "The Destruction of the Universe (Easy Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4194,
    "title": "Orangutan Approved Subarrays",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 4195,
    "title": "MEXimize the Score",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4196,
    "title": "QED's Favorite Permutation",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 4197,
    "title": "A TRUE Battle",
    "difficulty": "easy",
    "category": [
      "brute force",
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 4198,
    "title": "Minimise Oneness",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "game theory",
      "math"
    ]
  },
  {
    "id": 4199,
    "title": "A Gift From Orangutan",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4200,
    "title": "Variance Challenge",
    "difficulty": "hard",
    "category": [
      "graph",
      "greedy",
      "max flow"
    ]
  },
  {
    "id": 4201,
    "title": "Message Spread",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 4202,
    "title": "Balanced Problem",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 4203,
    "title": "Palindrome Everywhere",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy"
    ]
  },
  {
    "id": 4204,
    "title": "Common Generator",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4205,
    "title": "Cool Graph",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "graph",
      "graph traversal",
      "greedy",
      "tree",
      "union find"
    ]
  },
  {
    "id": 4206,
    "title": "New Rating",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 4207,
    "title": "Replacement",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "game theory",
      "string"
    ]
  },
  {
    "id": 4208,
    "title": "Set",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 4209,
    "title": "Alice's Adventures in Addition",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 4210,
    "title": "Alice's Adventures in the Rabbit Hole",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "game theory",
      "graph traversal",
      "greedy",
      "math",
      "probability",
      "tree"
    ]
  },
  {
    "id": 4211,
    "title": "Alice's Adventures in Cards",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "graph",
      "greedy",
      "implementation",
      "ternary search"
    ]
  },
  {
    "id": 4212,
    "title": "Alice's Adventures in Cutting Cake",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 4213,
    "title": "Alice's Adventures in Permuting",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4214,
    "title": "Alice's Adventures in ''Chess''",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4215,
    "title": "Bit Game (Hard Version)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 4216,
    "title": "Bit Game (Easy Version)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "game theory",
      "math"
    ]
  },
  {
    "id": 4217,
    "title": "The Endspeaker (Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 4218,
    "title": "The Endspeaker (Easy Version)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "graph",
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 4219,
    "title": "Add Zeros",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 4220,
    "title": "Stalin Sort",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 4221,
    "title": "Rectangle Arrangement",
    "difficulty": "easy",
    "category": [
      "geometry",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4222,
    "title": "Bermart Ice Cream",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "graph traversal",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 4223,
    "title": "Best Subsequence",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "graph",
      "graph matching",
      "graph traversal",
      "max flow"
    ]
  },
  {
    "id": 4224,
    "title": "Sums of Segments",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4225,
    "title": "Action Figures",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4226,
    "title": "Black Cells",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 4227,
    "title": "Perpendicular Segments",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "geometry",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4228,
    "title": "Variable Damage",
    "difficulty": "hard",
    "category": [
      "data structures",
      "max flow"
    ]
  },
  {
    "id": 4229,
    "title": "Choose Your Queries",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 4230,
    "title": "Card Game",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "fast fourier transform",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4231,
    "title": "Attribute Checks",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "implementation",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 4232,
    "title": "New Game",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "implementation",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 4233,
    "title": "Binomial Coefficients, Kind Of",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 4234,
    "title": "Two Screens",
    "difficulty": "easy",
    "category": [
      "binary search",
      "greedy",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 4235,
    "title": "Buying Lemonade",
    "difficulty": "easy",
    "category": [
      "binary search",
      "constructive algorithms",
      "sorting"
    ]
  },
  {
    "id": 4236,
    "title": "Profitable Interest Rate",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 4237,
    "title": "Hills and Pits",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "math",
      "matrix"
    ]
  },
  {
    "id": 4238,
    "title": "Tree of Life",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 4239,
    "title": "Many Games",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "math",
      "probability"
    ]
  },
  {
    "id": 4240,
    "title": "C+K+S",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy",
      "hash table",
      "implementation",
      "string"
    ]
  },
  {
    "id": 4241,
    "title": "Skipping",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 4242,
    "title": "Concatenation of Arrays",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4243,
    "title": "Billetes MX (Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "combinatorics",
      "data structures",
      "graph",
      "union find"
    ]
  },
  {
    "id": 4244,
    "title": "Billetes MX (Easy Version)",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "binary search",
      "combinatorics",
      "constructive algorithms",
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 4245,
    "title": "Asesino (Hard Version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "interactive"
    ]
  },
  {
    "id": 4246,
    "title": "Asesino (Easy Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "implementation",
      "interactive"
    ]
  },
  {
    "id": 4247,
    "title": "Gerrymandering",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 4248,
    "title": "Kar Salesman",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4249,
    "title": "Bus to Pénjamo",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4250,
    "title": "Digital Village (Extreme Version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "math",
      "tree",
      "union find"
    ]
  },
  {
    "id": 4251,
    "title": "Digital Village (Hard Version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph",
      "math",
      "tree",
      "union find"
    ]
  },
  {
    "id": 4252,
    "title": "Digital Village (Easy Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "fast fourier transform",
      "graph",
      "graph traversal",
      "greedy",
      "implementation",
      "math",
      "tree",
      "union find"
    ]
  },
  {
    "id": 4253,
    "title": "Boss, Thirsty",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4254,
    "title": "Adjust The Presentation (Hard Version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 4255,
    "title": "Adjust The Presentation (Easy Version)",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 4256,
    "title": "Maximize Mex",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4257,
    "title": "Meaning Mean",
    "difficulty": "easy",
    "category": [
      "data structures",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4258,
    "title": "Count Leaves",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4259,
    "title": "Expected Power",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 4260,
    "title": "Connect the Dots",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "graph",
      "math",
      "tree",
      "union find"
    ]
  },
  {
    "id": 4261,
    "title": "Bitwise Balancing",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "hash table",
      "implementation",
      "math",
      "scheduling",
      "ternary search"
    ]
  },
  {
    "id": 4262,
    "title": "Brightness Begins",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 4263,
    "title": "Find Minimum Operations",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "brute force",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4264,
    "title": "All Pairs Segments",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 4265,
    "title": "Max Plus Size",
    "difficulty": "easy",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 4266,
    "title": "Speedbreaker Counting (Hard Version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4267,
    "title": "Speedbreaker Counting (Medium Version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4268,
    "title": "Speedbreaker Counting (Easy Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4269,
    "title": "Complex Segments (Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "divide and conquer",
      "greedy",
      "math",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 4270,
    "title": "Complex Segments (Easy Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "divide and conquer",
      "greedy",
      "math",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 4271,
    "title": "Max Plus Min Plus Size",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation",
      "matrix",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 4272,
    "title": "Tree Pruning",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph traversal",
      "greedy",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 4273,
    "title": "Speedbreaker",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 4274,
    "title": "Cards Partition",
    "difficulty": "medium",
    "category": [
      "2-sat",
      "brute force",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4275,
    "title": "Robin Hood Archery",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "greedy",
      "hash table"
    ]
  },
  {
    "id": 4276,
    "title": "Milky Days",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4277,
    "title": "Sheriff's Defense",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 4278,
    "title": "Rendez-vous de Marian et Robin",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 4279,
    "title": "Robert Hood and Mrs Hood",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 4280,
    "title": "Robin Hood in Town",
    "difficulty": "easy",
    "category": [
      "binary search",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4281,
    "title": "Robin Hood and the Major Oak",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 4282,
    "title": "Robin Helps",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4283,
    "title": "Game in Tree (Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "tree"
    ]
  },
  {
    "id": 4284,
    "title": "Game in Tree (Easy Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "dynamic programming",
      "game theory",
      "greedy",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 4285,
    "title": "Prefix GCD",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4286,
    "title": "Minimize the Difference",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 4287,
    "title": "Password Cracking",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "interactive",
      "string"
    ]
  },
  {
    "id": 4288,
    "title": "Battle for Survive",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4289,
    "title": "Zhan's Blender",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 4290,
    "title": "Stack and Queue",
    "difficulty": "easy",
    "category": [
      "data structures",
      "divide and conquer",
      "special problem"
    ]
  },
  {
    "id": 4291,
    "title": "Strange Matrix",
    "difficulty": "easy",
    "category": [
      "graph",
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 4292,
    "title": "Removal of a Permutation",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 4293,
    "title": "Good Subarray",
    "difficulty": "easy",
    "category": [
      "data structures",
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 4294,
    "title": "Rock-Paper-Scissors Bot",
    "difficulty": "easy",
    "category": [
      "greedy",
      "special problem",
      "string"
    ]
  },
  {
    "id": 4295,
    "title": "Among Wolves",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 4296,
    "title": "Split the Expression",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 4297,
    "title": "Shuffle",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 4298,
    "title": "Problem Solving",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 4299,
    "title": "Message Transmission Error (hard version)",
    "difficulty": "medium",
    "category": [
      "hash table",
      "string",
      "string suffix structures",
      "two pointers"
    ]
  },
  {
    "id": 4300,
    "title": "Message Transmission Error (easy version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "string"
    ]
  },
  {
    "id": 4301,
    "title": "Three Brothers",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4302,
    "title": "Alternating Sum of Numbers",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4303,
    "title": "Yunli's Subarray Queries (extreme version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 4304,
    "title": "Yunli's Subarray Queries (hard version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 4305,
    "title": "Yunli's Subarray Queries (easy version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "two pointers"
    ]
  },
  {
    "id": 4306,
    "title": "Firefly's Queries",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "data structures",
      "math",
      "max flow"
    ]
  },
  {
    "id": 4307,
    "title": "Klee's SUPER DUPER LARGE Array!!!",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math",
      "ternary search"
    ]
  },
  {
    "id": 4308,
    "title": "Satyam and Counting",
    "difficulty": "medium",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 4309,
    "title": "The Legend of Freya the Frog",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 4310,
    "title": "osu!mania",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 4311,
    "title": "Minimize!",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 4312,
    "title": "Sakurako's Test",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4313,
    "title": "Sakurako's Task",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4314,
    "title": "Sakurako's Box",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4315,
    "title": "Alternating String",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 4316,
    "title": "Sakurako's Hobby",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "graph",
      "math",
      "union find"
    ]
  },
  {
    "id": 4317,
    "title": "Longest Good Array",
    "difficulty": "easy",
    "category": [
      "binary search",
      "brute force",
      "math"
    ]
  },
  {
    "id": 4318,
    "title": "Square or Not",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math",
      "string"
    ]
  },
  {
    "id": 4319,
    "title": "Sakurako's Exam",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4320,
    "title": "Dora and C++",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 4321,
    "title": "Index and Maximum Value",
    "difficulty": "easy",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 4322,
    "title": "Dora's Set",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4323,
    "title": "Dora's Paint",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "constructive algorithms",
      "graph",
      "implementation"
    ]
  },
  {
    "id": 4324,
    "title": "Iris's Full Binary Tree",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 4325,
    "title": "Iris and Adjacent Products",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4326,
    "title": "Eri and Expanded Sets",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "math",
      "number theory",
      "two pointers"
    ]
  },
  {
    "id": 4327,
    "title": "Iris and the Tree",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "graph traversal",
      "math",
      "tree",
      "union find"
    ]
  },
  {
    "id": 4328,
    "title": "Iris and Game on the Tree",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "game theory",
      "graph",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 4329,
    "title": "Subtangle Game (Hard Version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "game theory",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4330,
    "title": "Subtangle Game (Easy Version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4331,
    "title": "Alter the GCD",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "divide and conquer",
      "implementation",
      "number theory"
    ]
  },
  {
    "id": 4332,
    "title": "Lazy Narek",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation",
      "string"
    ]
  },
  {
    "id": 4333,
    "title": "The Strict Teacher (Hard Version)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4334,
    "title": "The Strict Teacher (Easy Version)",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4335,
    "title": "Simple Palindrome",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4336,
    "title": "Substring Compression",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 4337,
    "title": "Make a Palindrome",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4338,
    "title": "Not a Nim Problem",
    "difficulty": "hard",
    "category": [
      "brute force",
      "game theory",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4339,
    "title": "Colored Portals",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "graph",
      "greedy",
      "implementation",
      "shortest path"
    ]
  },
  {
    "id": 4340,
    "title": "Splitting Items",
    "difficulty": "easy",
    "category": [
      "game theory",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 4341,
    "title": "Game with Doors",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 4342,
    "title": "Closest Point",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 4343,
    "title": "Turtle and Three Sequences",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy",
      "math",
      "probability",
      "two pointers"
    ]
  },
  {
    "id": 4344,
    "title": "Turtle and Inversions (Hard Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "greedy",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 4345,
    "title": "Turtle and Inversions (Easy Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "divide and conquer",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4346,
    "title": "Turtle and a MEX Problem (Hard Version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4347,
    "title": "Turtle and a MEX Problem (Easy Version)",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 4348,
    "title": "Turtle and Good Pairs",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting",
      "string"
    ]
  },
  {
    "id": 4349,
    "title": "Turtle and Piggy Are Playing a Game 2",
    "difficulty": "easy",
    "category": [
      "game theory",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 4350,
    "title": "Turtle and Good Strings",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 4351,
    "title": "Counting 101",
    "difficulty": "hard",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 4352,
    "title": "Lattice Optimizing",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "hash table",
      "meet in the middle"
    ]
  },
  {
    "id": 4353,
    "title": "Court Blue (Hard Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4354,
    "title": "Court Blue (Easy Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "graph traversal",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4355,
    "title": "Cosmic Rays",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 4356,
    "title": "DFS Checker (Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 4357,
    "title": "DFS Checker (Easy Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "graph",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 4358,
    "title": "Black Circles",
    "difficulty": "medium",
    "category": [
      "brute force",
      "geometry",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4359,
    "title": "Removals Game",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "game theory"
    ]
  },
  {
    "id": 4360,
    "title": "Distanced Coloring",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4361,
    "title": "Deterministic Heap (Hard Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 4362,
    "title": "Deterministic Heap (Easy Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "tree"
    ]
  },
  {
    "id": 4363,
    "title": "Longest Max Min Subsequence",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4364,
    "title": "Guess The Tree",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "divide and conquer",
      "graph traversal",
      "greedy",
      "interactive",
      "tree",
      "union find"
    ]
  },
  {
    "id": 4365,
    "title": "Generate Permutation",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 4366,
    "title": "Make All Equal",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4367,
    "title": "Ksyusha and the Loaded Set",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 4368,
    "title": "Call During the Journey",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "graph",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 4369,
    "title": "Color Rows and Columns",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4370,
    "title": "Photoshoot for Gorillas",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "data structures",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4371,
    "title": "Right Left Wrong",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 4372,
    "title": "Numeric String Template",
    "difficulty": "easy",
    "category": [
      "data structures",
      "string"
    ]
  },
  {
    "id": 4373,
    "title": "Seating in a Bus",
    "difficulty": "easy",
    "category": [
      "two pointers"
    ]
  },
  {
    "id": 4374,
    "title": "Primary Task",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math",
      "string"
    ]
  },
  {
    "id": 4375,
    "title": "Ruler (hard version)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "interactive",
      "ternary search"
    ]
  },
  {
    "id": 4376,
    "title": "Ruler (easy version)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "interactive"
    ]
  },
  {
    "id": 4377,
    "title": "Expected Median",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 4378,
    "title": "Triple Operations",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4379,
    "title": "Slavic's Exam",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 4380,
    "title": "Showering",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4381,
    "title": "Card Game",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 4382,
    "title": "A+B Again?",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 4383,
    "title": "Eliminating Balls With Merging (Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "divide and conquer",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4384,
    "title": "Eliminating Balls With Merging (Easy Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "divide and conquer",
      "greedy"
    ]
  },
  {
    "id": 4385,
    "title": "Determine Winning Islands in Race",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 4386,
    "title": "Perform Operations to Maximize Score",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4387,
    "title": "Minimize Equal Sum Subarrays",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4388,
    "title": "Find K Distinct Points with Fixed Center",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4389,
    "title": "Chips on a Line",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4390,
    "title": "Level Up",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "divide and conquer",
      "implementation"
    ]
  },
  {
    "id": 4391,
    "title": "Maximize the Root",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 4392,
    "title": "Even Positions",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 4393,
    "title": "Make Three Regions",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "two pointers"
    ]
  },
  {
    "id": 4394,
    "title": "Strong Password",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 4395,
    "title": "Penacony",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "graph",
      "greedy",
      "hash table"
    ]
  },
  {
    "id": 4396,
    "title": "Bomb",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4397,
    "title": "Decode",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "data structures",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4398,
    "title": "Fun",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4399,
    "title": "Sort",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "sorting",
      "string"
    ]
  },
  {
    "id": 4400,
    "title": "Scale",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4401,
    "title": "Legs",
    "difficulty": "easy",
    "category": [
      "binary search",
      "math",
      "ternary search"
    ]
  },
  {
    "id": 4402,
    "title": "Let Me Teach You a Lesson (Hard Version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "matrix",
      "two pointers"
    ]
  },
  {
    "id": 4403,
    "title": "Let Me Teach You a Lesson (Easy Version)",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "data structures",
      "dynamic programming",
      "matrix",
      "two pointers"
    ]
  },
  {
    "id": 4404,
    "title": "Cases",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 4405,
    "title": "Squaring",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4406,
    "title": "Bouquet (Hard Version)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 4407,
    "title": "Bouquet (Easy Version)",
    "difficulty": "easy",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 4408,
    "title": "Diagonals",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4409,
    "title": "Fortnite",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "game theory",
      "greedy",
      "hash table",
      "interactive",
      "math",
      "number theory",
      "string"
    ]
  },
  {
    "id": 4410,
    "title": "Minecraft",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "graph",
      "math"
    ]
  },
  {
    "id": 4411,
    "title": "Stardew Valley",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 4412,
    "title": "Wooden Game",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "greedy",
      "math",
      "tree"
    ]
  },
  {
    "id": 4413,
    "title": "Funny Game",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy",
      "math",
      "number theory",
      "tree",
      "union find"
    ]
  },
  {
    "id": 4414,
    "title": "Hungry Games",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 4415,
    "title": "Fun Game",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4416,
    "title": "Diverse Game",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4417,
    "title": "Dyn-scripted Robot (Hard Version)",
    "difficulty": "hard",
    "category": [
      "chinese remainder theorem",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4418,
    "title": "Dyn-scripted Robot (Easy Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "chinese remainder theorem",
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4419,
    "title": "Xor-Grid Problem",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 4420,
    "title": "Med-imize",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 4421,
    "title": "Light Switches",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 4422,
    "title": "Parity and Sum",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 4423,
    "title": "Question Marks",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4424,
    "title": "Ultra-Meow",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 4425,
    "title": "Valuable Cards",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "number theory",
      "two pointers"
    ]
  },
  {
    "id": 4426,
    "title": "Novice's Mistake",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation",
      "math",
      "string"
    ]
  },
  {
    "id": 4427,
    "title": "Test of Love",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4428,
    "title": "Gorilla and Permutation",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 4429,
    "title": "Angry Monk",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4430,
    "title": "Only Pluses",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4431,
    "title": "Grid Game",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "game theory",
      "graph matching",
      "greedy",
      "interactive"
    ]
  },
  {
    "id": 4432,
    "title": "Prime Split Game",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "fast fourier transform",
      "game theory",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4433,
    "title": "Grid Reset",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4434,
    "title": "Triangle Formation",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4435,
    "title": "Coloring Game",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "game theory",
      "graph",
      "graph traversal",
      "greedy",
      "interactive"
    ]
  },
  {
    "id": 4436,
    "title": "Prime XOR Coloring",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "graph",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4437,
    "title": "Absolute Zero",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4438,
    "title": "AND Reconstruction",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 4439,
    "title": "Maximize the Last Element",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4440,
    "title": "Polygonal Segments",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 4441,
    "title": "Catch the Mole(Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "divide and conquer",
      "graph traversal",
      "interactive",
      "tree"
    ]
  },
  {
    "id": 4442,
    "title": "Catch the Mole(Easy Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph traversal",
      "interactive",
      "tree"
    ]
  },
  {
    "id": 4443,
    "title": "Grid Puzzle",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4444,
    "title": "Mad MAD Sum",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4445,
    "title": "Array Craft",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 4446,
    "title": "Submission Bait",
    "difficulty": "easy",
    "category": [
      "brute force",
      "game theory",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 4447,
    "title": "Simultaneous Coloring",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 4448,
    "title": "Distance to Different",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 4449,
    "title": "Smithing Skill",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy",
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 4450,
    "title": "Two Movies",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 4451,
    "title": "Substring and Subsequence",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "string"
    ]
  },
  {
    "id": 4452,
    "title": "Catch the Coin",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 4453,
    "title": "Heartbeat",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 4454,
    "title": "Range Minimum Sum",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "divide and conquer",
      "implementation"
    ]
  },
  {
    "id": 4455,
    "title": "The Omnipotent Monster Killer",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 4456,
    "title": "Increasing Sequence with Fixed OR",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 4457,
    "title": "Make Majority",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4458,
    "title": "Split the Multiset",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4459,
    "title": "Fumo Temple",
    "difficulty": "hard",
    "category": [
      "interactive"
    ]
  },
  {
    "id": 4460,
    "title": "Spinning Round (Hard Version)",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 4461,
    "title": "Spinning Round (Easy Version)",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 4462,
    "title": "Interesting Problem (Hard Version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 4463,
    "title": "Interesting Problem (Easy Version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 4464,
    "title": "Wonderful Tree!",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "graph traversal",
      "greedy",
      "tree",
      "union find"
    ]
  },
  {
    "id": 4465,
    "title": "World is Mine",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "game theory"
    ]
  },
  {
    "id": 4466,
    "title": "Basil's Garden",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 4467,
    "title": "K-Sort",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 4468,
    "title": "Upload More RAM",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 4469,
    "title": "Permutation Problem (Hard Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "hash table",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4470,
    "title": "Permutation Problem (Simple Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "combinatorics",
      "data structures",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4471,
    "title": "Non-academic Problem",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 4472,
    "title": "Beautiful Array",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 4473,
    "title": "Mathematical Problem",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "implementation",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 4474,
    "title": "Update Queries",
    "difficulty": "easy",
    "category": [
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 4475,
    "title": "Matrix Stabilization",
    "difficulty": "easy",
    "category": [
      "brute force",
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 4476,
    "title": "X Axis",
    "difficulty": "easy",
    "category": [
      "brute force",
      "geometry",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4477,
    "title": "Maximize the Largest Component (Hard Version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph traversal",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 4478,
    "title": "Maximize the Largest Component (Easy Version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "graph",
      "graph traversal",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 4479,
    "title": "D-Function",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4480,
    "title": "Final Boss",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 4481,
    "title": "Secret Box",
    "difficulty": "medium",
    "category": [
      "brute force",
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 4482,
    "title": "Manhattan Circle",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 4483,
    "title": "Good Prefixes",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 4484,
    "title": "Maximum Multiple Sum",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4485,
    "title": "Creating Words",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 4486,
    "title": "Tower Capturing",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "geometry"
    ]
  },
  {
    "id": 4487,
    "title": "Magic Trick II",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 4488,
    "title": "Reconstruction",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 4489,
    "title": "Shuffle",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 4490,
    "title": "''a'' String Problem",
    "difficulty": "hard",
    "category": [
      "brute force",
      "hash table",
      "implementation",
      "math",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 4491,
    "title": "Magnitude (Hard Version)",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4492,
    "title": "Magnitude (Easy Version)",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4493,
    "title": "Large Addition",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 4494,
    "title": "Strange Splitting",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 4495,
    "title": "Your Loss",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 4496,
    "title": "array-value",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "data structures",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 4497,
    "title": "I Love Balls",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "probability"
    ]
  },
  {
    "id": 4498,
    "title": "Swap Dilemma",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "divide and conquer",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4499,
    "title": "Have Your Cake and Eat It Too",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4500,
    "title": "Corner Twist",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4501,
    "title": "Array Divisibility",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 4502,
    "title": "Sorting Problem Again",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 4503,
    "title": "Number of k-good subarrays",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "combinatorics",
      "divide and conquer",
      "dynamic programming",
      "math",
      "meet in the middle"
    ]
  },
  {
    "id": 4504,
    "title": "Beauty of the mountains",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4505,
    "title": "Boring Day",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 4506,
    "title": "Collatz Conjecture",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4507,
    "title": "Soccer",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4508,
    "title": "Turtle and Paths on a Tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 4509,
    "title": "Turtle and Intersected Segments",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 4510,
    "title": "Turtle and Multiplication",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "number theory"
    ]
  },
  {
    "id": 4511,
    "title": "Turtle and an Incomplete Sequence",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4512,
    "title": "Turtle and an Infinite Sequence",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "math"
    ]
  },
  {
    "id": 4513,
    "title": "Turtle and Piggy Are Playing a Game",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4514,
    "title": "Yasya and the Mysterious Tree",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "graph",
      "graph traversal",
      "greedy",
      "string",
      "tree"
    ]
  },
  {
    "id": 4515,
    "title": "Field Division (hard version)",
    "difficulty": "hard",
    "category": [
      "math",
      "sorting"
    ]
  },
  {
    "id": 4516,
    "title": "Field Division (easy version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4517,
    "title": "Permutation of Rows and Columns",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "hash table",
      "implementation",
      "math",
      "matrix",
      "sorting"
    ]
  },
  {
    "id": 4518,
    "title": "GCD-sequence",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4519,
    "title": "Sofia and the Lost Operations",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 4520,
    "title": "Choosing Cubes",
    "difficulty": "easy",
    "category": [
      "sorting"
    ]
  },
  {
    "id": 4521,
    "title": "Problem Generator",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 4522,
    "title": "Kostyanych's Theorem",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph",
      "interactive"
    ]
  },
  {
    "id": 4523,
    "title": "Manhattan Triangle",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "geometry",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 4524,
    "title": "Fixing a Binary String",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "greedy",
      "hash table",
      "string"
    ]
  },
  {
    "id": 4525,
    "title": "Earning on Bets",
    "difficulty": "medium",
    "category": [
      "binary search",
      "combinatorics",
      "constructive algorithms",
      "number theory"
    ]
  },
  {
    "id": 4526,
    "title": "XOR Sequences",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "greedy"
    ]
  },
  {
    "id": 4527,
    "title": "Guess the Maximum",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4528,
    "title": "Large Graph",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "number theory",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 4529,
    "title": "Computing Machine",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4530,
    "title": "Elections",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4531,
    "title": "Manhattan Permutations",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4532,
    "title": "New Bakery",
    "difficulty": "easy",
    "category": [
      "binary search",
      "greedy",
      "math",
      "ternary search"
    ]
  },
  {
    "id": 4533,
    "title": "Alice and Books",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 4534,
    "title": "Tensor",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "interactive"
    ]
  },
  {
    "id": 4535,
    "title": "XORificator",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "greedy",
      "hash table"
    ]
  },
  {
    "id": 4536,
    "title": "Nikita and LCM",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy",
      "math",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 4537,
    "title": "Binary Colouring",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4538,
    "title": "Little Nikita",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 4539,
    "title": "Remove Bridges",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 4540,
    "title": "Splittable Permutations",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "graph traversal",
      "greedy",
      "math",
      "tree"
    ]
  },
  {
    "id": 4541,
    "title": "Invertible Bracket Sequences",
    "difficulty": "hard",
    "category": [
      "binary search",
      "combinatorics",
      "data structures",
      "divide and conquer",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 4542,
    "title": "Job Interview",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 4543,
    "title": "Increase/Decrease/Copy",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4544,
    "title": "Verify Password",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting",
      "string"
    ]
  },
  {
    "id": 4545,
    "title": "Mind Bloom",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 4546,
    "title": "378QAQ and Core",
    "difficulty": "hard",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 4547,
    "title": "Zimpha Fan Club",
    "difficulty": "hard",
    "category": [
      "fast fourier transform",
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 4548,
    "title": "Set",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "combinatorics",
      "divide and conquer",
      "dynamic programming",
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 4549,
    "title": "Chain Queries",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph traversal",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 4550,
    "title": "Paint the Tree",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 4551,
    "title": "Chamo and Mocha's Array",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 4552,
    "title": "378QAQ and Mocha's Array",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4553,
    "title": "Bazoka and Mocha's Array",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 4554,
    "title": "Money Buys Less Happiness Now ",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 4555,
    "title": "Cutting Game",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "implementation",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 4556,
    "title": "Money Buys Happiness",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 4557,
    "title": "Ingenuity-2",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4558,
    "title": "Beautiful Triple Pairs",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "data structures"
    ]
  },
  {
    "id": 4559,
    "title": "Symmetric Encoding",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting",
      "string"
    ]
  },
  {
    "id": 4560,
    "title": "Phone Desktop",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 4561,
    "title": "Maximum GCD Sum Queries",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "implementation",
      "number theory"
    ]
  },
  {
    "id": 4562,
    "title": "Cat, Fox and Swaps ",
    "difficulty": "hard",
    "category": [
      "graph",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4563,
    "title": "Cat, Fox and Maximum Array Split",
    "difficulty": "hard",
    "category": [
      "brute force",
      "interactive",
      "math"
    ]
  },
  {
    "id": 4564,
    "title": "Cat, Fox and Double Maximum",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4565,
    "title": "Cat, Fox and the Lonely Array",
    "difficulty": "medium",
    "category": [
      "binary search",
      "bit manipulation",
      "data structures",
      "greedy",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 4566,
    "title": "Chess For Three",
    "difficulty": "easy",
    "category": [
      "brute force",
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4567,
    "title": "Coin Games",
    "difficulty": "easy",
    "category": [
      "game theory"
    ]
  },
  {
    "id": 4568,
    "title": "Contest Proposal",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 4569,
    "title": "±1",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 4570,
    "title": "XOUR",
    "difficulty": "medium",
    "category": [
      "data structures",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 4571,
    "title": "Circle Perimeter",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "geometry",
      "graph traversal",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4572,
    "title": "Find the Car",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4573,
    "title": "Binary Cut",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation",
      "sorting",
      "string"
    ]
  },
  {
    "id": 4574,
    "title": "Clock and Strings",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 4575,
    "title": "Different String",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 4576,
    "title": "My First Sorting Problem",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 4577,
    "title": "Min-Fund Prison (Hard)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 4578,
    "title": "Min-Fund Prison (Medium)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 4579,
    "title": "Min-Fund Prison (Easy)",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 4580,
    "title": "Playing Quidditch (Hard)",
    "difficulty": "hard",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 4581,
    "title": "Playing Quidditch (Medium)",
    "difficulty": "hard",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 4582,
    "title": "Playing Quidditch (Easy)",
    "difficulty": "hard",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 4583,
    "title": "Trails (Hard)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 4584,
    "title": "Trails (Medium)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 4585,
    "title": "Trails (Easy)",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 4586,
    "title": "Arithmancy (Hard)",
    "difficulty": "hard",
    "category": [
      "interactive"
    ]
  },
  {
    "id": 4587,
    "title": "Arithmancy (Medium)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "interactive",
      "probability",
      "string"
    ]
  },
  {
    "id": 4588,
    "title": "Arithmancy (Easy)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "interactive",
      "string"
    ]
  },
  {
    "id": 4589,
    "title": "Game on Tree (Hard)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 4590,
    "title": "Game on Tree (Medium)",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "game theory",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 4591,
    "title": "Game on Tree (Easy)",
    "difficulty": "medium",
    "category": [
      "game theory"
    ]
  },
  {
    "id": 4592,
    "title": "Exact Neighbours (Hard)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 4593,
    "title": "Exact Neighbours (Medium)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 4594,
    "title": "Exact Neighbours (Easy)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 4595,
    "title": "Balanced Unshuffle (Hard)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "tree"
    ]
  },
  {
    "id": 4596,
    "title": "Balanced Unshuffle (Medium)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "tree"
    ]
  },
  {
    "id": 4597,
    "title": "Balanced Shuffle (Easy)",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 4598,
    "title": "Card Pairing",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "hash table",
      "implementation"
    ]
  },
  {
    "id": 4599,
    "title": "Unique Array",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 4600,
    "title": "Shop Game",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4601,
    "title": "Minimizing the Sum",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 4602,
    "title": "Shifts and Sorting",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 4603,
    "title": "Two Friends",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4604,
    "title": "Division + LCP (hard version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "dynamic programming",
      "hash table",
      "math",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 4605,
    "title": "Division + LCP (easy version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "hash table",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 4606,
    "title": "Equal XOR Segments",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 4607,
    "title": "Cells Arrangement",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 4608,
    "title": "Permutation Game",
    "difficulty": "medium",
    "category": [
      "brute force",
      "game theory",
      "graph",
      "graph traversal",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4609,
    "title": "Assembly via Remainders",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "number theory"
    ]
  },
  {
    "id": 4610,
    "title": "Prefiquence",
    "difficulty": "easy",
    "category": [
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 4611,
    "title": "Maximize?",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4612,
    "title": "Next and Prev",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 4613,
    "title": "Again Counting Arrays (Hard Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 4614,
    "title": "Again Counting Arrays (Easy Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 4615,
    "title": "Long Way to be Non-decreasing",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph",
      "graph traversal",
      "implementation",
      "shortest path",
      "two pointers"
    ]
  },
  {
    "id": 4616,
    "title": "Fenwick Tree",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "combinatorics",
      "data structures",
      "dynamic programming",
      "math",
      "tree"
    ]
  },
  {
    "id": 4617,
    "title": "Reverse Card (Hard Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4618,
    "title": "Reverse Card (Easy Version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4619,
    "title": "Permutation Counting",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4620,
    "title": "Rectangle Filling",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 4621,
    "title": "Card Exchange",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 4622,
    "title": "Conference",
    "difficulty": "hard",
    "category": [
      "data structures",
      "max flow"
    ]
  },
  {
    "id": 4623,
    "title": "Connected Cubes",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "game theory"
    ]
  },
  {
    "id": 4624,
    "title": "Missing Subarray Sum",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 4625,
    "title": "Folding Strip",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "string"
    ]
  },
  {
    "id": 4626,
    "title": "Missing Subsequence Sum",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 4627,
    "title": "Everything Nim",
    "difficulty": "medium",
    "category": [
      "game theory",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4628,
    "title": "Necromancer",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 4629,
    "title": "Equal Trees",
    "difficulty": "hard",
    "category": [
      "graph",
      "meet in the middle",
      "special problem"
    ]
  },
  {
    "id": 4630,
    "title": "Composite Spells",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "special problem"
    ]
  },
  {
    "id": 4631,
    "title": "Observation Towers",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 4632,
    "title": "Narrow Paths",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "special problem"
    ]
  },
  {
    "id": 4633,
    "title": "Yet Another Permutation Constructive",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "special problem"
    ]
  },
  {
    "id": 4634,
    "title": "Staircase",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 4635,
    "title": "Firewood",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 4636,
    "title": "Clock in the Pool",
    "difficulty": "medium",
    "category": [
      "math",
      "special problem"
    ]
  },
  {
    "id": 4637,
    "title": "1-3-5",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "special problem"
    ]
  },
  {
    "id": 4638,
    "title": "Frequency Mismatch (Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph traversal",
      "hash table",
      "probability",
      "tree"
    ]
  },
  {
    "id": 4639,
    "title": "Frequency Mismatch (Easy Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "divide and conquer",
      "hash table",
      "probability",
      "tree"
    ]
  },
  {
    "id": 4640,
    "title": "Carousel of Combinations",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4641,
    "title": "A BIT of an Inequality",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 4642,
    "title": "How Does the Rook Move?",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 4643,
    "title": "A BIT of a Construction",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4644,
    "title": "Stickogon",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 4645,
    "title": "Nene and the Passing Game",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "graph",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 4646,
    "title": "Nene vs. Monsters (Hard Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4647,
    "title": "Nene vs. Monsters (Easy Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4648,
    "title": "Nene and the Mex Operator",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "divide and conquer",
      "dynamic programming",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4649,
    "title": "Nene's Magical Matrix",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4650,
    "title": "Nene and the Card Game",
    "difficulty": "easy",
    "category": [
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 4651,
    "title": "Nene's Game",
    "difficulty": "easy",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 4652,
    "title": "The Most Reckless Defense",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "graph matching",
      "max flow",
      "shortest path"
    ]
  },
  {
    "id": 4653,
    "title": "GCD on a grid",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "graph traversal",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4654,
    "title": "Unfair Game",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "game theory",
      "greedy",
      "math",
      "scheduling"
    ]
  },
  {
    "id": 4655,
    "title": "Long Inversions",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 4656,
    "title": "Inaccurate Subsequence Search",
    "difficulty": "medium",
    "category": [
      "data structures",
      "two pointers"
    ]
  },
  {
    "id": 4657,
    "title": "Inhabitant of the Deep Sea",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4658,
    "title": "Progressive Square",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "data structures",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 4659,
    "title": "Yogurt Sale",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 4660,
    "title": "Unique Strings",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 4661,
    "title": "Chain Reaction",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "implementation",
      "math",
      "number theory",
      "union find"
    ]
  },
  {
    "id": 4662,
    "title": "Colored Balls",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4663,
    "title": "Long Multiplication",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4664,
    "title": "Make It Ugly",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 4665,
    "title": "Painting the Ribbon",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4666,
    "title": "Accuracy-Preserving Summation Algorithm",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 4667,
    "title": "Help, what does it mean to be \"Based\"",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation",
      "parsing",
      "sorting",
      "special problem"
    ]
  },
  {
    "id": 4668,
    "title": "Dark Matter",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "geometry",
      "special problem"
    ]
  },
  {
    "id": 4669,
    "title": "Palindrome",
    "difficulty": "easy",
    "category": [
      "implementation",
      "special problem",
      "string"
    ]
  },
  {
    "id": 4670,
    "title": "Mathematician Takeover",
    "difficulty": "easy",
    "category": [
      "binary search",
      "graph traversal",
      "math",
      "special problem"
    ]
  },
  {
    "id": 4671,
    "title": "Grid",
    "difficulty": "easy",
    "category": [
      "brute force",
      "special problem"
    ]
  },
  {
    "id": 4672,
    "title": "Sweep Line",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "game theory",
      "math",
      "special problem"
    ]
  },
  {
    "id": 4673,
    "title": "Are You a Procrastinator?",
    "difficulty": "easy",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 4674,
    "title": "They Have Fooled",
    "difficulty": "easy",
    "category": [
      "brute force",
      "scheduling",
      "special problem"
    ]
  },
  {
    "id": 4675,
    "title": "Is it stated?",
    "difficulty": "easy",
    "category": [
      "special problem",
      "string"
    ]
  },
  {
    "id": 4676,
    "title": "Are You a Robot, Again?",
    "difficulty": "easy",
    "category": [
      "special problem",
      "string"
    ]
  },
  {
    "id": 4677,
    "title": "Growing Trees",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "graph",
      "greedy",
      "max flow"
    ]
  },
  {
    "id": 4678,
    "title": "Thanos Snap",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "game theory",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 4679,
    "title": "Clacking Balls",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "probability"
    ]
  },
  {
    "id": 4680,
    "title": "Inversion Composition",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 4681,
    "title": "No Palindromes",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "divide and conquer",
      "greedy",
      "hash table",
      "implementation",
      "math",
      "string"
    ]
  },
  {
    "id": 4682,
    "title": "Buying Jewels",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4683,
    "title": "Ticket Hoarding",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4684,
    "title": "Battle Cows",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 4685,
    "title": "Dual Trigger",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4686,
    "title": "Shuffling Songs",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "graph",
      "graph traversal",
      "hash table",
      "implementation",
      "string"
    ]
  },
  {
    "id": 4687,
    "title": "0, 1, 2, Tree!",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "greedy",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 4688,
    "title": "Nearly Shortest Repeating Substring",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "number theory",
      "string"
    ]
  },
  {
    "id": 4689,
    "title": "Product of Binary Decimals",
    "difficulty": "easy",
    "category": [
      "brute force",
      "dynamic programming",
      "implementation",
      "number theory"
    ]
  },
  {
    "id": 4690,
    "title": "Clock Conversion",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 4691,
    "title": "Upscaling",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 4692,
    "title": "Stair, Peak, or Neither?",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 4693,
    "title": "Make Triangle",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 4694,
    "title": "Amanda the Amoeba",
    "difficulty": "hard",
    "category": [
      "graph",
      "implementation",
      "tree",
      "two pointers"
    ]
  },
  {
    "id": 4695,
    "title": "Disks",
    "difficulty": "medium",
    "category": [
      "geometry",
      "graph",
      "graph matching",
      "graph traversal"
    ]
  },
  {
    "id": 4696,
    "title": "Division Avoidance",
    "difficulty": "hard",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 4697,
    "title": "Scooter",
    "difficulty": "hard",
    "category": [
      "graph",
      "greedy"
    ]
  },
  {
    "id": 4698,
    "title": "Dating",
    "difficulty": "hard",
    "category": [
      "greedy",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 4699,
    "title": "Damage per Second",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 4700,
    "title": "Funny or Scary?",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 4701,
    "title": "Annual Ants' Gathering",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 4702,
    "title": "Charming Meals",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 4703,
    "title": "Grove",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "geometry",
      "graph traversal",
      "probability"
    ]
  },
  {
    "id": 4704,
    "title": "MST with Matching",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "graph matching",
      "tree",
      "union find"
    ]
  },
  {
    "id": 4705,
    "title": "Rare Coins",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "probability"
    ]
  },
  {
    "id": 4706,
    "title": "Clique Partition",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4707,
    "title": "Tandem Repeats?",
    "difficulty": "medium",
    "category": [
      "brute force",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 4708,
    "title": "Arrow Path",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 4709,
    "title": "Array Fix",
    "difficulty": "easy",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4710,
    "title": "Special Characters",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms"
    ]
  },
  {
    "id": 4711,
    "title": "Nobody is needed",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "data structures",
      "dynamic programming",
      "graph traversal"
    ]
  },
  {
    "id": 4712,
    "title": "Girl Permutation",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4713,
    "title": "Birthday Gift",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4714,
    "title": "Tree Cutting",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 4715,
    "title": "Maximum Sum",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4716,
    "title": "Median of an Array",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 4717,
    "title": "GCD is Greater",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4718,
    "title": "Cook and Porridge",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 4719,
    "title": "Kirill and Mushrooms",
    "difficulty": "hard",
    "category": [
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 4720,
    "title": "Binary Search",
    "difficulty": "medium",
    "category": [
      "binary search",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 4721,
    "title": "Seraphim the Owl",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 4722,
    "title": "Left and Right Houses",
    "difficulty": "medium",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 4723,
    "title": "Fireworks",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 4724,
    "title": "Setting up Camp",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 4725,
    "title": "Equal XOR",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "constructive algorithms"
    ]
  },
  {
    "id": 4726,
    "title": "Destroying Bridges",
    "difficulty": "easy",
    "category": [
      "graph",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4727,
    "title": "Minimum Hamming Distance",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 4728,
    "title": "MEX Game 2 (Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 4729,
    "title": "MEX Game 2 (Easy Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 4730,
    "title": "Counting Is Fun (Hard Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 4731,
    "title": "Counting Is Fun (Easy Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 4732,
    "title": "Tree Compass",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 4733,
    "title": "Non-Palindromic Substring",
    "difficulty": "hard",
    "category": [
      "hash table",
      "implementation",
      "math",
      "string"
    ]
  },
  {
    "id": 4734,
    "title": "MEX Game 1",
    "difficulty": "medium",
    "category": [
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 4735,
    "title": "Farmer John's Favorite Intern",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "max flow",
      "tree"
    ]
  },
  {
    "id": 4736,
    "title": "Bessie and Cards",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 4737,
    "title": "Farmer John's Favorite Function",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4738,
    "title": "Farm Game",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "game theory"
    ]
  },
  {
    "id": 4739,
    "title": "Learning to Paint",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 4740,
    "title": "Bessie's Birthday Cake (Hard Version)",
    "difficulty": "medium",
    "category": [
      "geometry",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4741,
    "title": "Bessie's Birthday Cake (Easy Version)",
    "difficulty": "medium",
    "category": [
      "geometry",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4742,
    "title": "Bessie and MEX",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 4743,
    "title": "Farmer John's Challenge",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 4744,
    "title": "Rudolf and Subway",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 4745,
    "title": "Rudolf and Imbalance",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 4746,
    "title": "Rudolf and k Bridges",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 4747,
    "title": "Rudolf and the Ball Game",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 4748,
    "title": "Rudolf and the Ugly String",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy",
      "string"
    ]
  },
  {
    "id": 4749,
    "title": "Rudolf and 121",
    "difficulty": "easy",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4750,
    "title": "Rudolf and the Ticket",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 4751,
    "title": "Almost Certainly",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "data structures",
      "sorting",
      "special problem"
    ]
  },
  {
    "id": 4752,
    "title": "Burenka and Pether",
    "difficulty": "easy",
    "category": [
      "data structures",
      "divide and conquer",
      "graph",
      "graph traversal",
      "sorting",
      "special problem",
      "tree",
      "union find"
    ]
  },
  {
    "id": 4753,
    "title": "Three Arrays",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation",
      "sorting",
      "special problem"
    ]
  },
  {
    "id": 4754,
    "title": "Parallel Universes",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "special problem",
      "union find"
    ]
  },
  {
    "id": 4755,
    "title": "Big Persimmon",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "game theory",
      "special problem"
    ]
  },
  {
    "id": 4756,
    "title": "More Gifts",
    "difficulty": "easy",
    "category": [
      "graph traversal",
      "special problem",
      "two pointers"
    ]
  },
  {
    "id": 4757,
    "title": "Evidence Board",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "special problem",
      "tree"
    ]
  },
  {
    "id": 4758,
    "title": "Draw Polygon Lines",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "geometry",
      "interactive",
      "special problem"
    ]
  },
  {
    "id": 4759,
    "title": "Zig-zag",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 4760,
    "title": "XOR Operations",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 4761,
    "title": "Tree Quiz",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 4762,
    "title": "There and Back Again",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 4763,
    "title": "Symmetric Boundary",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 4764,
    "title": "Pho Restaurant",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 4765,
    "title": "Personality Test",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 4766,
    "title": "Forming Groups",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 4767,
    "title": "Duplicates",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 4768,
    "title": "Bánh Bò",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 4769,
    "title": "Bit Counting Sequence",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 4770,
    "title": "Attraction Score",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 4771,
    "title": "Antiparticle Antiphysics",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 4772,
    "title": "Binary Path",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4773,
    "title": "Shuffle Party",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 4774,
    "title": "Grand Finale: Circles",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry"
    ]
  },
  {
    "id": 4775,
    "title": "Yet Yet Another Permutation Problem",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 4776,
    "title": "Bitwise Paradox",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "data structures",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 4777,
    "title": "Pokémon Arena",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "greedy",
      "implementation",
      "shortest path",
      "sorting"
    ]
  },
  {
    "id": 4778,
    "title": "Pinball",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "implementation",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 4779,
    "title": "Bitwise Operation Wizard",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "greedy",
      "interactive",
      "math"
    ]
  },
  {
    "id": 4780,
    "title": "Andrey's Tree",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "graph traversal",
      "greedy",
      "implementation",
      "tree",
      "union find"
    ]
  },
  {
    "id": 4781,
    "title": "Distance Learning Courses in MAC",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "data structures",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4782,
    "title": "Exam in MAC",
    "difficulty": "medium",
    "category": [
      "binary search",
      "combinatorics",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4783,
    "title": "Messenger in MAC",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 4784,
    "title": "Informatics in MAC",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 4785,
    "title": "Entertainment in MAC",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "string"
    ]
  },
  {
    "id": 4786,
    "title": "Weird LCM Operations",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "number theory"
    ]
  },
  {
    "id": 4787,
    "title": "XOR Break --- Game Version",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "game theory",
      "greedy",
      "interactive"
    ]
  },
  {
    "id": 4788,
    "title": "XOR Break --- Solo Version",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 4789,
    "title": "Find a Mine",
    "difficulty": "medium",
    "category": [
      "binary search",
      "constructive algorithms",
      "geometry",
      "greedy",
      "interactive",
      "math"
    ]
  },
  {
    "id": 4790,
    "title": "Yet Another Coin Problem",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4791,
    "title": "Too Min Too Max",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 4792,
    "title": "Turtle Magic: Royal Turtle Shell Pattern",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "combinatorics",
      "constructive algorithms",
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 4793,
    "title": "Turtle Mission: Robot and the Earthquake",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 4794,
    "title": "Turtle vs. Rabbit Race: Optimal Trainings",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation",
      "math",
      "ternary search"
    ]
  },
  {
    "id": 4795,
    "title": "Turtle Tenacity: Continual Mods",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 4796,
    "title": "Turtle Fingers: Count the Values of k",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4797,
    "title": "Turtle Math: Fast Three Task",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4798,
    "title": "Turtle Puzzle: Rearrange and Negate",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4799,
    "title": "Moving Platforms",
    "difficulty": "hard",
    "category": [
      "graph",
      "math",
      "number theory",
      "shortest path"
    ]
  },
  {
    "id": 4800,
    "title": "Feed Cats",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 4801,
    "title": "Final Countdown",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4802,
    "title": "Card Game",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4803,
    "title": "LR-remainders",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "implementation",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 4804,
    "title": "Chaya Calendar",
    "difficulty": "easy",
    "category": [
      "number theory"
    ]
  },
  {
    "id": 4805,
    "title": "Thorns and Coins",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4806,
    "title": "One-Dimensional Puzzle",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4807,
    "title": "Chat Screenshots",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 4808,
    "title": "Anna and the Valentine's Day Gift",
    "difficulty": "medium",
    "category": [
      "game theory",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4809,
    "title": "Divisible Pairs",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4810,
    "title": "Make Equal Again",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4811,
    "title": "Make Equal",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 4812,
    "title": "Recovering a Small String",
    "difficulty": "easy",
    "category": [
      "brute force",
      "string"
    ]
  },
  {
    "id": 4813,
    "title": "Counting Is Fun",
    "difficulty": "hard",
    "category": [
      "combinatorics"
    ]
  },
  {
    "id": 4814,
    "title": "Interactive Mex Tree",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "interactive",
      "tree"
    ]
  },
  {
    "id": 4815,
    "title": "Prefix Max Set Counting",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 4816,
    "title": "Maximize the Difference",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "graph traversal"
    ]
  },
  {
    "id": 4817,
    "title": "2..3...4.... Wonderful! Wonderful!",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 4818,
    "title": "Sum over all Substrings (Hard Version)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "divide and conquer",
      "dynamic programming",
      "greedy",
      "implementation",
      "string",
      "union find"
    ]
  },
  {
    "id": 4819,
    "title": "Sum over all Substrings (Easy Version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "string"
    ]
  },
  {
    "id": 4820,
    "title": "Lexicographically Largest",
    "difficulty": "medium",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 4821,
    "title": "Permutation Printing",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 4822,
    "title": "Maximise The Score",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 4823,
    "title": "Sasha and the Wedding Binary Search Tree",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "data structures",
      "graph traversal",
      "math",
      "tree"
    ]
  },
  {
    "id": 4824,
    "title": "Sasha and the Happy Tree Cutting",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "math",
      "tree"
    ]
  },
  {
    "id": 4825,
    "title": "Sasha and a Walk in the City",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "tree"
    ]
  },
  {
    "id": 4826,
    "title": "Sasha and the Casino",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "game theory",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4827,
    "title": "Sasha and the Drawing",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4828,
    "title": "Sasha and the Beautiful Array",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4829,
    "title": "Digital Patterns",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4830,
    "title": "Modular Sequence",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "graph",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4831,
    "title": "Lonely Mountain Dungeons",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "greedy",
      "math",
      "ternary search"
    ]
  },
  {
    "id": 4832,
    "title": "Physical Education Lesson",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4833,
    "title": "Equalize",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 4834,
    "title": "Rectangle Cutting",
    "difficulty": "easy",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 4835,
    "title": "Paint Charges",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4836,
    "title": "Microcycle",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "greedy",
      "implementation",
      "sorting",
      "tree",
      "union find"
    ]
  },
  {
    "id": 4837,
    "title": "Klever Permutation",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 4838,
    "title": "Find the Different Ones!",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 4839,
    "title": "Choose the Different Ones!",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4840,
    "title": "Following the String",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "string"
    ]
  },
  {
    "id": 4841,
    "title": "Make it White",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 4842,
    "title": "Vlad and Trouble at MIT",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "implementation",
      "max flow",
      "tree"
    ]
  },
  {
    "id": 4843,
    "title": "Vlad and Avoiding X",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 4844,
    "title": "Vlad and an Odd Ordering",
    "difficulty": "medium",
    "category": [
      "binary search",
      "bit manipulation",
      "data structures",
      "dynamic programming",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4845,
    "title": "Vlad and Division",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "greedy"
    ]
  },
  {
    "id": 4846,
    "title": "Vlad and a Sum of Sum of Digits",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 4847,
    "title": "Vlad and Shapes",
    "difficulty": "easy",
    "category": [
      "geometry",
      "implementation"
    ]
  },
  {
    "id": 4848,
    "title": "Vlad and the Best of Five",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 4849,
    "title": "Good Trip",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 4850,
    "title": "A Balanced Problemset?",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4851,
    "title": "We Got Everything Covered!",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "string"
    ]
  },
  {
    "id": 4852,
    "title": "Anti-Proxy Attendance",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "interactive",
      "ternary search"
    ]
  },
  {
    "id": 4853,
    "title": "Paper Cutting Again",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "probability"
    ]
  },
  {
    "id": 4854,
    "title": "Balanced Subsequences",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 4855,
    "title": "Fractal Origami",
    "difficulty": "hard",
    "category": [
      "geometry",
      "math",
      "matrix"
    ]
  },
  {
    "id": 4856,
    "title": "Space Harbour",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4857,
    "title": "Did We Get Everything Covered?",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy",
      "shortest path",
      "string"
    ]
  },
  {
    "id": 4858,
    "title": "Shrink-Reverse",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "hash table",
      "implementation",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 4859,
    "title": "Count Paths",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 4860,
    "title": "Slimes",
    "difficulty": "medium",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 4861,
    "title": "Find B",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 4862,
    "title": "Monsters Attack!",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4863,
    "title": "Moving Chips",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4864,
    "title": "Replace on Segment",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph matching"
    ]
  },
  {
    "id": 4865,
    "title": "Increasing Subsequences",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "divide and conquer",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4866,
    "title": "Berserk Monsters",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "implementation",
      "math",
      "union find"
    ]
  },
  {
    "id": 4867,
    "title": "Closest Cities",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4868,
    "title": "Forming Triangles",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4869,
    "title": "Tricky Template",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation",
      "string"
    ]
  },
  {
    "id": 4870,
    "title": "Mischievous Shooter",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 4871,
    "title": "Sum of Progression",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4872,
    "title": "Eat the Chip",
    "difficulty": "medium",
    "category": [
      "brute force",
      "game theory",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4873,
    "title": "Very Different Array",
    "difficulty": "easy",
    "category": [
      "data structures",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 4874,
    "title": "Sending Messages",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 4875,
    "title": "Arranging Cats",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4876,
    "title": "Square",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 4877,
    "title": "Smooth Sailing (Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "geometry",
      "graph",
      "tree",
      "union find"
    ]
  },
  {
    "id": 4878,
    "title": "Smooth Sailing (Easy Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "graph",
      "graph traversal",
      "shortest path",
      "union find"
    ]
  },
  {
    "id": 4879,
    "title": "Counting Binary Strings",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 4880,
    "title": "Array Repetition",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "implementation",
      "math",
      "union find"
    ]
  },
  {
    "id": 4881,
    "title": "Partitioning the Array",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4882,
    "title": "Summation Game",
    "difficulty": "easy",
    "category": [
      "game theory",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 4883,
    "title": "Satisfying Constraints",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4884,
    "title": "Tree Diameter",
    "difficulty": "hard",
    "category": [
      "interactive",
      "tree"
    ]
  },
  {
    "id": 4885,
    "title": "Tree LGM",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "divide and conquer",
      "game theory",
      "tree"
    ]
  },
  {
    "id": 4886,
    "title": "Wine Factory (Hard Version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "matrix",
      "max flow"
    ]
  },
  {
    "id": 4887,
    "title": "Wine Factory (Easy Version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 4888,
    "title": "Counting Prefixes",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4889,
    "title": "01 Tree",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "sorting",
      "tree",
      "union find"
    ]
  },
  {
    "id": 4890,
    "title": "Grouping Increases",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 4891,
    "title": "Plus-Minus Split",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 4892,
    "title": "Wallet Exchange",
    "difficulty": "easy",
    "category": [
      "game theory",
      "math"
    ]
  },
  {
    "id": 4893,
    "title": "Permutation of Given",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 4894,
    "title": "Caterpillar on a Tree",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "implementation",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 4895,
    "title": "ace5 and Task Order",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "divide and conquer",
      "implementation",
      "interactive",
      "probability",
      "sorting"
    ]
  },
  {
    "id": 4896,
    "title": "Blocking Elements",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 4897,
    "title": "XOR-distance",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4898,
    "title": "Minimize Inversions",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 4899,
    "title": "Brick Wall",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4900,
    "title": "Construct Tree",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 4901,
    "title": "Construct Matrix",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 4902,
    "title": "Yet Another Inversions Problem",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "dynamic programming",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4903,
    "title": "Watering an Array",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4904,
    "title": "Erase First or Second Letter",
    "difficulty": "easy",
    "category": [
      "brute force",
      "combinatorics",
      "data structures",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 4905,
    "title": "Least Product",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 4906,
    "title": "Matrix Rank (Hard Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "matrix",
      "string suffix structures"
    ]
  },
  {
    "id": 4907,
    "title": "Matrix Rank (Easy Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "math",
      "matrix"
    ]
  },
  {
    "id": 4908,
    "title": "Optimizations From Chelsu",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "dynamic programming",
      "number theory",
      "tree"
    ]
  },
  {
    "id": 4909,
    "title": "Group Division",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 4910,
    "title": "Happy Life in University",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 4911,
    "title": "Mathematical Problem",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "geometry",
      "math"
    ]
  },
  {
    "id": 4912,
    "title": "Training Before the Olympiad",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "game theory",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4913,
    "title": "Two Divisors",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4914,
    "title": "2023",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4915,
    "title": "Bicycles",
    "difficulty": "medium",
    "category": [
      "graph",
      "greedy",
      "implementation",
      "shortest path",
      "sorting"
    ]
  },
  {
    "id": 4916,
    "title": "Greetings",
    "difficulty": "medium",
    "category": [
      "data structures",
      "divide and conquer",
      "sorting"
    ]
  },
  {
    "id": 4917,
    "title": "Romantic Glasses",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "math"
    ]
  },
  {
    "id": 4918,
    "title": "Unnatural Language Processing",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 4919,
    "title": "Can I Square?",
    "difficulty": "easy",
    "category": [
      "binary search",
      "implementation"
    ]
  },
  {
    "id": 4920,
    "title": "Not Quite Latin Square",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 4921,
    "title": "Odd One Out",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "implementation"
    ]
  },
  {
    "id": 4922,
    "title": "Light Bulbs (Hard Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "dynamic programming",
      "graph",
      "graph traversal",
      "hash table"
    ]
  },
  {
    "id": 4923,
    "title": "Light Bulbs (Easy Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "graph",
      "graph traversal",
      "math",
      "tree",
      "union find"
    ]
  },
  {
    "id": 4924,
    "title": "Programming Competition",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph matching",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 4925,
    "title": "Game with Marbles (Hard Version)",
    "difficulty": "medium",
    "category": [
      "game theory",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 4926,
    "title": "Game with Marbles (Easy Version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "game theory",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 4927,
    "title": "Three Activities",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 4928,
    "title": "Quests",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 4929,
    "title": "Preparing for the Contest",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 4930,
    "title": "Problemsolving Log",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 4931,
    "title": "Palindromic Problem",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "hash table",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 4932,
    "title": "Matrix Problem",
    "difficulty": "hard",
    "category": [
      "graph",
      "max flow"
    ]
  },
  {
    "id": 4933,
    "title": "Array Collapse",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 4934,
    "title": "Game with Multiset",
    "difficulty": "medium",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 4935,
    "title": "Swap and Delete",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 4936,
    "title": "Rating Increase",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 4937,
    "title": "LOL Lovers",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 4938,
    "title": "Kim's Quest",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 4939,
    "title": "Joy of Pokémon Observation",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 4940,
    "title": "Innovative Washing Machine",
    "difficulty": "hard",
    "category": [
      "geometry",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 4941,
    "title": "Hypercatapult Commute",
    "difficulty": "hard",
    "category": [
      "graph"
    ]
  },
  {
    "id": 4942,
    "title": "Great City Saint Petersburg",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 4943,
    "title": "Fugitive Frenzy",
    "difficulty": "hard",
    "category": [
      "math",
      "probability"
    ]
  },
  {
    "id": 4944,
    "title": "Evaluate It and Back Again",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 4945,
    "title": "Divisibility Test",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 4946,
    "title": "Cactus Transformation",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 4947,
    "title": "Blueprint for Seating",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "divide and conquer",
      "math"
    ]
  },
  {
    "id": 4948,
    "title": "Accumulator Apex",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 4949,
    "title": "Two Colors",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 4950,
    "title": "Inverse Problem",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "special problem"
    ]
  },
  {
    "id": 4951,
    "title": "Sum of Digits of Sums",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "special problem"
    ]
  },
  {
    "id": 4952,
    "title": "Pool Records",
    "difficulty": "hard",
    "category": [
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 4953,
    "title": "Build Railway Stations",
    "difficulty": "hard",
    "category": [
      "greedy",
      "special problem",
      "tree"
    ]
  },
  {
    "id": 4954,
    "title": "Maximum Sum Subarrays",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "special problem"
    ]
  },
  {
    "id": 4955,
    "title": "Remove and Add",
    "difficulty": "medium",
    "category": [
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 4956,
    "title": "Poisonous Swamp",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 4957,
    "title": "Security Guard",
    "difficulty": "medium",
    "category": [
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 4958,
    "title": "Username",
    "difficulty": "easy",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 4959,
    "title": "Short Permutation Problem",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 4960,
    "title": "Parallel Swaps Sort",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures"
    ]
  },
  {
    "id": 4961,
    "title": "Pumping Lemma",
    "difficulty": "hard",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 4962,
    "title": "Small Permutation Problem (Hard Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 4963,
    "title": "Small Permutation Problem (Easy Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 4964,
    "title": "Multiple Lamps",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4965,
    "title": "Split Plus K",
    "difficulty": "hard",
    "category": [
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4966,
    "title": "Heavy Intervals",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "math",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 4967,
    "title": "Make Almost Equal With Mod",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 4968,
    "title": "Distinct Buttons",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 4969,
    "title": "Lights",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 4970,
    "title": "Shift and Reverse",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 4971,
    "title": "Good Triples",
    "difficulty": "medium",
    "category": [
      "brute force",
      "combinatorics",
      "number theory"
    ]
  },
  {
    "id": 4972,
    "title": "Jumping Through Segments",
    "difficulty": "medium",
    "category": [
      "binary search",
      "constructive algorithms"
    ]
  },
  {
    "id": 4973,
    "title": "Removal of Unattractive Pairs",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 4974,
    "title": "YetnotherrokenKeoard",
    "difficulty": "easy",
    "category": [
      "data structures",
      "implementation",
      "string"
    ]
  },
  {
    "id": 4975,
    "title": "Rook",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 4976,
    "title": "Triangle Construction",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 4977,
    "title": "Palindromic Parentheses",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 4978,
    "title": "Deck-Building Game",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "math"
    ]
  },
  {
    "id": 4979,
    "title": "Count BFS Graph",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 4980,
    "title": "Contingency Plan 2",
    "difficulty": "hard",
    "category": [
      "graph matching"
    ]
  },
  {
    "id": 4981,
    "title": "Twin Friends",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 4982,
    "title": "Grid Game 2",
    "difficulty": "hard",
    "category": [
      "game theory",
      "number theory"
    ]
  },
  {
    "id": 4983,
    "title": "Maximize The Value",
    "difficulty": "hard",
    "category": [
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 4984,
    "title": "Merge Not Sort",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming"
    ]
  },
  {
    "id": 4985,
    "title": "Spaceship Exploration",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry"
    ]
  },
  {
    "id": 4986,
    "title": "Cursed Game",
    "difficulty": "hard",
    "category": [
      "interactive"
    ]
  },
  {
    "id": 4987,
    "title": "Button Pressing",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "hash table"
    ]
  },
  {
    "id": 4988,
    "title": "Easy As ABC",
    "difficulty": "easy",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 4989,
    "title": "Field Should Not Be Empty",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "divide and conquer"
    ]
  },
  {
    "id": 4990,
    "title": "One-X",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph traversal",
      "math",
      "tree"
    ]
  },
  {
    "id": 4991,
    "title": "Cyclic MEX",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 4992,
    "title": "Largest Subsequence",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 4993,
    "title": "Begginer's Zelda",
    "difficulty": "easy",
    "category": [
      "greedy",
      "tree"
    ]
  },
  {
    "id": 4994,
    "title": "Constructive Problems",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 4995,
    "title": "Beautiful Tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 4996,
    "title": "Tree Queries",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 4997,
    "title": "Set To Max (Hard Version)",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "divide and conquer",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 4998,
    "title": "Set To Max (Easy Version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 4999,
    "title": "Array Game",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 5000,
    "title": "Collecting Game",
    "difficulty": "easy",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 5001,
    "title": "Forked!",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 5002,
    "title": "Babysitting",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "binary search",
      "data structures",
      "graph",
      "tree"
    ]
  },
  {
    "id": 5003,
    "title": "Geo Game",
    "difficulty": "hard",
    "category": [
      "greedy",
      "interactive",
      "math"
    ]
  },
  {
    "id": 5004,
    "title": "Maximum And Queries (hard version)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "divide and conquer",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 5005,
    "title": "Maximum And Queries (easy version)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 5006,
    "title": "Theofanis' Nightmare",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 5007,
    "title": "StORage room",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 5008,
    "title": "Halloumi Boxes",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5009,
    "title": "Trees and XOR Queries Again",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "graph",
      "graph traversal",
      "implementation",
      "math",
      "tree"
    ]
  },
  {
    "id": 5010,
    "title": "Collapsing Strings",
    "difficulty": "hard",
    "category": [
      "data structures",
      "string",
      "tree"
    ]
  },
  {
    "id": 5011,
    "title": "Robot Queries",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 5012,
    "title": "Insert and Equalize",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5013,
    "title": "Getting Points",
    "difficulty": "easy",
    "category": [
      "binary search",
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 5014,
    "title": "Binary Imbalance",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 5015,
    "title": "Landscaping",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry",
      "two pointers"
    ]
  },
  {
    "id": 5016,
    "title": "Compressed Tree",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 5017,
    "title": "Yet Another Monster Fight",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5018,
    "title": "Add, Divide and Floor",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5019,
    "title": "Chip and Ribbon",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 5020,
    "title": "Line Trip",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 5021,
    "title": "Local Deletions",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 5022,
    "title": "Transitive Graph",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 5023,
    "title": "Small GCD",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5024,
    "title": "Anji's Binary Tree",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 5025,
    "title": "Laura and Operations",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 5026,
    "title": "Cover in Water",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 5027,
    "title": "Unusual Entertainment",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "shortest path",
      "sorting",
      "tree",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 5028,
    "title": "Alex's whims",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 5029,
    "title": "Queue Sort",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 5030,
    "title": "Yarik and Musical Notes",
    "difficulty": "medium",
    "category": [
      "hash table",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5031,
    "title": "Yarik and Array",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 5032,
    "title": "250 Thousand Tons of TNT",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "number theory"
    ]
  },
  {
    "id": 5033,
    "title": "Game with Integers",
    "difficulty": "easy",
    "category": [
      "game theory",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5034,
    "title": "Vova Escapes the Matrix",
    "difficulty": "hard",
    "category": [
      "brute force",
      "divide and conquer",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 5035,
    "title": "Sofia and Strings",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "sorting",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 5036,
    "title": "Absolute Beauty",
    "difficulty": "hard",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 5037,
    "title": "Colorful Grid",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 5038,
    "title": "Milena and Admirer",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 5039,
    "title": "Milica and String",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 5040,
    "title": "Cyclic Hamming (Hard Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "fast fourier transform",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5041,
    "title": "Cyclic Hamming (Easy Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "divide and conquer",
      "dynamic programming",
      "fast fourier transform",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5042,
    "title": "Pepe Racing",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation",
      "interactive",
      "sorting"
    ]
  },
  {
    "id": 5043,
    "title": "Bracket Xoring",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5044,
    "title": "Permutation Sorting",
    "difficulty": "hard",
    "category": [
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 5045,
    "title": "Ones and Twos",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "divide and conquer",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 5046,
    "title": "Matching Arrays",
    "difficulty": "medium",
    "category": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5047,
    "title": "AB Flipping",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 5048,
    "title": "Jagged Swaps",
    "difficulty": "easy",
    "category": [
      "sorting"
    ]
  },
  {
    "id": 5049,
    "title": "Two Characters, Two Colors",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "max flow"
    ]
  },
  {
    "id": 5050,
    "title": "Fancy Arrays",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "matrix"
    ]
  },
  {
    "id": 5051,
    "title": "Infinite Card Game",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "dynamic programming",
      "game theory",
      "graph",
      "graph traversal",
      "greedy",
      "sorting",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 5052,
    "title": "XOR Construction",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "data structures",
      "math",
      "string suffix structures",
      "tree"
    ]
  },
  {
    "id": 5053,
    "title": "Torn Lucky Ticket",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "hash table",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5054,
    "title": "Points and Minimum Distance",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 5055,
    "title": "Treasure Chest",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 5056,
    "title": "Two Out of Three",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 5057,
    "title": "Secret Sport",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 5058,
    "title": "Cacti Symphony",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 5059,
    "title": "Colorful Constructive",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 5060,
    "title": "Freedom of Choice",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5061,
    "title": "Neutral Tonality",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 5062,
    "title": "Anonymous Informant",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 5063,
    "title": "A Growing Tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 5064,
    "title": "Brukhovich and Exams",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 5065,
    "title": "Suspicious logarithms",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "math"
    ]
  },
  {
    "id": 5066,
    "title": "Smilo and Monsters",
    "difficulty": "medium",
    "category": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 5067,
    "title": "Deja Vu",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math",
      "sorting"
    ]
  },
  {
    "id": 5068,
    "title": "Sorting with Twos",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "sorting"
    ]
  },
  {
    "id": 5069,
    "title": "Qingshan Loves Strings",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 5070,
    "title": "Doremy's Paint 3",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 5071,
    "title": "Doremy's Average Tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 5072,
    "title": "Doremy's Swapping Trees",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 5073,
    "title": "Game of Stacks",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph",
      "graph traversal",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 5074,
    "title": "Doremy's Drying Plan (Hard Version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 5075,
    "title": "Doremy's Drying Plan (Easy Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5076,
    "title": "Doremy's Connecting Plan",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 5077,
    "title": "Qingshan Loves Strings 2",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5078,
    "title": "Minimum Segments",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 5079,
    "title": "Good Colorings",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "graph",
      "interactive"
    ]
  },
  {
    "id": 5080,
    "title": "Split",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "divide and conquer",
      "math",
      "tree",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 5081,
    "title": "Minimum Array",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "data structures",
      "greedy",
      "hash table",
      "two pointers"
    ]
  },
  {
    "id": 5082,
    "title": "Time Travel",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 5083,
    "title": "Diamond Theft",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 5084,
    "title": "I Wanna be the Team Leader",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "dynamic programming",
      "greedy",
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 5085,
    "title": "Monocarp and the Set",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "math"
    ]
  },
  {
    "id": 5086,
    "title": "Decreasing String",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 5087,
    "title": "Fear of the Dark",
    "difficulty": "medium",
    "category": [
      "binary search",
      "geometry",
      "math"
    ]
  },
  {
    "id": 5088,
    "title": "Sum of Three",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 5089,
    "title": "Deterministic Scheduling for Extended Reality over 5G and Beyond",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 5090,
    "title": "Hard Design",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5091,
    "title": "Counting Rhyme",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5092,
    "title": "Medium Design",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5093,
    "title": "Haunted House",
    "difficulty": "easy",
    "category": [
      "binary search",
      "greedy",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 5094,
    "title": "Simple Design",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5095,
    "title": "Dances (Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 5096,
    "title": "Dances (Easy version)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 5097,
    "title": "You Are So Beautiful",
    "difficulty": "medium",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 5098,
    "title": "Look Back",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "greedy"
    ]
  },
  {
    "id": 5099,
    "title": "In Love",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 5100,
    "title": "Raspberries",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 5101,
    "title": "Chemistry",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 5102,
    "title": "Morning",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 5103,
    "title": "Two Permutations (Hard Version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 5104,
    "title": "Two Permutations (Easy Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 5105,
    "title": "Tree XOR",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 5106,
    "title": "Card Game",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 5107,
    "title": "Sets and Union",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 5108,
    "title": "Increasing Sequence",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 5109,
    "title": "Anya and the Mysterious String",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 5110,
    "title": "Minimum Maximum Distance",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 5111,
    "title": "Block Sequence",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 5112,
    "title": "Divide and Equalize",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 5113,
    "title": "Perfect Square",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 5114,
    "title": "Three Threadlets",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 5115,
    "title": "Don't Try to Count",
    "difficulty": "easy",
    "category": [
      "brute force",
      "string"
    ]
  },
  {
    "id": 5116,
    "title": "Last Man Standing",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "number theory"
    ]
  },
  {
    "id": 5117,
    "title": "Interactive Game with Coloring",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph",
      "graph traversal",
      "implementation",
      "interactive",
      "tree"
    ]
  },
  {
    "id": 5118,
    "title": "Sum of XOR Functions",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "combinatorics",
      "divide and conquer",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 5119,
    "title": "Make it Alternating",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 5120,
    "title": "Chips on the Board",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 5121,
    "title": "Rigged!",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 5122,
    "title": "wxhtzdy ORO Tree",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force",
      "data structures",
      "graph traversal",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 5123,
    "title": "Vasilije Loves Number Theory",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5124,
    "title": "Iva & Pav",
    "difficulty": "medium",
    "category": [
      "binary search",
      "bit manipulation",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 5125,
    "title": "Reverse Madness",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 5126,
    "title": "Vasilije in Cacak",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 5127,
    "title": "Aleksa and Stack",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 5128,
    "title": "How Much Does Daytona Cost?",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 5129,
    "title": "Joyboard",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 5130,
    "title": "Goals of Victory",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 5131,
    "title": "Clubstep",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 5132,
    "title": "Indefinite Clownfish",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph"
    ]
  },
  {
    "id": 5133,
    "title": "Ball-Stackable",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 5134,
    "title": "Lexichromatography",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "graph",
      "graph traversal",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 5135,
    "title": "Autosynthesis",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5136,
    "title": "Effects of Anti Pimples",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 5137,
    "title": "Helmets in Night Light",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5138,
    "title": "Jellyfish and Mex",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 5139,
    "title": "Jellyfish and Green Apple",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5140,
    "title": "Jellyfish and Undertale",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 5141,
    "title": "Jellyfish and Inscryption",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 5142,
    "title": "Jellyfish and OEIS",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 5143,
    "title": "Jellyfish and Hack",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 5144,
    "title": "Jellyfish and Miku",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 5145,
    "title": "Jellyfish and EVA",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "greedy",
      "math",
      "probability"
    ]
  },
  {
    "id": 5146,
    "title": "Jellyfish and Math",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 5147,
    "title": "Jellyfish and Game",
    "difficulty": "medium",
    "category": [
      "brute force",
      "game theory",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5148,
    "title": "Mad City",
    "difficulty": "medium",
    "category": [
      "game theory",
      "graph",
      "graph traversal",
      "shortest path",
      "tree",
      "union find"
    ]
  },
  {
    "id": 5149,
    "title": "ABBC or BACB",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 5150,
    "title": "Money Trees",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 5151,
    "title": "Building an Aquarium",
    "difficulty": "easy",
    "category": [
      "binary search",
      "sorting"
    ]
  },
  {
    "id": 5152,
    "title": "1D Eraser",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 5153,
    "title": "Target Practice",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 5154,
    "title": "Good Kid",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5155,
    "title": "Short Sort",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 5156,
    "title": "Replace With Product",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5157,
    "title": "Selling a Menagerie",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "implementation",
      "math",
      "union find"
    ]
  },
  {
    "id": 5158,
    "title": "Data Structures Fan",
    "difficulty": "medium",
    "category": [
      "binary search",
      "bit manipulation",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 5159,
    "title": "Plus Minus Permutation",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 5160,
    "title": "Non-coprime Split",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 5161,
    "title": "The Corridor or There and Back Again",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5162,
    "title": "Two Vessels",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5163,
    "title": "Standard Graph Problem",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 5164,
    "title": "MEXanization",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 5165,
    "title": "Lazy Numbers",
    "difficulty": "hard",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 5166,
    "title": "Another MEX Problem",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "shortest path"
    ]
  },
  {
    "id": 5167,
    "title": "Prefix Purchase",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 5168,
    "title": "Colorful Table",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "implementation",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 5169,
    "title": "Friendly Arrays",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5170,
    "title": "MEXanized Array",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5171,
    "title": "2D Traveling",
    "difficulty": "easy",
    "category": [
      "geometry",
      "math",
      "shortest path",
      "sorting"
    ]
  },
  {
    "id": 5172,
    "title": "Make It Zero",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 5173,
    "title": "LIS?",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5174,
    "title": "Min-Sum-Max",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 5175,
    "title": "Flower-like Pseudotree",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 5176,
    "title": "Travel Plan",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "implementation",
      "math",
      "tree"
    ]
  },
  {
    "id": 5177,
    "title": "Candy Party (Hard Version)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "dynamic programming",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5178,
    "title": "Candy Party (Easy Version)",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "graph",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5179,
    "title": "Fill in the Matrix",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 5180,
    "title": "Most Different Tree",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph traversal",
      "greedy",
      "hash table"
    ]
  },
  {
    "id": 5181,
    "title": "Salyg1n and Array (hard version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "interactive"
    ]
  },
  {
    "id": 5182,
    "title": "Salyg1n and Array (simple version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "interactive",
      "math"
    ]
  },
  {
    "id": 5183,
    "title": "Cyclic Operations",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5184,
    "title": "Salyg1n and the MEX Game",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "game theory",
      "greedy",
      "interactive"
    ]
  },
  {
    "id": 5185,
    "title": "XOR Palindromes",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "string"
    ]
  },
  {
    "id": 5186,
    "title": "green_gold_dog, array and permutation",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "sorting"
    ]
  },
  {
    "id": 5187,
    "title": "Mighty Rock Tower",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 5188,
    "title": "Lihmuf Balling",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "math"
    ]
  },
  {
    "id": 5189,
    "title": "Keen Tree Calculation",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "geometry",
      "graph",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 5190,
    "title": "Jackets and Packets",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 5191,
    "title": "Imagination Castle",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory",
      "two pointers"
    ]
  },
  {
    "id": 5192,
    "title": "Happy Sets",
    "difficulty": "hard",
    "category": [
      "combinatorics"
    ]
  },
  {
    "id": 5193,
    "title": "Grouped Carriages",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "max flow"
    ]
  },
  {
    "id": 5194,
    "title": "Freak Joker Process",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 5195,
    "title": "Elevators of Tamem",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 5196,
    "title": "Digital Wallet",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 5197,
    "title": "Completely Searching for Inversions",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 5198,
    "title": "Battling with Numbers",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5199,
    "title": "Ambitious Kid",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 5200,
    "title": "Future Dominators",
    "difficulty": "hard",
    "category": [
      "graph",
      "greedy"
    ]
  },
  {
    "id": 5201,
    "title": "Asterism Stream",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "matrix"
    ]
  },
  {
    "id": 5202,
    "title": "Magic Square",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 5203,
    "title": "Exotic Queries",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 5204,
    "title": "Guess Game",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "game theory",
      "math",
      "probability",
      "sorting",
      "string",
      "tree"
    ]
  },
  {
    "id": 5205,
    "title": "Matrix Cascade",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5206,
    "title": "Divisor Chain",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5207,
    "title": "Swap and Reverse",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting",
      "string"
    ]
  },
  {
    "id": 5208,
    "title": "Increasing and Decreasing",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5209,
    "title": "Redundant Routes",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 5210,
    "title": "Goldberg Machine 3",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 5211,
    "title": "Swaps",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph",
      "math"
    ]
  },
  {
    "id": 5212,
    "title": "Divide, XOR, and Conquer",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 5213,
    "title": "Speedrun",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 5214,
    "title": "Two-Colored Dominoes",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 5215,
    "title": "MEX Repetition",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 5216,
    "title": "Split Sort",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 5217,
    "title": "Channel",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5218,
    "title": "The Great Equalizer",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "math",
      "sorting"
    ]
  },
  {
    "id": 5219,
    "title": "Magic Will Save the World",
    "difficulty": "medium",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 5220,
    "title": "Kolya and Movie Theatre",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 5221,
    "title": "Ice Cream Balls",
    "difficulty": "medium",
    "category": [
      "binary search",
      "combinatorics",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 5222,
    "title": "Flower City Fence",
    "difficulty": "easy",
    "category": [
      "binary search",
      "data structures",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 5223,
    "title": "Sequence Game",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 5224,
    "title": "Gift Carpet",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 5225,
    "title": "Four Suits",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "greedy",
      "max flow"
    ]
  },
  {
    "id": 5226,
    "title": "Non-Intersecting Subpermutations",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5227,
    "title": "Sorting By Multiplication",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 5228,
    "title": "Queries for the Array",
    "difficulty": "medium",
    "category": [
      "data structures",
      "graph traversal",
      "implementation",
      "string",
      "tree"
    ]
  },
  {
    "id": 5229,
    "title": "Two Binary Strings",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 5230,
    "title": "Prime Deletion",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 5231,
    "title": "Evaluate RBS",
    "difficulty": "hard",
    "category": [
      "data structures",
      "geometry",
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 5232,
    "title": "Fast Travel Text Editor",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 5233,
    "title": "Balanced String",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 5234,
    "title": "Game on Permutation",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 5235,
    "title": "Fancy Coins",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5236,
    "title": "Not a Substring",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "string"
    ]
  },
  {
    "id": 5237,
    "title": "Teleportation in Byteland",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "graph",
      "graph traversal",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 5238,
    "title": "Maximum Monogonosity",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 5239,
    "title": "Andrey and Escape from Capygrad",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 5240,
    "title": "Another Permutation Problem",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5241,
    "title": "Olya and Game with Arrays",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 5242,
    "title": "United We Stand",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5243,
    "title": "Rollbacks (Hard Version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "interactive",
      "tree"
    ]
  },
  {
    "id": 5244,
    "title": "Rollbacks (Easy Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 5245,
    "title": "Trees and Segments",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 5246,
    "title": "Yet Another Permutation Problem",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5247,
    "title": "The Walkway",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5248,
    "title": "Buttons",
    "difficulty": "easy",
    "category": [
      "game theory",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5249,
    "title": "Counting Graphs",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "divide and conquer",
      "graph",
      "greedy",
      "sorting",
      "tree",
      "union find"
    ]
  },
  {
    "id": 5250,
    "title": "Sum and Product",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "math"
    ]
  },
  {
    "id": 5251,
    "title": "Power of Points",
    "difficulty": "medium",
    "category": [
      "math",
      "sorting"
    ]
  },
  {
    "id": 5252,
    "title": "Strong Vertices",
    "difficulty": "medium",
    "category": [
      "math",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 5253,
    "title": "Assembly via Minimums",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5254,
    "title": "Maximum Rounding",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5255,
    "title": "Array Coloring",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 5256,
    "title": "PermuTree (hard version)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "fast fourier transform",
      "graph traversal",
      "greedy",
      "implementation",
      "math",
      "tree"
    ]
  },
  {
    "id": 5257,
    "title": "PermuTree (easy version)",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 5258,
    "title": "More Wrong",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "interactive"
    ]
  },
  {
    "id": 5259,
    "title": "To Become Max",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 5260,
    "title": "Good Arrays",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 5261,
    "title": "Tales of a Sort",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 5262,
    "title": "Longest Divisors Interval",
    "difficulty": "easy",
    "category": [
      "brute force",
      "combinatorics",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5263,
    "title": "Dalton the Teacher",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 5264,
    "title": "Mark and Spaceship",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 5265,
    "title": "Game Bundles",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5266,
    "title": "Michael and Hotel",
    "difficulty": "hard",
    "category": [
      "binary search",
      "interactive",
      "tree"
    ]
  },
  {
    "id": 5267,
    "title": "Expected Destruction",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 5268,
    "title": "Earn or Unlock",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 5269,
    "title": "Dual (Hard Version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 5270,
    "title": "Dual (Easy Version)",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 5271,
    "title": "Fibonaccharsis",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "math"
    ]
  },
  {
    "id": 5272,
    "title": "Desorting",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5273,
    "title": "Panda Meetups",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "max flow"
    ]
  },
  {
    "id": 5274,
    "title": "Rivalries",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 5275,
    "title": "Miriany and Matchstick",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 5276,
    "title": "Ina of the Mountain",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5277,
    "title": "Imbalanced Arrays",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy",
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 5278,
    "title": "Ntarsis' Set",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5279,
    "title": "Vlad and the Mountains",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph",
      "implementation",
      "sorting",
      "tree",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 5280,
    "title": "Lisa and the Martians",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "greedy",
      "math",
      "string",
      "tree"
    ]
  },
  {
    "id": 5281,
    "title": "Nastya and Potions",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "sorting"
    ]
  },
  {
    "id": 5282,
    "title": "Prefix Permutation Sums",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 5283,
    "title": "Tiles Comeback",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 5284,
    "title": "Parity Sort",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 5285,
    "title": "Escalator Conversations",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 5286,
    "title": "The Third Letter",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 5287,
    "title": "The Morning Star",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "data structures",
      "geometry",
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 5288,
    "title": "We Were Both Children",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5289,
    "title": "Cardboard for Pictures",
    "difficulty": "easy",
    "category": [
      "binary search",
      "geometry",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5290,
    "title": "Balanced Round",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 5291,
    "title": "Word on the Paper",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 5292,
    "title": "Ten Words of Wisdom",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 5293,
    "title": "To My Critics",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 5294,
    "title": "XOR Partition",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "data structures",
      "divide and conquer",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 5295,
    "title": "Max to the Right of Min",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 5296,
    "title": "Array Painting",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 5297,
    "title": "Binary String Copying",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "hash table",
      "string"
    ]
  },
  {
    "id": 5298,
    "title": "Monsters",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 5299,
    "title": "Morning Sandwich",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 5300,
    "title": "Vika and Wiki",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "combinatorics",
      "divide and conquer",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 5301,
    "title": "Vika and Stone Skipping",
    "difficulty": "hard",
    "category": [
      "brute force",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5302,
    "title": "Vika and Bonuses",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "math",
      "ternary search"
    ]
  },
  {
    "id": 5303,
    "title": "Vika and Price Tags",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 5304,
    "title": "Vika and the Bridge",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 5305,
    "title": "Vika and Her Friends",
    "difficulty": "easy",
    "category": [
      "game theory",
      "math"
    ]
  },
  {
    "id": 5306,
    "title": "The Boss's Identity",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "data structures",
      "graph traversal",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 5307,
    "title": "Triangle Platinum?",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "implementation",
      "interactive",
      "math",
      "probability"
    ]
  },
  {
    "id": 5308,
    "title": "Professor Higashikata",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "implementation",
      "string",
      "union find"
    ]
  },
  {
    "id": 5309,
    "title": "Vampiric Powers, anyone?",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 5310,
    "title": "Hamon Odyssey",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 5311,
    "title": "The Man who became a God ",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5312,
    "title": "Rudolf and CodeVid-23",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "graph",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 5313,
    "title": "Rudolph and Mimic",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation",
      "interactive"
    ]
  },
  {
    "id": 5314,
    "title": "Rudolf and Snowflakes (hard version)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5315,
    "title": "Rudolf and Snowflakes (simple version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5316,
    "title": "Rudolph and Christmas Tree",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "geometry",
      "math"
    ]
  },
  {
    "id": 5317,
    "title": "Rudolf and the Another Competition",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5318,
    "title": "Rudolph and Tic-Tac-Toe",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 5319,
    "title": "Rudolph and Cut the Rope ",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 5320,
    "title": "Swimmers in the Pool",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "fast fourier transform",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5321,
    "title": "Boxes and Balls",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5322,
    "title": "Rating System",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy",
      "math",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 5323,
    "title": "Strong Password",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy",
      "string"
    ]
  },
  {
    "id": 5324,
    "title": "Come Together",
    "difficulty": "easy",
    "category": [
      "geometry",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5325,
    "title": "Forbidden Integer",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5326,
    "title": "Multiple of Three Cycles",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "dynamic programming",
      "math",
      "union find"
    ]
  },
  {
    "id": 5327,
    "title": "Tree Weights",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "data structures",
      "graph traversal",
      "implementation",
      "math",
      "matrix",
      "number theory",
      "tree"
    ]
  },
  {
    "id": 5328,
    "title": "Min Cost Permutation (Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 5329,
    "title": "Min Cost Permutation (Easy Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5330,
    "title": "Great Grids",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "constructive algorithms",
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 5331,
    "title": "Row Major",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "number theory",
      "string"
    ]
  },
  {
    "id": 5332,
    "title": "Particles",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5333,
    "title": "Permutations & Primes",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 5334,
    "title": "Subtraction Game",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "game theory"
    ]
  },
  {
    "id": 5335,
    "title": "Omsk Metro (hard version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "graph traversal",
      "math",
      "tree"
    ]
  },
  {
    "id": 5336,
    "title": "Omsk Metro (simple version)",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "math",
      "tree"
    ]
  },
  {
    "id": 5337,
    "title": "Tracking Segments",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "two pointers"
    ]
  },
  {
    "id": 5338,
    "title": "Apple Tree",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph traversal",
      "math",
      "tree"
    ]
  },
  {
    "id": 5339,
    "title": "Sum in Binary Tree",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "combinatorics",
      "math",
      "tree"
    ]
  },
  {
    "id": 5340,
    "title": "Long Long",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 5341,
    "title": "Sasha and Array Coloring",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 5342,
    "title": "Tenzing and Necklace",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 5343,
    "title": "Tenzing and Random Real Numbers",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "graph",
      "math",
      "probability"
    ]
  },
  {
    "id": 5344,
    "title": "Tenzing and Random Operations",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 5345,
    "title": "Tenzing and Tree",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "greedy",
      "shortest path",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 5346,
    "title": "Tenzing and Triangle",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "geometry",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5347,
    "title": "Tenzing and His Animal Friends ",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy"
    ]
  },
  {
    "id": 5348,
    "title": "Tenzing and Balls",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 5349,
    "title": "Tenzing and Books",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5350,
    "title": "Tenzing and Tsondu",
    "difficulty": "easy",
    "category": [
      "game theory",
      "math"
    ]
  },
  {
    "id": 5351,
    "title": "Monocarp and a Strategic Game",
    "difficulty": "hard",
    "category": [
      "geometry",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 5352,
    "title": "Fill the Matrix",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5353,
    "title": "Pairs of Segments",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 5354,
    "title": "Ranom Numbers",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 5355,
    "title": "Keep it Beautiful",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 5356,
    "title": "Game with Board",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "game theory"
    ]
  },
  {
    "id": 5357,
    "title": "In Search of Truth (Hard Version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "interactive",
      "math",
      "meet in the middle",
      "probability"
    ]
  },
  {
    "id": 5358,
    "title": "In Search of Truth (Easy Version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "interactive",
      "math",
      "meet in the middle",
      "probability"
    ]
  },
  {
    "id": 5359,
    "title": "Railguns",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 5360,
    "title": "Character Blocking",
    "difficulty": "medium",
    "category": [
      "data structures",
      "hash table",
      "implementation"
    ]
  },
  {
    "id": 5361,
    "title": "Wooden Toy Festival",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5362,
    "title": "Ski Resort",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 5363,
    "title": "Binary Cafe",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 5364,
    "title": "Cipher Shifer",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 5365,
    "title": "Decreasing Game",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "interactive"
    ]
  },
  {
    "id": 5366,
    "title": "Ball Sorting",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 5367,
    "title": "Insert Zero and Invert Prefix",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 5368,
    "title": "Lamps",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5369,
    "title": "The Good Array",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5370,
    "title": "Stuck Conveyor",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "interactive"
    ]
  },
  {
    "id": 5371,
    "title": "Count Supersequences",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 5372,
    "title": "Bracket Walk",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "string"
    ]
  },
  {
    "id": 5373,
    "title": "No Prime Differences",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5374,
    "title": "Minimize Permutation Subarrays",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 5375,
    "title": "Blackboard List",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 5376,
    "title": "Editorial for Two",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5377,
    "title": "Playoff Fixing",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "tree"
    ]
  },
  {
    "id": 5378,
    "title": "Bracket Coloring",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 5379,
    "title": "Best Binary String",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 5380,
    "title": "Comparison String",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 5381,
    "title": "Grasshopper on a Line",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 5382,
    "title": "Astrophysicists",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 5383,
    "title": "Destroyer",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 5384,
    "title": "Good Graph",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "graph",
      "graph matching",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 5385,
    "title": "Old Mobile",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "probability"
    ]
  },
  {
    "id": 5386,
    "title": "Doctor's Brown Hypothesis",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5387,
    "title": "Twin Clusters",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "math",
      "probability"
    ]
  },
  {
    "id": 5388,
    "title": "Lottery",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 5389,
    "title": "k-th equality",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5390,
    "title": "Typewriter",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 5391,
    "title": "MEX of LCM",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5392,
    "title": "Survey in Class",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 5393,
    "title": "Game with Reversing",
    "difficulty": "medium",
    "category": [
      "game theory",
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 5394,
    "title": "Maximum Strength",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 5395,
    "title": "Unit Array",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 5396,
    "title": "Ksyusha and Chinchilla",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "implementation",
      "tree",
      "union find"
    ]
  },
  {
    "id": 5397,
    "title": "Ira and Flamenco",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "data structures",
      "implementation",
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 5398,
    "title": "Round Dance",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "shortest path",
      "union find"
    ]
  },
  {
    "id": 5399,
    "title": "Flipper",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 5400,
    "title": "Vlad Building Beautiful Array",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 5401,
    "title": "Restore the Weather",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5402,
    "title": "Musical Puzzle",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 5403,
    "title": "Zombies",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming"
    ]
  },
  {
    "id": 5404,
    "title": "Combinatorics Problem",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 5405,
    "title": "Red-Blue Operations (Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5406,
    "title": "Red-Blue Operations (Easy Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5407,
    "title": "Contrast Value",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5408,
    "title": "Maximum Sum",
    "difficulty": "easy",
    "category": [
      "brute force",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 5409,
    "title": "New Palindrome",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 5410,
    "title": "Array merging",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 5411,
    "title": "Twin Permutations",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 5412,
    "title": "The Third Grace",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 5413,
    "title": "Bully Sort",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math"
    ]
  },
  {
    "id": 5414,
    "title": "Mex Tree",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 5415,
    "title": "Hyperregular Bracket Strings",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "greedy",
      "hash table",
      "math",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 5416,
    "title": "The BOSS Can Count Pairs",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 5417,
    "title": "Copil Copac Draws Trees",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 5418,
    "title": "Don't Blame Me",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 5419,
    "title": "Hits Different",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5420,
    "title": "Forever Winter",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 5421,
    "title": "The Lakes",
    "difficulty": "easy",
    "category": [
      "graph",
      "graph traversal",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 5422,
    "title": "Gold Rush",
    "difficulty": "easy",
    "category": [
      "brute force",
      "dynamic programming",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 5423,
    "title": "Mr. Perfectly Fine",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5424,
    "title": "Blank Space",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 5425,
    "title": "Love Story",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 5426,
    "title": "Permutation Swap",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 5427,
    "title": "Divisible Array",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 5428,
    "title": "Copium Permutation",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 5429,
    "title": "Bus Routes",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 5430,
    "title": "Two Centroids",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 5431,
    "title": "Palindrome Partition",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "dynamic programming",
      "hash table",
      "string"
    ]
  },
  {
    "id": 5432,
    "title": "Range Sorting (Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 5433,
    "title": "Range Sorting (Easy Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy",
      "tree",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 5434,
    "title": "Counting Orders",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 5435,
    "title": "Fading into Fog",
    "difficulty": "hard",
    "category": [
      "geometry",
      "interactive",
      "math",
      "probability"
    ]
  },
  {
    "id": 5436,
    "title": "Walk the Runway",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "data structures",
      "dynamic programming",
      "graph",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 5437,
    "title": "Running Miles",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 5438,
    "title": "Dreaming of Freedom",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5439,
    "title": "Lunatic Never Content",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 5440,
    "title": "Trust Nobody",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 5441,
    "title": "LuoTianyi and the Table",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 5442,
    "title": "LuoTianyi and the Palindrome String",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 5443,
    "title": "LuoTianyi and Cartridge",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 5444,
    "title": "LuoTianyi and the Function",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 5445,
    "title": "LuoTianyi and XOR-Tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree",
      "union find"
    ]
  },
  {
    "id": 5446,
    "title": "LuoTianyi and the Floating Islands (Hard Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "graph traversal",
      "math",
      "probability",
      "tree"
    ]
  },
  {
    "id": 5447,
    "title": "LuoTianyi and the Floating Islands (Easy Version)",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math",
      "probability",
      "tree"
    ]
  },
  {
    "id": 5448,
    "title": "LuoTianyi and the Show",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5449,
    "title": "Random Walk",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "math",
      "probability",
      "tree"
    ]
  },
  {
    "id": 5450,
    "title": "Removing Graph",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "game theory",
      "graph",
      "math"
    ]
  },
  {
    "id": 5451,
    "title": "Unique Palindromes",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math",
      "string"
    ]
  },
  {
    "id": 5452,
    "title": "Strongly Composite",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5453,
    "title": "Sort with Step",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math",
      "sorting"
    ]
  },
  {
    "id": 5454,
    "title": "A-characteristic",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 5455,
    "title": "Magic Triples (Hard Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5456,
    "title": "Magic Triples (Easy Version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5457,
    "title": "Gardening Friends",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 5458,
    "title": "Making Anti-Palindromes",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 5459,
    "title": "Super-Permutation",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 5460,
    "title": "Bun Lover",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 5461,
    "title": "Karina and Array",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 5462,
    "title": "TubeTube Feed",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 5463,
    "title": "Timber",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 5464,
    "title": "Rearrange Brackets",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "sorting",
      "string"
    ]
  },
  {
    "id": 5465,
    "title": "Black Cells",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5466,
    "title": "Tear It Apart",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "math",
      "string"
    ]
  },
  {
    "id": 5467,
    "title": "Sort the Subarray",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 5468,
    "title": "Matching",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 5469,
    "title": "JoJo's Incredible Adventures",
    "difficulty": "easy",
    "category": [
      "math",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 5470,
    "title": "Yura's New Name",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 5471,
    "title": "Willy-nilly, Crack, Into Release!",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 5472,
    "title": "Roads in E City",
    "difficulty": "hard",
    "category": [
      "interactive",
      "math",
      "probability",
      "tree"
    ]
  },
  {
    "id": 5473,
    "title": "Misha and Apples",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 5474,
    "title": "The Fox and the Complete Tree Traversal",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "implementation",
      "math",
      "tree"
    ]
  },
  {
    "id": 5475,
    "title": "The Butcher",
    "difficulty": "hard",
    "category": [
      "geometry",
      "greedy",
      "implementation",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 5476,
    "title": "Constructive Problem",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 5477,
    "title": "Indivisible",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 5478,
    "title": "Politics",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5479,
    "title": "Entangled Substrings",
    "difficulty": "hard",
    "category": [
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 5480,
    "title": "Half-sum",
    "difficulty": "hard",
    "category": [
      "brute force",
      "divide and conquer",
      "greedy"
    ]
  },
  {
    "id": 5481,
    "title": "Toy Machine",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "game theory",
      "implementation"
    ]
  },
  {
    "id": 5482,
    "title": "Similar Polynomials",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 5483,
    "title": "Fish Graph",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 5484,
    "title": "Almost Increasing Subsequence",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 5485,
    "title": "Grid Reconstruction",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 5486,
    "title": "Ian Visits Mary",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "geometry",
      "number theory"
    ]
  },
  {
    "id": 5487,
    "title": "OH NO1 (-2-3-4)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "math"
    ]
  },
  {
    "id": 5488,
    "title": "Bosco and Particle",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "number theory",
      "string"
    ]
  },
  {
    "id": 5489,
    "title": "XOR Counting",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 5490,
    "title": "Between",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 5491,
    "title": "Sum Graph",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph",
      "implementation",
      "interactive",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 5492,
    "title": "Ian and Array Sorting",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 5493,
    "title": "Communication Towers",
    "difficulty": "hard",
    "category": [
      "brute force",
      "divide and conquer",
      "union find"
    ]
  },
  {
    "id": 5494,
    "title": "Chain Chips",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 5495,
    "title": "Balancing Weapons",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 5496,
    "title": "Search in Parallel",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5497,
    "title": "Long Legs",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 5498,
    "title": "Coins",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 5499,
    "title": "Unmysterious Language",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "special problem",
      "string"
    ]
  },
  {
    "id": 5500,
    "title": "Mountain Climber",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 5501,
    "title": "Expected Twist",
    "difficulty": "easy",
    "category": [
      "interactive",
      "special problem"
    ]
  },
  {
    "id": 5502,
    "title": "Colour Vision",
    "difficulty": "easy",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 5503,
    "title": "Factorization",
    "difficulty": "easy",
    "category": [
      "number theory",
      "special problem"
    ]
  },
  {
    "id": 5504,
    "title": "Not a Geometry Problem",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "geometry",
      "math",
      "special problem"
    ]
  },
  {
    "id": 5505,
    "title": "Trivial Conjecture",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math",
      "number theory",
      "special problem"
    ]
  },
  {
    "id": 5506,
    "title": "Digits",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 5507,
    "title": "Was it Rated?",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 5508,
    "title": "Are You a Robot?",
    "difficulty": "easy",
    "category": [
      "parsing",
      "special problem",
      "string"
    ]
  },
  {
    "id": 5509,
    "title": "Vlad and the Nice Paths (hard version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "combinatorics",
      "data structures",
      "dynamic programming",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 5510,
    "title": "Vlad and the Nice Paths (easy version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 5511,
    "title": "Is It Flower?",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 5512,
    "title": "Living Sequence",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5513,
    "title": "Umka and a Long Flight",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5514,
    "title": "Restore the Array",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 5515,
    "title": "Conveyor Belts",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 5516,
    "title": "Insert Digit",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 5517,
    "title": "Last Number",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 5518,
    "title": "The Maximum Prefix",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 5519,
    "title": "M-tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 5520,
    "title": "Monsters",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "graph",
      "graph traversal",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 5521,
    "title": "Climbing the Tree",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 5522,
    "title": "Make It Permutation",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5523,
    "title": "Candies",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5524,
    "title": "Beautiful Sequence",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 5525,
    "title": "Prediction",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 5526,
    "title": "Traveling in Berland",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5527,
    "title": "Two Tanks",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5528,
    "title": "Binary String Sorting",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 5529,
    "title": "Sum on Subarrays",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5530,
    "title": "Points on Plane",
    "difficulty": "easy",
    "category": [
      "binary search",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5531,
    "title": "Garland",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 5532,
    "title": "Minibuses on Venus (hard version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 5533,
    "title": "Minibuses on Venus (medium version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "divide and conquer",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 5534,
    "title": "Minibuses on Venus (easy version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "divide and conquer",
      "dynamic programming"
    ]
  },
  {
    "id": 5535,
    "title": "Petya, Petya, Petr, and Palindromes",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "two pointers"
    ]
  },
  {
    "id": 5536,
    "title": "Unlucky Numbers",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5537,
    "title": "Playing in a Casino",
    "difficulty": "medium",
    "category": [
      "math",
      "sorting"
    ]
  },
  {
    "id": 5538,
    "title": "Lucky Numbers",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 5539,
    "title": "Subsequence Addition (Hard Version)",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 5540,
    "title": "Subsequence Addition (Easy Version)",
    "difficulty": "easy",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 5541,
    "title": "Bouncy Ball",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 5542,
    "title": "Interview",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation",
      "interactive"
    ]
  },
  {
    "id": 5543,
    "title": "Odd Queries",
    "difficulty": "easy",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 5544,
    "title": "Find and Replace",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 5545,
    "title": "Grab the Candies",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 5546,
    "title": "Plus or Minus",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 5547,
    "title": "GCD Master (hard version)",
    "difficulty": "hard",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 5548,
    "title": "GCD Master (easy version)",
    "difficulty": "hard",
    "category": [
      "greedy",
      "math",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 5549,
    "title": "Tree Master",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 5550,
    "title": "DSU Master",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "union find"
    ]
  },
  {
    "id": 5551,
    "title": "Sequence Master",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 5552,
    "title": "Mex Master",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 5553,
    "title": "Walking Master",
    "difficulty": "easy",
    "category": [
      "geometry",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5554,
    "title": "Survival of the Weakest (hard version)",
    "difficulty": "hard",
    "category": [
      "greedy",
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 5555,
    "title": "Survival of the Weakest (easy version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 5556,
    "title": "There Should Be a Lot of Maximums",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "graph traversal",
      "tree",
      "two pointers"
    ]
  },
  {
    "id": 5557,
    "title": "A Wide, Wide Graph",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 5558,
    "title": "Place for a Selfie",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "geometry",
      "math"
    ]
  },
  {
    "id": 5559,
    "title": "The String Has a Target",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 5560,
    "title": "We Need the Zero",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "brute force"
    ]
  },
  {
    "id": 5561,
    "title": "Code Lock",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 5562,
    "title": "Flow Control",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 5563,
    "title": "Approximate Diameter",
    "difficulty": "hard",
    "category": [
      "binary search",
      "divide and conquer",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 5564,
    "title": "Routing",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 5565,
    "title": "Accommodation",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5566,
    "title": "Pull Your Luck",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5567,
    "title": "Vaccination",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5568,
    "title": "Lame King",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 5569,
    "title": "Settlement of Guinea Pigs",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5570,
    "title": "Likes",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5571,
    "title": "A task for substrings",
    "difficulty": "hard",
    "category": [
      "data structures",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 5572,
    "title": "Another n-dimensional chocolate bar",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "meet in the middle",
      "number theory"
    ]
  },
  {
    "id": 5573,
    "title": "Gasoline prices",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "hash table",
      "tree",
      "union find"
    ]
  },
  {
    "id": 5574,
    "title": "The way home",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "graph",
      "greedy",
      "shortest path",
      "sorting"
    ]
  },
  {
    "id": 5575,
    "title": "Music Festival",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5576,
    "title": "Buying gifts",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5577,
    "title": "The Very Beautiful Blanket",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms"
    ]
  },
  {
    "id": 5578,
    "title": "Symmetree",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "hash table",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 5579,
    "title": "Dasha and Nightmares",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "hash table",
      "meet in the middle",
      "string"
    ]
  },
  {
    "id": 5580,
    "title": "Unforgivable Curse (hard version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy",
      "string",
      "union find"
    ]
  },
  {
    "id": 5581,
    "title": "Unforgivable Curse (easy version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph",
      "greedy",
      "string",
      "union find"
    ]
  },
  {
    "id": 5582,
    "title": "Remove Two Letters",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "hash table",
      "string"
    ]
  },
  {
    "id": 5583,
    "title": "Powering the Hero (hard version)",
    "difficulty": "easy",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 5584,
    "title": "Powering the Hero (easy version)",
    "difficulty": "easy",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 5585,
    "title": "Count the Number of Pairs",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 5586,
    "title": "Is It a Cat?",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 5587,
    "title": "Tree Cutting",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "graph traversal"
    ]
  },
  {
    "id": 5588,
    "title": "Count Voting",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 5589,
    "title": "Halve or Subtract",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5590,
    "title": "City Union",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "geometry",
      "graph traversal",
      "greedy",
      "implementation",
      "math",
      "union find"
    ]
  },
  {
    "id": 5591,
    "title": "Hot Start Up (hard version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 5592,
    "title": "Hot Start Up (easy version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 5593,
    "title": "Double Lexicographically Minimum",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 5594,
    "title": "Equalize by Divide",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5595,
    "title": "Recent Actions",
    "difficulty": "easy",
    "category": [
      "data structures",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5596,
    "title": "Gifts from Grandfather Ahmed",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5597,
    "title": "Multitest Generator",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 5598,
    "title": "Shocking Arrangement",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5599,
    "title": "Candy Store",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5600,
    "title": "Three Sevens",
    "difficulty": "easy",
    "category": [
      "brute force",
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5601,
    "title": "Showstopper",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 5602,
    "title": "Li Hua and Path",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 5603,
    "title": "Li Hua and Array",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "math",
      "number theory",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 5604,
    "title": "Li Hua and Tree",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "graph traversal",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 5605,
    "title": "Li Hua and Chess",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "interactive"
    ]
  },
  {
    "id": 5606,
    "title": "Li Hua and Pattern",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 5607,
    "title": "Li Hua and Maze",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy",
      "implementation",
      "max flow"
    ]
  },
  {
    "id": 5608,
    "title": "Strange Triples",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5609,
    "title": "Colored Subgraphs",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 5610,
    "title": "Maximum Subarray",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 5611,
    "title": "Maximum Set",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 5612,
    "title": "Asterisk-Minor Template",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 5613,
    "title": "Typical Interview Problem",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 5614,
    "title": "Removal Sequences",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 5615,
    "title": "Blocking Chips",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 5616,
    "title": "Explosions?",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5617,
    "title": "Triangle Coloring",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 5618,
    "title": "Tea Tasting",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 5619,
    "title": "Ideal Point",
    "difficulty": "easy",
    "category": [
      "brute force",
      "geometry",
      "greedy"
    ]
  },
  {
    "id": 5620,
    "title": "Two Towers",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 5621,
    "title": "Labeling the Tree with Distances",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "hash table",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 5622,
    "title": "Counting Factorizations",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "divide and conquer",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5623,
    "title": "Scoring Subsequences",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 5624,
    "title": "Not Dividing",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5625,
    "title": "Prefix and Suffix Array",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 5626,
    "title": "Rebrending",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "divide and conquer",
      "implementation"
    ]
  },
  {
    "id": 5627,
    "title": "Velepin and Marketing",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 5628,
    "title": "Moscow Gorillas",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy",
      "implementation",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 5629,
    "title": "Dora and Search",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "two pointers"
    ]
  },
  {
    "id": 5630,
    "title": "Fedya and Array",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 5631,
    "title": "Yet Another Promotion",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 5632,
    "title": "Graph Coloring (hard version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "divide and conquer",
      "dynamic programming",
      "fast fourier transform",
      "graph"
    ]
  },
  {
    "id": 5633,
    "title": "Graph Coloring (easy version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph"
    ]
  },
  {
    "id": 5634,
    "title": "Divisors and Table",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "graph traversal",
      "number theory"
    ]
  },
  {
    "id": 5635,
    "title": "Fixed Prefix Permutations",
    "difficulty": "medium",
    "category": [
      "binary search",
      "bit manipulation",
      "data structures",
      "hash table",
      "math",
      "sorting"
    ]
  },
  {
    "id": 5636,
    "title": "Min Max Sort",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 5637,
    "title": "Stand-up Comedian",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 5638,
    "title": "GamingForces",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5639,
    "title": "Teleporters (Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5640,
    "title": "Teleporters (Easy Version)",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5641,
    "title": "Range Update Point Query",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures"
    ]
  },
  {
    "id": 5642,
    "title": "Negatives and Positives",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5643,
    "title": "Distinct Split",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "string"
    ]
  },
  {
    "id": 5644,
    "title": "Prepend and Append",
    "difficulty": "easy",
    "category": [
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 5645,
    "title": "Following Directions",
    "difficulty": "easy",
    "category": [
      "geometry",
      "implementation"
    ]
  },
  {
    "id": 5646,
    "title": "Codeforces Checking",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 5647,
    "title": "Tokens on Graph",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 5648,
    "title": "Timofey and Black-White Tree",
    "difficulty": "hard",
    "category": [
      "brute force",
      "divide and conquer",
      "graph",
      "graph traversal",
      "greedy",
      "math",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 5649,
    "title": "Vlad and a Pair of Numbers",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms"
    ]
  },
  {
    "id": 5650,
    "title": "Matryoshkas",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5651,
    "title": "Premutation",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5652,
    "title": "Taisia and Dice",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 5653,
    "title": "Polycarp and the Day of Pi",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math",
      "string"
    ]
  },
  {
    "id": 5654,
    "title": "Serval and Brain Power",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 5655,
    "title": "Serval and Music Game",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5656,
    "title": "Serval and Shift-Shift-Shift",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 5657,
    "title": "Serval and Toxel's Arrays",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5658,
    "title": "Serval and Inversion Magic",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 5659,
    "title": "Serval and Mocha's Array",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5660,
    "title": "XOR, Tree, and Queries",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy",
      "implementation",
      "tree",
      "union find"
    ]
  },
  {
    "id": 5661,
    "title": "Sum Over Zero",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph traversal"
    ]
  },
  {
    "id": 5662,
    "title": "Moving Dots",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "combinatorics",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 5663,
    "title": "Matching Numbers",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5664,
    "title": "Sum of Two Numbers",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math",
      "probability"
    ]
  },
  {
    "id": 5665,
    "title": "One and Two",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5666,
    "title": "Treasure Hunt",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "two pointers"
    ]
  },
  {
    "id": 5667,
    "title": "Codeforces Scoreboard",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "geometry"
    ]
  },
  {
    "id": 5668,
    "title": "Colorful Tree Again",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "tree"
    ]
  },
  {
    "id": 5669,
    "title": "Inverse Transformation",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5670,
    "title": "The Harmonization of XOR",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5671,
    "title": "Game on Axis",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "graph",
      "graph traversal",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 5672,
    "title": "Remove the Bracket",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5673,
    "title": "Number Factorization",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5674,
    "title": "Exponential Equation",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 5675,
    "title": "Cake Assembly Line",
    "difficulty": "medium",
    "category": [
      "brute force",
      "sorting"
    ]
  },
  {
    "id": 5676,
    "title": "Alternating Deck (hard version)",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 5677,
    "title": "Non-alternating Deck (easy version)",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 5678,
    "title": "Minimums or Medians",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 5679,
    "title": "Infinite Game",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "game theory",
      "probability"
    ]
  },
  {
    "id": 5680,
    "title": "Wooden Spoon",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 5681,
    "title": "Monsters (hard version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 5682,
    "title": "Letter Exchange",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 5683,
    "title": "Monsters (easy version)",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 5684,
    "title": "Weighed Tree Radius",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 5685,
    "title": "Double Sort II",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph matching",
      "graph traversal",
      "max flow"
    ]
  },
  {
    "id": 5686,
    "title": "Game of the Year",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5687,
    "title": "Different Arrays",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 5688,
    "title": "Yet Another Tournament",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5689,
    "title": "Matrix of Differences",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 5690,
    "title": "Make it Beautiful",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math",
      "sorting"
    ]
  },
  {
    "id": 5691,
    "title": "Window Signals (hard version)",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 5692,
    "title": "Window Signals (easy version)",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 5693,
    "title": "Diverse Coloring",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "tree"
    ]
  },
  {
    "id": 5694,
    "title": "Bracket Insertion",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "tree"
    ]
  },
  {
    "id": 5695,
    "title": "Rectangle Shrinking",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 5696,
    "title": "Many Perfect Squares",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5697,
    "title": "Equal Frequencies",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation",
      "sorting",
      "string"
    ]
  },
  {
    "id": 5698,
    "title": "Going to the Cinema",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5699,
    "title": "Parallel Projection",
    "difficulty": "easy",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 5700,
    "title": "Delicious Dessert",
    "difficulty": "hard",
    "category": [
      "binary search",
      "hash table",
      "math",
      "number theory",
      "string suffix structures",
      "union find"
    ]
  },
  {
    "id": 5701,
    "title": "Three Chairs",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "combinatorics",
      "data structures",
      "dynamic programming",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 5702,
    "title": "Josuke and Complete Graph",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5703,
    "title": "Bit Guessing Game",
    "difficulty": "medium",
    "category": [
      "binary search",
      "bit manipulation",
      "constructive algorithms",
      "interactive"
    ]
  },
  {
    "id": 5704,
    "title": "GCD Partition",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5705,
    "title": "Hayato and School",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 5706,
    "title": "Olympic Team Building",
    "difficulty": "hard",
    "category": [
      "brute force",
      "meet in the middle"
    ]
  },
  {
    "id": 5707,
    "title": "The Game of the Century",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 5708,
    "title": "Xorcerer's Stones",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 5709,
    "title": "Anya's Simultaneous Exhibition",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy",
      "interactive",
      "sorting"
    ]
  },
  {
    "id": 5710,
    "title": "Boris and His Amazing Haircut",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "greedy",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 5711,
    "title": "Least Prefix Sum",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 5712,
    "title": "MKnez's ConstructiveForces Task",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 5713,
    "title": "Hall of Fame",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "string"
    ]
  },
  {
    "id": 5714,
    "title": "Maximizing Root",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "math",
      "number theory",
      "tree"
    ]
  },
  {
    "id": 5715,
    "title": "The Tree Has Fallen!",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "graph traversal",
      "math",
      "tree"
    ]
  },
  {
    "id": 5716,
    "title": "Flexible String Revisit",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 5717,
    "title": "Flexible String",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "string"
    ]
  },
  {
    "id": 5718,
    "title": "The Forbidden Permutation",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 5719,
    "title": "Flip Flop Sum",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5720,
    "title": "Comfortably Numb",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "divide and conquer",
      "string",
      "tree"
    ]
  },
  {
    "id": 5721,
    "title": "Edge Reverse",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 5722,
    "title": "Score of a Tree",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "graph traversal",
      "math",
      "probability",
      "tree"
    ]
  },
  {
    "id": 5723,
    "title": "Quiz Master",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math",
      "number theory",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 5724,
    "title": "Emordnilap",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5725,
    "title": "Everybody Likes Good Arrays!",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 5726,
    "title": "Count Permutations",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 5727,
    "title": "Parmigiana With Seafood",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 5728,
    "title": "Controllers",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 5729,
    "title": "Uniform Chemistry",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 5730,
    "title": "Italian Data Centers",
    "difficulty": "hard",
    "category": [
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 5731,
    "title": "Spinach Pizza",
    "difficulty": "hard",
    "category": [
      "game theory",
      "geometry",
      "greedy",
      "interactive"
    ]
  },
  {
    "id": 5732,
    "title": "Beppa and SwerChat",
    "difficulty": "medium",
    "category": [
      "two pointers"
    ]
  },
  {
    "id": 5733,
    "title": "Another Wine Tasting Event",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "math",
      "string"
    ]
  },
  {
    "id": 5734,
    "title": "Train Splitting",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy"
    ]
  },
  {
    "id": 5735,
    "title": "Crossing the Railways",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 5736,
    "title": "Teamwork",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5737,
    "title": "Library game",
    "difficulty": "hard",
    "category": [
      "game theory",
      "greedy",
      "interactive",
      "sorting"
    ]
  },
  {
    "id": 5738,
    "title": "Vittorio Plays with LEGO Bricks",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "geometry"
    ]
  },
  {
    "id": 5739,
    "title": "Walking Boy",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 5740,
    "title": "Laboratory on Pluto",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5741,
    "title": "The Human Equation",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5742,
    "title": "Friendly Spiders",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "math",
      "number theory",
      "shortest path"
    ]
  },
  {
    "id": 5743,
    "title": "Interesting Sequence",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "math"
    ]
  },
  {
    "id": 5744,
    "title": "Gardener and the Array",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms"
    ]
  },
  {
    "id": 5745,
    "title": "Gardener and the Capybaras (hard version)",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 5746,
    "title": "Gardener and the Capybaras (easy version)",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 5747,
    "title": "Maximum Permutation",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 5748,
    "title": "Segment Covering",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 5749,
    "title": "Magician and Pigs (Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 5750,
    "title": "Magician and Pigs (Easy Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 5751,
    "title": "Two Chess Pieces",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 5752,
    "title": "Same Count One",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 5753,
    "title": "Ice and Fire",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 5754,
    "title": "Coloring",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5755,
    "title": "Add Plus Minus Sign",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 5756,
    "title": "Lisa's Sequences",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 5757,
    "title": "King's Puzzle",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 5758,
    "title": "Jumbled Trees",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 5759,
    "title": "Interactive Factorial Guessing",
    "difficulty": "hard",
    "category": [
      "brute force",
      "game theory",
      "implementation",
      "interactive"
    ]
  },
  {
    "id": 5760,
    "title": "Hot and Cold",
    "difficulty": "hard",
    "category": [
      "binary search",
      "interactive"
    ]
  },
  {
    "id": 5761,
    "title": "Game of Questions",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "fast fourier transform",
      "math",
      "probability"
    ]
  },
  {
    "id": 5762,
    "title": "Football",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 5763,
    "title": "Easy Assembly",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5764,
    "title": "Dominoes",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "graph matching",
      "greedy",
      "max flow"
    ]
  },
  {
    "id": 5765,
    "title": "Cactus Meets Torus",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 5766,
    "title": "BinCoin",
    "difficulty": "hard",
    "category": [
      "binary search",
      "divide and conquer",
      "hash table",
      "implementation",
      "probability",
      "tree"
    ]
  },
  {
    "id": 5767,
    "title": "Amazing Trick",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph matching",
      "math",
      "probability"
    ]
  },
  {
    "id": 5768,
    "title": "Gaining Rating",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "implementation",
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 5769,
    "title": "Copy of a Copy of a Copy",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 5770,
    "title": "Permutation Game",
    "difficulty": "medium",
    "category": [
      "game theory"
    ]
  },
  {
    "id": 5771,
    "title": "Absolute Sorting",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 5772,
    "title": "Different Differences",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5773,
    "title": "Matrix Rotation",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 5774,
    "title": "A+B?",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 5775,
    "title": "Hossam and Range Minimum Query",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "data structures",
      "hash table",
      "probability",
      "string",
      "tree"
    ]
  },
  {
    "id": 5776,
    "title": "Hossam and a Letter",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 5777,
    "title": "Hossam and (sub-)palindromic tree",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "graph traversal",
      "string",
      "tree"
    ]
  },
  {
    "id": 5778,
    "title": "Hossam and Trainees",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5779,
    "title": "Hossam and Friends",
    "difficulty": "medium",
    "category": [
      "binary search",
      "constructive algorithms",
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 5780,
    "title": "Hossam and Combinatorics",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "math",
      "sorting"
    ]
  },
  {
    "id": 5781,
    "title": "Koxia, Mahiru and Winter Festival",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 5782,
    "title": "Koxia and Bracket",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 5783,
    "title": "Koxia and Sequence",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5784,
    "title": "Koxia and Tree",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph traversal",
      "math",
      "probability",
      "tree",
      "union find"
    ]
  },
  {
    "id": 5785,
    "title": "Koxia and Game",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "game theory",
      "graph",
      "graph matching",
      "graph traversal",
      "implementation",
      "max flow",
      "union find"
    ]
  },
  {
    "id": 5786,
    "title": "Koxia and Number Theory",
    "difficulty": "medium",
    "category": [
      "brute force",
      "chinese remainder theorem",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5787,
    "title": "Koxia and Permutation",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 5788,
    "title": "Koxia and Whiteboards",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 5789,
    "title": "Игра в Девятку III",
    "difficulty": "hard",
    "category": [
      "brute force",
      "special problem"
    ]
  },
  {
    "id": 5790,
    "title": "Игра в Девятку II",
    "difficulty": "hard",
    "category": [
      "brute force",
      "special problem"
    ]
  },
  {
    "id": 5791,
    "title": "Игра в Девятку I",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "special problem"
    ]
  },
  {
    "id": 5792,
    "title": "Подкрутка II",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "special problem"
    ]
  },
  {
    "id": 5793,
    "title": "Подкрутка I",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 5794,
    "title": "Копирование файлов II",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "math",
      "special problem"
    ]
  },
  {
    "id": 5795,
    "title": "Копирование файлов I",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "math",
      "special problem"
    ]
  },
  {
    "id": 5796,
    "title": "Узкая дорога",
    "difficulty": "easy",
    "category": [
      "math",
      "special problem"
    ]
  },
  {
    "id": 5797,
    "title": "Wonderful Jump",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 5798,
    "title": "Partial Sorting",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5799,
    "title": "Lucky Permutation",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 5800,
    "title": "Elemental Decompress",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 5801,
    "title": "Quick Sort",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 5802,
    "title": "Greatest Convex",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5803,
    "title": "Two Subtrees",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 5804,
    "title": "Algebra Flash",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "graph",
      "math",
      "meet in the middle",
      "tree"
    ]
  },
  {
    "id": 5805,
    "title": "Playoff",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5806,
    "title": "Count Binary Strings",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 5807,
    "title": "Block Towers",
    "difficulty": "easy",
    "category": [
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5808,
    "title": "Cut the Triangle",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 5809,
    "title": "MCF",
    "difficulty": "hard",
    "category": [
      "max flow"
    ]
  },
  {
    "id": 5810,
    "title": "Decomposition",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 5811,
    "title": "Lucky Chains",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 5812,
    "title": "Hamiltonian Wall",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 5813,
    "title": "Notepad#",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 5814,
    "title": "Extremely Round",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 5815,
    "title": "Number Reduction",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 5816,
    "title": "Minimum LCM",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 5817,
    "title": "Project Manager",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 5818,
    "title": "Torus Path",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 5819,
    "title": "Hero to Zero",
    "difficulty": "hard",
    "category": [
      "graph matching",
      "math"
    ]
  },
  {
    "id": 5820,
    "title": "Infinite Chess",
    "difficulty": "hard",
    "category": [
      "implementation",
      "shortest path"
    ]
  },
  {
    "id": 5821,
    "title": "Hospital Queue",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5822,
    "title": "Guess the String",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "interactive",
      "probability"
    ]
  },
  {
    "id": 5823,
    "title": "Chemistry Lab",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "geometry",
      "probability"
    ]
  },
  {
    "id": 5824,
    "title": "Exchange",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 5825,
    "title": "Watch the Videos",
    "difficulty": "medium",
    "category": [
      "binary search",
      "constructive algorithms",
      "two pointers"
    ]
  },
  {
    "id": 5826,
    "title": "Card Guessing",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "probability"
    ]
  },
  {
    "id": 5827,
    "title": "Broken Keyboard",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 5828,
    "title": "Access Levels",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "graph matching",
      "max flow",
      "union find"
    ]
  },
  {
    "id": 5829,
    "title": "Doremy's Paint 2",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 5830,
    "title": "Doremy's Perfect DS Class (Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "interactive"
    ]
  },
  {
    "id": 5831,
    "title": "Doremy's Perfect DS Class (Medium Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "interactive"
    ]
  },
  {
    "id": 5832,
    "title": "Doremy's Perfect DS Class (Easy Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "interactive"
    ]
  },
  {
    "id": 5833,
    "title": "Doremy's Experimental Tree",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph traversal",
      "sorting",
      "tree",
      "union find"
    ]
  },
  {
    "id": 5834,
    "title": "Doremy's Number Line",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5835,
    "title": "Doremy's Pegging Game",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 5836,
    "title": "Doremy's City Construction",
    "difficulty": "medium",
    "category": [
      "graph",
      "greedy"
    ]
  },
  {
    "id": 5837,
    "title": "Doremy's Perfect Math Class",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 5838,
    "title": "Doremy's Paint",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 5839,
    "title": "Edge Queries",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 5840,
    "title": "Node Pairs",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5841,
    "title": "Valid Bitonic Permutations",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5842,
    "title": "Another Array Problem",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 5843,
    "title": "Incinerate",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 5844,
    "title": "Absolute Maximization",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5845,
    "title": "Unequal Adjacent Elements",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "sorting"
    ]
  },
  {
    "id": 5846,
    "title": "Good Pairs ",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 5847,
    "title": "Tree Sum",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "tree"
    ]
  },
  {
    "id": 5848,
    "title": "GCD Queries ",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "interactive",
      "number theory"
    ]
  },
  {
    "id": 5849,
    "title": "Binary Strings are Fun",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 5850,
    "title": "Make Array Good",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 5851,
    "title": "Divide and Conquer",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5852,
    "title": "Centroid Guess",
    "difficulty": "hard",
    "category": [
      "interactive",
      "probability",
      "tree"
    ]
  },
  {
    "id": 5853,
    "title": "Anti-median (Hard Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 5854,
    "title": "Anti-median (Easy Version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 5855,
    "title": "Make It Connected",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "graph",
      "greedy",
      "matrix",
      "tree",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 5856,
    "title": "Carry Bit",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 5857,
    "title": "Set Construction",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 5858,
    "title": "Elimination of a Ring",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5859,
    "title": "Two Permutations",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms"
    ]
  },
  {
    "id": 5860,
    "title": "SlavicG's Favorite Problem",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 5861,
    "title": "Quests",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5862,
    "title": "Binary Inversions",
    "difficulty": "easy",
    "category": [
      "data structures",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5863,
    "title": "Challenging Valleys",
    "difficulty": "easy",
    "category": [
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 5864,
    "title": "Advantage",
    "difficulty": "easy",
    "category": [
      "data structures",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 5865,
    "title": "Atilla's Favorite Problem",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 5866,
    "title": "Medium Number",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 5867,
    "title": "Restore the Permutation",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5868,
    "title": "All Possible Digits",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5869,
    "title": "The Humanoid",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 5870,
    "title": "Make It Round",
    "difficulty": "medium",
    "category": [
      "brute force",
      "number theory"
    ]
  },
  {
    "id": 5871,
    "title": "Thermostat",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "shortest path"
    ]
  },
  {
    "id": 5872,
    "title": "Lost Permutation",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 5873,
    "title": "Yes-Yes?",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 5874,
    "title": "Decent Division",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures"
    ]
  },
  {
    "id": 5875,
    "title": "Tick, Tock",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 5876,
    "title": "Range = √Sum",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 5877,
    "title": "Almost All Multiples",
    "difficulty": "medium",
    "category": [
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 5878,
    "title": "XOR = Average",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 5879,
    "title": "SSeeeeiinngg DDoouubbllee",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "string"
    ]
  },
  {
    "id": 5880,
    "title": "Kevin and Permutation",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5881,
    "title": "Technical Support",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 5882,
    "title": "Minecraft Series",
    "difficulty": "hard",
    "category": [
      "brute force",
      "two pointers"
    ]
  },
  {
    "id": 5883,
    "title": "N Machines",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 5884,
    "title": "The Beach",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 5885,
    "title": "Wish I Knew How to Sort",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 5886,
    "title": "Factorial Divisibility",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 5887,
    "title": "Make Nonzero Sum (hard version)",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 5888,
    "title": "Make Nonzero Sum (easy version)",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 5889,
    "title": "BinaryStringForces",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 5890,
    "title": "Doping",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 5891,
    "title": "Majority",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "string"
    ]
  },
  {
    "id": 5892,
    "title": "Bracket Cost",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "greedy",
      "string"
    ]
  },
  {
    "id": 5893,
    "title": "Count GCD",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5894,
    "title": "Complementary XOR",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 5895,
    "title": "Maximum Substring",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5896,
    "title": "Indirect Sort",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5897,
    "title": "Distance to the Path",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 5898,
    "title": "Cactus Wall",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 5899,
    "title": "Counting Arrays",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5900,
    "title": "Number Game",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "game theory",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5901,
    "title": "Death's Blessing",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 5902,
    "title": "Cowardly Rooks",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5903,
    "title": "Circular Xor Reversal",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms"
    ]
  },
  {
    "id": 5904,
    "title": "Yet Another Array Counting Problem",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "math",
      "max flow",
      "tree"
    ]
  },
  {
    "id": 5905,
    "title": "ConstructOR ",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "chinese remainder theorem",
      "combinatorics",
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5906,
    "title": "Zero-Sum Prefixes",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5907,
    "title": "Diverse Substrings",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 5908,
    "title": "The Ultimate Square",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 5909,
    "title": "List Generation",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 5910,
    "title": "Yet Another Problem",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "constructive algorithms",
      "data structures"
    ]
  },
  {
    "id": 5911,
    "title": "Swap Game",
    "difficulty": "medium",
    "category": [
      "game theory"
    ]
  },
  {
    "id": 5912,
    "title": "BAN BAN",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 5913,
    "title": "Two Groups",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 5914,
    "title": "Olympiad Training",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "geometry",
      "implementation",
      "max flow",
      "sorting"
    ]
  },
  {
    "id": 5915,
    "title": "Kazaee",
    "difficulty": "hard",
    "category": [
      "data structures",
      "hash table",
      "probability"
    ]
  },
  {
    "id": 5916,
    "title": "Joking (Hard Version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "interactive"
    ]
  },
  {
    "id": 5917,
    "title": "Joking (Easy Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "interactive",
      "ternary search"
    ]
  },
  {
    "id": 5918,
    "title": "Paths on the Tree",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "greedy",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 5919,
    "title": "Permutation Operations",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5920,
    "title": "Rebellion",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 5921,
    "title": "Maxmina",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 5922,
    "title": "MEX vs MED",
    "difficulty": "hard",
    "category": [
      "math",
      "two pointers"
    ]
  },
  {
    "id": 5923,
    "title": "Divisible Numbers (hard version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5924,
    "title": "Divisible Numbers (easy version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5925,
    "title": "Divisibility by 2^n",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 5926,
    "title": "Traffic Light",
    "difficulty": "easy",
    "category": [
      "binary search",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 5927,
    "title": "Even-Odd Increments ",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 5928,
    "title": "Number Replacement",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 5929,
    "title": "Antifibonacci Cut",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "hash table",
      "math"
    ]
  },
  {
    "id": 5930,
    "title": "Intersection and Union",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "matrix",
      "probability"
    ]
  },
  {
    "id": 5931,
    "title": "FTL",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming"
    ]
  },
  {
    "id": 5932,
    "title": "Problem with Random Tests",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "probability"
    ]
  },
  {
    "id": 5933,
    "title": "Save the Magazines",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 5934,
    "title": "Permutation Value",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 5935,
    "title": "Password",
    "difficulty": "easy",
    "category": [
      "brute force",
      "combinatorics",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5936,
    "title": "Orray",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 5937,
    "title": "Smaller",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "string"
    ]
  },
  {
    "id": 5938,
    "title": "Scuza",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5939,
    "title": "Coprime",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 5940,
    "title": "Stripes",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 5941,
    "title": "Increasing",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 5942,
    "title": "Sum",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 5943,
    "title": "Kirill and Company",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "graph",
      "graph traversal",
      "max flow",
      "shortest path"
    ]
  },
  {
    "id": 5944,
    "title": "Multi-Colored Segments",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "math",
      "sorting"
    ]
  },
  {
    "id": 5945,
    "title": "Sending a Sequence Over the Network",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 5946,
    "title": "Masha and a Beautiful Tree",
    "difficulty": "medium",
    "category": [
      "divide and conquer",
      "graph",
      "graph traversal",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 5947,
    "title": "Minimize the Thickness",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 5948,
    "title": "Funny Permutation",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 5949,
    "title": "Compare T-Shirt Sizes",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 5950,
    "title": "Arranging Crystal Balls",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "geometry",
      "graph",
      "number theory"
    ]
  },
  {
    "id": 5951,
    "title": "MEX Tree Manipulation",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 5952,
    "title": "Dangerous Laser Power",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 5953,
    "title": "Conditional Mix",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 5954,
    "title": "Hanging Hearts",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 5955,
    "title": "Knowledge Cards",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures"
    ]
  },
  {
    "id": 5956,
    "title": "Bricks and Bags",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "game theory",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5957,
    "title": "Jumbo Extra Cheese 2",
    "difficulty": "easy",
    "category": [
      "geometry",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5958,
    "title": "Factorise N+M",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "number theory"
    ]
  },
  {
    "id": 5959,
    "title": "Keyboard Design",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "dynamic programming",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 5960,
    "title": "Cleaning Robot",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 5961,
    "title": "Reset K Edges",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 5962,
    "title": "Card Game",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "dynamic programming",
      "game theory"
    ]
  },
  {
    "id": 5963,
    "title": "Array Recovery",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5964,
    "title": "Immobile Knight",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 5965,
    "title": "Palindrome Addicts",
    "difficulty": "hard",
    "category": [
      "data structures",
      "string"
    ]
  },
  {
    "id": 5966,
    "title": "Anti-Increasing Addicts",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5967,
    "title": "Connectivity Addicts",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy",
      "interactive",
      "shortest path",
      "tree",
      "union find"
    ]
  },
  {
    "id": 5968,
    "title": "Balance Addicts",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 5969,
    "title": "Permutation Addicts",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "graph",
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 5970,
    "title": "Even Number Addicts",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "game theory",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5971,
    "title": "Prefix Sum Addicts",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 5972,
    "title": "Glory Addicts",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 5973,
    "title": "Ela Takes Dancing Class",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 5974,
    "title": "Ela and Prime GCD",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 5975,
    "title": "Ela Goes Hiking",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 5976,
    "title": "Ela and the Wiring Wizard",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "graph",
      "greedy",
      "implementation",
      "shortest path"
    ]
  },
  {
    "id": 5977,
    "title": "Ela and Crickets",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "game theory",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5978,
    "title": "Ela's Fitness and the Luxury Number",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation",
      "math"
    ]
  },
  {
    "id": 5979,
    "title": "Ela Sorting Books",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 5980,
    "title": "Swap and Take",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 5981,
    "title": "Equal Binary Subsequences",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "geometry",
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 5982,
    "title": "Good Subarrays (Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 5983,
    "title": "Good Subarrays (Easy Version)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "scheduling",
      "two pointers"
    ]
  },
  {
    "id": 5984,
    "title": "Playing with GCD",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 5985,
    "title": "Make A Equal to B",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5986,
    "title": "Pebbles and Beads",
    "difficulty": "hard",
    "category": [
      "data structures",
      "geometry"
    ]
  },
  {
    "id": 5987,
    "title": "House Planning",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "graph matching",
      "greedy"
    ]
  },
  {
    "id": 5988,
    "title": "Meta-set",
    "difficulty": "medium",
    "category": [
      "brute force",
      "combinatorics",
      "data structures",
      "hash table",
      "math"
    ]
  },
  {
    "id": 5989,
    "title": "Phase Shift",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "implementation",
      "string",
      "union find"
    ]
  },
  {
    "id": 5990,
    "title": "Tea with Tangerines",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 5991,
    "title": "Working Week",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 5992,
    "title": "Zeros and Ones",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "divide and conquer",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 5993,
    "title": "Rectangular Congruence",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "number theory"
    ]
  },
  {
    "id": 5994,
    "title": "Slime Escape",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 5995,
    "title": "Removing Smallest Multiples",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 5996,
    "title": "Bright, Nice, Brilliant",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 5997,
    "title": "Select Three Sticks",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 5998,
    "title": "Conveyor",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 5999,
    "title": "Zero-One (Hard Version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 6000,
    "title": "Zero-One (Easy Version)",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6001,
    "title": "Parity Shuffle Sorting",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "sorting"
    ]
  },
  {
    "id": 6002,
    "title": "Rule of League",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 6003,
    "title": "Consecutive Sum",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6004,
    "title": "Location",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6005,
    "title": "Balance (Hard version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "number theory"
    ]
  },
  {
    "id": 6006,
    "title": "Balance (Easy version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "implementation",
      "number theory"
    ]
  },
  {
    "id": 6007,
    "title": "Sheikh (Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force",
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 6008,
    "title": "Sheikh (Easy version)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "bit manipulation",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 6009,
    "title": "Ugu",
    "difficulty": "easy",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6010,
    "title": "Bestie",
    "difficulty": "easy",
    "category": [
      "brute force",
      "combinatorics",
      "constructive algorithms",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6011,
    "title": "Function Sum",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 6012,
    "title": "Graph Cost",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6013,
    "title": "Valiant's New Map",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 6014,
    "title": "Even Subarrays",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "hash table",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6015,
    "title": "Kill Demodogs",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 6016,
    "title": "Joey Takes Money",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 6017,
    "title": "Almost Sorted",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 6018,
    "title": "Maximums and Minimums",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "divide and conquer",
      "number theory"
    ]
  },
  {
    "id": 6019,
    "title": "Prefixes and Suffixes",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 6020,
    "title": "Minimum Notation",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 6021,
    "title": "Meeting on the Line",
    "difficulty": "medium",
    "category": [
      "binary search",
      "geometry",
      "greedy",
      "implementation",
      "math",
      "ternary search"
    ]
  },
  {
    "id": 6022,
    "title": "Planets",
    "difficulty": "easy",
    "category": [
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6023,
    "title": "Cut Substrings",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "hash table",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 6024,
    "title": "Kirei and the Linear Function",
    "difficulty": "hard",
    "category": [
      "hash table",
      "math"
    ]
  },
  {
    "id": 6025,
    "title": "Guess the Cycle Size",
    "difficulty": "medium",
    "category": [
      "interactive",
      "probability"
    ]
  },
  {
    "id": 6026,
    "title": "Friends and the Restaurant",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 6027,
    "title": "Jumping on Tiles",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "string"
    ]
  },
  {
    "id": 6028,
    "title": "Decode String",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 6029,
    "title": "Two Elevators",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 6030,
    "title": "Illumination",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force",
      "combinatorics",
      "dynamic programming",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 6031,
    "title": "Fishermen",
    "difficulty": "hard",
    "category": [
      "graph matching",
      "greedy",
      "max flow"
    ]
  },
  {
    "id": 6032,
    "title": "Red-Black Pepper",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6033,
    "title": "Letter Picking",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "game theory",
      "two pointers"
    ]
  },
  {
    "id": 6034,
    "title": "Digital Logarithm",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6035,
    "title": "Best Permutation",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 6036,
    "title": "Colored Balls: Revisited",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 6037,
    "title": "Mainak and the Bleeding Polygon",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6038,
    "title": "A Certain Magical Party",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6039,
    "title": "Late For Work (submissions are not allowed)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "scheduling",
      "shortest path"
    ]
  },
  {
    "id": 6040,
    "title": "Almost Perfect",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 6041,
    "title": "Edge Split",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph",
      "graph traversal",
      "probability",
      "tree",
      "union find"
    ]
  },
  {
    "id": 6042,
    "title": "Jatayu's Balanced Bracket Sequence",
    "difficulty": "medium",
    "category": [
      "data structures",
      "graph",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 6043,
    "title": "Mainak and Interesting Sequence",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 6044,
    "title": "Mainak and Array",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 6045,
    "title": "Moving Both Hands",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 6046,
    "title": "Lemper Cooking Competition",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 6047,
    "title": "Kingdom of Criticism",
    "difficulty": "hard",
    "category": [
      "data structures",
      "union find"
    ]
  },
  {
    "id": 6048,
    "title": "Journey",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 6049,
    "title": "Imitating the Key Tree",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "tree",
      "union find"
    ]
  },
  {
    "id": 6050,
    "title": "Hot Black Hot White",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 6051,
    "title": "Garage",
    "difficulty": "medium",
    "category": [
      "binary search",
      "geometry",
      "math"
    ]
  },
  {
    "id": 6052,
    "title": "Field Photography",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 6053,
    "title": "Electrical Efficiency",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "dynamic programming",
      "math",
      "number theory",
      "tree"
    ]
  },
  {
    "id": 6054,
    "title": "Deducing Sortability",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "math"
    ]
  },
  {
    "id": 6055,
    "title": "Circular Mirror",
    "difficulty": "hard",
    "category": [
      "binary search",
      "combinatorics",
      "geometry",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 6056,
    "title": "Basketball Together",
    "difficulty": "easy",
    "category": [
      "binary search",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6057,
    "title": "Accumulation of Dominoes",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 6058,
    "title": "Even-Odd XOR",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 6059,
    "title": "L-shapes",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 6060,
    "title": "Counting Rectangles",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 6061,
    "title": "Line",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6062,
    "title": "Word Game",
    "difficulty": "easy",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 6063,
    "title": "Colourblindness",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6064,
    "title": "Spell Check",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6065,
    "title": "Matching Reduction",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph",
      "graph matching",
      "graph traversal",
      "interactive",
      "max flow"
    ]
  },
  {
    "id": 6066,
    "title": "Prefix Function Queries",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "hash table",
      "string",
      "string suffix structures",
      "tree"
    ]
  },
  {
    "id": 6067,
    "title": "Maximum AND",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "divide and conquer",
      "graph traversal",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6068,
    "title": "Min-Max Array Transformation",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 6069,
    "title": "Deadly Laser",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6070,
    "title": "Image",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6071,
    "title": "Misha and Paintings",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6072,
    "title": "Xor-Subsequence (hard version)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "dynamic programming",
      "string",
      "tree"
    ]
  },
  {
    "id": 6073,
    "title": "Xor-Subsequence (easy version)",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "string",
      "tree",
      "two pointers"
    ]
  },
  {
    "id": 6074,
    "title": "Corners",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6075,
    "title": "Interesting Sum",
    "difficulty": "easy",
    "category": [
      "brute force",
      "data structures",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 6076,
    "title": "Burenka Plays with Fractions",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 6077,
    "title": "Fighting Tournament",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 6078,
    "title": "Mathematical Circus",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 6079,
    "title": "Chip Game",
    "difficulty": "easy",
    "category": [
      "game theory",
      "math"
    ]
  },
  {
    "id": 6080,
    "title": "Burenka, an Array and Queries",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6081,
    "title": "Impressionism",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6082,
    "title": "Permutation for Burenka",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph matching",
      "greedy",
      "math",
      "tree"
    ]
  },
  {
    "id": 6083,
    "title": "Tonya and Burenka-179",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6084,
    "title": "Fibonacci Strings",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6085,
    "title": "Burenka and Traditions (hard version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 6086,
    "title": "Burenka and Traditions (easy version)",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 6087,
    "title": "Madoka and The First Session",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph matching",
      "implementation",
      "max flow"
    ]
  },
  {
    "id": 6088,
    "title": "Madoka and The Best University",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 6089,
    "title": "Madoka and The Corruption Scheme",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6090,
    "title": "Madoka and Formal Statement",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 6091,
    "title": "Madoka and Underground Competitions",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 6092,
    "title": "Madoka and Strange Thoughts",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 6093,
    "title": "Bags with Balls",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6094,
    "title": "Swap and Maximum Block",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "graph traversal"
    ]
  },
  {
    "id": 6095,
    "title": "Chip Move",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 6096,
    "title": "Robot in a Hallway",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation",
      "ternary search"
    ]
  },
  {
    "id": 6097,
    "title": "Permutation Chain",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 6098,
    "title": "2-3 Moves",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 6099,
    "title": "Crop Squares",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "geometry",
      "interactive",
      "math"
    ]
  },
  {
    "id": 6100,
    "title": "Long Way Home",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "geometry",
      "graph",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 6101,
    "title": "2+ doors",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "bit manipulation",
      "graph",
      "greedy"
    ]
  },
  {
    "id": 6102,
    "title": "Monoblock",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "data structures",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6103,
    "title": "Beautiful Array",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6104,
    "title": "Crossmarket",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6105,
    "title": "Path Prefixes",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 6106,
    "title": "Build a Tree and That Is It",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 6107,
    "title": "Add Modulo 10",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6108,
    "title": "Color with Occurrences",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy",
      "string"
    ]
  },
  {
    "id": 6109,
    "title": "Minimum  Varied Number",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 6110,
    "title": "Remove Prefix",
    "difficulty": "easy",
    "category": [
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6111,
    "title": "Everyone Loves to Sleep",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 6112,
    "title": "Lost Array",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "constructive algorithms",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 6113,
    "title": "Cross Swapping",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "data structures",
      "greedy",
      "matrix",
      "union find"
    ]
  },
  {
    "id": 6114,
    "title": "Tournament Countdown",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "interactive",
      "number theory",
      "probability"
    ]
  },
  {
    "id": 6115,
    "title": "Build Permutation",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 6116,
    "title": "Optimal Reduction",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "sorting"
    ]
  },
  {
    "id": 6117,
    "title": "Traveling Salesman Problem",
    "difficulty": "easy",
    "category": [
      "geometry",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6118,
    "title": "Triameter",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 6119,
    "title": "LCM Sum (hard version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "math",
      "number theory",
      "two pointers"
    ]
  },
  {
    "id": 6120,
    "title": "LCM Sum (easy version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "combinatorics",
      "math",
      "number theory",
      "two pointers"
    ]
  },
  {
    "id": 6121,
    "title": "Empty Graph",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 6122,
    "title": "Sort Zero",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6123,
    "title": "Woeful Permutation",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 6124,
    "title": "Wonderful Permutation",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6125,
    "title": "Party",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph"
    ]
  },
  {
    "id": 6126,
    "title": "Perfect Permutation",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 6127,
    "title": "Two Arrays",
    "difficulty": "hard",
    "category": [
      "binary search",
      "game theory",
      "graph matching"
    ]
  },
  {
    "id": 6128,
    "title": "Recover the Tree",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "tree"
    ]
  },
  {
    "id": 6129,
    "title": "XOR Triangle",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6130,
    "title": "Rain",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "geometry",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6131,
    "title": "Color the Picture",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6132,
    "title": "Multiset of Strings",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "fast fourier transform",
      "graph",
      "math",
      "max flow",
      "meet in the middle",
      "tree"
    ]
  },
  {
    "id": 6133,
    "title": "XOR Tree",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "graph traversal",
      "greedy",
      "tree",
      "union find"
    ]
  },
  {
    "id": 6134,
    "title": "Rorororobot",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6135,
    "title": "Recover an RBS",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 6136,
    "title": "Also Try Minecraft",
    "difficulty": "easy",
    "category": [
      "data structures",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 6137,
    "title": "Three Doors",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6138,
    "title": "Difference of GCDs",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 6139,
    "title": "Difference Operations",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 6140,
    "title": "Bugaboo",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "dynamic programming",
      "number theory"
    ]
  },
  {
    "id": 6141,
    "title": "Replace",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 6142,
    "title": "Partial Virtual Trees",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph traversal",
      "math",
      "tree"
    ]
  },
  {
    "id": 6143,
    "title": "DFS Trees",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "sorting",
      "tree",
      "union find"
    ]
  },
  {
    "id": 6144,
    "title": "Difference Array",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 6145,
    "title": "Doremy's IQ",
    "difficulty": "medium",
    "category": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6146,
    "title": "Qpwoeirut and Vertices",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "divide and conquer",
      "graph traversal",
      "greedy",
      "tree",
      "union find"
    ]
  },
  {
    "id": 6147,
    "title": "Chopping Carrots (Hard Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "greedy",
      "math",
      "number theory",
      "two pointers"
    ]
  },
  {
    "id": 6148,
    "title": "Chopping Carrots (Easy Version)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 6149,
    "title": "Qpwoeirut And The City",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation",
      "max flow"
    ]
  },
  {
    "id": 6150,
    "title": "Making Towers",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6151,
    "title": "Another String Minimization Problem",
    "difficulty": "easy",
    "category": [
      "2-sat",
      "constructive algorithms",
      "greedy",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 6152,
    "title": "Mark and the Online Exam",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "interactive",
      "probability"
    ]
  },
  {
    "id": 6153,
    "title": "Mark and Professor Koro",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force",
      "combinatorics",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 6154,
    "title": "Mark and Lightbulbs",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 6155,
    "title": "Mark and His Unfinished Essay",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 6156,
    "title": "Mark the Dust Sweeper",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6157,
    "title": "Mark the Photographer",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6158,
    "title": "Game of AI (hard version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 6159,
    "title": "Game of AI (easy version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "dynamic programming",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 6160,
    "title": "Mio and Lucky Array",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "fast fourier transform",
      "math",
      "string"
    ]
  },
  {
    "id": 6161,
    "title": "Colouring Game",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "game theory"
    ]
  },
  {
    "id": 6162,
    "title": "Count Seconds",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "graph",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6163,
    "title": "Magical Array",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "hash table",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6164,
    "title": "Virus",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 6165,
    "title": "Luke is a Foodie",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6166,
    "title": "Two 0-1 Sequences",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 6167,
    "title": "Good Key, Bad Key",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6168,
    "title": "Yet Another Problem About Pairs Satisfying an Inequality",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6169,
    "title": "Mirror Grid",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6170,
    "title": "Double Strings",
    "difficulty": "easy",
    "category": [
      "brute force",
      "data structures",
      "string"
    ]
  },
  {
    "id": 6171,
    "title": "Cypher",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 6172,
    "title": "ICPC Balloons",
    "difficulty": "easy",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 6173,
    "title": "YES or YES?",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 6174,
    "title": "Passable Paths (hard version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 6175,
    "title": "Passable Paths (easy version)",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 6176,
    "title": "Equate Multisets",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6177,
    "title": "Split Into Two Sets",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 6178,
    "title": "Not a Cheap String",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 6179,
    "title": "Train and Queries",
    "difficulty": "easy",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 6180,
    "title": "Polycarp Writes a String from Memory",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 6181,
    "title": "Round Down the Price",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 6182,
    "title": "Points",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "implementation",
      "math",
      "matrix"
    ]
  },
  {
    "id": 6183,
    "title": "Text Editor",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "string"
    ]
  },
  {
    "id": 6184,
    "title": "Permutation Restoration",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 6185,
    "title": "Schedule Management",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 6186,
    "title": "Permutation",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 6187,
    "title": "Grass Field",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6188,
    "title": "Puzzle",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 6189,
    "title": "Serega the Pirate",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms"
    ]
  },
  {
    "id": 6190,
    "title": "River Locks",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6191,
    "title": "Helping the Nature",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 6192,
    "title": "Palindromic Numbers ",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6193,
    "title": "Optimal Path",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6194,
    "title": "Three Days Grace",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "math",
      "number theory",
      "two pointers"
    ]
  },
  {
    "id": 6195,
    "title": "Almost Triple Deletions",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 6196,
    "title": "The Third Problem",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 6197,
    "title": "Almost Ternary Matrix",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "matrix"
    ]
  },
  {
    "id": 6198,
    "title": "The Third Three Number Problem",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 6199,
    "title": "Long Binary String",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "math",
      "matrix",
      "meet in the middle",
      "number theory"
    ]
  },
  {
    "id": 6200,
    "title": "Equal Reversal",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6201,
    "title": "PermutationForces II",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "greedy",
      "sorting",
      "tree",
      "two pointers"
    ]
  },
  {
    "id": 6202,
    "title": "Fixed Point Guessing",
    "difficulty": "medium",
    "category": [
      "binary search",
      "constructive algorithms",
      "interactive"
    ]
  },
  {
    "id": 6203,
    "title": "3SUM Closure",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures"
    ]
  },
  {
    "id": 6204,
    "title": "Rising Sand",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6205,
    "title": "XOR Mixup",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "brute force"
    ]
  },
  {
    "id": 6206,
    "title": "Too Many Constraints",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "constructive algorithms",
      "graph",
      "implementation"
    ]
  },
  {
    "id": 6207,
    "title": "Coloring",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "constructive algorithms",
      "dynamic programming",
      "geometry",
      "graph",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6208,
    "title": "Guess The String",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "interactive"
    ]
  },
  {
    "id": 6209,
    "title": "awoo's Favorite Problem",
    "difficulty": "medium",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 6210,
    "title": "Promo",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6211,
    "title": "Parkway Walk",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6212,
    "title": "Maximum Product?",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "greedy",
      "implementation",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 6213,
    "title": "Fishingprince Plays With Array Again",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "geometry",
      "math"
    ]
  },
  {
    "id": 6214,
    "title": "Tree Recovery",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph",
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 6215,
    "title": "Placing Jinas",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 6216,
    "title": "Permutation Graph",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "divide and conquer",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 6217,
    "title": "Fishingprince Plays With Array",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6218,
    "title": "NIT Destroys the Universe",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 6219,
    "title": "NIT orz!",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "greedy"
    ]
  },
  {
    "id": 6220,
    "title": "Ambiguous Dominoes",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 6221,
    "title": "Tree Queries (Hard Version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 6222,
    "title": "Tree Queries (Easy Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 6223,
    "title": "Zero Path",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "graph",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 6224,
    "title": "Circle Game",
    "difficulty": "easy",
    "category": [
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 6225,
    "title": "Subrectangle Guess",
    "difficulty": "easy",
    "category": [
      "game theory"
    ]
  },
  {
    "id": 6226,
    "title": "Paranoid String",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 6227,
    "title": "Creep",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6228,
    "title": "I Might Be Wrong",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 6229,
    "title": "Outermost Maximums",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 6230,
    "title": "Decinc Dividing",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 6231,
    "title": "Keshi in Search of AmShZ",
    "difficulty": "hard",
    "category": [
      "graph",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 6232,
    "title": "Fake Plastic Trees",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 6233,
    "title": "Directional Increase",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 6234,
    "title": "Gambling",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6235,
    "title": "2^Sort",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 6236,
    "title": "3SUM",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 6237,
    "title": "Binary Deque",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 6238,
    "title": "The Clock",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 6239,
    "title": "Where's the Bishop?",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6240,
    "title": "All Distinct",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6241,
    "title": "Marathon",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6242,
    "title": "K-Set Tree",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph traversal",
      "math",
      "tree"
    ]
  },
  {
    "id": 6243,
    "title": "Number of Groups",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "greedy",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 6244,
    "title": "Max GEQ Sum",
    "difficulty": "medium",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "divide and conquer",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 6245,
    "title": "Sum of Substrings",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 6246,
    "title": "Shoe Shuffling",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 6247,
    "title": "Beat The Odds",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6248,
    "title": "Count the Trains",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6249,
    "title": "Shifting String",
    "difficulty": "medium",
    "category": [
      "graph",
      "math",
      "number theory",
      "string"
    ]
  },
  {
    "id": 6250,
    "title": "Price Maximization",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 6251,
    "title": "Black and White Stripe",
    "difficulty": "easy",
    "category": [
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 6252,
    "title": "Restoring the Duration of Tasks",
    "difficulty": "easy",
    "category": [
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6253,
    "title": "Array Decrements",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6254,
    "title": "Print a Pedestal (Codeforces logo?)",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 6255,
    "title": "ANDfinity",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 6256,
    "title": "Lena and Matrix",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "geometry",
      "shortest path"
    ]
  },
  {
    "id": 6257,
    "title": "Infected Tree",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 6258,
    "title": "Mystic Permutation",
    "difficulty": "easy",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 6259,
    "title": "Lex String",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 6260,
    "title": "Manipulating History",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "string"
    ]
  },
  {
    "id": 6261,
    "title": "Patchouli's Magical Talisman",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6262,
    "title": "Cirno's Perfect Bitmasks Classroom",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "brute force"
    ]
  },
  {
    "id": 6263,
    "title": "Koishi's Unconscious Permutation",
    "difficulty": "hard",
    "category": [
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 6264,
    "title": "Become Big For Me",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6265,
    "title": "Cute number",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "implementation",
      "math",
      "union find"
    ]
  },
  {
    "id": 6266,
    "title": "Sanae and Giant Robot",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "greedy",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 6267,
    "title": "Railway System",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy",
      "interactive",
      "sorting"
    ]
  },
  {
    "id": 6268,
    "title": "The Enchanted Forest",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 6269,
    "title": "Odd Subarrays",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 6270,
    "title": "Everything Everywhere All But One",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 6271,
    "title": "The Ultimate LIS Problem",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 6272,
    "title": "Permutation Weight (Hard Version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 6273,
    "title": "Permutation Weight (Easy Version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 6274,
    "title": "Bring Balance",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 6275,
    "title": "Linguistics",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation",
      "sorting",
      "string"
    ]
  },
  {
    "id": 6276,
    "title": "Circular Local MiniMax",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6277,
    "title": "Hard Cut",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "divide and conquer",
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 6278,
    "title": "Euclid Guess",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph matching",
      "math",
      "max flow",
      "number theory"
    ]
  },
  {
    "id": 6279,
    "title": "Diverse Segments",
    "difficulty": "hard",
    "category": [
      "data structures",
      "two pointers"
    ]
  },
  {
    "id": 6280,
    "title": "MEX vs DIFF",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "data structures",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 6281,
    "title": "Traps",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6282,
    "title": "Column Swapping",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 6283,
    "title": "Z mod X = C",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 6284,
    "title": "Digit Minimization",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "game theory",
      "math",
      "string"
    ]
  },
  {
    "id": 6285,
    "title": "MCMF?",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "greedy",
      "max flow",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 6286,
    "title": "Unordered Swaps",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy",
      "math",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 6287,
    "title": "Circular Spanning Tree",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 6288,
    "title": "LIS or Reverse LIS?",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6289,
    "title": "AND Sorting",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "sorting"
    ]
  },
  {
    "id": 6290,
    "title": "Palindromic Indices",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 6291,
    "title": "Unique Occurrences",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 6292,
    "title": "Labyrinth Adventures",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "matrix",
      "shortest path"
    ]
  },
  {
    "id": 6293,
    "title": "Required Length",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "graph traversal",
      "hash table",
      "shortest path"
    ]
  },
  {
    "id": 6294,
    "title": "Double Sort",
    "difficulty": "medium",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 6295,
    "title": "Card Trick",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 6296,
    "title": "Game with Cards",
    "difficulty": "easy",
    "category": [
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 6297,
    "title": "Lenient Vertex Cover",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "graph",
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 6298,
    "title": "Moving Chips",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 6299,
    "title": "Dog Walking",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6300,
    "title": "Binary String",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 6301,
    "title": "Robots",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6302,
    "title": "Minimums and Maximums",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 6303,
    "title": "Formalism for Formalism",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 6304,
    "title": "Typical Party in Dorm",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 6305,
    "title": "Toss a Coin to Your Graph...",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 6306,
    "title": "Rooks Defenders",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 6307,
    "title": "Stone Age Problem",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 6308,
    "title": "AvtoBus",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6309,
    "title": "Tokitsukaze and Good 01-String (hard version)",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6310,
    "title": "Tokitsukaze and Good 01-String (easy version)",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6311,
    "title": "Tokitsukaze and All Zero Sequence",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6312,
    "title": "Tokitsukaze and Gems",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 6313,
    "title": "Tokitsukaze and Beautiful Subsegments",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 6314,
    "title": "Tokitsukaze and Permutations",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 6315,
    "title": "Tokitsukaze and Two Colorful Tapes",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 6316,
    "title": "Tokitsukaze and Meeting",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6317,
    "title": "Tokitsukaze and Strange Inequality",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 6318,
    "title": "Maximum Crossings (Hard Version)",
    "difficulty": "medium",
    "category": [
      "data structures",
      "divide and conquer",
      "sorting"
    ]
  },
  {
    "id": 6319,
    "title": "Maximum Crossings (Easy Version)",
    "difficulty": "medium",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 6320,
    "title": "White-Black Balanced Subtrees",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 6321,
    "title": "Longest Strike",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "implementation",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 6322,
    "title": "Eating Queries",
    "difficulty": "easy",
    "category": [
      "binary search",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6323,
    "title": "X-Sum",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6324,
    "title": "Most Similar Words",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "math",
      "string"
    ]
  },
  {
    "id": 6325,
    "title": "Equal Candies",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 6326,
    "title": "Lucky?",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6327,
    "title": "Sorting Pancakes",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 6328,
    "title": "Vlad and Unfinished Business",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 6329,
    "title": "Replace With the Previous, Minimize",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string",
      "union find"
    ]
  },
  {
    "id": 6330,
    "title": "Vertical Paths",
    "difficulty": "medium",
    "category": [
      "graph",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 6331,
    "title": "Detective Task",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6332,
    "title": "Make It Increasing",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6333,
    "title": "Food for Animals",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 6334,
    "title": "Remove Directed Edges",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 6335,
    "title": "Desktop Rearrangement",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6336,
    "title": "Breaking the Wall",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6337,
    "title": "A-B-C Sort",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 6338,
    "title": "Infinite Replacement",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "implementation",
      "string"
    ]
  },
  {
    "id": 6339,
    "title": "Dictionary",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 6340,
    "title": "Number Transformation",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 6341,
    "title": "Anti-Theft Road Planning",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "divide and conquer",
      "greedy",
      "interactive",
      "math"
    ]
  },
  {
    "id": 6342,
    "title": "Power or XOR?",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6343,
    "title": "Lost Arithmetic Progression",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6344,
    "title": "Palindrome Basis",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6345,
    "title": "A Perfectly Balanced String?",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "string"
    ]
  },
  {
    "id": 6346,
    "title": "Subtle Substring Subtraction",
    "difficulty": "easy",
    "category": [
      "game theory",
      "greedy",
      "string"
    ]
  },
  {
    "id": 6347,
    "title": "PermutationForces",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 6348,
    "title": "Zigu Zagu",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 6349,
    "title": "Cross Xor",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "math",
      "matrix"
    ]
  },
  {
    "id": 6350,
    "title": "Checker for Array Shuffling",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 6351,
    "title": "Array Shuffling",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy"
    ]
  },
  {
    "id": 6352,
    "title": "notepad.exe",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "interactive"
    ]
  },
  {
    "id": 6353,
    "title": "Cyclic Rotation",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 6354,
    "title": "Unequal Array",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6355,
    "title": "I love AAAB",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 6356,
    "title": "Log Chopping",
    "difficulty": "easy",
    "category": [
      "game theory",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6357,
    "title": "Permutation Counting",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 6358,
    "title": "Preorder",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "divide and conquer",
      "dynamic programming",
      "hash table",
      "sorting",
      "tree",
      "union find"
    ]
  },
  {
    "id": 6359,
    "title": "Insert a Progression",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 6360,
    "title": "Dolce Vita",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6361,
    "title": "Consecutive Points Segment",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math",
      "sorting"
    ]
  },
  {
    "id": 6362,
    "title": "String Building",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6363,
    "title": "Jee, You See?",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 6364,
    "title": "Hemose on the Tree",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 6365,
    "title": "Very Suspicious",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "geometry",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6366,
    "title": "Where is the Pizza?",
    "difficulty": "medium",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "implementation",
      "math",
      "union find"
    ]
  },
  {
    "id": 6367,
    "title": "Dorms War",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 6368,
    "title": "Prof. Slim",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 6369,
    "title": "Maximal AND",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6370,
    "title": "Fall Down",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 6371,
    "title": "Eating Candies",
    "difficulty": "easy",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 6372,
    "title": "2-Letter Strings",
    "difficulty": "medium",
    "category": [
      "data structures",
      "math",
      "string"
    ]
  },
  {
    "id": 6373,
    "title": "Colorful Stamp",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6374,
    "title": "Odd/Even Increments",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6375,
    "title": "Triple",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 6376,
    "title": "Division?",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6377,
    "title": "Social Distance",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 6378,
    "title": "Direction Change",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 6379,
    "title": "Yin Yang",
    "difficulty": "hard",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6380,
    "title": "Centroid Probabilities",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 6381,
    "title": "Edge Elimination",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 6382,
    "title": "Half Queen Cover",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 6383,
    "title": "Optimal Partition",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 6384,
    "title": "Make it Increasing",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6385,
    "title": "Labyrinth",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 6386,
    "title": "Kingdom Partition",
    "difficulty": "hard",
    "category": [
      "max flow"
    ]
  },
  {
    "id": 6387,
    "title": "Job Lookup",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 6388,
    "title": "Interactive Treasure Hunt",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "geometry",
      "interactive",
      "math"
    ]
  },
  {
    "id": 6389,
    "title": "Heroes of Might",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 6390,
    "title": "Global Warming",
    "difficulty": "hard",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 6391,
    "title": "Fancy Stack",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 6392,
    "title": "Even Split",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6393,
    "title": "Deletive Editing",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 6394,
    "title": "Connect the Points",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "geometry"
    ]
  },
  {
    "id": 6395,
    "title": "Budget Distribution",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 6396,
    "title": "Admissible Map",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 6397,
    "title": "MinimizOR",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "data structures",
      "divide and conquer",
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 6398,
    "title": "GCD Guess",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "chinese remainder theorem",
      "constructive algorithms",
      "game theory",
      "interactive",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6399,
    "title": "Tree Infection",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 6400,
    "title": "Array Cloning Technique",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6401,
    "title": "GCD vs LCM",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 6402,
    "title": "Cross-Language Program",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "special problem"
    ]
  },
  {
    "id": 6403,
    "title": "Six Characters",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "special problem",
      "string"
    ]
  },
  {
    "id": 6404,
    "title": "In Every Generation...",
    "difficulty": "easy",
    "category": [
      "special problem",
      "string"
    ]
  },
  {
    "id": 6405,
    "title": "Are You Safe?",
    "difficulty": "easy",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 6406,
    "title": "Is it rated - 3",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "special problem"
    ]
  },
  {
    "id": 6407,
    "title": "Pōja Verdon",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math",
      "special problem"
    ]
  },
  {
    "id": 6408,
    "title": "Mike's Sequence",
    "difficulty": "easy",
    "category": [
      "divide and conquer",
      "implementation",
      "math",
      "special problem"
    ]
  },
  {
    "id": 6409,
    "title": "Who Tested?",
    "difficulty": "easy",
    "category": [
      "parsing",
      "special problem",
      "tree"
    ]
  },
  {
    "id": 6410,
    "title": "Circular Maze",
    "difficulty": "easy",
    "category": [
      "brute force",
      "graph",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 6411,
    "title": "Drone Photo",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "math",
      "sorting"
    ]
  },
  {
    "id": 6412,
    "title": "Bottle Arrangements",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 6413,
    "title": "Il Derby della Madonnina",
    "difficulty": "easy",
    "category": [
      "data structures",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 6414,
    "title": "Pandemic Restrictions",
    "difficulty": "easy",
    "category": [
      "geometry",
      "ternary search"
    ]
  },
  {
    "id": 6415,
    "title": "Training Camp",
    "difficulty": "easy",
    "category": [
      "graph",
      "max flow"
    ]
  },
  {
    "id": 6416,
    "title": "Ice Cream Shop",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 6417,
    "title": "Boundary",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 6418,
    "title": "Gastronomic Event",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 6419,
    "title": "Antennas",
    "difficulty": "easy",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "implementation",
      "shortest path"
    ]
  },
  {
    "id": 6420,
    "title": "Round Table",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 6421,
    "title": "Evolution of Weasels",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 6422,
    "title": "European Trip",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "graph",
      "math",
      "matrix"
    ]
  },
  {
    "id": 6423,
    "title": "Toys",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 6424,
    "title": "Organizing SWERC",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 6425,
    "title": "Teleporters",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 6426,
    "title": "Narrow Components",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "math",
      "tree",
      "union find"
    ]
  },
  {
    "id": 6427,
    "title": "Progressions Covering",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 6428,
    "title": "Water the Trees",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6429,
    "title": "Getting Zero",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 6430,
    "title": "Array Balancing",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 6431,
    "title": "Promising String (hard version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation",
      "math",
      "string"
    ]
  },
  {
    "id": 6432,
    "title": "Promising String (easy version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "math",
      "string"
    ]
  },
  {
    "id": 6433,
    "title": "Matrix and Shifts",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6434,
    "title": "Maximum Product Strikes Back",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 6435,
    "title": "Get an Even String",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "string"
    ]
  },
  {
    "id": 6436,
    "title": "Vlad and Candies",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 6437,
    "title": "Vasya and Coins",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 6438,
    "title": "Tree and Permutation Game",
    "difficulty": "hard",
    "category": [
      "game theory",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 6439,
    "title": "AND-MEX Walk",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 6440,
    "title": "Reverse Sort Sum",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 6441,
    "title": "Line Empire",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "dynamic programming",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6442,
    "title": "Bit Flipping",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "greedy",
      "string"
    ]
  },
  {
    "id": 6443,
    "title": "Red Versus Blue",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6444,
    "title": "Juju and Binary String",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6445,
    "title": "Gojou and Matrix Game",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "game theory",
      "hash table",
      "implementation",
      "math",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 6446,
    "title": "388535 (Hard Version)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "data structures",
      "math"
    ]
  },
  {
    "id": 6447,
    "title": "388535 (Easy Version)",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "math"
    ]
  },
  {
    "id": 6448,
    "title": "Shinju and the Lost Permutation",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 6449,
    "title": "Marin and Anti-coprime Permutation",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6450,
    "title": "Marin and Photoshoot",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6451,
    "title": "Words on Tree",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "graph",
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 6452,
    "title": "Star MST",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph matching",
      "math"
    ]
  },
  {
    "id": 6453,
    "title": "For Gamers. By Gamers.",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 6454,
    "title": "Bracket Sequence Deletion",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6455,
    "title": "XY Sequence",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 6456,
    "title": "Integer Moves",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 6457,
    "title": "Neighbour Ordering",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph"
    ]
  },
  {
    "id": 6458,
    "title": "Equal LCM Subsets",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6459,
    "title": "Cycle Palindrome",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "math"
    ]
  },
  {
    "id": 6460,
    "title": "Parametric MST",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "graph",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 6461,
    "title": "Equal Tree Sums",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "math",
      "tree"
    ]
  },
  {
    "id": 6462,
    "title": "K-good",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6463,
    "title": "Make Equal With Mod",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 6464,
    "title": "Subtract Operation",
    "difficulty": "easy",
    "category": [
      "data structures",
      "greedy",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 6465,
    "title": "Good Pairs",
    "difficulty": "easy",
    "category": [
      "math",
      "sorting"
    ]
  },
  {
    "id": 6466,
    "title": "Three Minimums",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "divide and conquer",
      "dynamic programming",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 6467,
    "title": "Snowy Mountain",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "greedy",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 6468,
    "title": "Minimal String Xoration",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "divide and conquer",
      "greedy",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 6469,
    "title": "Arithmetic Operations",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "graph",
      "math"
    ]
  },
  {
    "id": 6470,
    "title": "Potion Brewing Class",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "math",
      "number theory",
      "tree"
    ]
  },
  {
    "id": 6471,
    "title": "Alice and the Cake",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 6472,
    "title": "Prefix Removals",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 6473,
    "title": "Maximum Cake Tastiness",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 6474,
    "title": "Tower Defense",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures"
    ]
  },
  {
    "id": 6475,
    "title": "Sum of Matchings",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "constructive algorithms",
      "graph matching",
      "graph traversal",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6476,
    "title": "Nearest Excluded Points",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 6477,
    "title": "Fault-tolerant Network",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 6478,
    "title": "Prove Him Wrong",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 6479,
    "title": "Playoff",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6480,
    "title": "Counting Shortcuts",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 6481,
    "title": "Vitaly and Advanced Useless Algorithms",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6482,
    "title": "Rescheduling the Exam",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 6483,
    "title": "Twist the Permutation",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6484,
    "title": "Weight of the System of Nested Segments",
    "difficulty": "medium",
    "category": [
      "greedy",
      "hash table",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 6485,
    "title": "DIV + MOD",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 6486,
    "title": "Deletions of Two Adjacent Letters",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 6487,
    "title": "Game of Ball Passing",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6488,
    "title": "Game",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6489,
    "title": "Two Avenues",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 6490,
    "title": "Air Reform",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "graph",
      "graph traversal",
      "implementation",
      "tree",
      "union find"
    ]
  },
  {
    "id": 6491,
    "title": "Serious Business",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "implementation",
      "shortest path"
    ]
  },
  {
    "id": 6492,
    "title": "Tyler and Strings",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 6493,
    "title": "Integral Array",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "math"
    ]
  },
  {
    "id": 6494,
    "title": "Weird Sum",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "data structures",
      "geometry",
      "math",
      "matrix",
      "sorting"
    ]
  },
  {
    "id": 6495,
    "title": "Madoka and Laziness",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 6496,
    "title": "Madoka and the Sixth-graders",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 6497,
    "title": "Madoka and the Best School in Russia",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6498,
    "title": "Madoka and Childish Pranks",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 6499,
    "title": "Madoka and the Elegant Gift",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph",
      "implementation"
    ]
  },
  {
    "id": 6500,
    "title": "Madoka and Math Dad",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 6501,
    "title": "Playing Around the Table",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6502,
    "title": "Power Board",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6503,
    "title": "Weight the Tree",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph traversal",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 6504,
    "title": "Factorials and Powers of Two",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 6505,
    "title": "Quality vs Quantity",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 6506,
    "title": "Square Counting",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 6507,
    "title": "Basis",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "fast fourier transform",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6508,
    "title": "Expand the Path",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "data structures",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6509,
    "title": "Cross Coloring",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6510,
    "title": "Increase Subarray Sums",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6511,
    "title": "Anti-Fibonacci Permutation",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 6512,
    "title": "Doors and Keys",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6513,
    "title": "Power Walking",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 6514,
    "title": "Hard Way",
    "difficulty": "easy",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 6515,
    "title": "Covering Circle",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 6516,
    "title": "Special Positions",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "divide and conquer",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 6517,
    "title": "Two Arrays",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "combinatorics",
      "greedy",
      "hash table",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 6518,
    "title": "Anonymity Is Important",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "greedy",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 6519,
    "title": "Repetitions Decoding",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 6520,
    "title": "Great Sequence",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6521,
    "title": "Treasure Hunt",
    "difficulty": "easy",
    "category": [
      "graph",
      "interactive"
    ]
  },
  {
    "id": 6522,
    "title": "Treasure Hunt",
    "difficulty": "easy",
    "category": [
      "graph",
      "interactive"
    ]
  },
  {
    "id": 6523,
    "title": "Treasure Hunt",
    "difficulty": "easy",
    "category": [
      "graph",
      "interactive"
    ]
  },
  {
    "id": 6524,
    "title": "Treasure Hunt",
    "difficulty": "easy",
    "category": [
      "graph",
      "interactive"
    ]
  },
  {
    "id": 6525,
    "title": "Treasure Hunt",
    "difficulty": "easy",
    "category": [
      "graph",
      "interactive"
    ]
  },
  {
    "id": 6526,
    "title": "Treasure Hunt",
    "difficulty": "easy",
    "category": [
      "graph",
      "interactive"
    ]
  },
  {
    "id": 6527,
    "title": "Treasure Hunt",
    "difficulty": "easy",
    "category": [
      "graph",
      "interactive"
    ]
  },
  {
    "id": 6528,
    "title": "Treasure Hunt",
    "difficulty": "easy",
    "category": [
      "graph",
      "interactive"
    ]
  },
  {
    "id": 6529,
    "title": "Treasure Hunt",
    "difficulty": "easy",
    "category": [
      "graph",
      "interactive"
    ]
  },
  {
    "id": 6530,
    "title": "Treasure Hunt",
    "difficulty": "easy",
    "category": [
      "graph",
      "interactive"
    ]
  },
  {
    "id": 6531,
    "title": "Treasure Hunt",
    "difficulty": "easy",
    "category": [
      "graph",
      "interactive"
    ]
  },
  {
    "id": 6532,
    "title": "Two Posters",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 6533,
    "title": "Colorful Operations",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 6534,
    "title": "Big Brush",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6535,
    "title": "Inversion Graph",
    "difficulty": "medium",
    "category": [
      "data structures",
      "graph",
      "math",
      "union find"
    ]
  },
  {
    "id": 6536,
    "title": "Odd Swap Sort",
    "difficulty": "easy",
    "category": [
      "data structures",
      "math",
      "sorting"
    ]
  },
  {
    "id": 6537,
    "title": "Reverse",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6538,
    "title": "Minimize Inversions Number",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 6539,
    "title": "Birthday",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6540,
    "title": "Towers",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 6541,
    "title": "Best Pair",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 6542,
    "title": "Yet Another Minimization Problem",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6543,
    "title": "Andrew and Stones",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6544,
    "title": "MEX and Array",
    "difficulty": "easy",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6545,
    "title": "Sorting Parts",
    "difficulty": "easy",
    "category": [
      "brute force",
      "sorting"
    ]
  },
  {
    "id": 6546,
    "title": "Closest Pair ",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 6547,
    "title": "Cars ",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 6548,
    "title": "Infinite Set",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "math",
      "matrix",
      "number theory",
      "string"
    ]
  },
  {
    "id": 6549,
    "title": "Differential Sorting",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 6550,
    "title": "Avoid Local Maximums",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 6551,
    "title": "Min Or Sum",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "greedy"
    ]
  },
  {
    "id": 6552,
    "title": "Fibonacci Additions",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "hash table",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6553,
    "title": "Fair Share",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "graph",
      "graph matching",
      "graph traversal"
    ]
  },
  {
    "id": 6554,
    "title": "Finding Zero",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "interactive",
      "math"
    ]
  },
  {
    "id": 6555,
    "title": "OKEA",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 6556,
    "title": "Fortune Telling",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "math"
    ]
  },
  {
    "id": 6557,
    "title": "Reverse and Concatenate",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 6558,
    "title": "Perfect Matching",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "interactive",
      "tree"
    ]
  },
  {
    "id": 6559,
    "title": "Spanning Tree Queries",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph",
      "graph traversal",
      "greedy",
      "math",
      "sorting",
      "tree",
      "union find"
    ]
  },
  {
    "id": 6560,
    "title": "Make Them Equal",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 6561,
    "title": "Kill the Monster",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 6562,
    "title": "Minority",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 6563,
    "title": "Div. 7",
    "difficulty": "easy",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 6564,
    "title": "Distance Tree (hard version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph traversal",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 6565,
    "title": "Distance Tree (easy version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph",
      "graph traversal",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 6566,
    "title": "New Year Concert",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "math",
      "number theory",
      "two pointers"
    ]
  },
  {
    "id": 6567,
    "title": "Strange Test",
    "difficulty": "medium",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 6568,
    "title": "Roof Construction",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "constructive algorithms"
    ]
  },
  {
    "id": 6569,
    "title": "ABC",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6570,
    "title": "Fun with Even Subarrays",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 6571,
    "title": "Min Max Swap",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 6572,
    "title": "Making It Bipartite",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph matching",
      "max flow",
      "number theory"
    ]
  },
  {
    "id": 6573,
    "title": "Expected Components",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "number theory",
      "probability"
    ]
  },
  {
    "id": 6574,
    "title": "Flipping Range",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 6575,
    "title": "Paint the Middle",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 6576,
    "title": "Range and Partition",
    "difficulty": "medium",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 6577,
    "title": "And Matching",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms"
    ]
  },
  {
    "id": 6578,
    "title": "GCD Arrays",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6579,
    "title": "Download More RAM",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6580,
    "title": "Spaceship Crisis Management",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "geometry",
      "sorting"
    ]
  },
  {
    "id": 6581,
    "title": "Groceries in Meteor Town",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "tree",
      "union find"
    ]
  },
  {
    "id": 6582,
    "title": "Game on Sum (Hard Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "game theory",
      "math"
    ]
  },
  {
    "id": 6583,
    "title": "Game on Sum (Easy Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "game theory",
      "math"
    ]
  },
  {
    "id": 6584,
    "title": "Grid Xor",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "interactive",
      "math"
    ]
  },
  {
    "id": 6585,
    "title": "Peculiar Movie Preferences",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 6586,
    "title": "Meximum Array",
    "difficulty": "medium",
    "category": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "implementation",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 6587,
    "title": "Not Splitting",
    "difficulty": "hard",
    "category": [
      "geometry",
      "graph",
      "greedy",
      "implementation",
      "shortest path"
    ]
  },
  {
    "id": 6588,
    "title": "Not Escaping",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "implementation",
      "shortest path",
      "two pointers"
    ]
  },
  {
    "id": 6589,
    "title": "Not Adding",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6590,
    "title": "Not Assigning",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "number theory",
      "tree"
    ]
  },
  {
    "id": 6591,
    "title": "Not Sitting",
    "difficulty": "medium",
    "category": [
      "game theory",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6592,
    "title": "Not Shading",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 6593,
    "title": "A Random Code Problem",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "number theory",
      "probability"
    ]
  },
  {
    "id": 6594,
    "title": "Black and White Tree",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 6595,
    "title": "Martial Arts Tournament",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6596,
    "title": "Monsters And Spells",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 6597,
    "title": "Minor Reduction",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 6598,
    "title": "Equidistant Letters",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "sorting"
    ]
  },
  {
    "id": 6599,
    "title": "Cats on the Upgrade (hard version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 6600,
    "title": "Cats on the Upgrade (easy version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 6601,
    "title": "Binary Spiders",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "implementation",
      "math",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 6602,
    "title": "Road Optimization",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 6603,
    "title": "Elementary Particles",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6604,
    "title": "Ancient Civilization",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6605,
    "title": "MinOr Tree",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "graph",
      "graph traversal",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 6606,
    "title": "Interacdive Problem",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "interactive"
    ]
  },
  {
    "id": 6607,
    "title": "Masha-forgetful",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "hash table",
      "implementation",
      "string"
    ]
  },
  {
    "id": 6608,
    "title": "Palindromes Coloring",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "sorting",
      "string"
    ]
  },
  {
    "id": 6609,
    "title": "Division by Two and Permutation",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "graph matching",
      "greedy",
      "math",
      "max flow"
    ]
  },
  {
    "id": 6610,
    "title": "Make AP",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 6611,
    "title": "Plus One on the Subset",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 6612,
    "title": "Middle Duplication",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "greedy",
      "string",
      "tree"
    ]
  },
  {
    "id": 6613,
    "title": "Robot Cleaner Revisit",
    "difficulty": "hard",
    "category": [
      "implementation",
      "math",
      "probability"
    ]
  },
  {
    "id": 6614,
    "title": "Balanced Stone Heaps",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 6615,
    "title": "Game on Ranges",
    "difficulty": "easy",
    "category": [
      "brute force",
      "graph traversal",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 6616,
    "title": "Robot Cleaner",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6617,
    "title": "Quadratic Set",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "hash table",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6618,
    "title": "Math Test",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 6619,
    "title": "Shuffle",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 6620,
    "title": "Set or Decrease",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6621,
    "title": "Berland Music",
    "difficulty": "easy",
    "category": [
      "data structures",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 6622,
    "title": "Construct a Rectangle",
    "difficulty": "easy",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 6623,
    "title": "Two Sequences",
    "difficulty": "hard",
    "category": [
      "data structures",
      "hash table",
      "string suffix structures"
    ]
  },
  {
    "id": 6624,
    "title": "Trains and Airplanes",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 6625,
    "title": "Weighted Increasing Subsequences",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 6626,
    "title": "Strange Instructions",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6627,
    "title": "New School",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 6628,
    "title": "The Winter Hike",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6629,
    "title": "Hidden Permutations",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "interactive",
      "math"
    ]
  },
  {
    "id": 6630,
    "title": "Integers Shop",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6631,
    "title": "Stable Arrangement of Rooks",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 6632,
    "title": "Subsequences Galore",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 6633,
    "title": "Bipartite Array",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 6634,
    "title": "Replace the Numbers",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 6635,
    "title": "Exact Change",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 6636,
    "title": "BA-String",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6637,
    "title": "Triangles on a Rectangle",
    "difficulty": "easy",
    "category": [
      "geometry",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6638,
    "title": "Equal or Not Equal",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 6639,
    "title": "Permutation and Queries",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "divide and conquer",
      "two pointers"
    ]
  },
  {
    "id": 6640,
    "title": "Unusual Minesweeper",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph traversal",
      "greedy",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 6641,
    "title": "Let's Play the Hat?",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6642,
    "title": "MEX and Increments",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 6643,
    "title": "New Year's Problem",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6644,
    "title": "Wrong Addition",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6645,
    "title": "Squares and Cubes",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 6646,
    "title": "Square String?",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 6647,
    "title": "Trader Problem",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 6648,
    "title": "Reverse",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "graph traversal",
      "implementation",
      "math",
      "string"
    ]
  },
  {
    "id": 6649,
    "title": "Singers' Tour",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 6650,
    "title": "Array and Operations",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6651,
    "title": "Paint the Array",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 6652,
    "title": "Missing Bigram",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6653,
    "title": "Polycarp and Sums of Subsequences",
    "difficulty": "easy",
    "category": [
      "math",
      "sorting"
    ]
  },
  {
    "id": 6654,
    "title": "Christmas Chocolates",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory",
      "graph",
      "graph traversal",
      "implementation",
      "math",
      "number theory",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 6655,
    "title": "Too Many Impostors (hard version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation",
      "interactive",
      "math"
    ]
  },
  {
    "id": 6656,
    "title": "Too Many Impostors (easy version)",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation",
      "interactive"
    ]
  },
  {
    "id": 6657,
    "title": "Paprika and Permutation",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 6658,
    "title": "GCD Problem",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6659,
    "title": "Forbidden Subsequence",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting",
      "string"
    ]
  },
  {
    "id": 6660,
    "title": "Keep XOR Low",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 6661,
    "title": "Just Add an Edge",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 6662,
    "title": "Tricolor Triangles",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph",
      "math",
      "matrix"
    ]
  },
  {
    "id": 6663,
    "title": "Lexicographically Small Enough",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "greedy",
      "string"
    ]
  },
  {
    "id": 6664,
    "title": "Keep the Average High",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6665,
    "title": "Representative Edges",
    "difficulty": "medium",
    "category": [
      "brute force",
      "geometry",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6666,
    "title": "Mirror in the String",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 6667,
    "title": "Integer Diversity",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6668,
    "title": "Reindeer Games",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "divide and conquer",
      "graph",
      "max flow",
      "shortest path"
    ]
  },
  {
    "id": 6669,
    "title": "Maximum Adjacent Pairs",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph matching"
    ]
  },
  {
    "id": 6670,
    "title": "LEGOndary Grandmaster",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 6671,
    "title": "Purple Crayon",
    "difficulty": "hard",
    "category": [
      "data structures",
      "game theory",
      "graph",
      "graph traversal",
      "greedy",
      "math",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 6672,
    "title": "X(or)-mas Tree",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "graph",
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 6673,
    "title": "Menorah",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6674,
    "title": "And It's Non-Zero",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6675,
    "title": "Closing The Gap",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 6676,
    "title": "Divan and a Cottage",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 6677,
    "title": "Divan and Kostomuksha (hard version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "number theory"
    ]
  },
  {
    "id": 6678,
    "title": "Divan and Kostomuksha (easy version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "number theory"
    ]
  },
  {
    "id": 6679,
    "title": "Divan and bitwise operations",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "combinatorics",
      "constructive algorithms",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 6680,
    "title": "Divan and a New Project ",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "sorting"
    ]
  },
  {
    "id": 6681,
    "title": "Divan and a Store",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 6682,
    "title": "Tree Coloring",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "divide and conquer",
      "fast fourier transform"
    ]
  },
  {
    "id": 6683,
    "title": "Crazy Robot",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 6684,
    "title": "MEX Sequences",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 6685,
    "title": "Poisoned Dagger",
    "difficulty": "medium",
    "category": [
      "binary search"
    ]
  },
  {
    "id": 6686,
    "title": "Absent Remainder",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 6687,
    "title": "Long Comparison",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 6688,
    "title": "Max Sum Array",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6689,
    "title": "Armor and Weapons",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 6690,
    "title": "Messages",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "probability",
      "sorting"
    ]
  },
  {
    "id": 6691,
    "title": "X-Magic Pair",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 6692,
    "title": "Chat Ban",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 6693,
    "title": "Special Permutation",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 6694,
    "title": "Distance",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms"
    ]
  },
  {
    "id": 6695,
    "title": "Robot and Candies",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph matching",
      "greedy"
    ]
  },
  {
    "id": 6696,
    "title": "ATM and Students",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "two pointers"
    ]
  },
  {
    "id": 6697,
    "title": "Escape The Maze (hard version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "greedy",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 6698,
    "title": "Escape The Maze (easy version)",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "greedy",
      "shortest path",
      "tree",
      "two pointers"
    ]
  },
  {
    "id": 6699,
    "title": "Weights Assignment For Tree Edges",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "tree"
    ]
  },
  {
    "id": 6700,
    "title": "Polycarp Recovers the Permutation",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 6701,
    "title": "Team Composition: Programmers and Mathematicians",
    "difficulty": "easy",
    "category": [
      "binary search",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 6702,
    "title": "Make Even",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 6703,
    "title": "Mashtali vs AtCoder",
    "difficulty": "hard",
    "category": [
      "game theory",
      "tree"
    ]
  },
  {
    "id": 6704,
    "title": "Squid Game",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 6705,
    "title": "AmShZ Wins a Bet",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "hash table"
    ]
  },
  {
    "id": 6706,
    "title": "Mashtali: a Space Oddysey",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 6707,
    "title": "AmShZ and G.O.A.T.",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6708,
    "title": "Not Quite Lee",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6709,
    "title": "Keshi Is Throwing a Party",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 6710,
    "title": "Kalindrome Array",
    "difficulty": "easy",
    "category": [
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 6711,
    "title": "Anti Light's Cell Guessing",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 6712,
    "title": "Pushing Robots",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 6713,
    "title": "A Stroll Around the Matrix",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6714,
    "title": "Interesting Sections",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "meet in the middle",
      "two pointers"
    ]
  },
  {
    "id": 6715,
    "title": "William The Oblivious ",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 6716,
    "title": "Social Network",
    "difficulty": "medium",
    "category": [
      "graph",
      "greedy",
      "implementation",
      "tree",
      "union find"
    ]
  },
  {
    "id": 6717,
    "title": "Complex Market Analysis",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "implementation",
      "number theory",
      "scheduling",
      "two pointers"
    ]
  },
  {
    "id": 6718,
    "title": "William the Vigilant",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 6719,
    "title": "Divide and Multiply",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6720,
    "title": "Alphabetic Tree",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph traversal",
      "hash table",
      "string",
      "string suffix structures",
      "tree"
    ]
  },
  {
    "id": 6721,
    "title": "MEX counting",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 6722,
    "title": "The Cells on the Paper",
    "difficulty": "hard",
    "category": [
      "binary search",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 6723,
    "title": "Dominoes",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "fast fourier transform",
      "graph",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6724,
    "title": "Game Master",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 6725,
    "title": "Build the Permutation",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 6726,
    "title": "Find Array",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 6727,
    "title": "Banquet Preparations 2",
    "difficulty": "hard",
    "category": [
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 6728,
    "title": "Banquet Preparations 1",
    "difficulty": "hard",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 6729,
    "title": "Robot on the Board 2",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 6730,
    "title": "Robot on the Board 1",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6731,
    "title": "Blue-Red Permutation",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 6732,
    "title": "Minimum Extraction",
    "difficulty": "easy",
    "category": [
      "brute force",
      "sorting"
    ]
  },
  {
    "id": 6733,
    "title": "Odd Grasshopper",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 6734,
    "title": "Linear Keyboard",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 6735,
    "title": "Tree Queries",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 6736,
    "title": "Arena",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 6737,
    "title": "Red-Blue Matrix",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 6738,
    "title": "Banknotes",
    "difficulty": "medium",
    "category": [
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 6739,
    "title": "Update Files",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6740,
    "title": "AB Balance",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 6741,
    "title": "PalindORme",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 6742,
    "title": "Array Equalizer",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "implementation",
      "math",
      "number theory",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 6743,
    "title": "Treelabeling",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "game theory",
      "graph traversal",
      "greedy",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 6744,
    "title": "Dominant Character",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 6745,
    "title": "Reverse Sort",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6746,
    "title": "A.M. Deviation",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 6747,
    "title": "XOR Specia-LIS-t",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 6748,
    "title": "Era",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 6749,
    "title": "October 18, 2017",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6750,
    "title": "A Perfect Problem",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 6751,
    "title": "Artistic Partition",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "dynamic programming",
      "number theory"
    ]
  },
  {
    "id": 6752,
    "title": "Extreme Extension",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6753,
    "title": "Moderate Modular Mode",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6754,
    "title": "Di-visible Confusion",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6755,
    "title": "Divine Array",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 6756,
    "title": "Two Subsequences",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6757,
    "title": "Two Sorts",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph traversal",
      "math",
      "meet in the middle"
    ]
  },
  {
    "id": 6758,
    "title": "Phys Ed Online",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 6759,
    "title": "Difficult Mountain",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6760,
    "title": "Optimal Insertion",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6761,
    "title": "Frog Traveler",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph",
      "graph traversal",
      "shortest path",
      "two pointers"
    ]
  },
  {
    "id": 6762,
    "title": "Array Elimination",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6763,
    "title": "Robot Factory",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "graph traversal"
    ]
  },
  {
    "id": 6764,
    "title": "Party Organization",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math",
      "probability"
    ]
  },
  {
    "id": 6765,
    "title": "Array Game",
    "difficulty": "hard",
    "category": [
      "game theory",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 6766,
    "title": "Bob's Beautiful Array",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 6767,
    "title": "Desert",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph"
    ]
  },
  {
    "id": 6768,
    "title": "Hidden Fortress",
    "difficulty": "hard",
    "category": [
      "interactive",
      "math"
    ]
  },
  {
    "id": 6769,
    "title": "Shortest path",
    "difficulty": "hard",
    "category": [
      "brute force",
      "geometry",
      "math",
      "shortest path"
    ]
  },
  {
    "id": 6770,
    "title": "Mars",
    "difficulty": "hard",
    "category": [
      "hash table"
    ]
  },
  {
    "id": 6771,
    "title": "Two Arrays",
    "difficulty": "hard",
    "category": [
      "data structures",
      "matrix"
    ]
  },
  {
    "id": 6772,
    "title": "Bubble Popping",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 6773,
    "title": "Bubble Strike",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "probability",
      "ternary search"
    ]
  },
  {
    "id": 6774,
    "title": "Restaurant Game",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 6775,
    "title": "Weights",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 6776,
    "title": "The Sum of Good Numbers",
    "difficulty": "hard",
    "category": [
      "hash table",
      "math",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 6777,
    "title": "RBS",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 6778,
    "title": "Staircases",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "data structures",
      "dynamic programming",
      "graph traversal",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6779,
    "title": "Training Session",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "data structures",
      "geometry",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6780,
    "title": "Delete Two Elements",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "implementation",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 6781,
    "title": "Groups",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 6782,
    "title": "Computer Game",
    "difficulty": "easy",
    "category": [
      "brute force",
      "dynamic programming",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 6783,
    "title": "Ideal Farm",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 6784,
    "title": "Rubik's Cube Coloring (hard version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "implementation",
      "math",
      "tree"
    ]
  },
  {
    "id": 6785,
    "title": "Rubik's Cube Coloring (easy version)",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 6786,
    "title": "The Number of Imposters",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 6787,
    "title": "Make Them Equal",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 6788,
    "title": "Special Numbers",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "math"
    ]
  },
  {
    "id": 6789,
    "title": "Consecutive Sum Riddle",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 6790,
    "title": "Changing Brackets",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 6791,
    "title": "Red-Black Number",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "implementation",
      "math",
      "meet in the middle"
    ]
  },
  {
    "id": 6792,
    "title": "Gardener and Tree",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "graph traversal",
      "greedy",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 6793,
    "title": "Half of Same",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6794,
    "title": "All are Same",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 6795,
    "title": "Save More Mice",
    "difficulty": "easy",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 6796,
    "title": "Make it Divisible by 25",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "graph traversal",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6797,
    "title": "Elections",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 6798,
    "title": "Alice and Recoloring 2",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph matching",
      "greedy",
      "max flow"
    ]
  },
  {
    "id": 6799,
    "title": "Alice and Recoloring 1",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 6800,
    "title": "Bored Bakry",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "greedy",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 6801,
    "title": "Hemose in ICPC ?",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph traversal",
      "implementation",
      "interactive",
      "math",
      "number theory",
      "tree"
    ]
  },
  {
    "id": 6802,
    "title": "Bakry and Partitioning",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 6803,
    "title": "Hemose Shopping",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 6804,
    "title": "Gamer Hemose",
    "difficulty": "easy",
    "category": [
      "binary search",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 6805,
    "title": "Jumping Through the Array",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph",
      "two pointers"
    ]
  },
  {
    "id": 6806,
    "title": "Omkar and Mosaic",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 6807,
    "title": "Poachers",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory",
      "graph",
      "tree"
    ]
  },
  {
    "id": 6808,
    "title": "Non-equal Neighbours",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 6809,
    "title": "Frequency Queries",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 6810,
    "title": "Yet Another Sorting Problem",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math"
    ]
  },
  {
    "id": 6811,
    "title": "Minimize Distance",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 6812,
    "title": "Array Eversion",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 6813,
    "title": "Life of a Flower",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6814,
    "title": "Eligible Segments",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 6815,
    "title": "Strange LCS",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "graph",
      "greedy",
      "string"
    ]
  },
  {
    "id": 6816,
    "title": "Game with Stones",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 6817,
    "title": "Guess the Permutation",
    "difficulty": "hard",
    "category": [
      "binary search",
      "combinatorics",
      "interactive",
      "math"
    ]
  },
  {
    "id": 6818,
    "title": "Two Arrays",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 6819,
    "title": "Coloring Rectangles",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 6820,
    "title": "Mathematical Addition",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 6821,
    "title": "Omkar and Tours",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 6822,
    "title": "Omkar and Time Travel",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math"
    ]
  },
  {
    "id": 6823,
    "title": "Defender of Childhood Dreams",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "divide and conquer"
    ]
  },
  {
    "id": 6824,
    "title": "Moment of Bloom",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph matching",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 6825,
    "title": "Omkar and the Meaning of Life",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "interactive"
    ]
  },
  {
    "id": 6826,
    "title": "Omkar and Determination",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 6827,
    "title": "Omkar and Heavenly Tree",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "tree"
    ]
  },
  {
    "id": 6828,
    "title": "Windblume Ode",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 6829,
    "title": "Kuzya and Homework",
    "difficulty": "hard",
    "category": [
      "data structures",
      "number theory"
    ]
  },
  {
    "id": 6830,
    "title": "Korney Korneevich and XOR (hard version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "dynamic programming",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 6831,
    "title": "Korney Korneevich and XOR (easy version)",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 6832,
    "title": "Pchelyonok and Segments",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6833,
    "title": "Vupsen, Pupsen and 0",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 6834,
    "title": "Grandma Capa Knits a Scarf",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "greedy",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 6835,
    "title": "Luntik and Subsequences",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 6836,
    "title": "Luntik and Concerts",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 6837,
    "title": "Diameter of Graph",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6838,
    "title": "CQXYM Count Permutations",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6839,
    "title": "Problems for Codeforces",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 6840,
    "title": "Railway Construction",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 6841,
    "title": "Subsequence",
    "difficulty": "hard",
    "category": [
      "brute force",
      "divide and conquer",
      "dynamic programming",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 6842,
    "title": "Train Maintenance",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 6843,
    "title": "Mathematics Curriculum",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 6844,
    "title": "Portal",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6845,
    "title": "Minimal Coverage",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 6846,
    "title": "Array Stabilization (AND version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph",
      "math",
      "number theory",
      "shortest path"
    ]
  },
  {
    "id": 6847,
    "title": "Array Optimization by Deque",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 6848,
    "title": "Permutation Minimization by Deque",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6849,
    "title": "Productive Meeting",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy"
    ]
  },
  {
    "id": 6850,
    "title": "Ticks",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6851,
    "title": "Shifting Sort",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 6852,
    "title": "Casimir's String Solitaire",
    "difficulty": "easy",
    "category": [
      "math",
      "string"
    ]
  },
  {
    "id": 6853,
    "title": "The Mind",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "interactive",
      "probability"
    ]
  },
  {
    "id": 6854,
    "title": "Labyrinth",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 6855,
    "title": "Kingdom of Islands",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph",
      "implementation"
    ]
  },
  {
    "id": 6856,
    "title": "Just Kingdom",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "graph traversal"
    ]
  },
  {
    "id": 6857,
    "title": "Interactive Rays",
    "difficulty": "hard",
    "category": [
      "geometry",
      "interactive"
    ]
  },
  {
    "id": 6858,
    "title": "Higher Order Functions",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 6859,
    "title": "Game of Chance",
    "difficulty": "hard",
    "category": [
      "math",
      "probability"
    ]
  },
  {
    "id": 6860,
    "title": "Framing Pictures",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 6861,
    "title": "Easy Scheduling",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 6862,
    "title": "Dragon Curve",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 6863,
    "title": "Cactus Lady and her Cing",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 6864,
    "title": "Building Forest Trails",
    "difficulty": "hard",
    "category": [
      "data structures",
      "union find"
    ]
  },
  {
    "id": 6865,
    "title": "Anti-Tetris",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 6866,
    "title": "Communication Routing Challenge",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 6867,
    "title": "Managing Telephone Poles",
    "difficulty": "hard",
    "category": [
      "data structures",
      "geometry"
    ]
  },
  {
    "id": 6868,
    "title": "Longest Array Deconstruction",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 6869,
    "title": "Knitting Batik",
    "difficulty": "hard",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 6870,
    "title": "Jeopardy of Dropped Balls",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 6871,
    "title": "Illusions of the Desert",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 6872,
    "title": "Holiday Wall Ornaments",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 6873,
    "title": "GCD Festival",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 6874,
    "title": "Finding Expected Value",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 6875,
    "title": "Eye-Pleasing City Park Tour",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 6876,
    "title": "Divisible by Twenty-Five",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "graph traversal"
    ]
  },
  {
    "id": 6877,
    "title": "Cyclic Sum",
    "difficulty": "hard",
    "category": [
      "data structures",
      "fast fourier transform",
      "number theory"
    ]
  },
  {
    "id": 6878,
    "title": "Building an Amusement Park",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry"
    ]
  },
  {
    "id": 6879,
    "title": "Another Sorting Problem",
    "difficulty": "easy",
    "category": [
      "data structures",
      "sorting",
      "string"
    ]
  },
  {
    "id": 6880,
    "title": "Occurrences",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "fast fourier transform",
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 6881,
    "title": "Coloring",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6882,
    "title": "The Strongest Build",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "graph",
      "graph traversal",
      "greedy",
      "hash table",
      "implementation"
    ]
  },
  {
    "id": 6883,
    "title": "Slay the Dragon",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "sorting",
      "ternary search"
    ]
  },
  {
    "id": 6884,
    "title": "Combinatorics Homework",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6885,
    "title": "Regular Bracket Sequences",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 6886,
    "title": "Swaps",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 6887,
    "title": "Countdown",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 6888,
    "title": "Stations",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 6889,
    "title": "Polygon",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "geometry"
    ]
  },
  {
    "id": 6890,
    "title": "Bridge Club",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph matching",
      "greedy",
      "max flow"
    ]
  },
  {
    "id": 6891,
    "title": "Paint",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 6892,
    "title": "Xor of 3",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 6893,
    "title": "Book",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "dynamic programming",
      "graph",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 6894,
    "title": "Two Railroads",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 6895,
    "title": "Physical Examination",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "special problem"
    ]
  },
  {
    "id": 6896,
    "title": "Laser Beams",
    "difficulty": "hard",
    "category": [
      "geometry",
      "probability",
      "special problem"
    ]
  },
  {
    "id": 6897,
    "title": "A Battle Against a Dragon",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "special problem"
    ]
  },
  {
    "id": 6898,
    "title": "Kotlinforces",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "special problem"
    ]
  },
  {
    "id": 6899,
    "title": "Fix the String",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 6900,
    "title": "Sweepstake",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation",
      "math",
      "special problem"
    ]
  },
  {
    "id": 6901,
    "title": "Rhyme",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 6902,
    "title": "Epic Novel",
    "difficulty": "medium",
    "category": [
      "math",
      "special problem"
    ]
  },
  {
    "id": 6903,
    "title": "Sequence of Comparisons",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 6904,
    "title": "Palindromic Hamiltonian Path",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "graph",
      "graph traversal",
      "hash table"
    ]
  },
  {
    "id": 6905,
    "title": "Playoff Restoration",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "hash table",
      "implementation",
      "meet in the middle"
    ]
  },
  {
    "id": 6906,
    "title": "Inconvenient Pairs",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "implementation",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 6907,
    "title": "Jury Meeting",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 6908,
    "title": "Chess Tournament",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 6909,
    "title": "Balanced Substring",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6910,
    "title": "One-Four Overload",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "constructive algorithms",
      "graph",
      "graph traversal",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 6911,
    "title": "Non-Decreasing Dilemma",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "math"
    ]
  },
  {
    "id": 6912,
    "title": "Expression Evaluation Error",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6913,
    "title": "Carrying Conundrum",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 6914,
    "title": "MEXor Mixup",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "greedy"
    ]
  },
  {
    "id": 6915,
    "title": "Domino Disaster",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 6916,
    "title": "Xor-quiz",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "interactive",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6917,
    "title": "Four Vertices",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "graph",
      "greedy",
      "implementation",
      "shortest path"
    ]
  },
  {
    "id": 6918,
    "title": "Points Movement",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 6919,
    "title": "Buds Re-hanging",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 6920,
    "title": "Seating Arrangements (hard version) ",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "implementation",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 6921,
    "title": "Seating Arrangements (easy version) ",
    "difficulty": "easy",
    "category": [
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6922,
    "title": "MAX-MEX Cut",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 6923,
    "title": "MIN-MEX Cut",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 6924,
    "title": "Median Maximization",
    "difficulty": "easy",
    "category": [
      "binary search",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6925,
    "title": "Tubular Bells",
    "difficulty": "hard",
    "category": [
      "interactive",
      "math",
      "number theory",
      "probability"
    ]
  },
  {
    "id": 6926,
    "title": "Rescue Niwen!",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 6927,
    "title": "Two Hundred Twenty One (hard version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math"
    ]
  },
  {
    "id": 6928,
    "title": "Two Hundred Twenty One (easy version)",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 6929,
    "title": "Rings",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 6930,
    "title": "Scenes From a Memory",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6931,
    "title": "The Miracle and the Sleeper",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 6932,
    "title": "Up the Strip (simplified version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6933,
    "title": "Deep Down Below",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6934,
    "title": "Simply Strange Sort",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 6935,
    "title": "Nearest Beautiful Number (hard version)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 6936,
    "title": "Nearest Beautiful Number (easy version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 6937,
    "title": "Polycarp and String Transformation",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation",
      "sorting",
      "string"
    ]
  },
  {
    "id": 6938,
    "title": "Make a Power of Two",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 6939,
    "title": "Infinity Table",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 6940,
    "title": "Who's Opposite?",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 6941,
    "title": "Dislike of Threes",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6942,
    "title": "Mocha and Stars",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "fast fourier transform",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6943,
    "title": "Mocha and Diana (Hard Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy",
      "tree",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 6944,
    "title": "Mocha and Diana (Easy Version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph",
      "greedy",
      "tree",
      "union find"
    ]
  },
  {
    "id": 6945,
    "title": "Mocha and Hiking",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph"
    ]
  },
  {
    "id": 6946,
    "title": "Mocha and Red and Blue",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 6947,
    "title": "Mocha and Math",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 6948,
    "title": "Strange Sort",
    "difficulty": "hard",
    "category": [
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 6949,
    "title": "Down Below",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph",
      "graph traversal",
      "greedy",
      "meet in the middle",
      "shortest path"
    ]
  },
  {
    "id": 6950,
    "title": "Top-Notch Insertions",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures"
    ]
  },
  {
    "id": 6951,
    "title": "Bottom-Tier Reversals",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 6952,
    "title": "Up the Strip",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "math",
      "number theory",
      "two pointers"
    ]
  },
  {
    "id": 6953,
    "title": "Charmed by the Game",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 6954,
    "title": "Assiut Chess",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "interactive"
    ]
  },
  {
    "id": 6955,
    "title": "Ezzat and Grid",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 6956,
    "title": "Moamen and XOR",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "math",
      "matrix"
    ]
  },
  {
    "id": 6957,
    "title": "Moamen and k-subarrays",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6958,
    "title": "Ezzat and Two Subsequences",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math",
      "sorting"
    ]
  },
  {
    "id": 6959,
    "title": "DIY Tree",
    "difficulty": "hard",
    "category": [
      "graph",
      "greedy",
      "math",
      "probability"
    ]
  },
  {
    "id": 6960,
    "title": "Gates to Another World",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 6961,
    "title": "Sports Betting",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "graph",
      "math",
      "probability"
    ]
  },
  {
    "id": 6962,
    "title": "Equilibrium",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 6963,
    "title": "Take a Guess",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "interactive",
      "math"
    ]
  },
  {
    "id": 6964,
    "title": "Compressed Bracket Sequence",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 6965,
    "title": "Take Your Places!",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 6966,
    "title": "A Variety of Operations",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 6967,
    "title": "Good Graph",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "tree",
      "union find"
    ]
  },
  {
    "id": 6968,
    "title": "Boring Segments",
    "difficulty": "hard",
    "category": [
      "data structures",
      "sorting",
      "tree",
      "two pointers"
    ]
  },
  {
    "id": 6969,
    "title": "Say No to Palindromes",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 6970,
    "title": "Coin Rows",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 6971,
    "title": "Two Tables",
    "difficulty": "medium",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 6972,
    "title": "PizzaForces",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 6973,
    "title": "You",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "math",
      "number theory"
    ]
  },
  {
    "id": 6974,
    "title": "Diane",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "string"
    ]
  },
  {
    "id": 6975,
    "title": "Mikasa",
    "difficulty": "medium",
    "category": [
      "binary search",
      "bit manipulation",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 6976,
    "title": "Cobb",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 6977,
    "title": "Cherry",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 6978,
    "title": "Stairs",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "divide and conquer",
      "dynamic programming",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 6979,
    "title": "XOR and Distance",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "divide and conquer",
      "tree"
    ]
  },
  {
    "id": 6980,
    "title": "Common Divisor Graph",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph",
      "hash table",
      "math",
      "number theory",
      "union find"
    ]
  },
  {
    "id": 6981,
    "title": "Pairwise Modulo",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math"
    ]
  },
  {
    "id": 6982,
    "title": "Permutation Shift",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "constructive algorithms",
      "graph",
      "graph traversal",
      "math",
      "union find"
    ]
  },
  {
    "id": 6983,
    "title": "Backspace",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 6984,
    "title": "Penalty",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 6985,
    "title": "Reverse String",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "hash table",
      "implementation",
      "string"
    ]
  },
  {
    "id": 6986,
    "title": "Digits Sum",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 6987,
    "title": "Organizing a Music Festival",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 6988,
    "title": "Guess the Perimeter",
    "difficulty": "hard",
    "category": [
      "binary search",
      "interactive",
      "number theory"
    ]
  },
  {
    "id": 6989,
    "title": "A Serious Referee",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "graph traversal",
      "sorting"
    ]
  },
  {
    "id": 6990,
    "title": "Telepanting",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 6991,
    "title": "Colors and Intervals",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6992,
    "title": "Array Differentiation",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "graph",
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 6993,
    "title": "Maximize the Intersections",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "geometry",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6994,
    "title": "Running for Gold",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "graph",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 6995,
    "title": "Subsequence Permutation",
    "difficulty": "easy",
    "category": [
      "sorting",
      "string"
    ]
  },
  {
    "id": 6996,
    "title": "Equidistant Vertices",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 6997,
    "title": "Fixed Points",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 6998,
    "title": "Domino (hard version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 6999,
    "title": "Domino (easy version)",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 7000,
    "title": "Interesting Story",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting",
      "string"
    ]
  },
  {
    "id": 7001,
    "title": "Wonderful Coloring - 2",
    "difficulty": "medium",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 7002,
    "title": "Wonderful Coloring - 1",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 7003,
    "title": "Polycarp and Coins",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 7004,
    "title": "Jumping Around",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "graph",
      "shortest path",
      "union find"
    ]
  },
  {
    "id": 7005,
    "title": "Stringforces",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 7006,
    "title": "Excellent Arrays",
    "difficulty": "hard",
    "category": [
      "binary search",
      "combinatorics",
      "constructive algorithms",
      "implementation",
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7007,
    "title": "Manhattan Subarrays",
    "difficulty": "medium",
    "category": [
      "brute force",
      "geometry",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7008,
    "title": "Maximum Cost Deletion",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 7009,
    "title": "Find The Array",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 7010,
    "title": "Gregor and the Pawn Game",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "graph",
      "graph matching",
      "graph traversal",
      "greedy",
      "implementation",
      "max flow"
    ]
  },
  {
    "id": 7011,
    "title": "Gregor and Cryptography",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 7012,
    "title": "Gregor and the Two Painters",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "graph",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7013,
    "title": "Gregor and the Odd Cows (Hard)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "geometry",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7014,
    "title": "Gregor and the Odd Cows (Easy)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "geometry",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7015,
    "title": "The Three Little Pigs",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 7016,
    "title": "Integers Have Friends",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "divide and conquer",
      "math",
      "number theory",
      "two pointers"
    ]
  },
  {
    "id": 7017,
    "title": "Web of Lies",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph",
      "greedy"
    ]
  },
  {
    "id": 7018,
    "title": "How Many Paths?",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 7019,
    "title": "Array Stabilization (GCD version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "divide and conquer",
      "number theory",
      "two pointers"
    ]
  },
  {
    "id": 7020,
    "title": "Air Conditioners",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "implementation",
      "shortest path",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7021,
    "title": "Co-growing Sequence",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 7022,
    "title": "Pair Programming",
    "difficulty": "easy",
    "category": [
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 7023,
    "title": "Alphabetical Strings",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 7024,
    "title": "Shortest Path with Obstacle",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 7025,
    "title": "AquaMoon and Stolen String",
    "difficulty": "medium",
    "category": [
      "interactive",
      "math"
    ]
  },
  {
    "id": 7026,
    "title": "AquaMoon and Two Arrays",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 7027,
    "title": "AquaMoon and Potatoes",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 7028,
    "title": "AquaMoon and Time Stop (hard version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 7029,
    "title": "AquaMoon and Time Stop (easy version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 7030,
    "title": "AquaMoon and Wrong Coordinate",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "interactive",
      "math"
    ]
  },
  {
    "id": 7031,
    "title": "AquaMoon and Permutations",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "brute force",
      "combinatorics",
      "constructive algorithms",
      "graph",
      "graph matching"
    ]
  },
  {
    "id": 7032,
    "title": "AquaMoon and Chess",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 7033,
    "title": "AquaMoon and Strange Sort",
    "difficulty": "medium",
    "category": [
      "sorting"
    ]
  },
  {
    "id": 7034,
    "title": "The Final Pursuit",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "divide and conquer",
      "graph",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7035,
    "title": "RPD and Rap Sheet (Hard Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "interactive",
      "math"
    ]
  },
  {
    "id": 7036,
    "title": "RPD and Rap Sheet (Easy Version)",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "interactive",
      "math"
    ]
  },
  {
    "id": 7037,
    "title": "Need for Pink Slips",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "graph traversal",
      "implementation",
      "math",
      "probability"
    ]
  },
  {
    "id": 7038,
    "title": "Customising the Track",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7039,
    "title": "Exciting Bets",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7040,
    "title": "Abnormal Permutation Pairs (hard version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 7041,
    "title": "Abnormal Permutation Pairs (easy version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 7042,
    "title": "Priority Queue",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "implementation",
      "math",
      "ternary search"
    ]
  },
  {
    "id": 7043,
    "title": "Strange Function",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 7044,
    "title": "Plus and Multiply",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7045,
    "title": "Odd Set",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 7046,
    "title": "Pleasant Pairs",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7047,
    "title": "Pretty Permutations",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7048,
    "title": "Tasty Dishes",
    "difficulty": "hard",
    "category": [
      "math",
      "matrix"
    ]
  },
  {
    "id": 7049,
    "title": "Inverse Inversions",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures"
    ]
  },
  {
    "id": 7050,
    "title": "Converging Array (Hard Version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 7051,
    "title": "Converging Array (Easy Version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 7052,
    "title": "Tree Array",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "graph",
      "math",
      "probability",
      "tree"
    ]
  },
  {
    "id": 7053,
    "title": "Great Graphs",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy",
      "shortest path",
      "sorting"
    ]
  },
  {
    "id": 7054,
    "title": "Strange Array",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 7055,
    "title": "Game with Cards",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7056,
    "title": "PriceFixed",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "implementation",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7057,
    "title": "Stable Groups",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 7058,
    "title": "Love Song",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "implementation",
      "string"
    ]
  },
  {
    "id": 7059,
    "title": "Contest Start",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "geometry",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7060,
    "title": "Gift Set",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "math",
      "ternary search"
    ]
  },
  {
    "id": 7061,
    "title": "Interesting Function",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7062,
    "title": "Funny Substrings",
    "difficulty": "hard",
    "category": [
      "data structures",
      "hash table",
      "implementation",
      "matrix",
      "string"
    ]
  },
  {
    "id": 7063,
    "title": "Another Problem About Dividing Numbers",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7064,
    "title": "Number of Pairs",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 7065,
    "title": "Friends and Candies",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 7066,
    "title": "Stone Game",
    "difficulty": "easy",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7067,
    "title": "Figure Fixing",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy",
      "math",
      "union find"
    ]
  },
  {
    "id": 7068,
    "title": "Erase and Extend (Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "hash table",
      "string",
      "string suffix structures",
      "two pointers"
    ]
  },
  {
    "id": 7069,
    "title": "Erase and Extend (Easy Version)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "dynamic programming",
      "greedy",
      "hash table",
      "implementation",
      "string",
      "string suffix structures",
      "two pointers"
    ]
  },
  {
    "id": 7070,
    "title": "Deleting Divisors",
    "difficulty": "medium",
    "category": [
      "game theory",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7071,
    "title": "Challenging Cliffs",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 7072,
    "title": "Bad Boy",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7073,
    "title": "Arithmetic Array",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 7074,
    "title": "Omkar and Akmar",
    "difficulty": "hard",
    "category": [
      "chinese remainder theorem",
      "combinatorics",
      "constructive algorithms",
      "fast fourier transform",
      "game theory",
      "geometry",
      "math",
      "meet in the middle",
      "string suffix structures"
    ]
  },
  {
    "id": 7075,
    "title": "Omkar and Forest",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "graph",
      "math",
      "shortest path"
    ]
  },
  {
    "id": 7076,
    "title": "Omkar and Medians",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7077,
    "title": "Diluc and Kaeya",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "hash table",
      "number theory"
    ]
  },
  {
    "id": 7078,
    "title": "Prinzessin der Verurteilung",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "string"
    ]
  },
  {
    "id": 7079,
    "title": "Omkar and Bad Story",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms"
    ]
  },
  {
    "id": 7080,
    "title": "String Distance",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "hash table",
      "implementation",
      "string"
    ]
  },
  {
    "id": 7081,
    "title": "Gold Transfer",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "interactive",
      "tree"
    ]
  },
  {
    "id": 7082,
    "title": "Playoff Tournament",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "graph traversal",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 7083,
    "title": "Unstable String",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy",
      "implementation",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 7084,
    "title": "Array Reodering",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "math",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 7085,
    "title": "Fair Playoff",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 7086,
    "title": "Lost Nodes",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph",
      "interactive",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 7087,
    "title": "A New Beginning",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "geometry",
      "sorting"
    ]
  },
  {
    "id": 7088,
    "title": "Falling Sand (Hard Version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 7089,
    "title": "Falling Sand (Easy Version)",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 7090,
    "title": "Lost Array",
    "difficulty": "hard",
    "category": [
      "graph",
      "greedy",
      "interactive",
      "shortest path"
    ]
  },
  {
    "id": 7091,
    "title": "Lost Tree",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "interactive",
      "tree"
    ]
  },
  {
    "id": 7092,
    "title": "Little Alawn's Puzzle",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph",
      "math",
      "union find"
    ]
  },
  {
    "id": 7093,
    "title": "Histogram Ugliness",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 7094,
    "title": "Colour the Flag",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 7095,
    "title": "Pawns",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 7096,
    "title": "Excursions",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "graph",
      "graph matching",
      "graph traversal",
      "max flow",
      "special problem"
    ]
  },
  {
    "id": 7097,
    "title": "Submatrices",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "data structures",
      "dynamic programming",
      "special problem"
    ]
  },
  {
    "id": 7098,
    "title": "Biome Map",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "special problem"
    ]
  },
  {
    "id": 7099,
    "title": "Binary String Partition",
    "difficulty": "easy",
    "category": [
      "binary search",
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 7100,
    "title": "Chess Team Forming",
    "difficulty": "easy",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 7101,
    "title": "String Searching",
    "difficulty": "easy",
    "category": [
      "hash table",
      "special problem"
    ]
  },
  {
    "id": 7102,
    "title": "Sweets",
    "difficulty": "easy",
    "category": [
      "data structures",
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 7103,
    "title": "Nearest Point Function",
    "difficulty": "easy",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 7104,
    "title": "Travel to Bertown",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math",
      "special problem"
    ]
  },
  {
    "id": 7105,
    "title": "Prefixes and Suffixes",
    "difficulty": "easy",
    "category": [
      "special problem",
      "string"
    ]
  },
  {
    "id": 7106,
    "title": "Good Array",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 7107,
    "title": "Teams Forming",
    "difficulty": "easy",
    "category": [
      "sorting",
      "special problem"
    ]
  },
  {
    "id": 7108,
    "title": "Uniform String",
    "difficulty": "easy",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 7109,
    "title": "Frog Jumping",
    "difficulty": "easy",
    "category": [
      "math",
      "special problem"
    ]
  },
  {
    "id": 7110,
    "title": "A+B (Trial Problem)",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 7111,
    "title": "Сортировка слиянием",
    "difficulty": "easy",
    "category": [
      "binary search",
      "special problem"
    ]
  },
  {
    "id": 7112,
    "title": "Сортировка слиянием",
    "difficulty": "easy",
    "category": [
      "brute force",
      "special problem"
    ]
  },
  {
    "id": 7113,
    "title": "Сортировка слиянием",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 7114,
    "title": "Редактируем Зингер | color",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 7115,
    "title": "Симметричный амфитеатр",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "special problem"
    ]
  },
  {
    "id": 7116,
    "title": "Мониторинг",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 7117,
    "title": "Мониторинг",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 7118,
    "title": "Зингер | color",
    "difficulty": "easy",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 7119,
    "title": "Turing's Award",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 7120,
    "title": "What a Reversal",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 7121,
    "title": "Bingo",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 7122,
    "title": "Minimax",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "string"
    ]
  },
  {
    "id": 7123,
    "title": "Secret Santa",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy",
      "math",
      "max flow"
    ]
  },
  {
    "id": 7124,
    "title": "Pursuit",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 7125,
    "title": "Putting Plates",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 7126,
    "title": "Binary Decimal",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 7127,
    "title": "Sifid and Strange Subsequences",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 7128,
    "title": "Eshag Loves Big Arrays",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7129,
    "title": "AmShZ Farm",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 7130,
    "title": "Mashtali and Hagh Trees",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 7131,
    "title": "It's a bird! No, it's a plane! No, it's AaParsa!",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 7132,
    "title": "Trees of Tranquillity",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 7133,
    "title": "Kavi on Pairing Duty",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 7134,
    "title": "Parsa's Humongous Tree",
    "difficulty": "medium",
    "category": [
      "divide and conquer",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 7135,
    "title": "Partition Game",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "divide and conquer",
      "dynamic programming"
    ]
  },
  {
    "id": 7136,
    "title": "MEX Tree",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "graph traversal",
      "implementation",
      "math",
      "tree"
    ]
  },
  {
    "id": 7137,
    "title": "Sequence Pair Weight",
    "difficulty": "medium",
    "category": [
      "hash table",
      "implementation",
      "math"
    ]
  },
  {
    "id": 7138,
    "title": "Palindrome Game (hard version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "game theory"
    ]
  },
  {
    "id": 7139,
    "title": "Palindrome Game (easy version)",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "game theory"
    ]
  },
  {
    "id": 7140,
    "title": "And Then There Were K",
    "difficulty": "easy",
    "category": [
      "bit manipulation"
    ]
  },
  {
    "id": 7141,
    "title": "Median Queries",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "interactive",
      "probability"
    ]
  },
  {
    "id": 7142,
    "title": "Oolimry and Suffix Array",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 7143,
    "title": "Kill Anton",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "math",
      "string"
    ]
  },
  {
    "id": 7144,
    "title": "Potions (Hard Version)",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 7145,
    "title": "Potions (Easy Version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7146,
    "title": "I Hate 1111",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7147,
    "title": "Mean Inequality",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "sorting"
    ]
  },
  {
    "id": 7148,
    "title": "Goblins And Gnomes",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "graph matching",
      "max flow"
    ]
  },
  {
    "id": 7149,
    "title": "Assimilation IV",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "probability",
      "two pointers"
    ]
  },
  {
    "id": 7150,
    "title": "Armchairs",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph matching",
      "greedy",
      "max flow"
    ]
  },
  {
    "id": 7151,
    "title": "Robot Collisions",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 7152,
    "title": "Permutation Sort",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 7153,
    "title": "Potion-making",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 7154,
    "title": "Hopping Around the Array ",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 7155,
    "title": "Try Booking",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer"
    ]
  },
  {
    "id": 7156,
    "title": "Favorite Game",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 7157,
    "title": "Crypto Lights",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 7158,
    "title": "Love-Hate",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "probability"
    ]
  },
  {
    "id": 7159,
    "title": "Compression and Expansion",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "greedy",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 7160,
    "title": "Lord of the Values",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 7161,
    "title": "Game of Life",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 7162,
    "title": "Nastia and a Beautiful Matrix",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7163,
    "title": "Nastia Plays with a Tree",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "implementation",
      "tree",
      "union find"
    ]
  },
  {
    "id": 7164,
    "title": "Nastia and a Hidden Permutation",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "interactive"
    ]
  },
  {
    "id": 7165,
    "title": "Nastia and a Good Array",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7166,
    "title": "Nastia and Nearly Good Numbers",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7167,
    "title": "To Go Or Not To Go?",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph",
      "graph traversal",
      "greedy",
      "implementation",
      "shortest path"
    ]
  },
  {
    "id": 7168,
    "title": "Guess the K-th Zero (Hard version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "interactive"
    ]
  },
  {
    "id": 7169,
    "title": "Guess the K-th Zero (Easy version)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "interactive"
    ]
  },
  {
    "id": 7170,
    "title": "Arranging The Sheep",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 7171,
    "title": "Same Differences",
    "difficulty": "medium",
    "category": [
      "data structures",
      "hash table",
      "math"
    ]
  },
  {
    "id": 7172,
    "title": "Not Adjacent Matrix",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 7173,
    "title": "Ordinary Numbers",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7174,
    "title": "Do Not Be Distracted!",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 7175,
    "title": "Chests and Keys",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "graph traversal",
      "max flow"
    ]
  },
  {
    "id": 7176,
    "title": "Off by One",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "geometry",
      "graph",
      "graph traversal",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 7177,
    "title": "Maximum Sum of Products",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "implementation",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 7178,
    "title": "Berland Regional",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "greedy",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 7179,
    "title": "The Cake Is a Lie",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 7180,
    "title": "Red and Blue Beans",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 7181,
    "title": "Fly Around the World",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "geometry"
    ]
  },
  {
    "id": 7182,
    "title": "Starry Night Camping",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "max flow"
    ]
  },
  {
    "id": 7183,
    "title": "Reunion",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 7184,
    "title": "Group Photo",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 7185,
    "title": "Explorer Space",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 7186,
    "title": "Fillomino 2",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7187,
    "title": "Morning Jogging",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 7188,
    "title": "Sum of 2050",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 7189,
    "title": "Baby Ehab Plays with Permutations",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 7190,
    "title": "Cut",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "graph",
      "number theory",
      "two pointers"
    ]
  },
  {
    "id": 7191,
    "title": "Baby Ehab Partitions Again",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 7192,
    "title": "AGAGA XOOORRR",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7193,
    "title": "Tit for Tat",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 7194,
    "title": "Phoenix and Diamonds",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 7195,
    "title": "Phoenix and Bits",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 7196,
    "title": "Phoenix and Odometers",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7197,
    "title": "Phoenix and Earthquake",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy",
      "tree",
      "union find"
    ]
  },
  {
    "id": 7198,
    "title": "Phoenix and Computers",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 7199,
    "title": "Phoenix and Socks",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7200,
    "title": "Phoenix and Towers",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 7201,
    "title": "Phoenix and Puzzle",
    "difficulty": "easy",
    "category": [
      "brute force",
      "geometry",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7202,
    "title": "Phoenix and Gold",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7203,
    "title": "Baby Ehab's Hyper Apartment",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph",
      "interactive",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7204,
    "title": "Cut and Stick",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 7205,
    "title": "Product 1 Modulo N",
    "difficulty": "medium",
    "category": [
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 7206,
    "title": "AND 0, Sum Big",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 7207,
    "title": "Perfectly Imperfect Array",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 7208,
    "title": "Swapping Problem",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 7209,
    "title": "Cost Equilibrium",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "math",
      "sorting"
    ]
  },
  {
    "id": 7210,
    "title": "GCD and MST",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy",
      "number theory",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 7211,
    "title": "Add One",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 7212,
    "title": "AND Sequences",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "combinatorics",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 7213,
    "title": "Array and Peaks",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 7214,
    "title": "Short Task",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7215,
    "title": "Education",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7216,
    "title": "Permutation by Sum",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7217,
    "title": "Corrupted Array",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 7218,
    "title": "A-B Palindrome",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation",
      "string"
    ]
  },
  {
    "id": 7219,
    "title": "Almost Rectangle",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 7220,
    "title": "Spy Detected!",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 7221,
    "title": "Chips on a Board",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "data structures",
      "dynamic programming",
      "game theory",
      "two pointers"
    ]
  },
  {
    "id": 7222,
    "title": "Chainword",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "matrix",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 7223,
    "title": "Colorings and Dominoes",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7224,
    "title": "Min Cost String",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph",
      "greedy",
      "string"
    ]
  },
  {
    "id": 7225,
    "title": "Yet Another Card Deck",
    "difficulty": "easy",
    "category": [
      "brute force",
      "data structures",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 7226,
    "title": "GCD Length",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7227,
    "title": "Review Site",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 7228,
    "title": "King's Task",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph",
      "implementation"
    ]
  },
  {
    "id": 7229,
    "title": "Japanese Game",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 7230,
    "title": "Is It Rated?",
    "difficulty": "hard",
    "category": [
      "greedy",
      "interactive",
      "math",
      "probability"
    ]
  },
  {
    "id": 7231,
    "title": "Hard Optimization",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 7232,
    "title": "Guide",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 7233,
    "title": "Fiber Shape",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 7234,
    "title": "Equilibrium Point /\\textbackslash/\\textbackslash",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 7235,
    "title": "Digits",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7236,
    "title": "Cactus Not Enough",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph matching",
      "graph traversal"
    ]
  },
  {
    "id": 7237,
    "title": "Button Lock",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph matching",
      "max flow"
    ]
  },
  {
    "id": 7238,
    "title": "ASCII Automata Art",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 7239,
    "title": "The Sports Festival",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7240,
    "title": "TMT Document",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 7241,
    "title": "Average Height",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 7242,
    "title": "Optimal Encoding",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures"
    ]
  },
  {
    "id": 7243,
    "title": "Tree Calendar",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "graph traversal",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 7244,
    "title": "Swap Pass",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "geometry",
      "sorting"
    ]
  },
  {
    "id": 7245,
    "title": "Complete the MST",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "data structures",
      "graph",
      "graph traversal",
      "greedy",
      "tree",
      "union find"
    ]
  },
  {
    "id": 7246,
    "title": "Almost Sorted",
    "difficulty": "medium",
    "category": [
      "binary search",
      "combinatorics",
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 7247,
    "title": "Binary Literature",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 7248,
    "title": "Maximize the Remaining String",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy",
      "string"
    ]
  },
  {
    "id": 7249,
    "title": "Triangular Paths",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "math",
      "shortest path",
      "sorting"
    ]
  },
  {
    "id": 7250,
    "title": "Restoring the Permutation",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 7251,
    "title": "Epic Transformation",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 7252,
    "title": "Double-ended Strings",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 7253,
    "title": "Partial Replacement",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7254,
    "title": "Strange Table",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 7255,
    "title": "Mysterious language again, seriously?",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 7256,
    "title": "L BREAK into program",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 7257,
    "title": "Encoded message",
    "difficulty": "hard",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 7258,
    "title": "Math",
    "difficulty": "hard",
    "category": [
      "math",
      "special problem"
    ]
  },
  {
    "id": 7259,
    "title": "Cakewalk",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "shortest path",
      "special problem"
    ]
  },
  {
    "id": 7260,
    "title": "Xenolith? Hippodrome?",
    "difficulty": "medium",
    "category": [
      "number theory",
      "special problem"
    ]
  },
  {
    "id": 7261,
    "title": "Fibonacci Words",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 7262,
    "title": "DMCA",
    "difficulty": "medium",
    "category": [
      "implementation",
      "number theory",
      "special problem"
    ]
  },
  {
    "id": 7263,
    "title": "Is it rated - 2",
    "difficulty": "easy",
    "category": [
      "implementation",
      "interactive",
      "special problem"
    ]
  },
  {
    "id": 7264,
    "title": "Flip the Bits",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 7265,
    "title": " Déjà Vu",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "string"
    ]
  },
  {
    "id": 7266,
    "title": "Balance the Cards",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "divide and conquer",
      "geometry",
      "graph",
      "implementation"
    ]
  },
  {
    "id": 7267,
    "title": "2-Coloring",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 7268,
    "title": "Flip the Cards",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "constructive algorithms",
      "data structures",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7269,
    "title": "Travelling Salesman Problem",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "shortest path",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7270,
    "title": "3-Coloring",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "game theory",
      "interactive"
    ]
  },
  {
    "id": 7271,
    "title": "Balance the Bits",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 7272,
    "title": "Napoleon Cake",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 7273,
    "title": "Alexey and Train",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 7274,
    "title": "Cupboards Jumps",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 7275,
    "title": "Subset Trick",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 7276,
    "title": "Tiles for Bathroom",
    "difficulty": "hard",
    "category": [
      "data structures",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7277,
    "title": "Matrix Sorting",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 7278,
    "title": "Two chandeliers",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "chinese remainder theorem",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7279,
    "title": "Going Home",
    "difficulty": "medium",
    "category": [
      "brute force",
      "hash table",
      "implementation",
      "math"
    ]
  },
  {
    "id": 7280,
    "title": "Graph Coloring",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "interactive"
    ]
  },
  {
    "id": 7281,
    "title": "Diameter Cuts",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 7282,
    "title": "Chaotic Merge",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "string"
    ]
  },
  {
    "id": 7283,
    "title": "The Number of Pairs",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7284,
    "title": "Minimum Grid Path",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7285,
    "title": "Binary Removals",
    "difficulty": "easy",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7286,
    "title": "Domino on Windowsill",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 7287,
    "title": "Christmas Game",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "dynamic programming",
      "game theory",
      "graph traversal",
      "math",
      "tree"
    ]
  },
  {
    "id": 7288,
    "title": "Two Houses",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph",
      "greedy",
      "interactive",
      "sorting"
    ]
  },
  {
    "id": 7289,
    "title": "Bananas in a Microwave",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 7290,
    "title": "Planar Reflections",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 7291,
    "title": "Box Fitting",
    "difficulty": "medium",
    "category": [
      "binary search",
      "bit manipulation",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 7292,
    "title": "GCD Sum",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 7293,
    "title": "Square-Free Division (hard version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "math",
      "number theory",
      "two pointers"
    ]
  },
  {
    "id": 7294,
    "title": "Square-Free Division (easy version)",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "math",
      "number theory",
      "two pointers"
    ]
  },
  {
    "id": 7295,
    "title": "Genius",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "graph",
      "number theory"
    ]
  },
  {
    "id": 7296,
    "title": "k-LCM (hard version)",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 7297,
    "title": "k-LCM (easy version)",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 7298,
    "title": "M-arrays",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7299,
    "title": "Meximization",
    "difficulty": "easy",
    "category": [
      "brute force",
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 7300,
    "title": "Max and Mex",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 7301,
    "title": "Split it!",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "string"
    ]
  },
  {
    "id": 7302,
    "title": "Squares",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "graph",
      "tree"
    ]
  },
  {
    "id": 7303,
    "title": "Qingshan and Daniel",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7304,
    "title": "BFS Trees",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "graph",
      "graph traversal",
      "math",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 7305,
    "title": "Garden of the Sun",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph"
    ]
  },
  {
    "id": 7306,
    "title": "Let's Go Hiking",
    "difficulty": "hard",
    "category": [
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 7307,
    "title": "Diamond Miner",
    "difficulty": "medium",
    "category": [
      "geometry",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 7308,
    "title": "Delete The Edges",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 7309,
    "title": "A-Z Graph",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "graph",
      "hash table"
    ]
  },
  {
    "id": 7310,
    "title": "Dogeforces",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "divide and conquer",
      "graph traversal",
      "greedy",
      "sorting",
      "tree",
      "union find"
    ]
  },
  {
    "id": 7311,
    "title": "1D Sokoban",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 7312,
    "title": "Berland Crossword",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7313,
    "title": "ABC String",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 7314,
    "title": "Enchanted Matrix",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "interactive",
      "number theory"
    ]
  },
  {
    "id": 7315,
    "title": "Enormous XOR",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "greedy",
      "math",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 7316,
    "title": "GCD of an Array",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "hash table",
      "implementation",
      "math",
      "number theory",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7317,
    "title": "K-beautiful Strings",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "greedy",
      "string"
    ]
  },
  {
    "id": 7318,
    "title": "Planet Lapituletti",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 7319,
    "title": "Anti-knapsack",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 7320,
    "title": "Almost Fault-Tolerant Database",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph traversal",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7321,
    "title": "Genius's Gambit",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7322,
    "title": "Maximum width",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 7323,
    "title": "Card Deck",
    "difficulty": "easy",
    "category": [
      "data structures",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7324,
    "title": "Three swimmers",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 7325,
    "title": "Ruler Of The Zoo",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures"
    ]
  },
  {
    "id": 7326,
    "title": "Yuezheng Ling and Dynamic Tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 7327,
    "title": "Switch and Flip",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "math"
    ]
  },
  {
    "id": 7328,
    "title": "Magnets",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "interactive"
    ]
  },
  {
    "id": 7329,
    "title": "Fib-tree",
    "difficulty": "hard",
    "category": [
      "brute force",
      "divide and conquer",
      "graph traversal",
      "number theory",
      "tree"
    ]
  },
  {
    "id": 7330,
    "title": "Zookeeper and The Infinite Zoo",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7331,
    "title": "Pekora and Trampoline",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7332,
    "title": "Minimal Cost",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 7333,
    "title": "K-th Largest Value",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7334,
    "title": "Old Floppy Drive ",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "math"
    ]
  },
  {
    "id": 7335,
    "title": "Equalize the Array",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 7336,
    "title": "Accidental Victory",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 7337,
    "title": "Permutation Transformation",
    "difficulty": "medium",
    "category": [
      "divide and conquer",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 7338,
    "title": "Sum of Cubes",
    "difficulty": "easy",
    "category": [
      "binary search",
      "brute force",
      "math"
    ]
  },
  {
    "id": 7339,
    "title": "Balanced Remainders",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 7340,
    "title": "Dense Array",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 7341,
    "title": "Flower Shop",
    "difficulty": "hard",
    "category": [
      "data structures",
      "fast fourier transform",
      "math",
      "special problem"
    ]
  },
  {
    "id": 7342,
    "title": "Demonic Invasion",
    "difficulty": "hard",
    "category": [
      "max flow",
      "special problem"
    ]
  },
  {
    "id": 7343,
    "title": "Build From Suffixes",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "special problem"
    ]
  },
  {
    "id": 7344,
    "title": "Painting Numbers",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "number theory",
      "special problem"
    ]
  },
  {
    "id": 7345,
    "title": "Dogecoin",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "special problem"
    ]
  },
  {
    "id": 7346,
    "title": "Palindromic Doubles",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "special problem"
    ]
  },
  {
    "id": 7347,
    "title": "Problemsolving Marathon",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 7348,
    "title": "Two Policemen",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "math",
      "special problem"
    ]
  },
  {
    "id": 7349,
    "title": "RBS Deletion",
    "difficulty": "medium",
    "category": [
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 7350,
    "title": "From Zero To Y",
    "difficulty": "easy",
    "category": [
      "math",
      "special problem"
    ]
  },
  {
    "id": 7351,
    "title": "String Counting",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 7352,
    "title": "Ones",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 7353,
    "title": "Cheap Dinner",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "graph",
      "greedy",
      "implementation",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7354,
    "title": "Pythagorean Triples",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7355,
    "title": "Minimum Ties",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 7356,
    "title": "Cat Cycle",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 7357,
    "title": "Arena",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 7358,
    "title": "Pairs of Paths",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 7359,
    "title": "Paired Payment",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "graph",
      "max flow",
      "shortest path"
    ]
  },
  {
    "id": 7360,
    "title": "Max Median",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 7361,
    "title": "Guessing the Greatest (hard version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "interactive"
    ]
  },
  {
    "id": 7362,
    "title": "Guessing the Greatest (easy version)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "interactive"
    ]
  },
  {
    "id": 7363,
    "title": "Eastern Exhibition",
    "difficulty": "medium",
    "category": [
      "binary search",
      "geometry",
      "shortest path",
      "sorting"
    ]
  },
  {
    "id": 7364,
    "title": "Shifting Stacks",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7365,
    "title": "Copy or Prefix Sum",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 7366,
    "title": "Move and Swap",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 7367,
    "title": "Multiples and Power Differences",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7368,
    "title": "Floor and Mod",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7369,
    "title": "Replace and Keep Sorted",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 7370,
    "title": "Add and Divide",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7371,
    "title": "Exam",
    "difficulty": "hard",
    "category": [
      "data structures",
      "string suffix structures",
      "tree"
    ]
  },
  {
    "id": 7372,
    "title": "Vabank",
    "difficulty": "hard",
    "category": [
      "binary search",
      "interactive"
    ]
  },
  {
    "id": 7373,
    "title": "Useful Edges",
    "difficulty": "hard",
    "category": [
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 7374,
    "title": "Skyline Photo",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "dynamic programming"
    ]
  },
  {
    "id": 7375,
    "title": "Playlist",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation",
      "shortest path",
      "union find"
    ]
  },
  {
    "id": 7376,
    "title": "Basic Diplomacy",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7377,
    "title": "Restore Modulo",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 7378,
    "title": "Prison Break",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 7379,
    "title": "AB Tree",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 7380,
    "title": "Sorting Books",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7381,
    "title": "AB Graph",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7382,
    "title": "Fence Painting",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 7383,
    "title": "New Colony",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7384,
    "title": "Space Navigation ",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 7385,
    "title": "The Great Hero",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 7386,
    "title": "Yet Another String Game",
    "difficulty": "easy",
    "category": [
      "game theory",
      "greedy",
      "string"
    ]
  },
  {
    "id": 7387,
    "title": "School Clubs",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "fast fourier transform",
      "math",
      "number theory",
      "probability"
    ]
  },
  {
    "id": 7388,
    "title": "Odd Mineral Resource",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force",
      "data structures",
      "probability",
      "tree"
    ]
  },
  {
    "id": 7389,
    "title": "Continuous City",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms"
    ]
  },
  {
    "id": 7390,
    "title": "Painting the Array II",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7391,
    "title": "Painting the Array I",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7392,
    "title": "Searching Local Minimum",
    "difficulty": "medium",
    "category": [
      "binary search",
      "interactive",
      "ternary search"
    ]
  },
  {
    "id": 7393,
    "title": "Nezzar and Symmetric Array",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 7394,
    "title": "Nezzar and Lucky Number",
    "difficulty": "easy",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7395,
    "title": "Nezzar and Colorful Balls",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 7396,
    "title": "Nezzar and Chocolate Bars",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "fast fourier transform",
      "math",
      "probability"
    ]
  },
  {
    "id": 7397,
    "title": "Nezzar and Tournaments",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 7398,
    "title": "Nezzar and Hidden Permutations",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 7399,
    "title": "Nezzar and Nice Beatmap",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "geometry",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 7400,
    "title": "Nezzar and Binary String",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 7401,
    "title": "Nezzar and Board",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7402,
    "title": "Minimum Difference",
    "difficulty": "hard",
    "category": [
      "data structures",
      "hash table",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7403,
    "title": "Lanterns",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 7404,
    "title": "Pattern Matching",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "graph",
      "graph traversal",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 7405,
    "title": "Journey",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph traversal",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 7406,
    "title": "Longest Simple Cycle",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "greedy"
    ]
  },
  {
    "id": 7407,
    "title": "Inflation",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7408,
    "title": "K-divisible Sum",
    "difficulty": "easy",
    "category": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7409,
    "title": "Strange Beauty",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 7410,
    "title": "Unusual Matrix",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "brute force",
      "constructive algorithms"
    ]
  },
  {
    "id": 7411,
    "title": "Advertising Agency",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math",
      "sorting"
    ]
  },
  {
    "id": 7412,
    "title": "Cleaning the Phone",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7413,
    "title": "Ball in Berland",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "graph",
      "math"
    ]
  },
  {
    "id": 7414,
    "title": "New Year's Number",
    "difficulty": "easy",
    "category": [
      "brute force",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 7415,
    "title": "Odd Divisor",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 7416,
    "title": "1 2 3 4 ...",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "matrix"
    ]
  },
  {
    "id": 7417,
    "title": "What Is It?",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 7418,
    "title": "Cleaning",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7419,
    "title": "Array Destruction",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 7420,
    "title": "Different Divisors",
    "difficulty": "easy",
    "category": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7421,
    "title": "Puzzle From the Future",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 7422,
    "title": "Tiles",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 7423,
    "title": "Strange Set",
    "difficulty": "hard",
    "category": [
      "math",
      "max flow"
    ]
  },
  {
    "id": 7424,
    "title": "Minimum Path",
    "difficulty": "hard",
    "category": [
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 7425,
    "title": "Program",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "implementation",
      "string"
    ]
  },
  {
    "id": 7426,
    "title": "No More Inversions",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 7427,
    "title": "String LCM",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math",
      "number theory",
      "string"
    ]
  },
  {
    "id": 7428,
    "title": "Replacing Elements",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 7429,
    "title": "Moving to the Capital",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 7430,
    "title": "New Year's Puzzle",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "graph matching",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 7431,
    "title": "Correct Placement",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7432,
    "title": "Even-Odd Game",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "game theory",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 7433,
    "title": "Long Jumps",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "graph"
    ]
  },
  {
    "id": 7434,
    "title": "Fair Division",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7435,
    "title": "Cards for Friends",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 7436,
    "title": "Strange List",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 7437,
    "title": "Strange Partition",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7438,
    "title": "Strange Covering",
    "difficulty": "hard",
    "category": [
      "divide and conquer"
    ]
  },
  {
    "id": 7439,
    "title": "Strange Permutation",
    "difficulty": "hard",
    "category": [
      "binary search",
      "combinatorics",
      "data structures",
      "dynamic programming",
      "graph",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 7440,
    "title": "Strange Housing",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph matching",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 7441,
    "title": "Strange Shuffle",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "interactive"
    ]
  },
  {
    "id": 7442,
    "title": "Strange Definition",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "graph",
      "hash table",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7443,
    "title": "Strange Birthday Party",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7444,
    "title": "Power Sockets",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 7445,
    "title": "A Bit Similar",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "hash table",
      "string",
      "string suffix structures",
      "two pointers"
    ]
  },
  {
    "id": 7446,
    "title": "Ceil Divisions",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7447,
    "title": "Building a Fence",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 7448,
    "title": "Red and Blue",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7449,
    "title": "Regular Bracket Sequence",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 7450,
    "title": "Waste Sorting",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7451,
    "title": "Similar Sets",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "implementation"
    ]
  },
  {
    "id": 7452,
    "title": "Prime Divisors Selection",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7453,
    "title": "The Robot",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 7454,
    "title": "Road Reform",
    "difficulty": "medium",
    "category": [
      "graph",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 7455,
    "title": "Plane Tiling",
    "difficulty": "hard",
    "category": [
      "geometry",
      "implementation",
      "math"
    ]
  },
  {
    "id": 7456,
    "title": "K and Medians",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7457,
    "title": "Hobbits",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry"
    ]
  },
  {
    "id": 7458,
    "title": "Full Turn",
    "difficulty": "medium",
    "category": [
      "geometry",
      "hash table",
      "number theory"
    ]
  },
  {
    "id": 7459,
    "title": "Four Segments",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 7460,
    "title": "Firecrackers",
    "difficulty": "medium",
    "category": [
      "binary search",
      "sorting"
    ]
  },
  {
    "id": 7461,
    "title": "Berpizza",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 7462,
    "title": "Bakery",
    "difficulty": "hard",
    "category": [
      "data structures",
      "union find"
    ]
  },
  {
    "id": 7463,
    "title": "LaIS",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7464,
    "title": "Distinctive Roots in a Tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 7465,
    "title": "Sum of Paths",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 7466,
    "title": "Three Bags",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 7467,
    "title": "Hills And Valleys",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 7468,
    "title": "Wizard of Orz",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7469,
    "title": "The Riddle of the Sphinx",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "interactive"
    ]
  },
  {
    "id": 7470,
    "title": "Finding satisfactory solutions",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7471,
    "title": "Song of the Sirens",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "divide and conquer",
      "hash table",
      "math",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 7472,
    "title": "Euclid's nightmare",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "graph",
      "graph traversal",
      "greedy",
      "math",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 7473,
    "title": "Apollo versus Pan",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "math"
    ]
  },
  {
    "id": 7474,
    "title": "13th Labour of Heracles",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 7475,
    "title": "Canine poetry",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "string"
    ]
  },
  {
    "id": 7476,
    "title": "Last minute enhancements",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7477,
    "title": "Bovine Dilemma",
    "difficulty": "easy",
    "category": [
      "brute force",
      "geometry",
      "math"
    ]
  },
  {
    "id": 7478,
    "title": "My Beautiful Madness",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 7479,
    "title": "Max Correct Set",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 7480,
    "title": "Plan of Lectures",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "implementation",
      "sorting",
      "tree",
      "union find"
    ]
  },
  {
    "id": 7481,
    "title": "Pairs",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 7482,
    "title": "Busy Robot",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 7483,
    "title": "Find The Array",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 7484,
    "title": "Dungeon",
    "difficulty": "easy",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 7485,
    "title": "The Treasure of The Segments",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 7486,
    "title": "Close Tuples (hard version)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "combinatorics",
      "implementation",
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7487,
    "title": "Close Tuples (easy version)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "combinatorics",
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7488,
    "title": "Add to Neighbour and Remove",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7489,
    "title": "Unique Number",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7490,
    "title": "Last Year's Substring",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "implementation",
      "string"
    ]
  },
  {
    "id": 7491,
    "title": "Favorite Sequence",
    "difficulty": "easy",
    "category": [
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 7492,
    "title": "Mathematical Expression",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7493,
    "title": "Water Level",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 7494,
    "title": "Divide and Summarize",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "divide and conquer",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 7495,
    "title": "Random Events",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 7496,
    "title": "Find the Spruce",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 7497,
    "title": "String Generation",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 7498,
    "title": "Move and Turn",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 7499,
    "title": "Red-Blue Shuffle",
    "difficulty": "easy",
    "category": [
      "math",
      "probability"
    ]
  },
  {
    "id": 7500,
    "title": "Range Diameter Sum",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 7501,
    "title": "Nim Shortcuts",
    "difficulty": "hard",
    "category": [
      "data structures",
      "game theory"
    ]
  },
  {
    "id": 7502,
    "title": "Flip and Reverse",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "greedy"
    ]
  },
  {
    "id": 7503,
    "title": "Latin Square",
    "difficulty": "hard",
    "category": [
      "math",
      "matrix"
    ]
  },
  {
    "id": 7504,
    "title": "Glass Half Spilled",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 7505,
    "title": "Row GCD",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 7506,
    "title": "XOR-ranges",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7507,
    "title": "Forbidden Value",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 7508,
    "title": "String and Operations",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7509,
    "title": "Four Points",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "geometry",
      "greedy",
      "implementation",
      "math",
      "max flow",
      "ternary search"
    ]
  },
  {
    "id": 7510,
    "title": "Sequence and Swaps",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 7511,
    "title": "Ping-pong",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "game theory",
      "math"
    ]
  },
  {
    "id": 7512,
    "title": "Jumps",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 7513,
    "title": "Strange Functions",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 7514,
    "title": "Array Partition",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 7515,
    "title": "Number of Simple Paths",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 7516,
    "title": "Number into Sequence",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7517,
    "title": "Sequence Transformation",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7518,
    "title": "Unique Bid Auction",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 7519,
    "title": "Special Permutation",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "probability"
    ]
  },
  {
    "id": 7520,
    "title": "Even Harder",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 7521,
    "title": "Dog Snacks",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 7522,
    "title": "Checkpoints",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math",
      "probability"
    ]
  },
  {
    "id": 7523,
    "title": "Triangles",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7524,
    "title": "Suffix Operations",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 7525,
    "title": "Cancel the Trains",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 7526,
    "title": "Game On Tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 7527,
    "title": "Divide Powers",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 7528,
    "title": "Two Editorials",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7529,
    "title": "Radio Towers",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 7530,
    "title": "Two Brackets",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 7531,
    "title": "Toy Blocks",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 7532,
    "title": "Robot Program",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 7533,
    "title": "Nullify The Matrix",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "game theory"
    ]
  },
  {
    "id": 7534,
    "title": "Bitwise Queries (Hard Version)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "interactive",
      "math"
    ]
  },
  {
    "id": 7535,
    "title": "Bitwise Queries (Easy Version)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "interactive",
      "math"
    ]
  },
  {
    "id": 7536,
    "title": "Circle Game",
    "difficulty": "medium",
    "category": [
      "game theory",
      "geometry",
      "math"
    ]
  },
  {
    "id": 7537,
    "title": "String Equality",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "hash table",
      "implementation",
      "string"
    ]
  },
  {
    "id": 7538,
    "title": "Non-Substring Subsequence",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 7539,
    "title": "Subtract or Divide",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 7540,
    "title": "Multithreading (Hard Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "implementation",
      "math"
    ]
  },
  {
    "id": 7541,
    "title": "Multithreading (Easy Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 7542,
    "title": "Communism",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 7543,
    "title": "The Struggling Contestant",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 7544,
    "title": "Capitalism",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 7545,
    "title": "Rating Compression",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 7546,
    "title": "Errich-Tac-Toe (Hard Version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 7547,
    "title": "Errich-Tac-Toe (Easy Version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 7548,
    "title": "Balls of Steel",
    "difficulty": "easy",
    "category": [
      "brute force",
      "geometry",
      "greedy"
    ]
  },
  {
    "id": 7549,
    "title": "Avoid Trygub",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "sorting"
    ]
  },
  {
    "id": 7550,
    "title": "Numbers Box",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 7551,
    "title": "Add Candies",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 7552,
    "title": "Line Distance",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "geometry"
    ]
  },
  {
    "id": 7553,
    "title": "Long Recovery",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph traversal"
    ]
  },
  {
    "id": 7554,
    "title": "Frequency Problem (Hard Version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 7555,
    "title": "Frequency Problem (Easy Version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 7556,
    "title": "Xor Tree",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 7557,
    "title": "Catching Cheaters",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 7558,
    "title": "Knapsack",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 7559,
    "title": "Elimination",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 7560,
    "title": "Array Rearrangment",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 7561,
    "title": "Finding the Vertex",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "graph traversal",
      "interactive",
      "tree"
    ]
  },
  {
    "id": 7562,
    "title": "Rectangular Polyline",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "geometry"
    ]
  },
  {
    "id": 7563,
    "title": "Team-Building",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 7564,
    "title": "Divide and Sum",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "sorting"
    ]
  },
  {
    "id": 7565,
    "title": "Division",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7566,
    "title": "Long Permutation",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 7567,
    "title": "The Delivery Dilemma",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 7568,
    "title": "Saving the City",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 7569,
    "title": "Kids Seating",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 7570,
    "title": "Differentiating Games",
    "difficulty": "hard",
    "category": [
      "game theory",
      "interactive"
    ]
  },
  {
    "id": 7571,
    "title": "Black, White and Grey Tree",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 7572,
    "title": "Sum",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7573,
    "title": "Graph Transpositions",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 7574,
    "title": "Identify the Operations",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "data structures",
      "greedy",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 7575,
    "title": "Extreme Subtraction",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7576,
    "title": "Sum of Medians",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 7577,
    "title": "Buy the String",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 7578,
    "title": "Cheat and Win",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "game theory",
      "tree"
    ]
  },
  {
    "id": 7579,
    "title": "INOI Final Contests",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "fast fourier transform"
    ]
  },
  {
    "id": 7580,
    "title": "Greedy Shopping",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "divide and conquer",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7581,
    "title": "Graph Subset Problem",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "graph"
    ]
  },
  {
    "id": 7582,
    "title": "Binary Table (Hard Version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7583,
    "title": "Binary Table (Easy Version)",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 7584,
    "title": "Olha and Igor",
    "difficulty": "hard",
    "category": [
      "interactive",
      "probability",
      "tree"
    ]
  },
  {
    "id": 7585,
    "title": "Yurii Can Do Everything",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "divide and conquer",
      "two pointers"
    ]
  },
  {
    "id": 7586,
    "title": "Powerful Ksenia",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 7587,
    "title": "Engineer Artem",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "chinese remainder theorem",
      "constructive algorithms",
      "fast fourier transform",
      "max flow"
    ]
  },
  {
    "id": 7588,
    "title": "Valerii Against Everyone",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 7589,
    "title": "Specific Tastes of Andre ",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 7590,
    "title": "Death DBMS",
    "difficulty": "hard",
    "category": [
      "data structures",
      "string",
      "string suffix structures",
      "tree"
    ]
  },
  {
    "id": 7591,
    "title": "Emotional Fishermen",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 7592,
    "title": "Make It Increasing",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 7593,
    "title": "Minimal Height Tree",
    "difficulty": "medium",
    "category": [
      "graph",
      "greedy",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 7594,
    "title": "Chef Monocarp",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph matching",
      "greedy",
      "math",
      "max flow",
      "sorting"
    ]
  },
  {
    "id": 7595,
    "title": "Reverse Binary Strings",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 7596,
    "title": "Marketing Scheme",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7597,
    "title": "Sum Over Subsets",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7598,
    "title": "Complicated Computations",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "two pointers"
    ]
  },
  {
    "id": 7599,
    "title": "Bandit in a City",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 7600,
    "title": "Binary Search",
    "difficulty": "medium",
    "category": [
      "binary search",
      "combinatorics"
    ]
  },
  {
    "id": 7601,
    "title": "Prime Square",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 7602,
    "title": "Reorder",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 7603,
    "title": "A Convex Game",
    "difficulty": "hard",
    "category": [
      "game theory",
      "union find"
    ]
  },
  {
    "id": 7604,
    "title": "Reducing Delivery Cost",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 7605,
    "title": "Zero Remainder Sum ",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 7606,
    "title": "Two Round Dances",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 7607,
    "title": "Districts Connection",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph traversal"
    ]
  },
  {
    "id": 7608,
    "title": "Dominant Piranha",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 7609,
    "title": "Yet Another Bookshelf",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7610,
    "title": "Boring Apartments",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 7611,
    "title": "Zero-XOR Array",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "special problem"
    ]
  },
  {
    "id": 7612,
    "title": "Cyclic Shifts",
    "difficulty": "hard",
    "category": [
      "special problem",
      "string"
    ]
  },
  {
    "id": 7613,
    "title": "Rogue-like Game",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy",
      "special problem",
      "two pointers"
    ]
  },
  {
    "id": 7614,
    "title": "Number Deletion Game",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory",
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 7615,
    "title": "Neural Network Problem",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 7616,
    "title": "Chess Match",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 7617,
    "title": "Used Markers",
    "difficulty": "medium",
    "category": [
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 7618,
    "title": "Black Friday",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 7619,
    "title": "Polycarp and the Language of Gods",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem",
      "two pointers"
    ]
  },
  {
    "id": 7620,
    "title": "Selling Hamburgers",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 7621,
    "title": "Yet Another DAG Problem",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "graph",
      "graph traversal",
      "math",
      "max flow"
    ]
  },
  {
    "id": 7622,
    "title": "Realistic Gameplay",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7623,
    "title": "String Reversal",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "string"
    ]
  },
  {
    "id": 7624,
    "title": "String Deletion",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 7625,
    "title": "Numbers on Whiteboard",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 7626,
    "title": "Barrels",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 7627,
    "title": "Number of Apartments",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 7628,
    "title": "Rotary Laser Lock",
    "difficulty": "hard",
    "category": [
      "binary search",
      "interactive"
    ]
  },
  {
    "id": 7629,
    "title": "Lucky Numbers (Hard Version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7630,
    "title": "Lucky Numbers (Easy Version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7631,
    "title": "Fruit Sequences",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 7632,
    "title": "Carrots for Rabbits",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 7633,
    "title": "Bouncing Boomerangs",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7634,
    "title": "ABBB",
    "difficulty": "easy",
    "category": [
      "brute force",
      "data structures",
      "greedy",
      "string"
    ]
  },
  {
    "id": 7635,
    "title": "Belted Rooms",
    "difficulty": "medium",
    "category": [
      "graph",
      "implementation"
    ]
  },
  {
    "id": 7636,
    "title": "Box is Pull",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 7637,
    "title": "Prison Break",
    "difficulty": "hard",
    "category": [
      "binary search",
      "game theory",
      "geometry",
      "ternary search"
    ]
  },
  {
    "id": 7638,
    "title": "One Billion Shades of Grey",
    "difficulty": "hard",
    "category": [
      "graph",
      "max flow"
    ]
  },
  {
    "id": 7639,
    "title": "Boring Card Game",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 7640,
    "title": "Xum",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "math",
      "matrix",
      "number theory"
    ]
  },
  {
    "id": 7641,
    "title": "Unshuffling a Deck",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 7642,
    "title": "The Hard Work of Paparazzi",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 7643,
    "title": "Chess Cheater",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 7644,
    "title": "Avoiding Zero",
    "difficulty": "easy",
    "category": [
      "math",
      "sorting"
    ]
  },
  {
    "id": 7645,
    "title": "Number of Subsequences",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 7646,
    "title": "Rock, Paper, Scissors",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math",
      "max flow"
    ]
  },
  {
    "id": 7647,
    "title": "Non-zero Segments",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 7648,
    "title": "Increase and Copy",
    "difficulty": "easy",
    "category": [
      "binary search",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 7649,
    "title": "Symmetric Matrix",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 7650,
    "title": "Floor Number",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 7651,
    "title": "Impressive Harvesting of The Orchard",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 7652,
    "title": "Huge Boxes of Animal Toys",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 7653,
    "title": "Flamingoes of Mystery",
    "difficulty": "medium",
    "category": [
      "interactive"
    ]
  },
  {
    "id": 7654,
    "title": "Excitation of Atoms",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7655,
    "title": "Danger of Mad Snakes",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 7656,
    "title": "Captain of Knights",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 7657,
    "title": "Blue and Red of Our Faculty!",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "dynamic programming"
    ]
  },
  {
    "id": 7658,
    "title": "Arena of Greed",
    "difficulty": "medium",
    "category": [
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 7659,
    "title": "Ancient Language",
    "difficulty": "hard",
    "category": [
      "graph",
      "sorting"
    ]
  },
  {
    "id": 7660,
    "title": "Years",
    "difficulty": "medium",
    "category": [
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 7661,
    "title": "BubbleSquare Tokens",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 7662,
    "title": "Milutin's Plums",
    "difficulty": "hard",
    "category": [
      "interactive"
    ]
  },
  {
    "id": 7663,
    "title": "Light switches",
    "difficulty": "hard",
    "category": [
      "meet in the middle"
    ]
  },
  {
    "id": 7664,
    "title": "Lonely Numbers",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math",
      "number theory",
      "two pointers"
    ]
  },
  {
    "id": 7665,
    "title": "Bubble Cup hypothesis",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 7666,
    "title": "Lookup Tables",
    "difficulty": "hard",
    "category": [
      "bit manipulation"
    ]
  },
  {
    "id": 7667,
    "title": "Virus",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "graph",
      "union find"
    ]
  },
  {
    "id": 7668,
    "title": "Growing flowers",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 7669,
    "title": "Coins",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 7670,
    "title": "5G Antenna Towers",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 7671,
    "title": "Does anyone else hate the wind?",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 7672,
    "title": "Dušan's Railway",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "graph",
      "tree"
    ]
  },
  {
    "id": 7673,
    "title": "Valuable Paper",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph",
      "graph matching",
      "max flow"
    ]
  },
  {
    "id": 7674,
    "title": "Wakanda Forever",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 7675,
    "title": "Boring Queries",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7676,
    "title": "Minlexes",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 7677,
    "title": "Returning Home",
    "difficulty": "hard",
    "category": [
      "graph",
      "shortest path",
      "sorting"
    ]
  },
  {
    "id": 7678,
    "title": "Bargain",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 7679,
    "title": "Nice Matrix",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 7680,
    "title": "Fence",
    "difficulty": "easy",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 7681,
    "title": "Swedish Heroes",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 7682,
    "title": "Hexagons",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation",
      "math",
      "shortest path"
    ]
  },
  {
    "id": 7683,
    "title": "Palindromifier",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "string"
    ]
  },
  {
    "id": 7684,
    "title": "Putting Bricks in the Wall",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 7685,
    "title": "XORwice",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7686,
    "title": "Battle Lemmings",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7687,
    "title": "Rescue Nibel!",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 7688,
    "title": "Pokémon Army (hard version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7689,
    "title": "Pokémon Army (easy version)",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7690,
    "title": "Rock and Lever",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "math"
    ]
  },
  {
    "id": 7691,
    "title": "Cubes Sorting",
    "difficulty": "easy",
    "category": [
      "math",
      "sorting"
    ]
  },
  {
    "id": 7692,
    "title": "Rain of Fire",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph",
      "graph traversal",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 7693,
    "title": "Decryption",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7694,
    "title": "Sage's Birthday (hard version)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7695,
    "title": "Sage's Birthday (easy version)",
    "difficulty": "easy",
    "category": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 7696,
    "title": "Killjoy",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 7697,
    "title": "Stairs",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 7698,
    "title": "Digit Game",
    "difficulty": "easy",
    "category": [
      "game theory",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7699,
    "title": "Three Occurrences",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "hash table",
      "two pointers"
    ]
  },
  {
    "id": 7700,
    "title": "Equal Product",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math",
      "number theory",
      "two pointers"
    ]
  },
  {
    "id": 7701,
    "title": "Expected Damage",
    "difficulty": "hard",
    "category": [
      "binary search",
      "combinatorics",
      "probability"
    ]
  },
  {
    "id": 7702,
    "title": "Trash Problem",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 7703,
    "title": "Mortal Kombat Tower",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 7704,
    "title": "Negative Prefixes",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 7705,
    "title": "Buying Torches",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 7706,
    "title": "Two Arrays",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 7707,
    "title": "Copy-paste",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 7708,
    "title": "Showing Off",
    "difficulty": "hard",
    "category": [
      "graph matching",
      "greedy",
      "implementation",
      "max flow"
    ]
  },
  {
    "id": 7709,
    "title": "Split",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7710,
    "title": "Graph and Queries",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "implementation",
      "tree",
      "union find"
    ]
  },
  {
    "id": 7711,
    "title": "XOR Inverse",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "greedy",
      "math",
      "sorting",
      "string",
      "tree"
    ]
  },
  {
    "id": 7712,
    "title": "Make Them Equal",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7713,
    "title": "k-Amazing Numbers",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 7714,
    "title": "Cakes for Clones",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 7715,
    "title": "New Game Plus!",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7716,
    "title": "XOR-gun",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms"
    ]
  },
  {
    "id": 7717,
    "title": "Bouncing Ball",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 7718,
    "title": "Repainting Street",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 7719,
    "title": "Prison Break",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 7720,
    "title": "Roads and Ramen",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 7721,
    "title": "Solo mid Oracle",
    "difficulty": "hard",
    "category": [
      "greedy",
      "math",
      "ternary search"
    ]
  },
  {
    "id": 7722,
    "title": "Shurikens",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7723,
    "title": "Perform Easily",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "dynamic programming",
      "implementation",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7724,
    "title": "A New Technique",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 7725,
    "title": "Finding Sasuke",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 7726,
    "title": "No Game No Life",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "game theory",
      "math",
      "matrix"
    ]
  },
  {
    "id": 7727,
    "title": "The Thorny Path",
    "difficulty": "hard",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 7728,
    "title": "Poman Numbers",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 7729,
    "title": "Grime Zoo",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 7730,
    "title": "Peaceful Rooks",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 7731,
    "title": "Fair Numbers",
    "difficulty": "easy",
    "category": [
      "brute force",
      "number theory"
    ]
  },
  {
    "id": 7732,
    "title": "In-game Chat",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 7733,
    "title": "Subsequences of Length Two",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 7734,
    "title": "Two Platforms",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7735,
    "title": "Decrease the Sum of Digits",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 7736,
    "title": "Yet Another Array Restoration",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7737,
    "title": "Minimum Product",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7738,
    "title": "Yet Another Two Integers Problem",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 7739,
    "title": "Bitwise Magic",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 7740,
    "title": "Rainbow Triples",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "max flow"
    ]
  },
  {
    "id": 7741,
    "title": "Clusterization Counting",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "fast fourier transform",
      "graph",
      "tree",
      "union find"
    ]
  },
  {
    "id": 7742,
    "title": "Two Different",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "divide and conquer"
    ]
  },
  {
    "id": 7743,
    "title": "Avoid Rainbow Cycles",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "greedy",
      "sorting",
      "tree",
      "union find"
    ]
  },
  {
    "id": 7744,
    "title": "Searchlights",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "dynamic programming",
      "implementation",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7745,
    "title": "Discrete Acceleration",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "implementation",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 7746,
    "title": "Arrays Sum",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7747,
    "title": "Circle Coloring",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 7748,
    "title": "Egor in the Republic of Dagestan",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 7749,
    "title": "Discrete Centrifugal Jumps",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph"
    ]
  },
  {
    "id": 7750,
    "title": "Chocolate Bunny",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "interactive",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 7751,
    "title": "Big Vova",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7752,
    "title": "Ahahahahahahahaha",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 7753,
    "title": "Deleting Numbers",
    "difficulty": "hard",
    "category": [
      "interactive",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7754,
    "title": "Three Sequences",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7755,
    "title": "Link Cut Centroids",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 7756,
    "title": "Maximum Product",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 7757,
    "title": "Subset Mex",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 7758,
    "title": "Array Cancellation",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 7759,
    "title": "Permutation Forgery",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 7760,
    "title": "Bricks",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph matching",
      "max flow"
    ]
  },
  {
    "id": 7761,
    "title": "Game of Pairs",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "interactive",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7762,
    "title": "Fixed Point Removal",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 7763,
    "title": "Tree Tag",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 7764,
    "title": "Balanced Bitstring",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 7765,
    "title": "Chess Rush",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "implementation",
      "math",
      "special problem"
    ]
  },
  {
    "id": 7766,
    "title": "Spring cleaning",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "special problem",
      "tree"
    ]
  },
  {
    "id": 7767,
    "title": "The Potion of Great Power",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "binary search",
      "data structures",
      "graph",
      "interactive",
      "sorting",
      "special problem",
      "two pointers"
    ]
  },
  {
    "id": 7768,
    "title": "Star Trek",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "game theory",
      "graph",
      "graph traversal",
      "matrix",
      "special problem",
      "tree"
    ]
  },
  {
    "id": 7769,
    "title": "Roads",
    "difficulty": "hard",
    "category": [
      "geometry",
      "sorting",
      "special problem"
    ]
  },
  {
    "id": 7770,
    "title": "Fancy Fence",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation",
      "math",
      "sorting",
      "special problem",
      "union find"
    ]
  },
  {
    "id": 7771,
    "title": "Reverse and Swap",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "data structures"
    ]
  },
  {
    "id": 7772,
    "title": "Divide Square",
    "difficulty": "hard",
    "category": [
      "data structures",
      "geometry",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 7773,
    "title": "Maximum Distributed Tree",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph traversal",
      "greedy",
      "implementation",
      "math",
      "number theory",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 7774,
    "title": "Mere Array",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 7775,
    "title": "Ternary Sequence",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7776,
    "title": "Distance and Axis",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 7777,
    "title": "Mercenaries",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "combinatorics",
      "dynamic programming",
      "math",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 7778,
    "title": "x-prime Substrings",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "graph traversal",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 7779,
    "title": "Clear the Multiset",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7780,
    "title": "Zigzags",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "data structures",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 7781,
    "title": "Binary String Reconstruction",
    "difficulty": "medium",
    "category": [
      "2-sat",
      "brute force",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 7782,
    "title": "RPG Protagonist",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7783,
    "title": "String Similarity",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "string"
    ]
  },
  {
    "id": 7784,
    "title": "Yet Another Segments Subset",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph",
      "sorting"
    ]
  },
  {
    "id": 7785,
    "title": "Weights Division (hard version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph traversal",
      "greedy",
      "sorting",
      "tree",
      "two pointers"
    ]
  },
  {
    "id": 7786,
    "title": "Weights Division (easy version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 7787,
    "title": "Binary String To Subsequences",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7788,
    "title": "Boats Competition",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 7789,
    "title": "Gifts Fixing",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 7790,
    "title": "Remove Smallest",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 7791,
    "title": "Running Competition",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "fast fourier transform",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7792,
    "title": "Controversial Rounds",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 7793,
    "title": "Two Types of Spells",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 7794,
    "title": "Colored Rectangles",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 7795,
    "title": "Good Subarrays",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 7796,
    "title": "Substring Removal Game",
    "difficulty": "easy",
    "category": [
      "game theory",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 7797,
    "title": "Bad Triangle",
    "difficulty": "easy",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 7798,
    "title": "Power Sequence",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 7799,
    "title": "Juggling Letters",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 7800,
    "title": "Distance Matching",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 7801,
    "title": "Rainbow Rectangles",
    "difficulty": "hard",
    "category": [
      "data structures",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7802,
    "title": "Monster Invaders",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7803,
    "title": "Stoned Game",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 7804,
    "title": "Multiples of Length",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 7805,
    "title": "Boboniu and Bit Operations",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7806,
    "title": "Boboniu Plays Chess",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 7807,
    "title": "Boboniu Likes to Color Balls",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 7808,
    "title": "Boboniu and Banknote Collection",
    "difficulty": "hard",
    "category": [
      "string"
    ]
  },
  {
    "id": 7809,
    "title": "Boboniu and Jianghu",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 7810,
    "title": "Boboniu and String",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry",
      "ternary search"
    ]
  },
  {
    "id": 7811,
    "title": "Boboniu Walks on Graph",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph",
      "graph traversal",
      "hash table"
    ]
  },
  {
    "id": 7812,
    "title": "Boboniu Chats with Du",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7813,
    "title": "Twilight and Ancient Scroll (harder version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "hash table",
      "implementation",
      "string",
      "string suffix structures",
      "two pointers"
    ]
  },
  {
    "id": 7814,
    "title": "Twilight and Ancient Scroll (easier version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "hash table",
      "implementation",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 7815,
    "title": "Rarity and New Dress",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "implementation",
      "shortest path"
    ]
  },
  {
    "id": 7816,
    "title": "Pinkie Pie Eats Patty-cakes",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 7817,
    "title": "Applejack and Storages",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7818,
    "title": "Rainbow Dash, Fluttershy and Chess Coloring",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 7819,
    "title": "Kevin and Grid",
    "difficulty": "hard",
    "category": [
      "fast fourier transform",
      "graph",
      "math"
    ]
  },
  {
    "id": 7820,
    "title": "ZS Shuffles Cards",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 7821,
    "title": "Omkar and Pies",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "graph traversal",
      "math",
      "shortest path"
    ]
  },
  {
    "id": 7822,
    "title": "Omkar and Landslide",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7823,
    "title": "Omkar and Duck",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "interactive",
      "math"
    ]
  },
  {
    "id": 7824,
    "title": "Omkar and Bed Wars",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7825,
    "title": "Omkar and Waterslide",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7826,
    "title": "Omkar and Infinity Clock",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 7827,
    "title": "Omkar and Password",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 7828,
    "title": "Pairs of Pairs",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 7829,
    "title": "505",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7830,
    "title": "Cyclic Permutations ",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph",
      "math"
    ]
  },
  {
    "id": 7831,
    "title": "Fix You",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7832,
    "title": "Suborrays",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 7833,
    "title": "Directing Edges",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 7834,
    "title": "Bicolored Segments",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph matching",
      "sorting"
    ]
  },
  {
    "id": 7835,
    "title": "Calendar Ambiguity",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 7836,
    "title": "Segment Intersections",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 7837,
    "title": "Good String",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 7838,
    "title": "Array Walk",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7839,
    "title": "LCM Problem",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7840,
    "title": "Uncle Bogdan and Projections",
    "difficulty": "hard",
    "category": [
      "data structures",
      "geometry",
      "sorting"
    ]
  },
  {
    "id": 7841,
    "title": "Captain Flint and Treasure",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "greedy",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 7842,
    "title": "Uncle Bogdan and Country Happiness",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "greedy",
      "math",
      "tree"
    ]
  },
  {
    "id": 7843,
    "title": "Captain Flint and a Long Voyage",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 7844,
    "title": "Captain Flint and Crew Recruitment",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7845,
    "title": "Viruses",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "shortest path",
      "special problem",
      "string suffix structures"
    ]
  },
  {
    "id": 7846,
    "title": "Village (Maximum)",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "special problem",
      "tree"
    ]
  },
  {
    "id": 7847,
    "title": "Village (Minimum)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "special problem",
      "tree"
    ]
  },
  {
    "id": 7848,
    "title": "Graph",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "graph traversal",
      "math",
      "special problem",
      "ternary search"
    ]
  },
  {
    "id": 7849,
    "title": "Joker",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "divide and conquer",
      "special problem",
      "union find"
    ]
  },
  {
    "id": 7850,
    "title": "Mixture",
    "difficulty": "hard",
    "category": [
      "data structures",
      "geometry",
      "math",
      "sorting",
      "special problem"
    ]
  },
  {
    "id": 7851,
    "title": "Colors",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "interactive",
      "special problem"
    ]
  },
  {
    "id": 7852,
    "title": "Columns Swaps",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "graph",
      "graph traversal",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 7853,
    "title": "Removing Leaves",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 7854,
    "title": "Directing Edges",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 7855,
    "title": "a-Good String",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "divide and conquer",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 7856,
    "title": "Make It Good",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 7857,
    "title": "Restore the Permutation by Merger",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 7858,
    "title": "Three Pairwise Maximums",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 7859,
    "title": "Koa and the Beach (Hard Version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7860,
    "title": "Koa and the Beach (Easy Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7861,
    "title": "Common Prefixes",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "string"
    ]
  },
  {
    "id": 7862,
    "title": "Special Edges",
    "difficulty": "hard",
    "category": [
      "graph",
      "max flow"
    ]
  },
  {
    "id": 7863,
    "title": "Strange Operation",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 7864,
    "title": "Rearrange",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 7865,
    "title": "String Transformation 2",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "graph",
      "tree"
    ]
  },
  {
    "id": 7866,
    "title": "GameGame",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "dynamic programming",
      "game theory",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7867,
    "title": "String Transformation 1",
    "difficulty": "medium",
    "category": [
      "graph",
      "greedy",
      "sorting",
      "string",
      "tree",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 7868,
    "title": "Sequential Nim",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "game theory"
    ]
  },
  {
    "id": 7869,
    "title": "Common Subsequence",
    "difficulty": "easy",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 7870,
    "title": "Origami",
    "difficulty": "hard",
    "category": [
      "geometry",
      "math",
      "sorting"
    ]
  },
  {
    "id": 7871,
    "title": "The Majestic Brown Tree Snake",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree",
      "two pointers"
    ]
  },
  {
    "id": 7872,
    "title": "Mastermind",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph matching",
      "greedy",
      "implementation",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7873,
    "title": "Unmerge",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 7874,
    "title": "Prefix Flip (Hard Version)",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "implementation",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 7875,
    "title": "Prefix Flip (Easy Version)",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "string"
    ]
  },
  {
    "id": 7876,
    "title": "Circular Dungeon",
    "difficulty": "hard",
    "category": [
      "greedy",
      "math",
      "probability"
    ]
  },
  {
    "id": 7877,
    "title": "Strange Addition",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 7878,
    "title": "Merging Towers",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation",
      "tree",
      "union find"
    ]
  },
  {
    "id": 7879,
    "title": "Berserk And Fireball",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 7880,
    "title": "Create The Teams",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 7881,
    "title": "Universal Solution",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 7882,
    "title": "Three Indices",
    "difficulty": "easy",
    "category": [
      "brute force",
      "data structures"
    ]
  },
  {
    "id": 7883,
    "title": "Chess Strikes Back (hard version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer"
    ]
  },
  {
    "id": 7884,
    "title": "Chess Strikes Back (easy version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 7885,
    "title": "Inverse Genealogy",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "divide and conquer",
      "dynamic programming",
      "math",
      "tree"
    ]
  },
  {
    "id": 7886,
    "title": "New Passenger Trams",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7887,
    "title": "Choosing flowers",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7888,
    "title": "Dubious Cyrpto",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7889,
    "title": "Acacius and String",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 7890,
    "title": "Cubic Lattice",
    "difficulty": "hard",
    "category": [
      "geometry",
      "math",
      "matrix",
      "number theory"
    ]
  },
  {
    "id": 7891,
    "title": "Set Merging",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "divide and conquer"
    ]
  },
  {
    "id": 7892,
    "title": "Tree Modification",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph",
      "graph matching",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 7893,
    "title": "Integer Game",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "game theory",
      "interactive",
      "math"
    ]
  },
  {
    "id": 7894,
    "title": "Inversion SwapSort",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 7895,
    "title": "Replace by MEX",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "sorting"
    ]
  },
  {
    "id": 7896,
    "title": "Element Extermination",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 7897,
    "title": "Neighbor Grid",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 7898,
    "title": "Sign Flipping",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 7899,
    "title": "Cyclic Shifts Sorting",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 7900,
    "title": "Reading Books (hard version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "implementation",
      "sorting",
      "ternary search",
      "two pointers"
    ]
  },
  {
    "id": 7901,
    "title": "Reading Books (easy version)",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 7902,
    "title": "Zero Remainder Array",
    "difficulty": "medium",
    "category": [
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7903,
    "title": "Move Brackets",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 7904,
    "title": "Multiply by 2, divide by 6",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 7905,
    "title": "Required Remainder",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 7906,
    "title": "Pawns",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "greedy"
    ]
  },
  {
    "id": 7907,
    "title": "Network Coverage",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 7908,
    "title": "Sum of Digits",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 7909,
    "title": "Maximum Sum on Even Positions",
    "difficulty": "medium",
    "category": [
      "divide and conquer",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7910,
    "title": "Pluses and Minuses",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 7911,
    "title": "01 Game",
    "difficulty": "easy",
    "category": [
      "game theory"
    ]
  },
  {
    "id": 7912,
    "title": "Donut Shops",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 7913,
    "title": "Omkar and Modes",
    "difficulty": "hard",
    "category": [
      "binary search",
      "divide and conquer",
      "interactive"
    ]
  },
  {
    "id": 7914,
    "title": "Omkar and Last Floor",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 7915,
    "title": "Omkar and Circle",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 7916,
    "title": "Omkar and Baseball",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 7917,
    "title": "Omkar and Last Class of Math",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7918,
    "title": "Omkar and Completion",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 7919,
    "title": "Raging Thunder",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "implementation"
    ]
  },
  {
    "id": 7920,
    "title": "Asterism (Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "combinatorics",
      "dynamic programming",
      "math",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 7921,
    "title": "Asterism (Easy Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "combinatorics",
      "math",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 7922,
    "title": "Grid-00100",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7923,
    "title": "A Cookie for You",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 7924,
    "title": "Magical Calendar",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 7925,
    "title": "Magical Sticks",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 7926,
    "title": "The Hidden Pair (Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph",
      "graph traversal",
      "interactive",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 7927,
    "title": "The Hidden Pair (Easy Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph",
      "graph traversal",
      "interactive",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 7928,
    "title": "Binary Subsequence Rotation",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 7929,
    "title": "Odd-Even Subsequence",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 7930,
    "title": "Number Game",
    "difficulty": "medium",
    "category": [
      "game theory",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7931,
    "title": "GCD Compression",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7932,
    "title": "Maximum GCD",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7933,
    "title": "BareLee",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory",
      "graph traversal"
    ]
  },
  {
    "id": 7934,
    "title": "DeadLee",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 7935,
    "title": "TediousLee",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "greedy",
      "math",
      "tree"
    ]
  },
  {
    "id": 7936,
    "title": "RationalLee",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7937,
    "title": "AccurateLee",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 7938,
    "title": "FashionabLee",
    "difficulty": "easy",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 7939,
    "title": "Breadboard Capacity (hard version)",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 7940,
    "title": "Breadboard Capacity (easy version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "max flow"
    ]
  },
  {
    "id": 7941,
    "title": "Shifting Dominoes",
    "difficulty": "hard",
    "category": [
      "data structures",
      "geometry",
      "graph",
      "tree"
    ]
  },
  {
    "id": 7942,
    "title": "Lamps on a Circle",
    "difficulty": "hard",
    "category": [
      "game theory",
      "implementation",
      "interactive",
      "math"
    ]
  },
  {
    "id": 7943,
    "title": "Ski Accidents",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy"
    ]
  },
  {
    "id": 7944,
    "title": "AND, OR and square sum",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7945,
    "title": "Even Picture",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 7946,
    "title": "Codeforces Subsequences",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 7947,
    "title": "C+=",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 7948,
    "title": "Flying Sort (Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 7949,
    "title": "Flying Sort (Easy Version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 7950,
    "title": "Necklace Assembly",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 7951,
    "title": "Task On The Board",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 7952,
    "title": "Social Distance",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7953,
    "title": "Even Array",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 7954,
    "title": "Short Substrings",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 7955,
    "title": "Construct the String",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 7956,
    "title": "Jog Around The Graph",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "geometry",
      "graph"
    ]
  },
  {
    "id": 7957,
    "title": "Two Arrays",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "combinatorics",
      "constructive algorithms",
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 7958,
    "title": "Two Divisors",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7959,
    "title": "Palindromic Paths",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 7960,
    "title": "Shuffle",
    "difficulty": "medium",
    "category": [
      "math",
      "two pointers"
    ]
  },
  {
    "id": 7961,
    "title": "Shovels and Swords",
    "difficulty": "easy",
    "category": [
      "binary search",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7962,
    "title": "Secure Password",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "constructive algorithms",
      "interactive",
      "math"
    ]
  },
  {
    "id": 7963,
    "title": "Swaps Again",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 7964,
    "title": "Maximum Subsequence Value",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms"
    ]
  },
  {
    "id": 7965,
    "title": "Solve The Maze",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy",
      "implementation",
      "shortest path",
      "union find"
    ]
  },
  {
    "id": 7966,
    "title": "Rotation Matching",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7967,
    "title": "Trouble Sort",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 7968,
    "title": "Matrix Game",
    "difficulty": "easy",
    "category": [
      "game theory",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 7969,
    "title": "X-OR",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "divide and conquer",
      "interactive",
      "probability"
    ]
  },
  {
    "id": 7970,
    "title": "Ehab's Last Corollary",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 7971,
    "title": "Ehab and Prefix MEXs",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 7972,
    "title": "Most socially-distanced subsequence",
    "difficulty": "medium",
    "category": [
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 7973,
    "title": "XXXXX",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "number theory",
      "two pointers"
    ]
  },
  {
    "id": 7974,
    "title": "Rotating Substrings",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 7975,
    "title": "Tree Shuffling",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 7976,
    "title": "Guess The Maximums",
    "difficulty": "hard",
    "category": [
      "binary search",
      "implementation",
      "interactive",
      "math"
    ]
  },
  {
    "id": 7977,
    "title": "Game On Leaves",
    "difficulty": "medium",
    "category": [
      "game theory",
      "tree"
    ]
  },
  {
    "id": 7978,
    "title": "Subsequence Hate",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 7979,
    "title": "Odd Selection",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 7980,
    "title": "Johnny and Another Rating Drop",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7981,
    "title": "Johnny and His Hobbies",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force"
    ]
  },
  {
    "id": 7982,
    "title": "Johnny and Ancient Computer",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 7983,
    "title": "Johnny and New Toy",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation",
      "math"
    ]
  },
  {
    "id": 7984,
    "title": "James and the Chase",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "probability",
      "tree"
    ]
  },
  {
    "id": 7985,
    "title": "Johnny and James",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation",
      "math",
      "tree"
    ]
  },
  {
    "id": 7986,
    "title": "Johnny and Megan's Necklace",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "constructive algorithms",
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 7987,
    "title": "Johnny and Grandmaster",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 7988,
    "title": "Johnny and Contribution",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 7989,
    "title": "Binary Median",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force",
      "constructive algorithms"
    ]
  },
  {
    "id": 7990,
    "title": "A/B Matrix",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 7991,
    "title": "Spy-string",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "hash table",
      "string"
    ]
  },
  {
    "id": 7992,
    "title": "Polygon",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "implementation",
      "shortest path"
    ]
  },
  {
    "id": 7993,
    "title": "Buying Shovels",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 7994,
    "title": "Similar Pairs",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "graph matching",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 7995,
    "title": "Honest Coach",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 7996,
    "title": "Minimal Square",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 7997,
    "title": "RC Kaboom Show",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "geometry",
      "math"
    ]
  },
  {
    "id": 7998,
    "title": "Modular Stability",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 7999,
    "title": "Yet Another Yet Another Task",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 8000,
    "title": "Mixing Water",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 8001,
    "title": "New Theatre Square",
    "difficulty": "easy",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 8002,
    "title": "Berland Poker",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8003,
    "title": "Tasty Cookie",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8004,
    "title": "Are You Fired?",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8005,
    "title": "The Best Vacation",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 8006,
    "title": "Celex Update",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 8007,
    "title": "Maria Breaks the Self-isolation",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8008,
    "title": "Park Lighting",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 8009,
    "title": "Root of quantum Fourier transform",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8010,
    "title": "Power of quantum Fourier transform",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8011,
    "title": "Quantum Classification - Dataset 7",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8012,
    "title": "Quantum Classification - Dataset 6",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8013,
    "title": "Quantum Classification - Dataset 5",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8014,
    "title": "Quantum Classification - Dataset 4",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8015,
    "title": "Quantum Classification - Dataset 3",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8016,
    "title": "Prepare superposition of basis states with the same parity",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8017,
    "title": "Prepare superposition of basis states with 0s",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8018,
    "title": "\"Is the number divisible by 3?\" oracle",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8019,
    "title": "\"Is the bit string balanced?\" oracle",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8020,
    "title": "Distinguish Y, XZ, -Y and -XZ",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8021,
    "title": "Distinguish four Pauli gates",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8022,
    "title": "Distinguish Rz(θ) from Ry(θ)",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8023,
    "title": "Distinguish Rz from R1",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8024,
    "title": "Distinguish H from X",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8025,
    "title": "Distinguish I, CNOTs and SWAP",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8026,
    "title": "Figure out direction of CNOT",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8027,
    "title": "Quantum Classification - 2",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8028,
    "title": "Quantum Classification - 1",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8029,
    "title": "Prepare state |01⟩ + |10⟩ + |11⟩",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8030,
    "title": "Decrement",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8031,
    "title": "Increment",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8032,
    "title": "Distinguish Z from -Z",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8033,
    "title": "Distinguish I ⊗ X from CNOT",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8034,
    "title": "Distinguish Z from S",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8035,
    "title": "Distinguish I from Z",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8036,
    "title": "Distinguish I from X",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8037,
    "title": "Guess Divisors Count",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "interactive",
      "number theory"
    ]
  },
  {
    "id": 8038,
    "title": "Restorer Distance",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "math",
      "sorting",
      "ternary search"
    ]
  },
  {
    "id": 8039,
    "title": "Game With Array",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 8040,
    "title": "Count Triangles",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 8041,
    "title": "Young Explorers",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8042,
    "title": "Sequence with Digits",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 8043,
    "title": "Find a Gift",
    "difficulty": "hard",
    "category": [
      "binary search",
      "interactive",
      "probability"
    ]
  },
  {
    "id": 8044,
    "title": "Summoning Minions",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph matching",
      "greedy",
      "max flow",
      "sorting"
    ]
  },
  {
    "id": 8045,
    "title": "Graph Coloring",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 8046,
    "title": "Multiset",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 8047,
    "title": "Not So Simple Polygon Embedding",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "geometry",
      "math"
    ]
  },
  {
    "id": 8048,
    "title": "Simple Polygon Embedding",
    "difficulty": "medium",
    "category": [
      "binary search",
      "geometry",
      "math",
      "ternary search"
    ]
  },
  {
    "id": 8049,
    "title": "Ternary String",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 8050,
    "title": "Alarm Clock",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8051,
    "title": "Decreasing Heights",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 8052,
    "title": "K-periodic Garland",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 8053,
    "title": "Constructing the Array",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 8054,
    "title": "Board Moves",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8055,
    "title": "Two Arrays And Swaps",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8056,
    "title": "Most Unstable Array",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8057,
    "title": "Special Permutation",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 8058,
    "title": "Binary String Reconstruction",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 8059,
    "title": "Special Elements",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 8060,
    "title": "Alice, Bob and Candies",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 8061,
    "title": "K-th Not Divisible by n",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 8062,
    "title": "Same Parity Summands",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 8063,
    "title": "Sum of Round Numbers",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 8064,
    "title": "Skier",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 8065,
    "title": "Square?",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 8066,
    "title": "A+B (Trial Problem)",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 8067,
    "title": "Orac and Models",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8068,
    "title": "Orac and Factors",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8069,
    "title": "Slime and Sequences (Hard Version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 8070,
    "title": "Slime and Sequences (Easy Version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 8071,
    "title": "Slime and Hats",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 8072,
    "title": "Slime and Biscuits",
    "difficulty": "hard",
    "category": [
      "math",
      "probability"
    ]
  },
  {
    "id": 8073,
    "title": "Orac and Game of Life",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "implementation",
      "shortest path"
    ]
  },
  {
    "id": 8074,
    "title": "Orac and Medians",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8075,
    "title": "Orac and LCM",
    "difficulty": "medium",
    "category": [
      "data structures",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8076,
    "title": "Phoenix and Memory",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 8077,
    "title": "Phoenix and Berries",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8078,
    "title": "Phoenix and Science",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 8079,
    "title": "Phoenix and Distribution",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting",
      "string"
    ]
  },
  {
    "id": 8080,
    "title": "Phoenix and Beauty",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8081,
    "title": "Phoenix and Balance",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 8082,
    "title": "Pac-Man 2.0",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "special problem"
    ]
  },
  {
    "id": 8083,
    "title": "Game with Segments",
    "difficulty": "hard",
    "category": [
      "data structures",
      "game theory",
      "special problem"
    ]
  },
  {
    "id": 8084,
    "title": "Two IP Cameras",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory",
      "special problem"
    ]
  },
  {
    "id": 8085,
    "title": "Dune II: Battle For Arrakis",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "math",
      "special problem"
    ]
  },
  {
    "id": 8086,
    "title": "Magic Tricks",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "special problem"
    ]
  },
  {
    "id": 8087,
    "title": "Constructing the Dungeon",
    "difficulty": "medium",
    "category": [
      "graph",
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 8088,
    "title": "Spring Cleaning",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting",
      "special problem"
    ]
  },
  {
    "id": 8089,
    "title": "Boot Camp",
    "difficulty": "medium",
    "category": [
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 8090,
    "title": "Color Revolution",
    "difficulty": "easy",
    "category": [
      "math",
      "special problem"
    ]
  },
  {
    "id": 8091,
    "title": "Card Constructions",
    "difficulty": "easy",
    "category": [
      "binary search",
      "brute force",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 8092,
    "title": "Puzzle Pieces",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8093,
    "title": "Piet's Palette",
    "difficulty": "hard",
    "category": [
      "matrix"
    ]
  },
  {
    "id": 8094,
    "title": "Train Tracks",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 8095,
    "title": "Résumé Review",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8096,
    "title": "Quantifier Question",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 8097,
    "title": "Monopole Magnets",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 8098,
    "title": "Hilbert's Hotel",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 8099,
    "title": "Restore the Permutation by Sorted Segments",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8100,
    "title": "Weights Distributing",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph",
      "greedy",
      "shortest path",
      "sorting"
    ]
  },
  {
    "id": 8101,
    "title": "Constant Palindrome Sum",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 8102,
    "title": "Alternating Subsequence",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 8103,
    "title": "Balanced Array",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 8104,
    "title": "Candies",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 8105,
    "title": "Make It Ascending",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 8106,
    "title": "Placing Rooks",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 8107,
    "title": "Multiple Testcases",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 8108,
    "title": "Yet Another Counting Problem",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 8109,
    "title": "Binary Period",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "string"
    ]
  },
  {
    "id": 8110,
    "title": "Road To Zero",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 8111,
    "title": "Nastya and Door",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8112,
    "title": "Nastya and Rice",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8113,
    "title": "Nastya and CBS",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "hash table"
    ]
  },
  {
    "id": 8114,
    "title": "Nastya and Bees",
    "difficulty": "hard",
    "category": [
      "graph",
      "interactive",
      "probability"
    ]
  },
  {
    "id": 8115,
    "title": "Nastya and Time Machine",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 8116,
    "title": "Nastya and Unexpected Guest",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 8117,
    "title": "Nastya and Scoreboard",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "graph",
      "greedy"
    ]
  },
  {
    "id": 8118,
    "title": "Nastya and Strange Generator",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8119,
    "title": "Sorted Adjacent Differences",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "sorting"
    ]
  },
  {
    "id": 8120,
    "title": "Filling Diamonds",
    "difficulty": "easy",
    "category": [
      "brute force",
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 8121,
    "title": "JYPnation",
    "difficulty": "hard",
    "category": [
      "graph"
    ]
  },
  {
    "id": 8122,
    "title": "Nested Rubber Bands",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph traversal",
      "math",
      "tree"
    ]
  },
  {
    "id": 8123,
    "title": "Perfect Triples",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "divide and conquer",
      "math"
    ]
  },
  {
    "id": 8124,
    "title": "Edge Weight Assignment",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "graph traversal",
      "greedy",
      "math",
      "tree"
    ]
  },
  {
    "id": 8125,
    "title": "Powered Addition",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 8126,
    "title": "Kana and Dragon Quest game",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 8127,
    "title": "Ichihime and Triangle",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 8128,
    "title": "Journey",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "graph",
      "tree"
    ]
  },
  {
    "id": 8129,
    "title": "Chiori and Doll Picking (hard version)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 8130,
    "title": "Chiori and Doll Picking (easy version)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 8131,
    "title": "Yui and Mahjong Set",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "interactive"
    ]
  },
  {
    "id": 8132,
    "title": "Kaavi and Magic Spell",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 8133,
    "title": "Xenia and Colorful Gems",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 8134,
    "title": "Linova and Kingdom",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph traversal",
      "greedy",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 8135,
    "title": "Robots on a Grid",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "greedy",
      "matrix",
      "union find"
    ]
  },
  {
    "id": 8136,
    "title": "Three Blocks Palindrome (hard version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 8137,
    "title": "Three Blocks Palindrome (easy version)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 8138,
    "title": "Anti-Sudoku",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 8139,
    "title": "Two Teams Composing",
    "difficulty": "easy",
    "category": [
      "binary search",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 8140,
    "title": "Construct the String",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 8141,
    "title": "Candies and Two Sisters",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8142,
    "title": "Substring Search",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "fast fourier transform"
    ]
  },
  {
    "id": 8143,
    "title": "Strange Function",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 8144,
    "title": "Divisor Paths",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "graph",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8145,
    "title": "Minimum Euler Cycle",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8146,
    "title": "Circle of Monsters",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8147,
    "title": "Middle Class",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8148,
    "title": "Level Statistics",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 8149,
    "title": "Kate and imperfection",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation",
      "math",
      "number theory",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 8150,
    "title": "Road to 1600",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms"
    ]
  },
  {
    "id": 8151,
    "title": "Challenges in school №41",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "game theory",
      "graph",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 8152,
    "title": "Eugene and an array",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 8153,
    "title": "Kind Anton",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8154,
    "title": "Little Artem",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 8155,
    "title": "No Monotone Triples",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 8156,
    "title": "Independent Set",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 8157,
    "title": "Height All the Same",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "math",
      "matrix"
    ]
  },
  {
    "id": 8158,
    "title": "Walk on Matrix",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 8159,
    "title": "K-Complete Word",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "greedy",
      "implementation",
      "string",
      "union find"
    ]
  },
  {
    "id": 8160,
    "title": "Composite Coloring",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8161,
    "title": "Exercising Walk",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 8162,
    "title": "It's showtime",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8163,
    "title": "Lingua Romana",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8164,
    "title": "Elementary!",
    "difficulty": "easy",
    "category": [
      "brute force",
      "dynamic programming",
      "special problem",
      "string"
    ]
  },
  {
    "id": 8165,
    "title": "Jordan Smiley",
    "difficulty": "easy",
    "category": [
      "geometry",
      "graph traversal",
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 8166,
    "title": "Again?",
    "difficulty": "easy",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 8167,
    "title": "...And after happily lived ever they",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "special problem"
    ]
  },
  {
    "id": 8168,
    "title": "Limericks",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory",
      "special problem"
    ]
  },
  {
    "id": 8169,
    "title": "Is it rated?",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8170,
    "title": "Dreamoon Likes Permutations",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 8171,
    "title": "Dreamoon and Ranking Collection",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 8172,
    "title": "Dreamoon Loves AA",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 8173,
    "title": "Dreamoon Likes Strings",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures"
    ]
  },
  {
    "id": 8174,
    "title": "Drazil Likes Heap",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8175,
    "title": "Dreamoon Likes Sequences",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 8176,
    "title": "Dreamoon Likes Coloring",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 8177,
    "title": "Make k Equal",
    "difficulty": "hard",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 8178,
    "title": "Tree Queries",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 8179,
    "title": "Carousel",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8180,
    "title": "Ternary XOR",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8181,
    "title": "K-th Beautiful String",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "combinatorics",
      "implementation",
      "math"
    ]
  },
  {
    "id": 8182,
    "title": "Divisibility Problem",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8183,
    "title": "Letters and Question Marks",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "string suffix structures"
    ]
  },
  {
    "id": 8184,
    "title": "AND Segments",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "data structures",
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 8185,
    "title": "Count The Blocks",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 8186,
    "title": "Infinite Path",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph",
      "graph traversal",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8187,
    "title": "Game with Chips",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 8188,
    "title": "Princesses and Princes",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph",
      "greedy"
    ]
  },
  {
    "id": 8189,
    "title": "Sum of Odd Integers",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8190,
    "title": "Spiderweb Trees",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "geometry",
      "tree"
    ]
  },
  {
    "id": 8191,
    "title": "Wise Men (Hard Version)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 8192,
    "title": "Wise Men (Easy Version)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "meet in the middle"
    ]
  },
  {
    "id": 8193,
    "title": "Bombs",
    "difficulty": "hard",
    "category": [
      "data structures",
      "two pointers"
    ]
  },
  {
    "id": 8194,
    "title": "Prefix-Suffix Palindrome (Hard version)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "hash table",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 8195,
    "title": "Prefix-Suffix Palindrome (Easy version)",
    "difficulty": "medium",
    "category": [
      "hash table",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 8196,
    "title": "Permutation Partitions",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8197,
    "title": "Maximums",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 8198,
    "title": "Bad Ugly Numbers",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "number theory"
    ]
  },
  {
    "id": 8199,
    "title": "Ehab's Last Theorem",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 8200,
    "title": "Ehab's REAL Number Theory Problem",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph",
      "graph traversal",
      "number theory",
      "shortest path"
    ]
  },
  {
    "id": 8201,
    "title": "Ehab the Xorcist",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 8202,
    "title": "Ehab and Path-etic MEXs",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 8203,
    "title": "CopyCopyCopyCopyCopy",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8204,
    "title": "EhAb AnD gCd",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 8205,
    "title": "Maximum White Subtree",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 8206,
    "title": "Sleeping Schedule",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 8207,
    "title": "Pair of Topics",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 8208,
    "title": "Frog Jumps",
    "difficulty": "easy",
    "category": [
      "binary search",
      "data structures",
      "graph traversal",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8209,
    "title": "Yet Another Palindrome Problem",
    "difficulty": "easy",
    "category": [
      "brute force",
      "string"
    ]
  },
  {
    "id": 8210,
    "title": "Yet Another Tetris Problem",
    "difficulty": "easy",
    "category": [
      "implementation",
      "number theory"
    ]
  },
  {
    "id": 8211,
    "title": "Count Subrectangles",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8212,
    "title": "Even Subset Sum Problem",
    "difficulty": "easy",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8213,
    "title": "Assigning Fares",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 8214,
    "title": "Median Mountain Range",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 8215,
    "title": "Reality Show",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 8216,
    "title": "Instant Noodles",
    "difficulty": "hard",
    "category": [
      "graph",
      "hash table",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8217,
    "title": "Present",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "constructive algorithms",
      "data structures",
      "math",
      "sorting"
    ]
  },
  {
    "id": 8218,
    "title": "Unusual Competitions",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 8219,
    "title": "Remove Adjacent",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "string"
    ]
  },
  {
    "id": 8220,
    "title": "Contest for Robots",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 8221,
    "title": "Blocks and Sensors",
    "difficulty": "hard",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 8222,
    "title": "Treeland and Viruses",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph traversal",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 8223,
    "title": "Reachable Strings",
    "difficulty": "hard",
    "category": [
      "data structures",
      "hash table",
      "string"
    ]
  },
  {
    "id": 8224,
    "title": "World of Darkraft: Battle for Azathoth",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 8225,
    "title": "Navigation System",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 8226,
    "title": "Journey Planning",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 8227,
    "title": "Battalion Strength",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "probability"
    ]
  },
  {
    "id": 8228,
    "title": "Team Building",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8229,
    "title": "Nash Matrix",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 8230,
    "title": "Primitive Primes",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math",
      "ternary search"
    ]
  },
  {
    "id": 8231,
    "title": "String Modification",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation",
      "sorting",
      "string"
    ]
  },
  {
    "id": 8232,
    "title": "Grade Allocation",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 8233,
    "title": "Restoring Permutation",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 8234,
    "title": "Homecoming",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy",
      "string"
    ]
  },
  {
    "id": 8235,
    "title": "Dead Pixel",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 8236,
    "title": "Concatenation with intersection",
    "difficulty": "hard",
    "category": [
      "data structures",
      "hash table",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 8237,
    "title": "Happy New Year",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 8238,
    "title": "Skyscrapers (hard version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 8239,
    "title": "Skyscrapers (easy version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 8240,
    "title": "Different Rules",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 8241,
    "title": "Fast Food Restaurant",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8242,
    "title": "Autocompletion",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph traversal"
    ]
  },
  {
    "id": 8243,
    "title": "Attack on Red Kingdom",
    "difficulty": "hard",
    "category": [
      "game theory",
      "two pointers"
    ]
  },
  {
    "id": 8244,
    "title": "Array Shrinking",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 8245,
    "title": "Count the Arrays",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 8246,
    "title": "Adding Powers",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "greedy",
      "implementation",
      "math",
      "number theory",
      "ternary search"
    ]
  },
  {
    "id": 8247,
    "title": "Bogosort",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "sorting"
    ]
  },
  {
    "id": 8248,
    "title": "Two Regular Polygons",
    "difficulty": "easy",
    "category": [
      "geometry",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8249,
    "title": "Moving Points",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 8250,
    "title": "Construct the Binary Tree",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "tree"
    ]
  },
  {
    "id": 8251,
    "title": "Three Integers",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 8252,
    "title": "Perform the Combo",
    "difficulty": "medium",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 8253,
    "title": "WeirdSort",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "sorting"
    ]
  },
  {
    "id": 8254,
    "title": "Add Odd or Subtract Even",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 8255,
    "title": "Bad Cryptography",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 8256,
    "title": "Strange Function",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 8257,
    "title": "Tourism",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "probability"
    ]
  },
  {
    "id": 8258,
    "title": "Au Pont Rouge",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 8259,
    "title": "Double Elimination",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 8260,
    "title": "Recommendations",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8261,
    "title": "Cow and Exercise",
    "difficulty": "hard",
    "category": [
      "graph",
      "max flow",
      "shortest path"
    ]
  },
  {
    "id": 8262,
    "title": "Cow and Vacation",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 8263,
    "title": "Cow and Treats",
    "difficulty": "hard",
    "category": [
      "binary search",
      "combinatorics",
      "dynamic programming",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 8264,
    "title": "Cow and Fields",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph",
      "graph traversal",
      "greedy",
      "shortest path",
      "sorting"
    ]
  },
  {
    "id": 8265,
    "title": "Cow and Message",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "math",
      "string"
    ]
  },
  {
    "id": 8266,
    "title": "Cow and Friend",
    "difficulty": "medium",
    "category": [
      "geometry",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8267,
    "title": "Cow and Haybales",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8268,
    "title": "Kuroni the Private Tutor",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 8269,
    "title": "Kuroni and Antihype",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "graph",
      "union find"
    ]
  },
  {
    "id": 8270,
    "title": "Kuroni and the Punishment",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory",
      "probability"
    ]
  },
  {
    "id": 8271,
    "title": "Kuroni and the Score Distribution",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 8272,
    "title": "Kuroni and the Celebration",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "interactive",
      "tree"
    ]
  },
  {
    "id": 8273,
    "title": "Kuroni and Impossible Calculation",
    "difficulty": "medium",
    "category": [
      "brute force",
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8274,
    "title": "Kuroni and Simple Strings",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 8275,
    "title": "Kuroni and the Gifts",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8276,
    "title": "Animal Observation (hard version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 8277,
    "title": "Animal Observation (easy version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 8278,
    "title": "1-Trees and Queries",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 8279,
    "title": "Shortest and Longest LIS",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 8280,
    "title": "Air Conditioner",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 8281,
    "title": "Longest Palindrome",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 8282,
    "title": "Two Rabbits",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8283,
    "title": "Sum of Prefix Sums",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "geometry",
      "tree"
    ]
  },
  {
    "id": 8284,
    "title": "Number of Components",
    "difficulty": "hard",
    "category": [
      "implementation",
      "union find"
    ]
  },
  {
    "id": 8285,
    "title": "Erase Subsequences",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 8286,
    "title": "Fill The Bag",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "greedy"
    ]
  },
  {
    "id": 8287,
    "title": "Perfect Keyboard",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8288,
    "title": "National Project",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 8289,
    "title": "Erasing Zeroes",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 8290,
    "title": "Keep talking and nobody explodes -- hard",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 8291,
    "title": "Deja vu",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 8292,
    "title": "Who needs suffix structures?",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 8293,
    "title": "Keep talking and nobody explodes -- medium",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 8294,
    "title": "Keep talking and nobody explodes -- easy",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "brute force",
      "parsing"
    ]
  },
  {
    "id": 8295,
    "title": "Amazing bitset",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 8296,
    "title": "Dijkstra",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 8297,
    "title": "Segment tree or Fenwick?",
    "difficulty": "easy",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 8298,
    "title": "DAG",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 8299,
    "title": "Nash equilibrium",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 8300,
    "title": "Super Jaber",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "implementation",
      "shortest path"
    ]
  },
  {
    "id": 8301,
    "title": "Nanosoft",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 8302,
    "title": "Time to Run",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "implementation"
    ]
  },
  {
    "id": 8303,
    "title": "Ayoub's function",
    "difficulty": "medium",
    "category": [
      "binary search",
      "combinatorics",
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 8304,
    "title": "Motarack's Birthday",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "ternary search"
    ]
  },
  {
    "id": 8305,
    "title": "Three Strings",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 8306,
    "title": "Assigning to Classes",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 8307,
    "title": "Non-zero",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 8308,
    "title": "So Mean",
    "difficulty": "hard",
    "category": [
      "interactive",
      "math"
    ]
  },
  {
    "id": 8309,
    "title": "Around the World",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "graph",
      "graph traversal",
      "math",
      "tree"
    ]
  },
  {
    "id": 8310,
    "title": "Water Balance",
    "difficulty": "hard",
    "category": [
      "data structures",
      "geometry",
      "greedy"
    ]
  },
  {
    "id": 8311,
    "title": "Aerodynamic",
    "difficulty": "medium",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 8312,
    "title": "Anu Has a Function",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8313,
    "title": "Falling Blocks",
    "difficulty": "easy",
    "category": [
      "data structures",
      "special problem"
    ]
  },
  {
    "id": 8314,
    "title": "Paint the String",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "special problem",
      "string"
    ]
  },
  {
    "id": 8315,
    "title": "M-numbers",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "math",
      "special problem"
    ]
  },
  {
    "id": 8316,
    "title": "Movie Fan",
    "difficulty": "easy",
    "category": [
      "data structures",
      "greedy",
      "implementation",
      "sorting",
      "special problem"
    ]
  },
  {
    "id": 8317,
    "title": "Modernization of Treeland",
    "difficulty": "easy",
    "category": [
      "graph traversal",
      "special problem",
      "tree"
    ]
  },
  {
    "id": 8318,
    "title": "Bonus Distribution ",
    "difficulty": "easy",
    "category": [
      "binary search",
      "greedy",
      "sorting",
      "special problem"
    ]
  },
  {
    "id": 8319,
    "title": "Dream Team",
    "difficulty": "easy",
    "category": [
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 8320,
    "title": "Cartoons",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting",
      "special problem"
    ]
  },
  {
    "id": 8321,
    "title": "Likes Display",
    "difficulty": "easy",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 8322,
    "title": "Berland Beauty",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "greedy",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 8323,
    "title": "String Coloring (hard version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 8324,
    "title": "String Coloring (easy version)",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8325,
    "title": "Fight with Monsters",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8326,
    "title": "Yet Another Walking Robot",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 8327,
    "title": "Food Buying",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8328,
    "title": "Array with Odd Sum",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8329,
    "title": "Good Contest",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "probability"
    ]
  },
  {
    "id": 8330,
    "title": "Permutation Separation",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer"
    ]
  },
  {
    "id": 8331,
    "title": "Same GCDs",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 8332,
    "title": "Obtain The String",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "string"
    ]
  },
  {
    "id": 8333,
    "title": "Infinite Prefixes",
    "difficulty": "medium",
    "category": [
      "math",
      "string"
    ]
  },
  {
    "id": 8334,
    "title": "Display The Number",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 8335,
    "title": "Three Paths on a Tree",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 8336,
    "title": "Obtain a Permutation",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 8337,
    "title": "MEX maximizing",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 8338,
    "title": "Product of Three Numbers",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8339,
    "title": "Collecting Packages",
    "difficulty": "medium",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 8340,
    "title": "Collecting Coins",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8341,
    "title": "JOE is on TV!",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8342,
    "title": "ConneR and the A.R.C. Markland-N",
    "difficulty": "easy",
    "category": [
      "binary search",
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 8343,
    "title": "Nora's Toy Boxes",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 8344,
    "title": "Rin and The Unknown Flower",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "interactive",
      "math"
    ]
  },
  {
    "id": 8345,
    "title": "Chaotic V.",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "greedy",
      "math",
      "number theory",
      "tree"
    ]
  },
  {
    "id": 8346,
    "title": "Xenon's Attack on the Gangs",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 8347,
    "title": "Aroma's Search",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "geometry",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8348,
    "title": "NEKO's Maze Game",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 8349,
    "title": "Coffee Varieties (easy version)",
    "difficulty": "hard",
    "category": [
      "graph",
      "interactive"
    ]
  },
  {
    "id": 8350,
    "title": "Array Sharpening",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8351,
    "title": "Even But Not Even",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 8352,
    "title": "Making Shapes",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 8353,
    "title": "Cartesian Tree ",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 8354,
    "title": "Coffee Varieties (hard version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "interactive"
    ]
  },
  {
    "id": 8355,
    "title": "Prefix Enlightenment",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 8356,
    "title": "Irreducible Anagrams",
    "difficulty": "medium",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 8357,
    "title": "Mind Control",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 8358,
    "title": "Red-Blue Graph",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "max flow"
    ]
  },
  {
    "id": 8359,
    "title": "Messenger Simulator",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 8360,
    "title": "Minimax Problem",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 8361,
    "title": "Two Arrays",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 8362,
    "title": "Yet Another Meme Problem",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8363,
    "title": "Deadline",
    "difficulty": "easy",
    "category": [
      "binary search",
      "brute force",
      "math",
      "ternary search"
    ]
  },
  {
    "id": 8364,
    "title": "Hyperset",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 8365,
    "title": "Angry Students",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8366,
    "title": "Harry The Potter",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "fast fourier transform",
      "implementation",
      "math"
    ]
  },
  {
    "id": 8367,
    "title": "Fedya the Potter Strikes Back",
    "difficulty": "hard",
    "category": [
      "data structures",
      "string"
    ]
  },
  {
    "id": 8368,
    "title": "LCC",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math",
      "matrix",
      "probability"
    ]
  },
  {
    "id": 8369,
    "title": "Madhouse (Hard version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "hash table",
      "interactive",
      "math"
    ]
  },
  {
    "id": 8370,
    "title": "Madhouse (Easy version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "interactive",
      "math"
    ]
  },
  {
    "id": 8371,
    "title": "Numbers on Tree",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "graph",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 8372,
    "title": "Garland",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8373,
    "title": "Classical?",
    "difficulty": "hard",
    "category": [
      "binary search",
      "combinatorics",
      "number theory"
    ]
  },
  {
    "id": 8374,
    "title": "Delete a Segment",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "graph",
      "sorting",
      "tree",
      "two pointers"
    ]
  },
  {
    "id": 8375,
    "title": "Dr. Evil Underscores",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "divide and conquer",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "string",
      "tree"
    ]
  },
  {
    "id": 8376,
    "title": "Fadi and LCM",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8377,
    "title": "Just Eat It!",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8378,
    "title": "Mezo Playing Zoma",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8379,
    "title": "Seollal",
    "difficulty": "hard",
    "category": [
      "graph"
    ]
  },
  {
    "id": 8380,
    "title": "New Year and Social Network",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph matching",
      "math",
      "tree"
    ]
  },
  {
    "id": 8381,
    "title": "New Year and Castle Construction",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "geometry",
      "math",
      "sorting"
    ]
  },
  {
    "id": 8382,
    "title": "New Year and Conference",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 8383,
    "title": "New Year and Permutation",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 8384,
    "title": "New Year and Ascent Sequence",
    "difficulty": "medium",
    "category": [
      "binary search",
      "combinatorics",
      "data structures",
      "dynamic programming",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 8385,
    "title": "New Year and Naming",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 8386,
    "title": "DIY Garland",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 8387,
    "title": "New Year Parties",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 8388,
    "title": "Christmas Trees",
    "difficulty": "medium",
    "category": [
      "graph",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 8389,
    "title": "Friends and Gifts",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "math"
    ]
  },
  {
    "id": 8390,
    "title": "Candies Division",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8391,
    "title": "Minutes Before the New Year",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8392,
    "title": "The Cake Is a Lie",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 8393,
    "title": "Enchanted Artifact",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "interactive",
      "string"
    ]
  },
  {
    "id": 8394,
    "title": "Petya and Exam",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 8395,
    "title": "K for the Price of One (Hard Version)",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8396,
    "title": "K for the Price of One (Easy Version)",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8397,
    "title": "Temporarily unavailable",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 8398,
    "title": "Azamon Web Services",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 8399,
    "title": "Suffix Three",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 8400,
    "title": "Intergalactic Sliding Puzzle",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 8401,
    "title": "Kirchhoff's Current Loss",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 8402,
    "title": "Miss Punyverse",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 8403,
    "title": "Jeremy Bearimy",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 8404,
    "title": "Beingawesomeism",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 8405,
    "title": "Cut and Paste",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 8406,
    "title": "New Year and Handle Change",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming"
    ]
  },
  {
    "id": 8407,
    "title": "New Year Permutations",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 8408,
    "title": "Santa's Bot",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math",
      "probability"
    ]
  },
  {
    "id": 8409,
    "title": "Stack of Presents",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 8410,
    "title": "Verse For Santa",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 8411,
    "title": "New Year Garland",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8412,
    "title": "Cards",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "number theory",
      "probability"
    ]
  },
  {
    "id": 8413,
    "title": "Tests for problem D",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "divide and conquer",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 8414,
    "title": "Segment Tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "tree",
      "union find"
    ]
  },
  {
    "id": 8415,
    "title": "Berry Jam",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8416,
    "title": "A and B",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 8417,
    "title": "Shuffle Hashing",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 8418,
    "title": "Let's Play the Words?",
    "difficulty": "hard",
    "category": [
      "data structures",
      "hash table",
      "implementation",
      "math"
    ]
  },
  {
    "id": 8419,
    "title": "Make Them Odd",
    "difficulty": "medium",
    "category": [
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 8420,
    "title": "Happy Birthday, Polycarp!",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 8421,
    "title": "Asterisk Substrings",
    "difficulty": "hard",
    "category": [
      "string suffix structures"
    ]
  },
  {
    "id": 8422,
    "title": "Four Stones",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 8423,
    "title": "Tree Elimination",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 8424,
    "title": "Beautiful Rectangle",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "constructive algorithms",
      "data structures",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8425,
    "title": "Two Fairs",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 8426,
    "title": "As Simple as One and Two",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 8427,
    "title": "Шардирование постов",
    "difficulty": "easy",
    "category": [
      "binary search",
      "interactive",
      "special problem"
    ]
  },
  {
    "id": 8428,
    "title": "Контрольная сумма",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8429,
    "title": "Контрольная сумма",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8430,
    "title": "Контрольная сумма",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8431,
    "title": "Storage2",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8432,
    "title": "#define Задача B ...",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8433,
    "title": "Code Review",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8434,
    "title": "Скрытый друг",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8435,
    "title": "Two Bracket Sequences",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 8436,
    "title": "Nearest Opposite Parity",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 8437,
    "title": "Remove One Element",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 8438,
    "title": "Yet Another Broken Keyboard",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 8439,
    "title": "Snow Walking Robot",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8440,
    "title": "Three Friends",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 8441,
    "title": "Divide The Students",
    "difficulty": "hard",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 8442,
    "title": "Common Number",
    "difficulty": "hard",
    "category": [
      "binary search",
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 8443,
    "title": "Portals",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 8444,
    "title": "Shawarma Tent",
    "difficulty": "medium",
    "category": [
      "brute force",
      "geometry",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8445,
    "title": "Blocks",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 8446,
    "title": "Suits",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8447,
    "title": "Xor on Figures",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 8448,
    "title": "Number of Components",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 8449,
    "title": "Subset with Zero Sum",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 8450,
    "title": "Awesome Substrings",
    "difficulty": "hard",
    "category": [
      "math",
      "string"
    ]
  },
  {
    "id": 8451,
    "title": "Divide Points",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "geometry",
      "math"
    ]
  },
  {
    "id": 8452,
    "title": "Strange Device",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "interactive",
      "math",
      "sorting"
    ]
  },
  {
    "id": 8453,
    "title": "Make Good",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 8454,
    "title": "Interesting Subarray",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8455,
    "title": "Card Game",
    "difficulty": "easy",
    "category": [
      "game theory",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8456,
    "title": "Modulo Equality",
    "difficulty": "medium",
    "category": [
      "brute force",
      "sorting"
    ]
  },
  {
    "id": 8457,
    "title": "Equation",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 8458,
    "title": "Happy Cactus",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 8459,
    "title": "Invertation in Tournament",
    "difficulty": "hard",
    "category": [
      "brute force",
      "divide and conquer",
      "graph",
      "math"
    ]
  },
  {
    "id": 8460,
    "title": "K Integers",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 8461,
    "title": "Domino for Young",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8462,
    "title": "Long Beautiful Integer",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 8463,
    "title": "Lexicography",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "string"
    ]
  },
  {
    "id": 8464,
    "title": "Key Storage",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 8465,
    "title": "Just Arrange the Icons",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 8466,
    "title": "Intriguing Selection",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation",
      "interactive",
      "sorting"
    ]
  },
  {
    "id": 8467,
    "title": "Help BerLine",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 8468,
    "title": "Game Relics",
    "difficulty": "hard",
    "category": [
      "math",
      "probability"
    ]
  },
  {
    "id": 8469,
    "title": "Foolprüf Security",
    "difficulty": "hard",
    "category": [
      "graph"
    ]
  },
  {
    "id": 8470,
    "title": "Elections",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 8471,
    "title": "DevOps Best Practices",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 8472,
    "title": "Cactus Revenge",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 8473,
    "title": "Balls of Buma",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 8474,
    "title": "Apprentice Learning Trajectory",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 8475,
    "title": "Red-Blue Graph",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "math",
      "matrix",
      "meet in the middle"
    ]
  },
  {
    "id": 8476,
    "title": "Permutation Concatenation",
    "difficulty": "hard",
    "category": [
      "string suffix structures"
    ]
  },
  {
    "id": 8477,
    "title": "Almost Same Distance",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 8478,
    "title": "Spaceship Solitaire",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8479,
    "title": "Decreasing Debts",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "graph",
      "greedy",
      "implementation",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 8480,
    "title": "Diverse Matrix",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8481,
    "title": "Dice Tower",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 8482,
    "title": "Competitive Programmer",
    "difficulty": "easy",
    "category": [
      "chinese remainder theorem",
      "math"
    ]
  },
  {
    "id": 8483,
    "title": "Beautiful Mirrors",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 8484,
    "title": "Beautiful Numbers",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 8485,
    "title": "Beautiful String",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 8486,
    "title": "Beautiful Fibonacci Problem",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "number theory"
    ]
  },
  {
    "id": 8487,
    "title": "Beautiful League",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph matching",
      "max flow"
    ]
  },
  {
    "id": 8488,
    "title": "Beautiful Bracket Sequence (hard version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "probability"
    ]
  },
  {
    "id": 8489,
    "title": "Beautiful Bracket Sequence (easy version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "probability"
    ]
  },
  {
    "id": 8490,
    "title": "Beautiful Mirrors with queries",
    "difficulty": "hard",
    "category": [
      "data structures",
      "probability"
    ]
  },
  {
    "id": 8491,
    "title": "Beautiful Sequence",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 8492,
    "title": "Beautiful Regional Contest",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8493,
    "title": "Economic Difficulties",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph",
      "graph traversal",
      "max flow",
      "tree"
    ]
  },
  {
    "id": 8494,
    "title": "Editor",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 8495,
    "title": "Secret Passwords",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 8496,
    "title": "Everyone is a Winner!",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math",
      "meet in the middle",
      "number theory"
    ]
  },
  {
    "id": 8497,
    "title": "PIN Codes",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8498,
    "title": "Sweet Problem",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8499,
    "title": "Xor-Set",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "divide and conquer",
      "math"
    ]
  },
  {
    "id": 8500,
    "title": "Colored Tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 8501,
    "title": "Tournament",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 8502,
    "title": "A Game with Traps",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8503,
    "title": "Infinite Fence",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8504,
    "title": "Obtain Two Zeroes",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 8505,
    "title": "Heating",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8506,
    "title": "Divisor Set",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "fast fourier transform",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8507,
    "title": "Make Them Similar",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "hash table",
      "meet in the middle"
    ]
  },
  {
    "id": 8508,
    "title": "The Contest",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 8509,
    "title": "Yet Another Monster Killing Problem",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 8510,
    "title": "Dominated Subarray",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "sorting",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 8511,
    "title": "Magic Stick",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8512,
    "title": "Two Rival Students",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 8513,
    "title": "Equalizing Two Strings",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "sorting",
      "string"
    ]
  },
  {
    "id": 8514,
    "title": "Yet Another Division Into Teams",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8515,
    "title": "Binary String Minimizing",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 8516,
    "title": "Platforms Jumping",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 8517,
    "title": "Minimize the Permutation",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 8518,
    "title": "Payment Without Change",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8519,
    "title": "League of Leesins",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 8520,
    "title": "Fridge Lockers",
    "difficulty": "easy",
    "category": [
      "graph",
      "implementation"
    ]
  },
  {
    "id": 8521,
    "title": "Changing Volume",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8522,
    "title": "Send Tree to Charlie",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 8523,
    "title": "Tree Queries",
    "difficulty": "hard",
    "category": [
      "data structures",
      "probability",
      "tree"
    ]
  },
  {
    "id": 8524,
    "title": "Point Ordering",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "geometry",
      "interactive",
      "math"
    ]
  },
  {
    "id": 8525,
    "title": "Send Boxes to Alice (Hard Version)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "number theory",
      "ternary search",
      "two pointers"
    ]
  },
  {
    "id": 8526,
    "title": "Send Boxes to Alice (Easy Version)",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "number theory",
      "ternary search",
      "two pointers"
    ]
  },
  {
    "id": 8527,
    "title": "Feeding Chicken",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8528,
    "title": "Cheap Robot",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph",
      "shortest path",
      "tree",
      "union find"
    ]
  },
  {
    "id": 8529,
    "title": "Antenna Coverage",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8530,
    "title": "Harmonious Graph",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 8531,
    "title": "Sweets Eating",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 8532,
    "title": "Silly Mistake",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8533,
    "title": "Single Push",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 8534,
    "title": "Road Construction",
    "difficulty": "hard",
    "category": [
      "graph",
      "max flow"
    ]
  },
  {
    "id": 8535,
    "title": "Addition Robot",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math",
      "matrix"
    ]
  },
  {
    "id": 8536,
    "title": "Tiling Terrace",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 8537,
    "title": "Mission Possible",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 8538,
    "title": "Twin Buildings",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8539,
    "title": "Performance Review",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 8540,
    "title": "Regular Forestation",
    "difficulty": "hard",
    "category": [
      "hash table",
      "tree"
    ]
  },
  {
    "id": 8541,
    "title": "Songwriter",
    "difficulty": "hard",
    "category": [
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 8542,
    "title": "Find String in a Grid",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "string",
      "tree"
    ]
  },
  {
    "id": 8543,
    "title": "Even Path",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 8544,
    "title": "Cleaning Robots",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 8545,
    "title": "Copying Homework",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 8546,
    "title": "Red-White Fence",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "fast fourier transform"
    ]
  },
  {
    "id": 8547,
    "title": "Voting (Hard Version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 8548,
    "title": "Voting (Easy Version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 8549,
    "title": "Salary Changing",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8550,
    "title": "Minimize The Integer",
    "difficulty": "medium",
    "category": [
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 8551,
    "title": "Binary Palindromes",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 8552,
    "title": "Broken Keyboard",
    "difficulty": "easy",
    "category": [
      "brute force",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 8553,
    "title": "Wires",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 8554,
    "title": "SmartGarden",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "divide and conquer"
    ]
  },
  {
    "id": 8555,
    "title": "Divide The Students",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8556,
    "title": "Projectors",
    "difficulty": "hard",
    "category": [
      "graph",
      "max flow"
    ]
  },
  {
    "id": 8557,
    "title": "The Parade",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 8558,
    "title": "Show Must Go On",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 8559,
    "title": "Happy Birthday",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 8560,
    "title": "Discarding Game",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 8561,
    "title": "Data Center",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 8562,
    "title": "The Coronation",
    "difficulty": "hard",
    "category": [
      "graph",
      "implementation"
    ]
  },
  {
    "id": 8563,
    "title": "Conference Problem",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 8564,
    "title": "Trip to Saint Petersburg",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 8565,
    "title": "The Feast and the Bus",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8566,
    "title": "Berstagram",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 8567,
    "title": "Maximum Weight Subset",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 8568,
    "title": "By Elevator or Stairs?",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "shortest path"
    ]
  },
  {
    "id": 8569,
    "title": "Too Many Segments (hard version)",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8570,
    "title": "Too Many Segments (easy version)",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 8571,
    "title": "Good Numbers (hard version)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "math",
      "meet in the middle"
    ]
  },
  {
    "id": 8572,
    "title": "Good Numbers (easy version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8573,
    "title": "Books Exchange (hard version)",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "math",
      "union find"
    ]
  },
  {
    "id": 8574,
    "title": "Books Exchange (easy version)",
    "difficulty": "easy",
    "category": [
      "math",
      "union find"
    ]
  },
  {
    "id": 8575,
    "title": "Yet Another Dividing into Teams",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8576,
    "title": "The World Is Just a Programming Task (Easy Version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8577,
    "title": "Grow The Tree",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 8578,
    "title": "Integer Points",
    "difficulty": "easy",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 8579,
    "title": "Cursor Distance",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 8580,
    "title": "Daniel and Spring Cleaning",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 8581,
    "title": "Hyakugoku and Ladders",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "probability",
      "shortest path"
    ]
  },
  {
    "id": 8582,
    "title": "Shichikuji and Power Grid",
    "difficulty": "hard",
    "category": [
      "graph",
      "greedy",
      "shortest path",
      "tree",
      "union find"
    ]
  },
  {
    "id": 8583,
    "title": "Constanze's Machine",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 8584,
    "title": "Restricted RPS",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 8585,
    "title": "Good ol' Numbers Coloring",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 8586,
    "title": "Running in Pairs",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8587,
    "title": "Chips",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 8588,
    "title": "Minimizing Difference",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "sorting",
      "ternary search",
      "two pointers"
    ]
  },
  {
    "id": 8589,
    "title": "Paint the Tree",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "graph",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 8590,
    "title": "The Football Season",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8591,
    "title": "Rooms and Staircases",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 8592,
    "title": "Pens and Pencils",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8593,
    "title": "Character Swap (Hard Version)",
    "difficulty": "medium",
    "category": [
      "string"
    ]
  },
  {
    "id": 8594,
    "title": "Character Swap (Easy Version)",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 8595,
    "title": "Maximum Square",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 8596,
    "title": "Planar Perimeter",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph"
    ]
  },
  {
    "id": 8597,
    "title": "Number Discovery",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 8598,
    "title": "Sum Balance",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 8599,
    "title": "0-1 MST",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 8600,
    "title": "Tile Painting",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8601,
    "title": "Football",
    "difficulty": "hard",
    "category": [
      "graph"
    ]
  },
  {
    "id": 8602,
    "title": "Swiper, no swiping!",
    "difficulty": "hard",
    "category": [
      "graph",
      "implementation"
    ]
  },
  {
    "id": 8603,
    "title": "Turtle",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 8604,
    "title": "Catowice City",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "graph",
      "graph matching",
      "graph traversal"
    ]
  },
  {
    "id": 8605,
    "title": "Queue in the Train",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8606,
    "title": "The World Is Just a Programming Task (Hard Version)",
    "difficulty": "hard",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 8607,
    "title": "Ivan the Fool and the Probability Theory",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 8608,
    "title": "Adilbek and the Watering System",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8609,
    "title": "The Maximum Subtree",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 8610,
    "title": "Keyboard Purchase",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 8611,
    "title": "AB-string",
    "difficulty": "hard",
    "category": [
      "binary search",
      "combinatorics",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 8612,
    "title": "Standard Free2play",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8613,
    "title": "Kill `Em All",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8614,
    "title": "Prime Subtraction",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 8615,
    "title": "Balanced Reversals",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 8616,
    "title": "Balanced Distribution",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 8617,
    "title": "Balanced Domino Placements",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 8618,
    "title": "Balanced Binary Search Trees",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 8619,
    "title": "Balanced Playlist",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 8620,
    "title": "Balanced Removals (Harder)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "divide and conquer",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 8621,
    "title": "Balanced Removals (Easier)",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "geometry",
      "greedy"
    ]
  },
  {
    "id": 8622,
    "title": "Balanced Tunnel",
    "difficulty": "medium",
    "category": [
      "data structures",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 8623,
    "title": "Balanced Rating Changes",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 8624,
    "title": "Alice and the Cactus",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "math",
      "probability"
    ]
  },
  {
    "id": 8625,
    "title": "Alice and the Unfair Game",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "union find"
    ]
  },
  {
    "id": 8626,
    "title": "Alice and the Doll",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8627,
    "title": "Labs",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8628,
    "title": "Alice and the List of Presents",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 8629,
    "title": "Stones",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8630,
    "title": "Yet Another Substring Reverse",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 8631,
    "title": "Special Permutations",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 8632,
    "title": "Distinct Characters Queries",
    "difficulty": "medium",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 8633,
    "title": "Pipes",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 8634,
    "title": "Social Network (hard version)",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 8635,
    "title": "Social Network (easy version)",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 8636,
    "title": "Equalize Prices Again",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8637,
    "title": "Middle-Out",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "string"
    ]
  },
  {
    "id": 8638,
    "title": "Increasing Matrix",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 8639,
    "title": "Ania and Minimizing",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8640,
    "title": "Dawid and Bags of Candies",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 8641,
    "title": "One Node is Gone",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 8642,
    "title": "Another Filling the Grid",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 8643,
    "title": "Complete Tripartite",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph",
      "hash table",
      "implementation"
    ]
  },
  {
    "id": 8644,
    "title": "Primes and Multiplication",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 8645,
    "title": "Filling the Grid",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 8646,
    "title": "Distinct Digits",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 8647,
    "title": "Not Same",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 8648,
    "title": "Wrong Answer on test 233 (Hard Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 8649,
    "title": "Wrong Answer on test 233 (Easy Version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 8650,
    "title": "Arson In Berland Forest",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 8651,
    "title": "Optimal Subsequences (Hard Version)",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 8652,
    "title": "Optimal Subsequences (Easy Version)",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 8653,
    "title": "Messy",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 8654,
    "title": "Box",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 8655,
    "title": "Math Problem",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8656,
    "title": "To Make 1",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "dynamic programming",
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 8657,
    "title": "Tree Factory",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 8658,
    "title": "Rock Is Push",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming"
    ]
  },
  {
    "id": 8659,
    "title": "Power Products",
    "difficulty": "medium",
    "category": [
      "hash table",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8660,
    "title": "p-binary",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "math"
    ]
  },
  {
    "id": 8661,
    "title": "TV Subscriptions (Hard Version)",
    "difficulty": "medium",
    "category": [
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 8662,
    "title": "TV Subscriptions (Easy Version)",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 8663,
    "title": "Forgetting Things",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8664,
    "title": "Wooden Raft",
    "difficulty": "hard",
    "category": [
      "binary search",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8665,
    "title": "Stack Exterminable Arrays",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "hash table"
    ]
  },
  {
    "id": 8666,
    "title": "Paint the Tree",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 8667,
    "title": "Sequence Sorting",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 8668,
    "title": "Save the Nature",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 8669,
    "title": "Strings Equalization",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 8670,
    "title": "CME",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8671,
    "title": "Graph And Numbers",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "combinatorics",
      "dynamic programming",
      "meet in the middle"
    ]
  },
  {
    "id": 8672,
    "title": "Choose a Square",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 8673,
    "title": "Game With String",
    "difficulty": "hard",
    "category": [
      "game theory"
    ]
  },
  {
    "id": 8674,
    "title": "Make The Fence Great Again",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 8675,
    "title": "Perfect Team",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 8676,
    "title": "Knights",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 8677,
    "title": "2048 Game",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8678,
    "title": "Geolocation",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 8679,
    "title": "Gardener Alex",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 8680,
    "title": "Tourism",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "tree",
      "union find"
    ]
  },
  {
    "id": 8681,
    "title": "Alex and Julian",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8682,
    "title": "Substring Game in the Lesson",
    "difficulty": "medium",
    "category": [
      "game theory",
      "greedy",
      "string"
    ]
  },
  {
    "id": 8683,
    "title": "Multiplication Table",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 8684,
    "title": "Cards",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting",
      "string"
    ]
  },
  {
    "id": 8685,
    "title": "Harvester",
    "difficulty": "hard",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 8686,
    "title": "Periodic integer number",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 8687,
    "title": "The Light Square",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 8688,
    "title": "Function Composition",
    "difficulty": "hard",
    "category": [
      "graph traversal"
    ]
  },
  {
    "id": 8689,
    "title": "Alpha planetary system",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 8690,
    "title": "Workout plan",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 8691,
    "title": "Product Tuples",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "fast fourier transform"
    ]
  },
  {
    "id": 8692,
    "title": "Xor Spanning Tree",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "fast fourier transform",
      "graph"
    ]
  },
  {
    "id": 8693,
    "title": "Jumping Transformers",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 8694,
    "title": "Guarding warehouses",
    "difficulty": "hard",
    "category": [
      "data structures",
      "geometry"
    ]
  },
  {
    "id": 8695,
    "title": "BubbleReactor",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph"
    ]
  },
  {
    "id": 8696,
    "title": "Forced Online Queries Problem",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "graph",
      "tree",
      "union find"
    ]
  },
  {
    "id": 8697,
    "title": "Sum Queries?",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 8698,
    "title": "Coloring Edges",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 8699,
    "title": "The Number Of Good Substrings",
    "difficulty": "medium",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force"
    ]
  },
  {
    "id": 8700,
    "title": "Zmei Gorynich",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 8701,
    "title": "Creating a Character",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 8702,
    "title": "Wi-Fi",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 8703,
    "title": "Numerical Sequence (hard version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 8704,
    "title": "Numerical Sequence (easy version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "math"
    ]
  },
  {
    "id": 8705,
    "title": "Swords",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 8706,
    "title": "White Sheet",
    "difficulty": "medium",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 8707,
    "title": "Shooting",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 8708,
    "title": "Prefixes",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 8709,
    "title": "Radio Stations",
    "difficulty": "hard",
    "category": [
      "2-sat"
    ]
  },
  {
    "id": 8710,
    "title": "Marbles",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 8711,
    "title": "Ticket Game",
    "difficulty": "medium",
    "category": [
      "game theory",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8712,
    "title": "Swap Letters",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 8713,
    "title": "The Number of Products",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 8714,
    "title": "Yellow Cards",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 8715,
    "title": "Tiles Placement",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 8716,
    "title": "Feeling Good",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures"
    ]
  },
  {
    "id": 8717,
    "title": "Employment",
    "difficulty": "hard",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8718,
    "title": "Petya and Construction Set",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "math",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 8719,
    "title": "Treasure Island",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "hash table",
      "max flow"
    ]
  },
  {
    "id": 8720,
    "title": "Bad Sequence",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 8721,
    "title": "Badges",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 8722,
    "title": "Optimal Currency Exchange",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 8723,
    "title": "Path Queries",
    "difficulty": "medium",
    "category": [
      "divide and conquer",
      "graph",
      "sorting",
      "tree",
      "union find"
    ]
  },
  {
    "id": 8724,
    "title": "Unstable String Sort",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "greedy",
      "implementation",
      "string",
      "union find"
    ]
  },
  {
    "id": 8725,
    "title": "Two Small Strings",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms"
    ]
  },
  {
    "id": 8726,
    "title": "Equalizing by Division (hard version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math",
      "sorting"
    ]
  },
  {
    "id": 8727,
    "title": "Equalizing by Division (easy version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 8728,
    "title": "Book Reading",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 8729,
    "title": "Bad Prices",
    "difficulty": "easy",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 8730,
    "title": "Chips Moving",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8731,
    "title": "Unusual Graph",
    "difficulty": "hard",
    "category": [
      "graph",
      "special problem"
    ]
  },
  {
    "id": 8732,
    "title": "Road Repair in Treeland",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "special problem",
      "tree"
    ]
  },
  {
    "id": 8733,
    "title": "King's Path",
    "difficulty": "hard",
    "category": [
      "math",
      "special problem",
      "tree"
    ]
  },
  {
    "id": 8734,
    "title": "kotlinkotlinkotlinkotlin...",
    "difficulty": "hard",
    "category": [
      "graph",
      "implementation",
      "special problem",
      "string"
    ]
  },
  {
    "id": 8735,
    "title": "Double Permutation Inc.",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 8736,
    "title": "Teams",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "math",
      "special problem"
    ]
  },
  {
    "id": 8737,
    "title": "Ice Cream",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting",
      "special problem"
    ]
  },
  {
    "id": 8738,
    "title": "Traveling Around the Golden Ring of Berland",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 8739,
    "title": "Three Problems",
    "difficulty": "easy",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 8740,
    "title": "Mateusz and Escape Room",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 8741,
    "title": "Marek and Matching (hard version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "probability"
    ]
  },
  {
    "id": 8742,
    "title": "Marek and Matching (easy version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "probability"
    ]
  },
  {
    "id": 8743,
    "title": "Wojtek and Card Tricks",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 8744,
    "title": "Konrad and Company Evaluation",
    "difficulty": "hard",
    "category": [
      "graph"
    ]
  },
  {
    "id": 8745,
    "title": "Kamil and Making a Stream",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory",
      "tree"
    ]
  },
  {
    "id": 8746,
    "title": "Marcin and Training Camp",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 8747,
    "title": "Anadi and Domino",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph"
    ]
  },
  {
    "id": 8748,
    "title": "Moving Walkways",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8749,
    "title": "Into Blocks (hard version)",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 8750,
    "title": "Into Blocks (easy version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "implementation",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 8751,
    "title": "Koala and Notebook",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "shortest path",
      "string",
      "tree"
    ]
  },
  {
    "id": 8752,
    "title": "Rotate Columns (hard version)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8753,
    "title": "Rotate Columns (easy version)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8754,
    "title": "Cow and Snacks",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 8755,
    "title": "Paint the Digits",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8756,
    "title": "Koala and Lights",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8757,
    "title": "Paint the Numbers",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 8758,
    "title": "Red Blue Tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 8759,
    "title": "Polygons",
    "difficulty": "hard",
    "category": [
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8760,
    "title": "Bits And Pieces",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 8761,
    "title": "Let Them Slide",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 8762,
    "title": "Restore Permutation",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8763,
    "title": "Magic Grid",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 8764,
    "title": "Uniqueness",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 8765,
    "title": "XORinacci",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8766,
    "title": "Indie Album",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "hash table",
      "string",
      "string suffix structures",
      "tree"
    ]
  },
  {
    "id": 8767,
    "title": "Remainder Problem",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 8768,
    "title": "XOR Guessing",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "interactive",
      "math"
    ]
  },
  {
    "id": 8769,
    "title": "Number Of Permutations",
    "difficulty": "medium",
    "category": [
      "combinatorics"
    ]
  },
  {
    "id": 8770,
    "title": "Gas Pipeline",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 8771,
    "title": "Square Filling",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8772,
    "title": "There Are Two Types Of Burgers",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 8773,
    "title": "Make Product Equal One",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 8774,
    "title": "Choose Two Numbers",
    "difficulty": "easy",
    "category": [
      "math",
      "sorting"
    ]
  },
  {
    "id": 8775,
    "title": "Beauty of a Permutation",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 8776,
    "title": "Expected Value Again",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "string"
    ]
  },
  {
    "id": 8777,
    "title": "Almost All",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "tree"
    ]
  },
  {
    "id": 8778,
    "title": "Palindromic Paths",
    "difficulty": "hard",
    "category": [
      "implementation",
      "interactive"
    ]
  },
  {
    "id": 8779,
    "title": "Shortest Cycle",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 8780,
    "title": "Almost Equal",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8781,
    "title": "Natasha, Sasha and the Prefix Sums",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8782,
    "title": "Kirk and a Binary String (hard version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 8783,
    "title": "Kirk and a Binary String (easy version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy",
      "string"
    ]
  },
  {
    "id": 8784,
    "title": "Anna, Svyatoslav and Maps",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 8785,
    "title": "Mislove Has Lost an Array",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 8786,
    "title": "BowWow and the Timetable",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8787,
    "title": "Complete the Projects (hard version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 8788,
    "title": "Complete the Projects (easy version)",
    "difficulty": "hard",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 8789,
    "title": "Boxers",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8790,
    "title": "Remove the Substring (hard version)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 8791,
    "title": "Remove the Substring (easy version)",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8792,
    "title": "Common Divisors",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 8793,
    "title": "Equal Rectangles",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 8794,
    "title": "Circle of Students",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 8795,
    "title": "You Are Given Some Letters...",
    "difficulty": "hard",
    "category": [
      "binary search",
      "implementation",
      "math"
    ]
  },
  {
    "id": 8796,
    "title": "You Are Given Some Strings...",
    "difficulty": "hard",
    "category": [
      "brute force",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 8797,
    "title": "Print a 1337-string...",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "math",
      "string"
    ]
  },
  {
    "id": 8798,
    "title": "You Are Given a WASD-string...",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation",
      "math",
      "string"
    ]
  },
  {
    "id": 8799,
    "title": "You Are Given a Decimal String...",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "shortest path"
    ]
  },
  {
    "id": 8800,
    "title": "You Are Given Two Binary Strings...",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "greedy"
    ]
  },
  {
    "id": 8801,
    "title": "Knightmare (hard)",
    "difficulty": "hard",
    "category": [
      "graph",
      "interactive",
      "shortest path"
    ]
  },
  {
    "id": 8802,
    "title": "Knightmare (easy)",
    "difficulty": "hard",
    "category": [
      "graph",
      "interactive",
      "shortest path"
    ]
  },
  {
    "id": 8803,
    "title": "Treasure Hunting",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8804,
    "title": "Maximum Median",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 8805,
    "title": "Zero Array",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 8806,
    "title": "Important Exam",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 8807,
    "title": "Graph Traveler",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "graph",
      "graph traversal",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8808,
    "title": "Compress Words",
    "difficulty": "hard",
    "category": [
      "brute force",
      "hash table",
      "implementation",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 8809,
    "title": "White Lines",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 8810,
    "title": "Round Corridor",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 8811,
    "title": "Block Adventure",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 8812,
    "title": "Hotelier",
    "difficulty": "easy",
    "category": [
      "brute force",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 8813,
    "title": "Water Lily",
    "difficulty": "easy",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 8814,
    "title": "City Day",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 8815,
    "title": "GCD Groups 2",
    "difficulty": "hard",
    "category": [
      "greedy",
      "number theory",
      "probability"
    ]
  },
  {
    "id": 8816,
    "title": "Rectangle Painting 2",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph matching",
      "max flow"
    ]
  },
  {
    "id": 8817,
    "title": "Rectangle Painting 1",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 8818,
    "title": "Matching vs  Independent Set",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8819,
    "title": "Welfare State",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 8820,
    "title": "MP3",
    "difficulty": "medium",
    "category": [
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 8821,
    "title": "Coloring Game",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory",
      "matrix"
    ]
  },
  {
    "id": 8822,
    "title": "Culture Code",
    "difficulty": "hard",
    "category": [
      "binary search",
      "combinatorics",
      "data structures",
      "dynamic programming",
      "shortest path",
      "sorting"
    ]
  },
  {
    "id": 8823,
    "title": "Yet Another Subarray Problem",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8824,
    "title": "Array Splitting",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8825,
    "title": "Pillars",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8826,
    "title": "DIY Wooden Ladder",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 8827,
    "title": "K-th Path",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "shortest path",
      "sorting"
    ]
  },
  {
    "id": 8828,
    "title": "Connected Component on a Chessboard",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 8829,
    "title": "RGB Substring (hard version)",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 8830,
    "title": "RGB Substring (easy version)",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 8831,
    "title": "Robot Breakout",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 8832,
    "title": "Odd Sum Segments",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 8833,
    "title": "Three Piles of Candies",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 8834,
    "title": "Geometers Anonymous Club",
    "difficulty": "hard",
    "category": [
      "data structures",
      "geometry",
      "math",
      "sorting"
    ]
  },
  {
    "id": 8835,
    "title": "OpenStreetMap",
    "difficulty": "hard",
    "category": [
      "data structures",
      "two pointers"
    ]
  },
  {
    "id": 8836,
    "title": "Submarine in the Rybinsk Sea (hard edition)",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8837,
    "title": "Submarine in the Rybinsk Sea (easy edition)",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8838,
    "title": "Basketball Exercise",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 8839,
    "title": "Sport Mafia",
    "difficulty": "easy",
    "category": [
      "binary search",
      "brute force",
      "math"
    ]
  },
  {
    "id": 8840,
    "title": "Drinks Choosing",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 8841,
    "title": "Another Meme Problem",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 8842,
    "title": "Crossword Expert",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "number theory",
      "probability",
      "two pointers"
    ]
  },
  {
    "id": 8843,
    "title": "Count The Rectangles",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "data structures",
      "geometry",
      "sorting"
    ]
  },
  {
    "id": 8844,
    "title": "1-2-K Game",
    "difficulty": "medium",
    "category": [
      "game theory",
      "math"
    ]
  },
  {
    "id": 8845,
    "title": "From S To T",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 8846,
    "title": "Yet Another Crosses Problem",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 8847,
    "title": "Remove a Progression",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8848,
    "title": "Scissors and Tape",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "geometry",
      "special problem"
    ]
  },
  {
    "id": 8849,
    "title": "Magic Tree",
    "difficulty": "easy",
    "category": [
      "data structures",
      "dynamic programming",
      "special problem",
      "tree"
    ]
  },
  {
    "id": 8850,
    "title": "Amusement Park",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "math",
      "special problem"
    ]
  },
  {
    "id": 8851,
    "title": "Cubeword",
    "difficulty": "easy",
    "category": [
      "brute force",
      "dynamic programming",
      "meet in the middle",
      "special problem"
    ]
  },
  {
    "id": 8852,
    "title": "Dynamic Diameter",
    "difficulty": "easy",
    "category": [
      "data structures",
      "divide and conquer",
      "graph traversal",
      "special problem",
      "tree"
    ]
  },
  {
    "id": 8853,
    "title": "Building Skyscrapers",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 8854,
    "title": "Tokitsukaze and Mahjong",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 8855,
    "title": "Tokitsukaze and Enhancement",
    "difficulty": "easy",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 8856,
    "title": "Tokitsukaze and Powers",
    "difficulty": "hard",
    "category": [
      "number theory",
      "probability"
    ]
  },
  {
    "id": 8857,
    "title": "Tokitsukaze and Explosion",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 8858,
    "title": "Tokitsukaze and Strange Rectangle",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 8859,
    "title": "Tokitsukaze and Duel",
    "difficulty": "hard",
    "category": [
      "brute force",
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 8860,
    "title": "Tokitsukaze, CSL and Stone Game",
    "difficulty": "medium",
    "category": [
      "game theory"
    ]
  },
  {
    "id": 8861,
    "title": "Tokitsukaze and Discard Items",
    "difficulty": "medium",
    "category": [
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 8862,
    "title": "Candies!",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 8863,
    "title": "Number Circle",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 8864,
    "title": "Keanu Reeves",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 8865,
    "title": "Problem from Red Panda",
    "difficulty": "hard",
    "category": [
      "combinatorics"
    ]
  },
  {
    "id": 8866,
    "title": "Make Equal",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 8867,
    "title": "Array Beauty",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 8868,
    "title": "Count Pairs",
    "difficulty": "hard",
    "category": [
      "math",
      "matrix",
      "number theory",
      "two pointers"
    ]
  },
  {
    "id": 8869,
    "title": "Add on a Tree: Revolution",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 8870,
    "title": "Add on a Tree",
    "difficulty": "medium",
    "category": [
      "tree"
    ]
  },
  {
    "id": 8871,
    "title": "Gang Up",
    "difficulty": "hard",
    "category": [
      "graph",
      "max flow"
    ]
  },
  {
    "id": 8872,
    "title": "Expected Square Beauty",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 8873,
    "title": "Tree Painting",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 8874,
    "title": "Subarray Sorting",
    "difficulty": "hard",
    "category": [
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 8875,
    "title": "Vasya And Array",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8876,
    "title": "Letters Shop",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation",
      "string"
    ]
  },
  {
    "id": 8877,
    "title": "Stickers and Toys",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8878,
    "title": "Vus the Cossack and a Graph",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8879,
    "title": "Vus the Cossack and a Field",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "implementation",
      "math"
    ]
  },
  {
    "id": 8880,
    "title": "Vus the Cossack and Numbers",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8881,
    "title": "Vus the Cossack and Strings",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 8882,
    "title": "Vus the Cossack and a Contest",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 8883,
    "title": "Playlist for Polycarp (hard version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 8884,
    "title": "Playlist for Polycarp (easy version)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 8885,
    "title": "Two Pizzas",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force"
    ]
  },
  {
    "id": 8886,
    "title": "Polycarp and Snakes",
    "difficulty": "hard",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 8887,
    "title": "Extra Element",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 8888,
    "title": "Exam in BerSU (hard version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8889,
    "title": "Exam in BerSU (easy version)",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8890,
    "title": "Email from Polycarp",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 8891,
    "title": "Ropewalkers",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8892,
    "title": "Daleks' Invasion (hard)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "tree",
      "union find"
    ]
  },
  {
    "id": 8893,
    "title": "Daleks' Invasion (medium)",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 8894,
    "title": "Daleks' Invasion (easy)",
    "difficulty": "hard",
    "category": [
      "graph",
      "tree"
    ]
  },
  {
    "id": 8895,
    "title": "Parallel Universes (Hard)",
    "difficulty": "hard",
    "category": [
      "math",
      "matrix"
    ]
  },
  {
    "id": 8896,
    "title": "Parallel Universes (Easy)",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 8897,
    "title": "Heidi and the Turing Test (Hard)",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 8898,
    "title": "Heidi and the Turing Test (Medium)",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 8899,
    "title": "Heidi and the Turing Test (Easy)",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 8900,
    "title": "The Doctor Meets Vader (Hard)",
    "difficulty": "hard",
    "category": [
      "max flow",
      "shortest path"
    ]
  },
  {
    "id": 8901,
    "title": "The Doctor Meets Vader (Medium)",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph matching",
      "max flow",
      "shortest path",
      "sorting"
    ]
  },
  {
    "id": 8902,
    "title": "The Doctor Meets Vader (Easy)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "sorting"
    ]
  },
  {
    "id": 8903,
    "title": "Heidi Learns Hashing (Hard)",
    "difficulty": "hard",
    "category": [
      "fast fourier transform",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8904,
    "title": "Heidi Learns Hashing (Medium)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "number theory"
    ]
  },
  {
    "id": 8905,
    "title": "Heidi Learns Hashing (Easy)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8906,
    "title": "Subsequences (hard version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 8907,
    "title": "Candy Box (hard version)",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 8908,
    "title": "Topforces Strikes Back",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math",
      "sorting"
    ]
  },
  {
    "id": 8909,
    "title": "Subsequences (easy version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "implementation",
      "shortest path"
    ]
  },
  {
    "id": 8910,
    "title": "Candy Box (easy version)",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8911,
    "title": "Computer Game",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 8912,
    "title": "Equalize Prices",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8913,
    "title": "Nearest Interesting Number",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 8914,
    "title": "Maximum Sine",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "number theory"
    ]
  },
  {
    "id": 8915,
    "title": "Product Oriented Recurrence",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "matrix",
      "number theory"
    ]
  },
  {
    "id": 8916,
    "title": "Complete Mirror",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph traversal",
      "hash table",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 8917,
    "title": "Beautiful Lyrics",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "string"
    ]
  },
  {
    "id": 8918,
    "title": "Plus from Picture",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "implementation",
      "string"
    ]
  },
  {
    "id": 8919,
    "title": "Filling Shapes",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 8920,
    "title": "A Story of One Country (Hard)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8921,
    "title": "A Story of One Country (Easy)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "divide and conquer",
      "sorting"
    ]
  },
  {
    "id": 8922,
    "title": "Irrigation",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "implementation",
      "sorting",
      "tree",
      "two pointers"
    ]
  },
  {
    "id": 8923,
    "title": "Flag",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 8924,
    "title": "Split a Number",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 8925,
    "title": "Chunga-Changa",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 8926,
    "title": "Nick and Array",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8927,
    "title": "Alex and a Rhombus",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 8928,
    "title": "Alesya and Discrete Math",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "interactive"
    ]
  },
  {
    "id": 8929,
    "title": "Fedor Runs for President",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 8930,
    "title": "Serge and Dining Room",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph matching",
      "greedy",
      "implementation",
      "math",
      "tree"
    ]
  },
  {
    "id": 8931,
    "title": "Tolik and His Uncle",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 8932,
    "title": "Valeriy and Deque",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 8933,
    "title": "Stock Exchange",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph",
      "max flow"
    ]
  },
  {
    "id": 8934,
    "title": "The Awesomest Vertex",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal"
    ]
  },
  {
    "id": 8935,
    "title": "Long Colorful Strip",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 8936,
    "title": "Short Colorful Strip",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph traversal"
    ]
  },
  {
    "id": 8937,
    "title": "Archaeology",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "string"
    ]
  },
  {
    "id": 8938,
    "title": "Prime Graph",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8939,
    "title": "Tiles",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8940,
    "title": "WOW Factor",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 8941,
    "title": "Prime Minister",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 8942,
    "title": "Digits Sequence (Hard Edition)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "divide and conquer",
      "implementation"
    ]
  },
  {
    "id": 8943,
    "title": "Digits Sequence (Easy Edition)",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 8944,
    "title": "Destroy it!",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 8945,
    "title": "Cover it!",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "shortest path",
      "tree",
      "union find"
    ]
  },
  {
    "id": 8946,
    "title": "Recover it!",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 8947,
    "title": "Lose it!",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8948,
    "title": "Merge it!",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 8949,
    "title": "Divide it!",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8950,
    "title": "Yet Another Partiton Problem",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "geometry",
      "two pointers"
    ]
  },
  {
    "id": 8951,
    "title": "The Number of Subpermutations",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "divide and conquer",
      "hash table",
      "math"
    ]
  },
  {
    "id": 8952,
    "title": "Minimal Segment Cover",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 8953,
    "title": "Array Splitting",
    "difficulty": "hard",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8954,
    "title": "Electrification",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 8955,
    "title": "Catch Overflow!",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation",
      "parsing"
    ]
  },
  {
    "id": 8956,
    "title": "From Hero to Zero",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 8957,
    "title": "Ehab and the Big Finale",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "divide and conquer",
      "graph",
      "implementation",
      "interactive",
      "tree"
    ]
  },
  {
    "id": 8958,
    "title": "Ehab and the Expected GCD Problem",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8959,
    "title": "Ehab and the Expected XOR Problem",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms"
    ]
  },
  {
    "id": 8960,
    "title": "Ehab and a Special Coloring Problem",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "number theory"
    ]
  },
  {
    "id": 8961,
    "title": "Ehab Is an Odd Person",
    "difficulty": "medium",
    "category": [
      "sorting"
    ]
  },
  {
    "id": 8962,
    "title": "Ehab Fails to Be Thanos",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 8963,
    "title": "Nauuo and Chess",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 8964,
    "title": "Nauuo and Votes",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 8965,
    "title": "Nauuo and Bug",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 8966,
    "title": "Nauuo and ODT",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 8967,
    "title": "Nauuo and Portals",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 8968,
    "title": "Nauuo and Pictures (hard version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "probability"
    ]
  },
  {
    "id": 8969,
    "title": "Nauuo and Pictures (easy version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "probability"
    ]
  },
  {
    "id": 8970,
    "title": "Nauuo and Circle",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 8971,
    "title": "Nauuo and Cards",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 8972,
    "title": "Good Subsets",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "special problem"
    ]
  },
  {
    "id": 8973,
    "title": "Longest Saw",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "special problem"
    ]
  },
  {
    "id": 8974,
    "title": "Graph Decomposition",
    "difficulty": "easy",
    "category": [
      "graph",
      "special problem"
    ]
  },
  {
    "id": 8975,
    "title": "Wheels",
    "difficulty": "easy",
    "category": [
      "binary search",
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 8976,
    "title": "Sliding Doors",
    "difficulty": "easy",
    "category": [
      "binary search",
      "special problem"
    ]
  },
  {
    "id": 8977,
    "title": "Decoding of Integer Sequences",
    "difficulty": "easy",
    "category": [
      "data structures",
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 8978,
    "title": "Minus and Minus Give Plus",
    "difficulty": "easy",
    "category": [
      "implementation",
      "special problem",
      "string"
    ]
  },
  {
    "id": 8979,
    "title": "Bad Days",
    "difficulty": "easy",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 8980,
    "title": "Three Integers Again",
    "difficulty": "easy",
    "category": [
      "math",
      "special problem"
    ]
  },
  {
    "id": 8981,
    "title": "Pairs",
    "difficulty": "medium",
    "category": [
      "graph",
      "implementation"
    ]
  },
  {
    "id": 8982,
    "title": "Circle Metro",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 8983,
    "title": "Xor Permutations",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 8984,
    "title": "Anagram Paths",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 8985,
    "title": "And Reachability",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 8986,
    "title": "Good Triple",
    "difficulty": "hard",
    "category": [
      "brute force",
      "two pointers"
    ]
  },
  {
    "id": 8987,
    "title": "Increasing by Modulo",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 8988,
    "title": "Low Budget Inception",
    "difficulty": "hard",
    "category": [
      "brute force",
      "geometry"
    ]
  },
  {
    "id": 8989,
    "title": "Scalar Queries",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "math",
      "sorting"
    ]
  },
  {
    "id": 8990,
    "title": "Range Deleting",
    "difficulty": "hard",
    "category": [
      "binary search",
      "combinatorics",
      "data structures",
      "two pointers"
    ]
  },
  {
    "id": 8991,
    "title": "Bicolored RBS",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 8992,
    "title": "News Distribution",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 8993,
    "title": "Lost Numbers",
    "difficulty": "medium",
    "category": [
      "brute force",
      "divide and conquer",
      "interactive",
      "math"
    ]
  },
  {
    "id": 8994,
    "title": "Telephone Number",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "string"
    ]
  },
  {
    "id": 8995,
    "title": "Vicky's Delivery Service",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "hash table",
      "union find"
    ]
  },
  {
    "id": 8996,
    "title": "The LCMs Must be Large",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 8997,
    "title": "Cute Sequences",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 8998,
    "title": "A Tale of Two Lands",
    "difficulty": "medium",
    "category": [
      "binary search",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 8999,
    "title": "All the Vowels Please",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9000,
    "title": "Silent Classroom",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "greedy"
    ]
  },
  {
    "id": 9001,
    "title": "Microtransactions (hard version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9002,
    "title": "Microtransactions (easy version)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 9003,
    "title": "Two Arrays and Sum of Functions",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 9004,
    "title": "Almost All Divisors",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 9005,
    "title": "Good String",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9006,
    "title": "Polycarp Training",
    "difficulty": "easy",
    "category": [
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 9007,
    "title": "Remainder",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 9008,
    "title": "Indecisive Taxi Fee",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 9009,
    "title": "Magical Permutation",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "data structures",
      "graph",
      "math"
    ]
  },
  {
    "id": 9010,
    "title": "Mysterious Code",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 9011,
    "title": "Power Transmission (Hard Edition)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "geometry",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9012,
    "title": "Power Transmission (Easy Edition)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "geometry"
    ]
  },
  {
    "id": 9013,
    "title": "Cat Party (Hard Edition)",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 9014,
    "title": "Cat Party (Easy Edition)",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 9015,
    "title": "Eating Soup",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 9016,
    "title": "Double Matrix",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 9017,
    "title": "Zoning Restrictions Again",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9018,
    "title": "Collaboration",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9019,
    "title": "Expansion coefficient of the array",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 9020,
    "title": "A pile of stones",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 9021,
    "title": "Density of subarrays",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 9022,
    "title": "Strange device",
    "difficulty": "hard",
    "category": [
      "binary search",
      "interactive",
      "math",
      "tree"
    ]
  },
  {
    "id": 9023,
    "title": "Winding polygonal line",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "geometry",
      "greedy",
      "math"
    ]
  },
  {
    "id": 9024,
    "title": "Permutation recovery",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "graph",
      "graph traversal",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 9025,
    "title": "The minimal unique substring",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math",
      "string"
    ]
  },
  {
    "id": 9026,
    "title": "The Party and Sweets",
    "difficulty": "medium",
    "category": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "implementation",
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 9027,
    "title": "Inverse of Rows and Columns",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms"
    ]
  },
  {
    "id": 9028,
    "title": "Maximum Balanced Circle",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 9029,
    "title": "Minimum Array",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 9030,
    "title": "N Problems During K Days",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 9031,
    "title": "Increasing Subsequence (hard version)",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9032,
    "title": "Increasing Subsequence (easy version)",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9033,
    "title": "Long Number",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9034,
    "title": "Reachable Numbers",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9035,
    "title": "Optimizer",
    "difficulty": "hard",
    "category": [
      "graph",
      "greedy",
      "hash table",
      "implementation"
    ]
  },
  {
    "id": 9036,
    "title": "Card Bag",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 9037,
    "title": "Special Segments of Permutation",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 9038,
    "title": "0-1-Tree",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "dynamic programming",
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 9039,
    "title": "Match Points",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "sorting",
      "ternary search",
      "two pointers"
    ]
  },
  {
    "id": 9040,
    "title": "Ugly Pairs",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "greedy",
      "implementation",
      "sorting",
      "string"
    ]
  },
  {
    "id": 9041,
    "title": "Inscribed Figures",
    "difficulty": "medium",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 9042,
    "title": "Delivery Oligopoly",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "graph"
    ]
  },
  {
    "id": 9043,
    "title": "Guess the Root",
    "difficulty": "hard",
    "category": [
      "brute force",
      "interactive",
      "math"
    ]
  },
  {
    "id": 9044,
    "title": "Beautiful Array",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 9045,
    "title": "Alarm Clocks Everywhere",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 9046,
    "title": "Game with Telephone Numbers",
    "difficulty": "medium",
    "category": [
      "game theory",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9047,
    "title": "Reverse a Substring",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting",
      "string"
    ]
  },
  {
    "id": 9048,
    "title": "Minimum Possible LCM",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9049,
    "title": "Shovels Shop",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 9050,
    "title": "Two Teams",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 9051,
    "title": "Walking Robot",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9052,
    "title": "Gourmet Cat",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 9053,
    "title": "Make Them Equal",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 9054,
    "title": "Restoring Three Numbers",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 9055,
    "title": "Serval and Bonus Problem",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 9056,
    "title": "Serval and Snake",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "interactive"
    ]
  },
  {
    "id": 9057,
    "title": "Serval and Rooted Tree",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 9058,
    "title": "Serval and Parenthesis Sequence",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 9059,
    "title": "Serval and Toy Bricks",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 9060,
    "title": "Serval and Bus",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 9061,
    "title": "Neko Rules the Catniverse (Large Version)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 9062,
    "title": "Neko Rules the Catniverse (Small Version)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 9063,
    "title": "Neko and Flashback",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 9064,
    "title": "Neko and Aki's Prank",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 9065,
    "title": "Neko does Maths",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9066,
    "title": "Neko Performs Cat Furrier Transform",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 9067,
    "title": "Neko Finds Grapes",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9068,
    "title": "Sonya and Informatics",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "matrix",
      "probability"
    ]
  },
  {
    "id": 9069,
    "title": "Number of Components",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 9070,
    "title": "Stas and the Queue at the Buffet",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 9071,
    "title": "Problem for Nazar",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 9072,
    "title": "Dima and a Bad XOR",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "dynamic programming"
    ]
  },
  {
    "id": 9073,
    "title": "Maxim and Biology",
    "difficulty": "easy",
    "category": [
      "brute force",
      "string"
    ]
  },
  {
    "id": 9074,
    "title": "Tiling Challenge",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9075,
    "title": "Stock Arbitraging",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9076,
    "title": "Election Promises",
    "difficulty": "hard",
    "category": [
      "game theory",
      "graph"
    ]
  },
  {
    "id": 9077,
    "title": "Abandoning Roads",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "graph",
      "greedy"
    ]
  },
  {
    "id": 9078,
    "title": "Tree Generator™",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 9079,
    "title": "Three Religions",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "implementation",
      "string"
    ]
  },
  {
    "id": 9080,
    "title": "Prefix Sum Primes",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9081,
    "title": "Holy Diver ",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 9082,
    "title": "Gold Experience",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "math",
      "number theory",
      "probability"
    ]
  },
  {
    "id": 9083,
    "title": "Foo Fighters",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms"
    ]
  },
  {
    "id": 9084,
    "title": "Earth Wind and Fire",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 9085,
    "title": "Dirty Deeds Done Dirt Cheap",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 9086,
    "title": "Crazy Diamond",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "sorting"
    ]
  },
  {
    "id": 9087,
    "title": "Born This Way",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "two pointers"
    ]
  },
  {
    "id": 9088,
    "title": "Another One Bites The Dust",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9089,
    "title": "Zigzag Game",
    "difficulty": "hard",
    "category": [
      "game theory",
      "interactive"
    ]
  },
  {
    "id": 9090,
    "title": "Rainbow Coins",
    "difficulty": "hard",
    "category": [
      "interactive"
    ]
  },
  {
    "id": 9091,
    "title": "Palindrome XOR",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 9092,
    "title": "Thanos Nim",
    "difficulty": "hard",
    "category": [
      "game theory"
    ]
  },
  {
    "id": 9093,
    "title": "Chladni Figure",
    "difficulty": "hard",
    "category": [
      "brute force",
      "string"
    ]
  },
  {
    "id": 9094,
    "title": "Hide and Seek",
    "difficulty": "medium",
    "category": [
      "graph"
    ]
  },
  {
    "id": 9095,
    "title": "Satanic Panic",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "geometry"
    ]
  },
  {
    "id": 9096,
    "title": "Zoning Restrictions",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "max flow"
    ]
  },
  {
    "id": 9097,
    "title": "Leaf Partition",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 9098,
    "title": "Hot is Cold",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "divide and conquer",
      "implementation"
    ]
  },
  {
    "id": 9099,
    "title": "Frog Jumping",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9100,
    "title": "Tree Diameter",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "graph",
      "interactive"
    ]
  },
  {
    "id": 9101,
    "title": "Hate \"A\"",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 9102,
    "title": "Love \"A\"",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 9103,
    "title": "AI Takeover",
    "difficulty": "easy",
    "category": [
      "interactive",
      "special problem"
    ]
  },
  {
    "id": 9104,
    "title": "Neat Words",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9105,
    "title": "Fourier Doodles",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 9106,
    "title": "Pigeon d'Or",
    "difficulty": "easy",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 9107,
    "title": "Mystery Circuit",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "brute force"
    ]
  },
  {
    "id": 9108,
    "title": "Kanban Numbers",
    "difficulty": "easy",
    "category": [
      "brute force",
      "special problem"
    ]
  },
  {
    "id": 9109,
    "title": "Thanos Sort",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9110,
    "title": "Two Merged Sequences",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 9111,
    "title": "Graph Without Long Directed Paths",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 9112,
    "title": "Median String",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "math",
      "number theory",
      "string"
    ]
  },
  {
    "id": 9113,
    "title": "Equalize Them All",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 9114,
    "title": "Two Shuffled Sequences",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "sorting"
    ]
  },
  {
    "id": 9115,
    "title": "Parity Alternated Deletions",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 9116,
    "title": "Diverse Strings",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 9117,
    "title": "Queen",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 9118,
    "title": "Nirvana",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9119,
    "title": "The Doors",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9120,
    "title": "Pink Floyd",
    "difficulty": "hard",
    "category": [
      "graph",
      "interactive"
    ]
  },
  {
    "id": 9121,
    "title": "Foreigner",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 9122,
    "title": "U2",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 9123,
    "title": "Lynyrd Skynyrd",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph traversal",
      "math",
      "tree"
    ]
  },
  {
    "id": 9124,
    "title": "The Beatles",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 9125,
    "title": "Privatization of Roads in Treeland",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 9126,
    "title": "Same Sum Blocks (Hard)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 9127,
    "title": "Same Sum Blocks (Easy)",
    "difficulty": "hard",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9128,
    "title": "Superhero Battle",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 9129,
    "title": "Colored Boots",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9130,
    "title": "Polycarp Restores Permutation",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 9131,
    "title": "Maximal Continuous Rest",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9132,
    "title": "Game 23",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 9133,
    "title": "Double Tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 9134,
    "title": "Extending Set of Points",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "union find"
    ]
  },
  {
    "id": 9135,
    "title": "Palindrome-less Arrays",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "divide and conquer",
      "dynamic programming"
    ]
  },
  {
    "id": 9136,
    "title": "Minimum Triangulation",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 9137,
    "title": "Playlist",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 9138,
    "title": "Good String",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 9139,
    "title": "Detective Book",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9140,
    "title": "Dish Shopping",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer"
    ]
  },
  {
    "id": 9141,
    "title": "Maximize Mex",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph matching",
      "max flow"
    ]
  },
  {
    "id": 9142,
    "title": "Steps to One",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "number theory",
      "probability"
    ]
  },
  {
    "id": 9143,
    "title": "Edgy Trees",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "math",
      "tree",
      "union find"
    ]
  },
  {
    "id": 9144,
    "title": "Chocolates",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9145,
    "title": "Even Substrings",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 9146,
    "title": "Circus",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 9147,
    "title": "Sushi for Two",
    "difficulty": "easy",
    "category": [
      "binary search",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9148,
    "title": "Matches Are Not a Child's Play ",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 9149,
    "title": "Train Car Selection",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 9150,
    "title": "Cooperative Game",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "interactive",
      "number theory"
    ]
  },
  {
    "id": 9151,
    "title": "Museums Tour",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "implementation"
    ]
  },
  {
    "id": 9152,
    "title": "Camp Schedule",
    "difficulty": "medium",
    "category": [
      "greedy",
      "hash table",
      "string"
    ]
  },
  {
    "id": 9153,
    "title": "Skyscrapers",
    "difficulty": "medium",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 9154,
    "title": "Nastya Hasn't Written a Legend",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 9155,
    "title": "Nastya Is Buying Lunch",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9156,
    "title": "Nastya Is Transposing Matrices",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "sorting"
    ]
  },
  {
    "id": 9157,
    "title": "Nastya Is Playing Computer Games",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 9158,
    "title": "Nastya Is Reading a Book",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9159,
    "title": "Spanning Tree with One Fixed Degree",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 9160,
    "title": "Spanning Tree with Maximum Degree",
    "difficulty": "medium",
    "category": [
      "graph"
    ]
  },
  {
    "id": 9161,
    "title": "K Balanced Teams",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 9162,
    "title": "Zero Quantity Maximization",
    "difficulty": "medium",
    "category": [
      "hash table",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9163,
    "title": "Balanced Team",
    "difficulty": "medium",
    "category": [
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 9164,
    "title": "Preparation for International Women's Day",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 9165,
    "title": "Middle of the Contest",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9166,
    "title": "Greedy Subsequences",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 9167,
    "title": "Clear the String",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 9168,
    "title": "Knapsack",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 9169,
    "title": "Stressful Training",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 9170,
    "title": "Painting the Fence",
    "difficulty": "medium",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 9171,
    "title": "Discounts",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 9172,
    "title": "Regular Bracket Sequence",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9173,
    "title": "Most Dangerous Shark",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 9174,
    "title": "Asya And Kittens",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "union find"
    ]
  },
  {
    "id": 9175,
    "title": "String Multiplication",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "string"
    ]
  },
  {
    "id": 9176,
    "title": "Gourmet choice",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 9177,
    "title": "Birthday",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 9178,
    "title": "Draw!",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9179,
    "title": "Sea Battle",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 9180,
    "title": "Connect",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 9181,
    "title": "Two Cakes",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9182,
    "title": "Be Positive",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9183,
    "title": "Legendary Tree",
    "difficulty": "hard",
    "category": [
      "binary search",
      "interactive",
      "tree"
    ]
  },
  {
    "id": 9184,
    "title": "Isolation",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 9185,
    "title": "Morse Code",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "hash table",
      "sorting",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 9186,
    "title": "Wrong Answer",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 9187,
    "title": "Toy Train",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 9188,
    "title": "Toy Train (Simplified)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 9189,
    "title": "System Testing",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9190,
    "title": "Mike and Children",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 9191,
    "title": "Technogoblet of Fire",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 9192,
    "title": "Secret Letters",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 9193,
    "title": "The very same Munchhausen",
    "difficulty": "hard",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 9194,
    "title": "Power Tree",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "tree",
      "union find"
    ]
  },
  {
    "id": 9195,
    "title": "Compress String",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 9196,
    "title": "Once in a casino",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9197,
    "title": "Diana and Liana",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 9198,
    "title": "Triple",
    "difficulty": "hard",
    "category": [
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 9199,
    "title": "Get Ready for the Battle",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 9200,
    "title": "Niyaz and Small Degrees",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 9201,
    "title": "Pavel and Triangles",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "fast fourier transform",
      "greedy",
      "ternary search"
    ]
  },
  {
    "id": 9202,
    "title": "Frets On Fire",
    "difficulty": "medium",
    "category": [
      "binary search",
      "sorting"
    ]
  },
  {
    "id": 9203,
    "title": "Ramesses and Corner Inversion",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9204,
    "title": "Alyona and a Narrow Fridge",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "max flow",
      "sorting"
    ]
  },
  {
    "id": 9205,
    "title": "Ilya and a Colorful Walk",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9206,
    "title": "Tree Cutting (Hard Version)",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 9207,
    "title": "Tree Cutting (Easy Version)",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 9208,
    "title": "Yet Another Ball Problem",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 9209,
    "title": "Coffee and Coursework (Hard Version)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 9210,
    "title": "Coffee and Coursework (Easy version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 9211,
    "title": "Palindromic Matrix",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 9212,
    "title": "Tanya and Candies",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9213,
    "title": "Water Buying",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 9214,
    "title": "Recursive Queries",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 9215,
    "title": "Crisp String",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 9216,
    "title": "Decypher the String",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "chinese remainder theorem",
      "constructive algorithms",
      "interactive",
      "math"
    ]
  },
  {
    "id": 9217,
    "title": "Magic Gems",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "matrix"
    ]
  },
  {
    "id": 9218,
    "title": "Magic Ship",
    "difficulty": "hard",
    "category": [
      "binary search"
    ]
  },
  {
    "id": 9219,
    "title": "Emotes",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 9220,
    "title": "Best Subsegment",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 9221,
    "title": "Hessenberg matrix",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9222,
    "title": "Creeper",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9223,
    "title": "TIE fighter",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9224,
    "title": "X-wing fighter",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9225,
    "title": "Pattern of increasing blocks",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9226,
    "title": "Block diagonal matrix",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9227,
    "title": "``Is the number of ones divisible by 3?'' oracle",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9228,
    "title": "``Is the bit string periodic?'' oracle",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9229,
    "title": "Alternating bits oracle",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9230,
    "title": "Not A, not B or not C?",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9231,
    "title": "Distinguish three-qubit states",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9232,
    "title": "Generate equal superposition of four basis states",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9233,
    "title": "Generate state |00⟩ + |01⟩ + |10⟩",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9234,
    "title": "Block unitary",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9235,
    "title": "Chessboard unitary",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9236,
    "title": "Anti-diagonal unitary",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9237,
    "title": "Palindrome checker oracle",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9238,
    "title": "OR oracle",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9239,
    "title": "AND oracle",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9240,
    "title": "Please, another Queries on Array?",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "divide and conquer",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9241,
    "title": "Arithmetic Progression",
    "difficulty": "hard",
    "category": [
      "binary search",
      "interactive",
      "number theory",
      "probability"
    ]
  },
  {
    "id": 9242,
    "title": "Flood Fill",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 9243,
    "title": "Trailing Loves (or L'oeufs?)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9244,
    "title": "Yet Another Array Partitioning Task",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 9245,
    "title": "Got Any Grapes?",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9246,
    "title": "Sasha and Magnetic Machines",
    "difficulty": "medium",
    "category": [
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 9247,
    "title": "Sasha and His Trip",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 9248,
    "title": "Tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 9249,
    "title": "Destroy the Colony",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 9250,
    "title": "Creative Snap",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "divide and conquer",
      "math"
    ]
  },
  {
    "id": 9251,
    "title": "Average Superhero Gang Power ",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9252,
    "title": "Superhero Transformation",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 9253,
    "title": "Modest Substrings",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 9254,
    "title": "Tree-Tac-Toe ",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "game theory",
      "tree"
    ]
  },
  {
    "id": 9255,
    "title": "Nearest Leaf",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 9256,
    "title": "Magic Stones",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math",
      "sorting"
    ]
  },
  {
    "id": 9257,
    "title": "Jongmah",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 9258,
    "title": "Meaningless Operations",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9259,
    "title": "Tape",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 9260,
    "title": "Parity",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 9261,
    "title": "Sasha and Algorithm of Silence's Sounds",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 9262,
    "title": "Sasha and a Very Easy Test",
    "difficulty": "hard",
    "category": [
      "data structures",
      "number theory"
    ]
  },
  {
    "id": 9263,
    "title": "Sasha and Interesting Fact from Graph Theory",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "math",
      "tree"
    ]
  },
  {
    "id": 9264,
    "title": "Sasha and a Patient Friend",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 9265,
    "title": "Sasha and One More Name",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "hash table",
      "string"
    ]
  },
  {
    "id": 9266,
    "title": "Sasha and a Bit of Relax",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 9267,
    "title": "MST Unification",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 9268,
    "title": "Array and Segments (Hard version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 9269,
    "title": "Array and Segments (Easy version)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9270,
    "title": "Diverse Garland",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 9271,
    "title": "Nice Garland",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 9272,
    "title": "Divisors of Two Integers",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9273,
    "title": "Two distinct points",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9274,
    "title": "Vasya and Maximum Profit",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "union find"
    ]
  },
  {
    "id": 9275,
    "title": "Vasya and Endless Credits",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph matching",
      "max flow",
      "sorting"
    ]
  },
  {
    "id": 9276,
    "title": "Vasya and Binary String",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 9277,
    "title": "Compression",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9278,
    "title": "Brutality",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 9279,
    "title": "Digital root",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 9280,
    "title": "Digits Sequence Dividing",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 9281,
    "title": "Lunar New Year and a Recursive Sequence",
    "difficulty": "hard",
    "category": [
      "math",
      "matrix",
      "number theory"
    ]
  },
  {
    "id": 9282,
    "title": "Lunar New Year and Red Envelopes",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 9283,
    "title": "Lunar New Year and a Wander",
    "difficulty": "medium",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 9284,
    "title": "Lunar New Year and Number Division",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 9285,
    "title": "Lunar New Year and Food Ordering",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 9286,
    "title": "Lunar New Year and Cross Counting",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9287,
    "title": "Helping Hiasat ",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "meet in the middle"
    ]
  },
  {
    "id": 9288,
    "title": "Kilani and the Game",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "implementation",
      "shortest path"
    ]
  },
  {
    "id": 9289,
    "title": "Ayoub and Lost Array",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 9290,
    "title": "Zuhair and Strings",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 9291,
    "title": "Salem and Sticks ",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 9292,
    "title": "Game with string",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9293,
    "title": "Splitting into digits",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9294,
    "title": "Radix sum",
    "difficulty": "hard",
    "category": [
      "fast fourier transform",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9295,
    "title": "Professional layer",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 9296,
    "title": "Johnny Solving",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 9297,
    "title": "Game with modulo",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "interactive"
    ]
  },
  {
    "id": 9298,
    "title": "Grid game",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 9299,
    "title": "Elongated Matrix",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "graph"
    ]
  },
  {
    "id": 9300,
    "title": "Monotonic Renumeration",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "sorting"
    ]
  },
  {
    "id": 9301,
    "title": "Balanced Ternary String",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 9302,
    "title": "Doors Breaking and Repairing",
    "difficulty": "medium",
    "category": [
      "game theory"
    ]
  },
  {
    "id": 9303,
    "title": "Array K-Coloring",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 9304,
    "title": "Integer Sequence Dividing",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 9305,
    "title": "(Zero XOR Subset)-less",
    "difficulty": "hard",
    "category": [
      "math",
      "matrix"
    ]
  },
  {
    "id": 9306,
    "title": "Trucks and Cities",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming"
    ]
  },
  {
    "id": 9307,
    "title": "Polycarp's New Job",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9308,
    "title": "GCD Counting",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph traversal",
      "number theory",
      "tree"
    ]
  },
  {
    "id": 9309,
    "title": "Division and Union",
    "difficulty": "medium",
    "category": [
      "sorting"
    ]
  },
  {
    "id": 9310,
    "title": "Accordion",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9311,
    "title": "Minimum Integer",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 9312,
    "title": "Ivan and Burgers",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "greedy",
      "math"
    ]
  },
  {
    "id": 9313,
    "title": "Andrew and Taxi",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 9314,
    "title": "Dasha and Chess",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "game theory",
      "interactive"
    ]
  },
  {
    "id": 9315,
    "title": "NN and the Optical Illusion",
    "difficulty": "medium",
    "category": [
      "binary search",
      "geometry",
      "math"
    ]
  },
  {
    "id": 9316,
    "title": "Build a Contest",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 9317,
    "title": "Roman and Browser",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9318,
    "title": "Cookies",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "game theory",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 9319,
    "title": "Postcard",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 9320,
    "title": "Squares and Segments",
    "difficulty": "easy",
    "category": [
      "binary search",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 9321,
    "title": "Snowball",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9322,
    "title": "Ж-function",
    "difficulty": "hard",
    "category": [
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 9323,
    "title": "Fedya the Potter",
    "difficulty": "hard",
    "category": [
      "binary search",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9324,
    "title": "Eels",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 9325,
    "title": "Construct a tree",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 9326,
    "title": "Nice table",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 9327,
    "title": "Sum in the tree",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 9328,
    "title": "Mateusz and an Infinite Sequence",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 9329,
    "title": "Vladislav and a Great Legend",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 9330,
    "title": "Alex and a TV Show",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "number theory"
    ]
  },
  {
    "id": 9331,
    "title": "Egor and an RPG game",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 9332,
    "title": "Makoto and a Blackboard",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "number theory",
      "probability"
    ]
  },
  {
    "id": 9333,
    "title": "Yuhao and a Parenthesis",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9334,
    "title": "Petr and a Combination Lock",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 9335,
    "title": "Gennady and a Card Game",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 9336,
    "title": "Lucky Tickets",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "dynamic programming",
      "fast fourier transform"
    ]
  },
  {
    "id": 9337,
    "title": "Inversion Expectation",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 9338,
    "title": "The Top Scorer",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 9339,
    "title": "Easy Problem",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 9340,
    "title": "Polygon for the Angle",
    "difficulty": "medium",
    "category": [
      "brute force",
      "geometry"
    ]
  },
  {
    "id": 9341,
    "title": "Substring Removal",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math",
      "string"
    ]
  },
  {
    "id": 9342,
    "title": "Find Divisible",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9343,
    "title": "Make It Connected",
    "difficulty": "hard",
    "category": [
      "graph",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 9344,
    "title": "Almost Regular Bracket Sequence",
    "difficulty": "hard",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9345,
    "title": "Circular Dance",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9346,
    "title": "Powers Of Two",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "greedy"
    ]
  },
  {
    "id": 9347,
    "title": "Array Stabilization",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9348,
    "title": "Repeating Cipher",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9349,
    "title": "Multidimensional Queries",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures"
    ]
  },
  {
    "id": 9350,
    "title": "Vasya and Array",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 9351,
    "title": "Intersection of Permutations",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 9352,
    "title": "Beautiful Graph",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 9353,
    "title": "Mishka and the Last Exam",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9354,
    "title": "Letters Rearranging",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting",
      "string"
    ]
  },
  {
    "id": 9355,
    "title": "Dice Rolling",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 9356,
    "title": "Tree with Maximum Cost",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 9357,
    "title": "Minimal Diameter Forest",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 9358,
    "title": "Great Vova Wall (Version 2)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 9359,
    "title": "Great Vova Wall (Version 1)",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9360,
    "title": "Prefixes and Suffixes",
    "difficulty": "medium",
    "category": [
      "string"
    ]
  },
  {
    "id": 9361,
    "title": "Teams Forming",
    "difficulty": "easy",
    "category": [
      "sorting"
    ]
  },
  {
    "id": 9362,
    "title": "Uniform String",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9363,
    "title": "New Year and the Tricolore Recreation",
    "difficulty": "hard",
    "category": [
      "game theory"
    ]
  },
  {
    "id": 9364,
    "title": "New Year and the Factorisation Collaboration",
    "difficulty": "hard",
    "category": [
      "interactive",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9365,
    "title": "New Year and the Mallard Expedition",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 9366,
    "title": "New Year and the Acquaintance Estimation",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph",
      "greedy",
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 9367,
    "title": "New Year and the Permutation Concatenation",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 9368,
    "title": "New Year and the Sphere Transmission",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 9369,
    "title": "New Year and the Treasure Geolocation",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9370,
    "title": "New Year and the Christmas Ornament",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9371,
    "title": "The Pleasant Walk",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9372,
    "title": "Berland University",
    "difficulty": "hard",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 9373,
    "title": "Right Expansion Of The Mind",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 9374,
    "title": "Two Prefixes",
    "difficulty": "hard",
    "category": [
      "string"
    ]
  },
  {
    "id": 9375,
    "title": "Minimal Product",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 9376,
    "title": "Linearization",
    "difficulty": "hard",
    "category": [
      "graph"
    ]
  },
  {
    "id": 9377,
    "title": "Combostone",
    "difficulty": "hard",
    "category": [
      "game theory",
      "implementation"
    ]
  },
  {
    "id": 9378,
    "title": "How to Learn You Score",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "interactive"
    ]
  },
  {
    "id": 9379,
    "title": "Horseback Riding",
    "difficulty": "hard",
    "category": [
      "graph",
      "max flow"
    ]
  },
  {
    "id": 9380,
    "title": "Similar Arrays",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 9381,
    "title": "New Year Presents",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures"
    ]
  },
  {
    "id": 9382,
    "title": "LaTeX Expert",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 9383,
    "title": "Company Merging",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9384,
    "title": "Minegraphed",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph"
    ]
  },
  {
    "id": 9385,
    "title": "Lazyland",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 9386,
    "title": "King Kog's Reception",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 9387,
    "title": "JS Minification",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9388,
    "title": "Interval-Free Permutations",
    "difficulty": "hard",
    "category": [
      "combinatorics"
    ]
  },
  {
    "id": 9389,
    "title": "Harder Satisfiability",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 9390,
    "title": "Guest Student",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 9391,
    "title": "Fractions",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 9392,
    "title": "Easy Chess",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 9393,
    "title": "Distance Sum",
    "difficulty": "hard",
    "category": [
      "graph"
    ]
  },
  {
    "id": 9394,
    "title": "Cactus Search",
    "difficulty": "hard",
    "category": [
      "interactive"
    ]
  },
  {
    "id": 9395,
    "title": "Bimatching",
    "difficulty": "hard",
    "category": [
      "graph"
    ]
  },
  {
    "id": 9396,
    "title": "Alice the Fan",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 9397,
    "title": "Ehab and a weird weight formula",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 9398,
    "title": "Ehab and a component choosing problem",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "math",
      "tree"
    ]
  },
  {
    "id": 9399,
    "title": "Ehab and another another xor problem",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "implementation",
      "interactive"
    ]
  },
  {
    "id": 9400,
    "title": "Ehab and a 2-operation task",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 9401,
    "title": "Ehab and subtraction",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 9402,
    "title": "Ehab and another construction problem",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms"
    ]
  },
  {
    "id": 9403,
    "title": "Forest Fires",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 9404,
    "title": "Beautiful Matrix",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 9405,
    "title": "Rock-Paper-Scissors Champion",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 9406,
    "title": "Vasya and Templates",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 9407,
    "title": "Minimum Diameter Tree",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 9408,
    "title": "Connect Three",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 9409,
    "title": "Div Times Mod",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 9410,
    "title": "Right-Left Cipher",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 9411,
    "title": "The Fair Nut and String",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 9412,
    "title": "Kvass and the Fair Nut",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9413,
    "title": "The Fair Nut and Elevator",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 9414,
    "title": "The Fair Nut and Amusing Xor",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 9415,
    "title": "The Fair Nut and Rectangles",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "geometry"
    ]
  },
  {
    "id": 9416,
    "title": "The Fair Nut's getting crazy",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 9417,
    "title": "Max Mex",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 9418,
    "title": "The Fair Nut and Strings",
    "difficulty": "hard",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 9419,
    "title": "The Fair Nut and the Best Path",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 9420,
    "title": "Petya and Graph",
    "difficulty": "hard",
    "category": [
      "graph",
      "max flow"
    ]
  },
  {
    "id": 9421,
    "title": "Speed Dial",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string",
      "tree"
    ]
  },
  {
    "id": 9422,
    "title": "Increasing Frequency",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 9423,
    "title": "Maximum Diameter Graph",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "implementation"
    ]
  },
  {
    "id": 9424,
    "title": "Multi-Subject Competition",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 9425,
    "title": "Vova and Trophies",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9426,
    "title": "Vasya and Book",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 9427,
    "title": "Palindromic Magic",
    "difficulty": "hard",
    "category": [
      "data structures",
      "hash table",
      "string"
    ]
  },
  {
    "id": 9428,
    "title": "Mergesort Strikes Back",
    "difficulty": "hard",
    "category": [
      "math",
      "probability"
    ]
  },
  {
    "id": 9429,
    "title": "Tricky Interactor",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation",
      "interactive"
    ]
  },
  {
    "id": 9430,
    "title": "Missing Numbers",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9431,
    "title": "Maximum Distance",
    "difficulty": "medium",
    "category": [
      "graph",
      "shortest path",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 9432,
    "title": "Colorful Bricks",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 9433,
    "title": "Farewell Party",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 9434,
    "title": "Definite Game",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 9435,
    "title": "Katya and Segments Sets",
    "difficulty": "hard",
    "category": [
      "data structures",
      "interactive",
      "sorting"
    ]
  },
  {
    "id": 9436,
    "title": "Sonya and Matrix Beauty",
    "difficulty": "hard",
    "category": [
      "string"
    ]
  },
  {
    "id": 9437,
    "title": "Olya and magical square",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9438,
    "title": "Masha and two friends",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9439,
    "title": "Margarite and the best present",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 9440,
    "title": "Petya and Origami",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 9441,
    "title": "Negative Time Summation",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 9442,
    "title": "Pictures with Kittens (hard version)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 9443,
    "title": "Pictures with Kittens (easy version)",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 9444,
    "title": "Thematic Contests",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 9445,
    "title": "Cutting Out",
    "difficulty": "medium",
    "category": [
      "binary search",
      "sorting"
    ]
  },
  {
    "id": 9446,
    "title": "Good Array",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 9447,
    "title": "Disturbed People",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9448,
    "title": "Frog Jumping",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 9449,
    "title": "Array Game",
    "difficulty": "hard",
    "category": [
      "data structures",
      "game theory"
    ]
  },
  {
    "id": 9450,
    "title": "Summer Practice Report",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 9451,
    "title": "Vasya and a Tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 9452,
    "title": "Edge Deletion",
    "difficulty": "medium",
    "category": [
      "graph",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 9453,
    "title": "Meme Problem",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 9454,
    "title": "Divisor Subtraction",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9455,
    "title": "Minimizing the String",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 9456,
    "title": "Taxi drivers and Lyft",
    "difficulty": "medium",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 9457,
    "title": "The King's Race",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 9458,
    "title": "Yet Another LCP Problem",
    "difficulty": "hard",
    "category": [
      "data structures",
      "string suffix structures"
    ]
  },
  {
    "id": 9459,
    "title": "Choosing Two Paths",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 9460,
    "title": "Segment Sum",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 9461,
    "title": "Berland Fair",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 9462,
    "title": "Vasya and Robot",
    "difficulty": "medium",
    "category": [
      "binary search",
      "two pointers"
    ]
  },
  {
    "id": 9463,
    "title": "Vasya and Books",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 9464,
    "title": "Diverse Substring",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 9465,
    "title": "Rain Protection",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry"
    ]
  },
  {
    "id": 9466,
    "title": "Algoland and Berland",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "divide and conquer",
      "geometry"
    ]
  },
  {
    "id": 9467,
    "title": "Odd Federalization",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 9468,
    "title": "Video Posts",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9469,
    "title": "Streets and Avenues in Berhattan",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 9470,
    "title": "Privatization of Roads in Berland",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph matching",
      "max flow"
    ]
  },
  {
    "id": 9471,
    "title": "BerOS File Suggestion",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 9472,
    "title": "Monsters and Potions",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9473,
    "title": "Debate",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9474,
    "title": "Getting Deals Done",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 9475,
    "title": "Garbage Disposal",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9476,
    "title": "Cloud Computing",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 9477,
    "title": "Berkomnadzor",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 9478,
    "title": "Find a Number",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "number theory",
      "shortest path"
    ]
  },
  {
    "id": 9479,
    "title": "Colored Rooks",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph"
    ]
  },
  {
    "id": 9480,
    "title": "LCM",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 9481,
    "title": "Birthday",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 9482,
    "title": "Random Forest Rank",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph matching",
      "math",
      "tree"
    ]
  },
  {
    "id": 9483,
    "title": "Computer Game",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "math",
      "probability"
    ]
  },
  {
    "id": 9484,
    "title": "Knights",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 9485,
    "title": "Multihedgehog",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 9486,
    "title": "Array Without Local Maximums ",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 9487,
    "title": "Yet another 2D Walking",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 9488,
    "title": "Binary Numbers AND Sum",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9489,
    "title": "Boxes Packing",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation"
    ]
  },
  {
    "id": 9490,
    "title": "Books Queries",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9491,
    "title": "Heaters",
    "difficulty": "medium",
    "category": [
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 9492,
    "title": "Vova and Train",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 9493,
    "title": "Fibonacci Suffix",
    "difficulty": "hard",
    "category": [
      "string"
    ]
  },
  {
    "id": 9494,
    "title": "Up and Down the Tree",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 9495,
    "title": "Side Transmutations",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "string"
    ]
  },
  {
    "id": 9496,
    "title": "Three Pieces",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 9497,
    "title": "Make It Equal",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9498,
    "title": "Vasya and Isolated Vertices",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph"
    ]
  },
  {
    "id": 9499,
    "title": "Vasya and Chocolate",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 9500,
    "title": "Equations of Mathematical Magic",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 9501,
    "title": "Make a triangle!",
    "difficulty": "easy",
    "category": [
      "brute force",
      "geometry",
      "math"
    ]
  },
  {
    "id": 9502,
    "title": "String Journey",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "string suffix structures"
    ]
  },
  {
    "id": 9503,
    "title": "Lasers and Mirrors",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 9504,
    "title": "Candies for Children",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 9505,
    "title": "Dwarves, Hats and Extrasensory Abilities",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "geometry",
      "interactive"
    ]
  },
  {
    "id": 9506,
    "title": "Labyrinth",
    "difficulty": "medium",
    "category": [
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 9507,
    "title": "Oh Those Palindromes",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "string"
    ]
  },
  {
    "id": 9508,
    "title": "Upgrading Cities",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 9509,
    "title": "Company",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 9510,
    "title": "Fun with Integers",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9511,
    "title": "Banh-mi",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9512,
    "title": "Math",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9513,
    "title": "A Prank",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9514,
    "title": "Lost Root",
    "difficulty": "hard",
    "category": [
      "interactive",
      "probability"
    ]
  },
  {
    "id": 9515,
    "title": "Politics",
    "difficulty": "hard",
    "category": [
      "graph",
      "max flow"
    ]
  },
  {
    "id": 9516,
    "title": "TV Shows",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 9517,
    "title": "Multiplicity",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9518,
    "title": "Views Matter",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 9519,
    "title": "Coins",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9520,
    "title": "Sophisticated Device",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 9521,
    "title": "Balls and Pockets",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 9522,
    "title": "Shrinking Tree",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 9523,
    "title": "Sergey and Subway",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 9524,
    "title": "Social Circles",
    "difficulty": "hard",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 9525,
    "title": "Maximum Subrectangle",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 9526,
    "title": "Maximum Sum of Digits",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9527,
    "title": "Phone Numbers",
    "difficulty": "easy",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 9528,
    "title": "Split the Tree",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 9529,
    "title": "Nature Reserve",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry",
      "ternary search"
    ]
  },
  {
    "id": 9530,
    "title": "Sequence Transformation",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 9531,
    "title": "Forgery",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9532,
    "title": "Cashier",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9533,
    "title": "Tanya and Colored Candies",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "special problem"
    ]
  },
  {
    "id": 9534,
    "title": "DDoS",
    "difficulty": "medium",
    "category": [
      "brute force",
      "special problem"
    ]
  },
  {
    "id": 9535,
    "title": "Bmail Computer Network",
    "difficulty": "easy",
    "category": [
      "graph traversal",
      "special problem",
      "tree"
    ]
  },
  {
    "id": 9536,
    "title": "Detect Robots",
    "difficulty": "hard",
    "category": [
      "data structures",
      "string"
    ]
  },
  {
    "id": 9537,
    "title": "Take Metro",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "graph"
    ]
  },
  {
    "id": 9538,
    "title": "Write The Contest",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 9539,
    "title": "Check Transcription",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "hash table",
      "string"
    ]
  },
  {
    "id": 9540,
    "title": "Decorate Apple Tree",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 9541,
    "title": "Pick Heroes",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "interactive",
      "sorting"
    ]
  },
  {
    "id": 9542,
    "title": "Divide Candies",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 9543,
    "title": "Determine Line",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9544,
    "title": "Jellyfish Nightmare",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 9545,
    "title": "Tree and XOR",
    "difficulty": "hard",
    "category": [
      "string",
      "tree"
    ]
  },
  {
    "id": 9546,
    "title": "Segments on the Line",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming"
    ]
  },
  {
    "id": 9547,
    "title": "Refactoring",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 9548,
    "title": "Lucky Days",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 9549,
    "title": "Alice and Hairdresser",
    "difficulty": "medium",
    "category": [
      "implementation",
      "union find"
    ]
  },
  {
    "id": 9550,
    "title": "Metro",
    "difficulty": "easy",
    "category": [
      "graph"
    ]
  },
  {
    "id": 9551,
    "title": "Epic Convolution",
    "difficulty": "hard",
    "category": [
      "chinese remainder theorem",
      "fast fourier transform",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9552,
    "title": "New Road Network",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 9553,
    "title": "Electric Scheme",
    "difficulty": "hard",
    "category": [
      "graph matching",
      "max flow"
    ]
  },
  {
    "id": 9554,
    "title": "Chips Puzzle",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9555,
    "title": "Changing Array",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9556,
    "title": "Candies Distribution",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 9557,
    "title": "Appending Mex",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9558,
    "title": "Elevator or Stairs?",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9559,
    "title": "Euler tour",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "tree"
    ]
  },
  {
    "id": 9560,
    "title": "Distinctification",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 9561,
    "title": "The Shortest Statement",
    "difficulty": "hard",
    "category": [
      "graph",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 9562,
    "title": "Vasya and Big Integers",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "hash table",
      "string"
    ]
  },
  {
    "id": 9563,
    "title": "Bicolorings",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 9564,
    "title": "Vasya and Multisets",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9565,
    "title": "Relatively Prime Pairs",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9566,
    "title": "Vasya And Password",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 9567,
    "title": "Cover Points",
    "difficulty": "easy",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 9568,
    "title": "Little C Loves 3 I",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 9569,
    "title": "Say Hello",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 9570,
    "title": "Splitting money",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9571,
    "title": "Space Formula",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9572,
    "title": "Moonwalk challenge",
    "difficulty": "hard",
    "category": [
      "data structures",
      "string",
      "tree"
    ]
  },
  {
    "id": 9573,
    "title": "Palindrome Pairs",
    "difficulty": "medium",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 9574,
    "title": "Self-exploration",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 9575,
    "title": "AI robots",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 9576,
    "title": "Shady Lady",
    "difficulty": "hard",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 9577,
    "title": "Ancient civilizations",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "geometry"
    ]
  },
  {
    "id": 9578,
    "title": "Interstellar battle",
    "difficulty": "hard",
    "category": [
      "math",
      "probability",
      "tree"
    ]
  },
  {
    "id": 9579,
    "title": "Hyperspace Highways",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 9580,
    "title": "Space Isaac",
    "difficulty": "hard",
    "category": [
      "hash table",
      "number theory"
    ]
  },
  {
    "id": 9581,
    "title": "Last chance",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph matching",
      "max flow",
      "tree"
    ]
  },
  {
    "id": 9582,
    "title": "DFS",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 9583,
    "title": "Grid Sort",
    "difficulty": "hard",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9584,
    "title": "Deduction Queries",
    "difficulty": "hard",
    "category": [
      "data structures",
      "union find"
    ]
  },
  {
    "id": 9585,
    "title": "Optimal Polygon Perimeter",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "geometry"
    ]
  },
  {
    "id": 9586,
    "title": "Intersecting Subtrees",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "interactive",
      "tree"
    ]
  },
  {
    "id": 9587,
    "title": "The Tower is Going Home",
    "difficulty": "medium",
    "category": [
      "binary search",
      "two pointers"
    ]
  },
  {
    "id": 9588,
    "title": "Speckled Band",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "hash table",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 9589,
    "title": "Make It One",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "math",
      "number theory",
      "shortest path"
    ]
  },
  {
    "id": 9590,
    "title": "Train Hard, Win Easy",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 9591,
    "title": "Mysterious Crime",
    "difficulty": "medium",
    "category": [
      "brute force",
      "combinatorics",
      "math",
      "meet in the middle",
      "two pointers"
    ]
  },
  {
    "id": 9592,
    "title": "Smallest Word",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9593,
    "title": "Lost Array",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9594,
    "title": "Elections",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 9595,
    "title": "Leaf Sets",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "greedy",
      "sorting",
      "tree",
      "union find"
    ]
  },
  {
    "id": 9596,
    "title": "Vasya and Magic Matrix",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 9597,
    "title": "Petya and Array",
    "difficulty": "medium",
    "category": [
      "data structures",
      "divide and conquer",
      "two pointers"
    ]
  },
  {
    "id": 9598,
    "title": "Array Product",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 9599,
    "title": "Vitamins",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 9600,
    "title": "Benches",
    "difficulty": "easy",
    "category": [
      "binary search",
      "implementation"
    ]
  },
  {
    "id": 9601,
    "title": "Ray in the tube",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 9602,
    "title": "Tree Reconstruction",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "graph",
      "greedy"
    ]
  },
  {
    "id": 9603,
    "title": "Glider",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "two pointers"
    ]
  },
  {
    "id": 9604,
    "title": "Coffee Break",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 9605,
    "title": "Buying a TV Set",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 9606,
    "title": "Heist",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 9607,
    "title": "Shashlik Cooking",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 9608,
    "title": "Palindrome Dance",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9609,
    "title": "Summer Oenothera Exhibition",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 9610,
    "title": "You Are Given a Tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 9611,
    "title": "Network Safety",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "math",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 9612,
    "title": "Subway Pursuit",
    "difficulty": "hard",
    "category": [
      "binary search",
      "interactive",
      "probability"
    ]
  },
  {
    "id": 9613,
    "title": "Timetable",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "math"
    ]
  },
  {
    "id": 9614,
    "title": "Wrap Around",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 9615,
    "title": "Maximum Matching",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 9616,
    "title": "Slime",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9617,
    "title": "Gambling",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 9618,
    "title": "Non-Coprime Partition",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 9619,
    "title": "Equality",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 9620,
    "title": "Security",
    "difficulty": "hard",
    "category": [
      "data structures",
      "string suffix structures"
    ]
  },
  {
    "id": 9621,
    "title": "A Game on Strings",
    "difficulty": "hard",
    "category": [
      "game theory"
    ]
  },
  {
    "id": 9622,
    "title": "Maximum Reduction",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "math"
    ]
  },
  {
    "id": 9623,
    "title": "Trips",
    "difficulty": "hard",
    "category": [
      "graph"
    ]
  },
  {
    "id": 9624,
    "title": "Valid BFS?",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 9625,
    "title": "Equalize",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "string"
    ]
  },
  {
    "id": 9626,
    "title": "Reach Median",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9627,
    "title": "Packets",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 9628,
    "title": "Sources and Sinks",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "graph traversal"
    ]
  },
  {
    "id": 9629,
    "title": "Relatively Prime Powers",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9630,
    "title": "Covered Points",
    "difficulty": "hard",
    "category": [
      "fast fourier transform",
      "geometry",
      "number theory"
    ]
  },
  {
    "id": 9631,
    "title": "Vasya and Arrays",
    "difficulty": "medium",
    "category": [
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 9632,
    "title": "Classy Numbers",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 9633,
    "title": "Diagonal Walking v.2",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 9634,
    "title": "Function Height",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 9635,
    "title": "Little C Loves 3 III",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 9636,
    "title": "Intervals of Intervals",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "two pointers"
    ]
  },
  {
    "id": 9637,
    "title": "Region Separation",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "number theory",
      "tree"
    ]
  },
  {
    "id": 9638,
    "title": "Little C Loves 3 II",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph matching",
      "max flow"
    ]
  },
  {
    "id": 9639,
    "title": "Enlarge GCD",
    "difficulty": "medium",
    "category": [
      "number theory"
    ]
  },
  {
    "id": 9640,
    "title": "Chip Game",
    "difficulty": "hard",
    "category": [
      "game theory"
    ]
  },
  {
    "id": 9641,
    "title": "Boolean Computer",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 9642,
    "title": "Hidden Bipartite Graph",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "graph",
      "graph traversal",
      "interactive"
    ]
  },
  {
    "id": 9643,
    "title": "Divisors",
    "difficulty": "hard",
    "category": [
      "interactive",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9644,
    "title": "Permutation Game",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "game theory"
    ]
  },
  {
    "id": 9645,
    "title": "Square Difference",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 9646,
    "title": "King Escape",
    "difficulty": "easy",
    "category": [
      "graph",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 9647,
    "title": "Chattering",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 9648,
    "title": "Vasya and Maximum Matching",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 9649,
    "title": "The Unbearable Lightness of Weights",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 9650,
    "title": "Barcelonian Distance",
    "difficulty": "hard",
    "category": [
      "geometry",
      "implementation"
    ]
  },
  {
    "id": 9651,
    "title": "Playing Piano",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming"
    ]
  },
  {
    "id": 9652,
    "title": "Personalized Cup",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 9653,
    "title": "Kitchen Utensils",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 9654,
    "title": "Familiar Operations",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph",
      "math"
    ]
  },
  {
    "id": 9655,
    "title": "Triple Flips",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 9656,
    "title": "Minimum path",
    "difficulty": "hard",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9657,
    "title": "Cram Time",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9658,
    "title": "Curiosity Has No Limits",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 9659,
    "title": "Golden Plate",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 9660,
    "title": "Linear Congruential Generator",
    "difficulty": "hard",
    "category": [
      "number theory"
    ]
  },
  {
    "id": 9661,
    "title": "Putting Boxes Together",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 9662,
    "title": "Vasya and Good Sequences",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 9663,
    "title": "Vasya and Triangle",
    "difficulty": "medium",
    "category": [
      "geometry",
      "number theory"
    ]
  },
  {
    "id": 9664,
    "title": "Vasya and Golden Ticket",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9665,
    "title": "Vasya and Cornfield",
    "difficulty": "easy",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 9666,
    "title": "In Search of an Easy Problem",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9667,
    "title": "Multicolored Markers",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9668,
    "title": "Tree with Small Distances",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "greedy"
    ]
  },
  {
    "id": 9669,
    "title": "Concatenated Multiples",
    "difficulty": "hard",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 9670,
    "title": "Maximal Intersection",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 9671,
    "title": "Creating the Contest",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 9672,
    "title": "Many Equal Substrings",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 9673,
    "title": "Make Square",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 9674,
    "title": "Guess the number",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "interactive"
    ]
  },
  {
    "id": 9675,
    "title": "Make Symmetrical",
    "difficulty": "hard",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 9676,
    "title": "Restore Array",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 9677,
    "title": "Order book",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 9678,
    "title": "Rectangles",
    "difficulty": "medium",
    "category": [
      "geometry",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 9679,
    "title": "Unnatural Conditions",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 9680,
    "title": "Find Square",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9681,
    "title": "X-mouse in the Campus",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9682,
    "title": "Session in BSU",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph",
      "graph matching",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 9683,
    "title": "Inverse Coloring",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 9684,
    "title": "Mouse Hunt",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 9685,
    "title": "Minimum Value Rectangle",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9686,
    "title": "Numbers on the Chessboard",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 9687,
    "title": "Palindromic Twist",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 9688,
    "title": "Company Acquisitions",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 9689,
    "title": "Disjoint Triangles",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 9690,
    "title": "Colored Cubes",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation",
      "matrix"
    ]
  },
  {
    "id": 9691,
    "title": "Recovering BST",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "math",
      "number theory",
      "tree"
    ]
  },
  {
    "id": 9692,
    "title": "Plasticine zebra",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 9693,
    "title": "Weakened Common Divisor",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 9694,
    "title": "Doggo Recoloring",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 9695,
    "title": "Pisces",
    "difficulty": "hard",
    "category": [
      "data structures",
      "max flow",
      "tree"
    ]
  },
  {
    "id": 9696,
    "title": "Mobile Phone Network",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 9697,
    "title": "Down or Right",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "interactive",
      "matrix"
    ]
  },
  {
    "id": 9698,
    "title": "Array Restoration",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures"
    ]
  },
  {
    "id": 9699,
    "title": "Bracket Subsequence",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9700,
    "title": "Pair of Toys",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 9701,
    "title": "Single Wildcard Pattern Matching",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 9702,
    "title": "Badge",
    "difficulty": "easy",
    "category": [
      "brute force",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 9703,
    "title": "New Building for SIS",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 9704,
    "title": "Raining season",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "tree"
    ]
  },
  {
    "id": 9705,
    "title": "Large Triangle",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry",
      "sorting"
    ]
  },
  {
    "id": 9706,
    "title": "Sergey's problem",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph"
    ]
  },
  {
    "id": 9707,
    "title": "The hat",
    "difficulty": "hard",
    "category": [
      "binary search",
      "interactive"
    ]
  },
  {
    "id": 9708,
    "title": "Elections",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 9709,
    "title": "The Films",
    "difficulty": "hard",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 9710,
    "title": "The Tree",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 9711,
    "title": "The Neutral Zone",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 9712,
    "title": "The Supersonic Rocket",
    "difficulty": "hard",
    "category": [
      "geometry",
      "hash table",
      "string"
    ]
  },
  {
    "id": 9713,
    "title": "The Wu",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "data structures"
    ]
  },
  {
    "id": 9714,
    "title": "The Phone Number",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 9715,
    "title": "The Bits",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 9716,
    "title": "The Rank",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9717,
    "title": "Appropriate Team",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9718,
    "title": "Road Projects",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 9719,
    "title": "Rest In The Shades",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry"
    ]
  },
  {
    "id": 9720,
    "title": "Vasya And The Matrix",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math",
      "max flow"
    ]
  },
  {
    "id": 9721,
    "title": "Vasya And The Mushrooms",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 9722,
    "title": "Segment Occurrences",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 9723,
    "title": "Death Note",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9724,
    "title": "Bracket Substring",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 9725,
    "title": "Stars Drawing (Hard Edition)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 9726,
    "title": "Stars Drawing (Easy Edition)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 9727,
    "title": "Walking Between Houses",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 9728,
    "title": "Songs Compression",
    "difficulty": "easy",
    "category": [
      "sorting"
    ]
  },
  {
    "id": 9729,
    "title": "Obtaining the String",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9730,
    "title": "Points in Segments",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9731,
    "title": "And",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9732,
    "title": "Piles With Stones",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 9733,
    "title": "Passports",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 9734,
    "title": "Cycle sort",
    "difficulty": "hard",
    "category": [
      "math",
      "union find"
    ]
  },
  {
    "id": 9735,
    "title": "AB-Strings",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "string"
    ]
  },
  {
    "id": 9736,
    "title": "Hills",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 9737,
    "title": "Chemical table",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "matrix",
      "union find"
    ]
  },
  {
    "id": 9738,
    "title": "Photo of The Sky",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 9739,
    "title": "Planning The Expedition",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 9740,
    "title": "Stages",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 9741,
    "title": "Tree",
    "difficulty": "hard",
    "category": [
      "fast fourier transform",
      "graph",
      "tree"
    ]
  },
  {
    "id": 9742,
    "title": "Store",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 9743,
    "title": "Mars rover",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 9744,
    "title": "Border",
    "difficulty": "medium",
    "category": [
      "number theory"
    ]
  },
  {
    "id": 9745,
    "title": "Rocket",
    "difficulty": "medium",
    "category": [
      "binary search",
      "interactive"
    ]
  },
  {
    "id": 9746,
    "title": "Fly",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 9747,
    "title": "Allowed Letters",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "graph",
      "graph matching",
      "greedy",
      "max flow"
    ]
  },
  {
    "id": 9748,
    "title": "Dominant Indices",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree",
      "union find"
    ]
  },
  {
    "id": 9749,
    "title": "Intercity Travelling",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "probability"
    ]
  },
  {
    "id": 9750,
    "title": "Relatively Prime Graph",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph",
      "greedy",
      "math"
    ]
  },
  {
    "id": 9751,
    "title": "Annoying Present",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 9752,
    "title": "Minimum Ternary String",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9753,
    "title": "Game Shopping",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9754,
    "title": "Turn the Rectangles",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 9755,
    "title": "Romaji",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 9756,
    "title": "Mini Metro",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 9757,
    "title": "Ants",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "data structures",
      "tree"
    ]
  },
  {
    "id": 9758,
    "title": "Guess two numbers",
    "difficulty": "hard",
    "category": [
      "binary search",
      "interactive"
    ]
  },
  {
    "id": 9759,
    "title": "Pave the Parallelepiped",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9760,
    "title": "Reorder the Array",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "data structures",
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 9761,
    "title": "Xor-Paths",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "meet in the middle"
    ]
  },
  {
    "id": 9762,
    "title": "Military Problem",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 9763,
    "title": "Two Strings Swaps",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9764,
    "title": "Three Parts of the Array",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "two pointers"
    ]
  },
  {
    "id": 9765,
    "title": "Polycarp's Practice",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 9766,
    "title": "Adjacent Replacements",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9767,
    "title": "Berland and the Shortest Paths",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 9768,
    "title": "Median on Segments (General Case Edition)",
    "difficulty": "hard",
    "category": [
      "sorting"
    ]
  },
  {
    "id": 9769,
    "title": "Median on Segments (Permutations Edition)",
    "difficulty": "medium",
    "category": [
      "sorting"
    ]
  },
  {
    "id": 9770,
    "title": "Polycarp and Div 3",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 9771,
    "title": "Summarize to the Power of Two",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9772,
    "title": "Delete from the Left",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 9773,
    "title": "Tanya and Stairways",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9774,
    "title": "Sonya and Bitwise OR",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "divide and conquer"
    ]
  },
  {
    "id": 9775,
    "title": "Sonya and Ice Cream",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 9776,
    "title": "Sonya and Matrix",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 9777,
    "title": "Sonya and Robots",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 9778,
    "title": "Sonya and Exhibition",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9779,
    "title": "Sonya and Hotels",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9780,
    "title": "Abbreviation",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "hash table",
      "string"
    ]
  },
  {
    "id": 9781,
    "title": "Tree Constructing",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph"
    ]
  },
  {
    "id": 9782,
    "title": "Coins and Queries",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9783,
    "title": "Intense Heat",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9784,
    "title": "Binary String Constructing",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 9785,
    "title": "Polycarp's Pockets",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9786,
    "title": "Another array reconstruction algorithm",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9787,
    "title": "Bernstein-Vazirani algorithm",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9788,
    "title": "Oracle for majority function",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9789,
    "title": "Oracle for f(x) = b * x + (1 - b) * (1 - x) mod 2",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9790,
    "title": "Oracle for f(x) = b * x mod 2",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9791,
    "title": "Distinguish zero state and plus state without errors",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9792,
    "title": "Distinguish zero state and plus state with minimum error",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9793,
    "title": "Distinguish four 2-qubit states - 2",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9794,
    "title": "Distinguish four 2-qubit states",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9795,
    "title": "Distinguish GHZ state and W state",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9796,
    "title": "Distinguish zero state and W state",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9797,
    "title": "Generate W state",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9798,
    "title": "Generate superposition of two basis states",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9799,
    "title": "Generate superposition of zero state and a basis state",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9800,
    "title": "Generate superposition of all basis states",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9801,
    "title": "Deutsch-Jozsa algorithm",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9802,
    "title": "Oracle for f(x) = parity of the number of 1s in x",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9803,
    "title": "Oracle for f(x) = k-th element of x",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9804,
    "title": "Distinguish multi-qubit basis states",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9805,
    "title": "Distinguish Bell states",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9806,
    "title": "Distinguish plus state and minus state",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9807,
    "title": "Generate GHZ state",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9808,
    "title": "Generate Bell state",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9809,
    "title": "Generate plus state or minus state",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 9810,
    "title": "Two-Paths",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 9811,
    "title": "One Occurrence",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer"
    ]
  },
  {
    "id": 9812,
    "title": "We Need More Bosses",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 9813,
    "title": "Yet Another Problem On a Subsequence",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 9814,
    "title": "Covered Points Count",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 9815,
    "title": "Light It Up",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9816,
    "title": "Codehorses T-shirts",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9817,
    "title": "Cards and Joy",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 9818,
    "title": "Reachability from the Capital",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 9819,
    "title": "Equalize the Remainders",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9820,
    "title": "Alphabetic Removals",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9821,
    "title": "Reversing Encryption",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9822,
    "title": "Mishka and Contest",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 9823,
    "title": "Cutting",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 9824,
    "title": "Balloons",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 9825,
    "title": "Good Subsegments",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 9826,
    "title": "Cycles in product",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "divide and conquer",
      "tree"
    ]
  },
  {
    "id": 9827,
    "title": "Sky Full of Stars",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 9828,
    "title": "Roman Digits",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 9829,
    "title": "Convert to Ones",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9830,
    "title": "World Cup",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 9831,
    "title": "Hit the Lottery",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 9832,
    "title": "Cowmpany Cowmpensation",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "tree"
    ]
  },
  {
    "id": 9833,
    "title": "Number Clicker",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "graph",
      "meet in the middle",
      "number theory"
    ]
  },
  {
    "id": 9834,
    "title": "Game",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 9835,
    "title": "Leaving the Bar",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "geometry",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 9836,
    "title": "Suit and Tie",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9837,
    "title": "Tesla",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 9838,
    "title": "Knights of a Polygonal Table",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 9839,
    "title": "Fingerprints",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9840,
    "title": "The Moral Dilemma",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 9841,
    "title": "Nikita and Order Statistics",
    "difficulty": "hard",
    "category": [
      "chinese remainder theorem",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 9842,
    "title": "Compute Power",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 9843,
    "title": "Careful Maneuvering",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "geometry"
    ]
  },
  {
    "id": 9844,
    "title": "Open Communication",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force"
    ]
  },
  {
    "id": 9845,
    "title": "Two Squares",
    "difficulty": "medium",
    "category": [
      "geometry",
      "implementation"
    ]
  },
  {
    "id": 9846,
    "title": "Nastya and King-Shamans",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 9847,
    "title": "Nastya and a Game",
    "difficulty": "hard",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9848,
    "title": "Nastya and a Wardrobe",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 9849,
    "title": "Nastya Studies Informatics",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 9850,
    "title": "Nastya and an Array",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 9851,
    "title": "Concise and clear",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9852,
    "title": "Bus Number",
    "difficulty": "medium",
    "category": [
      "brute force",
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 9853,
    "title": "Bishwock",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 9854,
    "title": "Candies",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation"
    ]
  },
  {
    "id": 9855,
    "title": "Getting an A",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 9856,
    "title": "If at first you don't succeed...",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9857,
    "title": "GCD Counting",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "dynamic programming",
      "number theory",
      "tree",
      "union find"
    ]
  },
  {
    "id": 9858,
    "title": "Flow Control",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 9859,
    "title": "Post Lamps",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 9860,
    "title": "Graph And Its Complement",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "implementation"
    ]
  },
  {
    "id": 9861,
    "title": "Bracket Sequences Concatenation Problem",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9862,
    "title": "Micro-World",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 9863,
    "title": "Commentary Boxes",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 9864,
    "title": "A Trance of Nightfall",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "geometry",
      "matrix",
      "probability"
    ]
  },
  {
    "id": 9865,
    "title": "A Shade of Moonlight",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry",
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 9866,
    "title": "A Mist of Florescence",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph"
    ]
  },
  {
    "id": 9867,
    "title": "A Tide of Riverscape",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "string"
    ]
  },
  {
    "id": 9868,
    "title": "A Blend of Springtime",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 9869,
    "title": "Rain and Umbrellas",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 9870,
    "title": "Divisibility by 25",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 9871,
    "title": "Points and Powers of Two",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 9872,
    "title": "Equal Sums",
    "difficulty": "medium",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 9873,
    "title": "Substrings Sort",
    "difficulty": "easy",
    "category": [
      "sorting",
      "string"
    ]
  },
  {
    "id": 9874,
    "title": "Diverse Team",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 9875,
    "title": "Three displays",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 9876,
    "title": "High School: Become Human",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 9877,
    "title": "Infinity Gauntlet",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9878,
    "title": "Oppa Funcan Style Remastered",
    "difficulty": "hard",
    "category": [
      "graph",
      "math",
      "number theory",
      "shortest path"
    ]
  },
  {
    "id": 9879,
    "title": "Prince's Problem",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "math",
      "number theory",
      "tree"
    ]
  },
  {
    "id": 9880,
    "title": "Perfect Encoding",
    "difficulty": "hard",
    "category": [
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 9881,
    "title": "AND Graph",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 9882,
    "title": "Petr and Permutations",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 9883,
    "title": "Fair",
    "difficulty": "medium",
    "category": [
      "graph",
      "greedy",
      "number theory",
      "shortest path"
    ]
  },
  {
    "id": 9884,
    "title": "Team Players",
    "difficulty": "hard",
    "category": [
      "combinatorics"
    ]
  },
  {
    "id": 9885,
    "title": "Isomorphic Strings",
    "difficulty": "hard",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 9886,
    "title": "Pencils and Boxes",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 9887,
    "title": "Sand Fortress",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 9888,
    "title": "Liebig's Barrels",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9889,
    "title": "Switches and Lamps",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9890,
    "title": "Chess Placing",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9891,
    "title": "Minesweeper",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9892,
    "title": "Game",
    "difficulty": "easy",
    "category": [
      "sorting"
    ]
  },
  {
    "id": 9893,
    "title": "NN country",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "tree"
    ]
  },
  {
    "id": 9894,
    "title": "Arkady and Rectangles",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 9895,
    "title": "Elevator",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 9896,
    "title": "XOR-pyramid",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 9897,
    "title": "Finite or not?",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 9898,
    "title": "The Meeting Place Cannot Be Changed",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 9899,
    "title": "Billiard",
    "difficulty": "hard",
    "category": [
      "geometry",
      "number theory"
    ]
  },
  {
    "id": 9900,
    "title": "Shark",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "tree",
      "union find"
    ]
  },
  {
    "id": 9901,
    "title": "Cut 'em all!",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 9902,
    "title": "Bus of Characters",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9903,
    "title": "Row",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms"
    ]
  },
  {
    "id": 9904,
    "title": "K Paths",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "dynamic programming",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 9905,
    "title": "Magic multisets",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 9906,
    "title": "Round Marriage",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph matching",
      "greedy"
    ]
  },
  {
    "id": 9907,
    "title": "Addition on Segments",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "divide and conquer",
      "dynamic programming"
    ]
  },
  {
    "id": 9908,
    "title": "Bookshelves",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 9909,
    "title": "Useful Decomposition",
    "difficulty": "medium",
    "category": [
      "implementation",
      "tree"
    ]
  },
  {
    "id": 9910,
    "title": "Businessmen Problems",
    "difficulty": "easy",
    "category": [
      "sorting"
    ]
  },
  {
    "id": 9911,
    "title": "Antipalindrome",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 9912,
    "title": "Cactus to Tree",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "tree"
    ]
  },
  {
    "id": 9913,
    "title": "The Number Games",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 9914,
    "title": "Perfect Groups",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9915,
    "title": "Posterized",
    "difficulty": "medium",
    "category": [
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 9916,
    "title": "Marlin",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 9917,
    "title": "Links and Pearls",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 9918,
    "title": "Kuro and Topological Parity",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 9919,
    "title": "Kuro and GCD and XOR and SUM",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy",
      "math",
      "number theory",
      "string",
      "tree",
      "union find"
    ]
  },
  {
    "id": 9920,
    "title": "Kuro and Walking Route",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 9921,
    "title": "Treasure Hunt",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 9922,
    "title": "Pizza, Pizza, Pizza!!!",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 9923,
    "title": "Petya's Exams",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 9924,
    "title": "Mentors",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 9925,
    "title": "Bus Video System",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 9926,
    "title": "Almost Arithmetic Progression",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9927,
    "title": "Letters",
    "difficulty": "easy",
    "category": [
      "binary search",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 9928,
    "title": "File Name",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 9929,
    "title": "Remove Duplicates",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9930,
    "title": "Consecutive Subsequence",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 9931,
    "title": "Cyclic Components",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 9932,
    "title": "Divide by three, multiply by two",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "math",
      "sorting"
    ]
  },
  {
    "id": 9933,
    "title": "Less or Equal",
    "difficulty": "medium",
    "category": [
      "sorting"
    ]
  },
  {
    "id": 9934,
    "title": "Two-gram",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 9935,
    "title": "Wrong Subtraction",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9936,
    "title": "Minimal k-covering",
    "difficulty": "hard",
    "category": [
      "graph",
      "max flow"
    ]
  },
  {
    "id": 9937,
    "title": "Well played!",
    "difficulty": "hard",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 9938,
    "title": "Degree Set",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "implementation"
    ]
  },
  {
    "id": 9939,
    "title": "Nested Segments",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 9940,
    "title": "Lara Croft and the New Game",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 9941,
    "title": "Minimum Binary Number",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9942,
    "title": "Hag's Khashba",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 9943,
    "title": "Ghosts",
    "difficulty": "hard",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 9944,
    "title": "Valhalla Siege",
    "difficulty": "medium",
    "category": [
      "binary search"
    ]
  },
  {
    "id": 9945,
    "title": "Mancala",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 9946,
    "title": "Aramic script",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 9947,
    "title": "Watering System",
    "difficulty": "easy",
    "category": [
      "math",
      "sorting"
    ]
  },
  {
    "id": 9948,
    "title": "Mind the Gap",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9949,
    "title": "Short Code",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "string",
      "tree"
    ]
  },
  {
    "id": 9950,
    "title": "Single-use Stones",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "max flow",
      "two pointers"
    ]
  },
  {
    "id": 9951,
    "title": "Greedy Arkady",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 9952,
    "title": "Battleship",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9953,
    "title": "Paper Airplanes",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 9954,
    "title": "Messages",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 9955,
    "title": "Splits",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 9956,
    "title": "Circles of Waiting",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 9957,
    "title": "Frequency of String",
    "difficulty": "hard",
    "category": [
      "hash table",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 9958,
    "title": "Cutting Rectangle",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9959,
    "title": "Destruction of a Tree",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 9960,
    "title": "Alternating Sum",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 9961,
    "title": "Visible Black Areas",
    "difficulty": "hard",
    "category": [
      "data structures",
      "geometry",
      "tree",
      "union find"
    ]
  },
  {
    "id": 9962,
    "title": "Simple Cycles Edges",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 9963,
    "title": "Byteland, Berland and Disputed Cities",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 9964,
    "title": "Merge Equals",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 9965,
    "title": "Make a Square",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9966,
    "title": "Students in Railway Carriage",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9967,
    "title": "Equator",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9968,
    "title": "Partitions",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9969,
    "title": "k-substrings",
    "difficulty": "hard",
    "category": [
      "binary search",
      "hash table",
      "string suffix structures"
    ]
  },
  {
    "id": 9970,
    "title": "Tufurama",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 9971,
    "title": "Pair Of Lines",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 9972,
    "title": "Chessboard",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 9973,
    "title": "Lecture Sleep",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 9974,
    "title": "Tetris",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9975,
    "title": "Santa's Gift",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 9976,
    "title": "Bandit Blues",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 9977,
    "title": "Pathwalks",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph"
    ]
  },
  {
    "id": 9978,
    "title": "Alternating Tree",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "divide and conquer",
      "dynamic programming",
      "graph traversal",
      "probability",
      "tree"
    ]
  },
  {
    "id": 9979,
    "title": "Full Binary Tree Queries",
    "difficulty": "hard",
    "category": [
      "brute force",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 9980,
    "title": "Subsequence Counting",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 9981,
    "title": "Minimize the error",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 9982,
    "title": "Check the string",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9983,
    "title": "Mahmoud and Ehab and yet another xor task",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "math",
      "matrix"
    ]
  },
  {
    "id": 9984,
    "title": "Mahmoud and Ehab and the xor-MST",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "graph",
      "implementation",
      "math"
    ]
  },
  {
    "id": 9985,
    "title": "Mahmoud and Ehab and another array construction task",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 9986,
    "title": "Mahmoud and Ehab and the wrong algorithm",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "tree"
    ]
  },
  {
    "id": 9987,
    "title": "Mahmoud and Ehab and the message",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 9988,
    "title": "Mahmoud and Ehab and the even-odd game",
    "difficulty": "easy",
    "category": [
      "game theory",
      "math"
    ]
  },
  {
    "id": 9989,
    "title": "Lightsabers (hard)",
    "difficulty": "hard",
    "category": [
      "fast fourier transform"
    ]
  },
  {
    "id": 9990,
    "title": "Lightsabers (medium)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "two pointers"
    ]
  },
  {
    "id": 9991,
    "title": "Lightsabers (easy)",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 9992,
    "title": "Guard Duty (hard)",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 9993,
    "title": "Guard Duty (medium)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 9994,
    "title": "Guard Duty (easy)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "geometry",
      "greedy",
      "math"
    ]
  },
  {
    "id": 9995,
    "title": "Hyperspace Jump (hard)",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 9996,
    "title": "Hyperspace Jump (easy)",
    "difficulty": "medium",
    "category": [
      "math",
      "parsing"
    ]
  },
  {
    "id": 9997,
    "title": "Encryption (hard)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 9998,
    "title": "Encryption (medium)",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 9999,
    "title": "Encryption (easy)",
    "difficulty": "medium",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 10000,
    "title": "Maximum Control (medium)",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 10001,
    "title": "Maximum Control (easy)",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10002,
    "title": "Death Stars (hard)",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10003,
    "title": "Death Stars (medium)",
    "difficulty": "hard",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 10004,
    "title": "Death Stars (easy)",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10005,
    "title": "Tritonic Iridescence",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10006,
    "title": "Heaps",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 10007,
    "title": "Icicles",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10008,
    "title": "Scissors",
    "difficulty": "hard",
    "category": [
      "brute force",
      "string"
    ]
  },
  {
    "id": 10009,
    "title": "Sad powers",
    "difficulty": "hard",
    "category": [
      "binary search",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10010,
    "title": "Not simply beatiful strings",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10011,
    "title": "Feed the cat",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 10012,
    "title": "Yet Another String Matching Problem",
    "difficulty": "hard",
    "category": [
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 10013,
    "title": "Path Counting",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 10014,
    "title": "Castle Defense",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 10015,
    "title": "Runner's Problem",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "matrix",
      "sorting"
    ]
  },
  {
    "id": 10016,
    "title": "Water Taps",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10017,
    "title": "Fight Against Traffic",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 10018,
    "title": "Matrix Walk",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10019,
    "title": "String Typing",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 10020,
    "title": "Diagonal Walking",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10021,
    "title": "Puzzling Language",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "special problem"
    ]
  },
  {
    "id": 10022,
    "title": "2 + 2 != 4",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 10023,
    "title": "Cheese Board",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10024,
    "title": "I'm Feeling Lucky!",
    "difficulty": "medium",
    "category": [
      "probability",
      "special problem"
    ]
  },
  {
    "id": 10025,
    "title": "Ravioli Sort",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10026,
    "title": "A Map of the Cat",
    "difficulty": "hard",
    "category": [
      "brute force",
      "interactive",
      "special problem"
    ]
  },
  {
    "id": 10027,
    "title": "Quirky Quantifiers",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 10028,
    "title": "Intercepted Message",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10029,
    "title": "Left-handers, Right-handers and Ambidexters",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 10030,
    "title": "Astronomy",
    "difficulty": "hard",
    "category": [
      "geometry",
      "probability"
    ]
  },
  {
    "id": 10031,
    "title": "Binary Cards",
    "difficulty": "hard",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 10032,
    "title": "Curfew",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10033,
    "title": "Data Center Maintenance",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 10034,
    "title": "A Leapfrog in the Array",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 10035,
    "title": "Zebras",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 10036,
    "title": "Protect Sheep",
    "difficulty": "easy",
    "category": [
      "brute force",
      "graph",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 10037,
    "title": "Almost Increasing Array",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 10038,
    "title": "Fibonacci String Subsequences",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 10039,
    "title": "Largest Beautiful Number",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10040,
    "title": "Timetable",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 10041,
    "title": "String Transformation",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 10042,
    "title": "Weird Subtraction Process",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 10043,
    "title": "Partition",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 10044,
    "title": "Machine Learning",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures"
    ]
  },
  {
    "id": 10045,
    "title": "Cashback",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 10046,
    "title": "Alena And The Heater",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation"
    ]
  },
  {
    "id": 10047,
    "title": "Phone Numbers",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation",
      "string"
    ]
  },
  {
    "id": 10048,
    "title": "Our Tanya is Crying Out Loud",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 10049,
    "title": "Points on the line",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10050,
    "title": "Cutlet",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 10051,
    "title": "Maximize!",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "ternary search",
      "two pointers"
    ]
  },
  {
    "id": 10052,
    "title": "Love Rescue",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "string",
      "union find"
    ]
  },
  {
    "id": 10053,
    "title": "Convenient For Everybody",
    "difficulty": "medium",
    "category": [
      "binary search",
      "two pointers"
    ]
  },
  {
    "id": 10054,
    "title": "Hamster Farm",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10055,
    "title": "Love Triangle",
    "difficulty": "easy",
    "category": [
      "graph"
    ]
  },
  {
    "id": 10056,
    "title": "Shortest Path Queries",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "graph",
      "union find"
    ]
  },
  {
    "id": 10057,
    "title": "Erasing Substrings",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 10058,
    "title": "Max History",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 10059,
    "title": "Buy a Ticket",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 10060,
    "title": "Constructing Tests",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "constructive algorithms"
    ]
  },
  {
    "id": 10061,
    "title": "Run For Your Prize",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 10062,
    "title": "Word Correction",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10063,
    "title": "Vile Grasshoppers",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10064,
    "title": "Olympiad",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 10065,
    "title": "Iqea",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "graph traversal",
      "shortest path",
      "tree",
      "union find"
    ]
  },
  {
    "id": 10066,
    "title": "World of Tank",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 10067,
    "title": "Lock Puzzle",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation",
      "string"
    ]
  },
  {
    "id": 10068,
    "title": "Sleepy Game",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 10069,
    "title": "Save Energy!",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10070,
    "title": "Fafa and Array",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 10071,
    "title": "Fafa and Ancient Mathematics",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 10072,
    "title": "Fafa and Ancient Alphabet",
    "difficulty": "hard",
    "category": [
      "math",
      "probability"
    ]
  },
  {
    "id": 10073,
    "title": "Fifa and Fafa",
    "difficulty": "medium",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 10074,
    "title": "Fafa and the Gates",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10075,
    "title": "Fafa and his Company",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10076,
    "title": "A Prosperous Lot",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 10077,
    "title": "A Compatible Pair",
    "difficulty": "medium",
    "category": [
      "brute force",
      "game theory"
    ]
  },
  {
    "id": 10078,
    "title": "A Preponderant Reunion",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming"
    ]
  },
  {
    "id": 10079,
    "title": "A Creative Cutout",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 10080,
    "title": "A Colourful Prospect",
    "difficulty": "hard",
    "category": [
      "geometry",
      "graph"
    ]
  },
  {
    "id": 10081,
    "title": "A Determined Cleanup",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 10082,
    "title": "A Twisty Movement",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 10083,
    "title": "Palindrome Partition",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 10084,
    "title": "Escape Through Leaf",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "geometry"
    ]
  },
  {
    "id": 10085,
    "title": "Team Work",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 10086,
    "title": "Tree",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 10087,
    "title": "Permutation Cycle",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms"
    ]
  },
  {
    "id": 10088,
    "title": "Recursive Queries",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "graph traversal"
    ]
  },
  {
    "id": 10089,
    "title": "Palindromic Supersequence",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 10090,
    "title": "Laboratory Work",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 10091,
    "title": "World Cup",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 10092,
    "title": "Friends Meeting",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10093,
    "title": "Coins Exhibition",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 10094,
    "title": "Game with Tokens",
    "difficulty": "hard",
    "category": [
      "data structures",
      "game theory",
      "implementation"
    ]
  },
  {
    "id": 10095,
    "title": "Teodor is not a liar!",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 10096,
    "title": "Game with String",
    "difficulty": "medium",
    "category": [
      "implementation",
      "probability",
      "string"
    ]
  },
  {
    "id": 10097,
    "title": "Peculiar apple-tree",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 10098,
    "title": "Пограничные врата",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10099,
    "title": "Красивая команда",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math",
      "special problem"
    ]
  },
  {
    "id": 10100,
    "title": "Места в самолёте",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 10101,
    "title": "Прокат велосипедов",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 10102,
    "title": "Autocompletion",
    "difficulty": "hard",
    "category": [
      "special problem",
      "string",
      "tree"
    ]
  },
  {
    "id": 10103,
    "title": "Dependency management",
    "difficulty": "hard",
    "category": [
      "graph",
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 10104,
    "title": "Chat",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "special problem"
    ]
  },
  {
    "id": 10105,
    "title": "Login Verification",
    "difficulty": "medium",
    "category": [
      "special problem",
      "string"
    ]
  },
  {
    "id": 10106,
    "title": "BuberPool Taxi Optimization",
    "difficulty": "hard",
    "category": [
      "interactive",
      "special problem"
    ]
  },
  {
    "id": 10107,
    "title": "Segments",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 10108,
    "title": "A Vital Problem",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 10109,
    "title": "Endless Roses Most Beautiful",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10110,
    "title": "Large Bouquets",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 10111,
    "title": "Mobile Communications",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10112,
    "title": "Merge Equal Elements",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures"
    ]
  },
  {
    "id": 10113,
    "title": "Choose Place",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 10114,
    "title": "Is This a Zebra?",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10115,
    "title": "Add Points",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 10116,
    "title": "2-3-numbers",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 10117,
    "title": "Parametric Circulation",
    "difficulty": "hard",
    "category": [
      "binary search",
      "max flow"
    ]
  },
  {
    "id": 10118,
    "title": "May Holidays",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 10119,
    "title": "Aztec Catacombs",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 10120,
    "title": "Big Secret",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 10121,
    "title": "Resource Distribution",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 10122,
    "title": "Stairs and Elevators",
    "difficulty": "medium",
    "category": [
      "binary search"
    ]
  },
  {
    "id": 10123,
    "title": "Minimal Subset Difference",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 10124,
    "title": "Wardrobe",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 10125,
    "title": "Contact ATC",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10126,
    "title": "Riverside Curio",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 10127,
    "title": "Three-level Laser",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 10128,
    "title": "Mystical Mosaic",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10129,
    "title": "Public Service",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "tree"
    ]
  },
  {
    "id": 10130,
    "title": "Perpetual Subtraction",
    "difficulty": "hard",
    "category": [
      "fast fourier transform",
      "math",
      "matrix"
    ]
  },
  {
    "id": 10131,
    "title": "Picking Strings",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation",
      "string"
    ]
  },
  {
    "id": 10132,
    "title": "Perfect Security",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "string",
      "tree"
    ]
  },
  {
    "id": 10133,
    "title": "Producing Snow",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 10134,
    "title": "Primal Sport",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 10135,
    "title": "Divisibility",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 10136,
    "title": "Birds",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 10137,
    "title": "Robot Vacuum Cleaner",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10138,
    "title": "Cave Painting",
    "difficulty": "medium",
    "category": [
      "brute force",
      "number theory"
    ]
  },
  {
    "id": 10139,
    "title": "Magic Forest",
    "difficulty": "medium",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 10140,
    "title": "Cloning Toys",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10141,
    "title": "Labyrinth-14",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10142,
    "title": "Labyrinth-13",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10143,
    "title": "Labyrinth-12",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10144,
    "title": "Labyrinth-11",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10145,
    "title": "Labyrinth-10",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10146,
    "title": "Labyrinth-9",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10147,
    "title": "Labyrinth-8",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10148,
    "title": "Labyrinth-7",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10149,
    "title": "Labyrinth-6",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10150,
    "title": "Labyrinth-5",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10151,
    "title": "Labyrinth-4",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10152,
    "title": "Labyrinth-3",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10153,
    "title": "Labyrinth-2",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10154,
    "title": "Labyrinth-1",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10155,
    "title": "List Of Integers",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force",
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10156,
    "title": "SUM and REPLACE",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "number theory",
      "union find"
    ]
  },
  {
    "id": 10157,
    "title": "Connected Components?",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 10158,
    "title": "Tanks",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10159,
    "title": "Swap Adjacent Elements",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "greedy",
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 10160,
    "title": "Tea Queue",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10161,
    "title": "Water The Garden",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10162,
    "title": "A Game With Numbers",
    "difficulty": "hard",
    "category": [
      "game theory",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 10163,
    "title": "Congruence Equation",
    "difficulty": "hard",
    "category": [
      "chinese remainder theorem",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10164,
    "title": "Substring",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 10165,
    "title": "Seat Arrangements",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10166,
    "title": "Perfect Number",
    "difficulty": "easy",
    "category": [
      "binary search",
      "brute force",
      "dynamic programming",
      "implementation",
      "number theory"
    ]
  },
  {
    "id": 10167,
    "title": "Supermarket",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10168,
    "title": "Radio Station",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 10169,
    "title": "Eleven",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10170,
    "title": "Upside Down",
    "difficulty": "hard",
    "category": [
      "data structures",
      "string",
      "string suffix structures",
      "tree"
    ]
  },
  {
    "id": 10171,
    "title": "Stranger Trees",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "matrix",
      "tree"
    ]
  },
  {
    "id": 10172,
    "title": "Pollywog",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 10173,
    "title": "MADMAX",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "game theory",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 10174,
    "title": "The Monster",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10175,
    "title": "Jamie and Tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 10176,
    "title": "Jamie and To-do List",
    "difficulty": "hard",
    "category": [
      "data structures",
      "interactive",
      "tree"
    ]
  },
  {
    "id": 10177,
    "title": "Jamie and Interesting Graph",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 10178,
    "title": "Jamie and Binary Sequence (changed after round)",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "greedy",
      "math"
    ]
  },
  {
    "id": 10179,
    "title": "Jamie and Alarm Snooze",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10180,
    "title": "Coprime Arrays",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 10181,
    "title": "Imbalance Value of a Tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "tree",
      "union find"
    ]
  },
  {
    "id": 10182,
    "title": "Physical Education Lessons",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 10183,
    "title": "Almost Acyclic Graph",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 10184,
    "title": "Permute Digits",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 10185,
    "title": "Browser",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10186,
    "title": "Garden",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10187,
    "title": "Ember and Storm's Tree Game",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "game theory",
      "tree"
    ]
  },
  {
    "id": 10188,
    "title": "Sum the Fibonacci",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "divide and conquer",
      "dynamic programming",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 10189,
    "title": "Substrings in a String",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "data structures",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 10190,
    "title": "Palindromes in a Tree",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "divide and conquer",
      "tree"
    ]
  },
  {
    "id": 10191,
    "title": "Bash and a Tough Math Puzzle",
    "difficulty": "hard",
    "category": [
      "data structures",
      "number theory"
    ]
  },
  {
    "id": 10192,
    "title": "Travelling Salesman and Special Numbers",
    "difficulty": "medium",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 10193,
    "title": "Conan and Agasa play a Card Game",
    "difficulty": "medium",
    "category": [
      "game theory",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10194,
    "title": "Perfect Squares",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10195,
    "title": "Don't Exceed",
    "difficulty": "hard",
    "category": [
      "math",
      "probability"
    ]
  },
  {
    "id": 10196,
    "title": "Power Substring",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 10197,
    "title": "Strongly Connected Tournament",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "math",
      "probability"
    ]
  },
  {
    "id": 10198,
    "title": "Logical Expression",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "shortest path"
    ]
  },
  {
    "id": 10199,
    "title": "Too Easy Problems",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10200,
    "title": "Party Lemonade",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 10201,
    "title": "Christmas Spruce",
    "difficulty": "medium",
    "category": [
      "implementation",
      "tree"
    ]
  },
  {
    "id": 10202,
    "title": "Modular Exponentiation",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 10203,
    "title": "Prime Gift",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph traversal",
      "math",
      "meet in the middle",
      "number theory",
      "two pointers"
    ]
  },
  {
    "id": 10204,
    "title": "Fishes",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "greedy",
      "probability",
      "shortest path"
    ]
  },
  {
    "id": 10205,
    "title": "Perun, Ult!",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10206,
    "title": "New Year's Eve",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "number theory"
    ]
  },
  {
    "id": 10207,
    "title": "Tricky Alchemy",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10208,
    "title": "Mass Change Queries",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 10209,
    "title": "Tree Destruction",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 10210,
    "title": "Stack Sorting",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10211,
    "title": "Inversion Counting",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 10212,
    "title": "Three Garlands",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms"
    ]
  },
  {
    "id": 10213,
    "title": "Two Cakes",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10214,
    "title": "Nearest Minimums",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10215,
    "title": "Minimum Sum",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 10216,
    "title": "Door Frames",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10217,
    "title": "The Way to Home",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "graph traversal",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10218,
    "title": "AND-permutations",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 10219,
    "title": "Coprocessor",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 10220,
    "title": "Colorful Points",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10221,
    "title": "Python Indentation",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 10222,
    "title": "Segments",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 10223,
    "title": "Generate Login",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10224,
    "title": "New Year and Boolean Bridges",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10225,
    "title": "New Year and Original Order",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 10226,
    "title": "New Year and Rainbow Roads",
    "difficulty": "hard",
    "category": [
      "graph",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10227,
    "title": "New Year and Entity Enumeration",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 10228,
    "title": "New Year and Arbitrary Arrangement",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 10229,
    "title": "New Year and Curling",
    "difficulty": "medium",
    "category": [
      "brute force",
      "geometry",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10230,
    "title": "New Year and Buggy Bot",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10231,
    "title": "New Year and Counting Cards",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10232,
    "title": "Tic-Tac-Toe",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10233,
    "title": "Masha and Bears",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10234,
    "title": "Reverses",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 10235,
    "title": "Power Tower",
    "difficulty": "hard",
    "category": [
      "chinese remainder theorem",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10236,
    "title": "Party",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "graph"
    ]
  },
  {
    "id": 10237,
    "title": "Seating of Students",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 10238,
    "title": "Shockers",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 10239,
    "title": "Yet Another Maxflow Problem",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "max flow"
    ]
  },
  {
    "id": 10240,
    "title": "Clear The Matrix",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 10241,
    "title": "Swapping Characters",
    "difficulty": "hard",
    "category": [
      "brute force",
      "hash table",
      "implementation",
      "string"
    ]
  },
  {
    "id": 10242,
    "title": "Almost Difference",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math"
    ]
  },
  {
    "id": 10243,
    "title": "Boxes Packing",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 10244,
    "title": "The Modcrab",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10245,
    "title": "Hungry Student Problem",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10246,
    "title": "Coloring a Tree",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 10247,
    "title": "Visiting a Friend",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10248,
    "title": "Cyclic Cipher",
    "difficulty": "hard",
    "category": [
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 10249,
    "title": "Weighting a Tree",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 10250,
    "title": "Bipartite Segments",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph",
      "graph traversal",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 10251,
    "title": "GCD of Polynomials",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 10252,
    "title": "Hashing Trees",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "tree"
    ]
  },
  {
    "id": 10253,
    "title": "Maximum Questions",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 10254,
    "title": "Unusual Sequences",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10255,
    "title": "Remove Extra One",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "math"
    ]
  },
  {
    "id": 10256,
    "title": "Position in Fraction",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 10257,
    "title": "Find Extra One",
    "difficulty": "easy",
    "category": [
      "geometry",
      "implementation"
    ]
  },
  {
    "id": 10258,
    "title": "Letters Removing",
    "difficulty": "hard",
    "category": [
      "data structures",
      "string"
    ]
  },
  {
    "id": 10259,
    "title": "Segments Removal",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation",
      "max flow",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 10260,
    "title": "Shovel Sale",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 10261,
    "title": "Dividing the numbers",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "math"
    ]
  },
  {
    "id": 10262,
    "title": "Months and Years",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10263,
    "title": "Splitting in Teams",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 10264,
    "title": "Restoring the Expression",
    "difficulty": "hard",
    "category": [
      "brute force",
      "hash table",
      "math"
    ]
  },
  {
    "id": 10265,
    "title": "Squares and not squares",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 10266,
    "title": "Alarm Clock",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 10267,
    "title": "Phone Numbers",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 10268,
    "title": "Proper Nutrition",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "number theory"
    ]
  },
  {
    "id": 10269,
    "title": "Rounding",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 10270,
    "title": "Chtholly's request",
    "difficulty": "medium",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 10271,
    "title": "Scarborough Fair",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10272,
    "title": "Welcome home, Chtholly",
    "difficulty": "hard",
    "category": [
      "data structures",
      "union find"
    ]
  },
  {
    "id": 10273,
    "title": "Nephren Runs a Cinema",
    "difficulty": "hard",
    "category": [
      "chinese remainder theorem",
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10274,
    "title": "Willem, Chtholly and Seniorious",
    "difficulty": "hard",
    "category": [
      "data structures",
      "probability"
    ]
  },
  {
    "id": 10275,
    "title": "Ithea Plays With Chtholly",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "game theory",
      "greedy",
      "interactive"
    ]
  },
  {
    "id": 10276,
    "title": "Nephren gives a riddle",
    "difficulty": "medium",
    "category": [
      "binary search",
      "graph traversal"
    ]
  },
  {
    "id": 10277,
    "title": "Eyes Closed",
    "difficulty": "hard",
    "category": [
      "data structures",
      "probability"
    ]
  },
  {
    "id": 10278,
    "title": "String Mark",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "string"
    ]
  },
  {
    "id": 10279,
    "title": "Square Subsets",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 10280,
    "title": "XK Segments",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 10281,
    "title": "Pizza Separation",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10282,
    "title": "Ralph and Mushrooms",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph"
    ]
  },
  {
    "id": 10283,
    "title": "Ralph And His Tour in Binary Country",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "tree"
    ]
  },
  {
    "id": 10284,
    "title": "Marco and GCD Sequence",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 10285,
    "title": "Ralph And His Magic Field",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10286,
    "title": "QAQ",
    "difficulty": "easy",
    "category": [
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 10287,
    "title": "Subtree Minimum Query",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 10288,
    "title": "Counting Arrays",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10289,
    "title": "Credit Card",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10290,
    "title": "Rumor",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 10291,
    "title": "Beautiful Divisors",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10292,
    "title": "Chess For Three",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10293,
    "title": "Wrath",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 10294,
    "title": "Greed",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10295,
    "title": "Lust",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "matrix"
    ]
  },
  {
    "id": 10296,
    "title": "Sloth",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph matching",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 10297,
    "title": "Envy",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "union find"
    ]
  },
  {
    "id": 10298,
    "title": "Gluttony",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 10299,
    "title": "Pride",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10300,
    "title": "Mod Mod Mod",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 10301,
    "title": "Xor-MST",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "data structures"
    ]
  },
  {
    "id": 10302,
    "title": "Connecting Vertices",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph"
    ]
  },
  {
    "id": 10303,
    "title": "Maximum Subsequence",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "divide and conquer",
      "meet in the middle"
    ]
  },
  {
    "id": 10304,
    "title": "Almost Identity Permutations",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 10305,
    "title": "K-Dominant Character",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 10306,
    "title": "Buggy Robot",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 10307,
    "title": "Local Extrema",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10308,
    "title": "Row of Models",
    "difficulty": "hard",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10309,
    "title": "Little Brother",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry",
      "sorting"
    ]
  },
  {
    "id": 10310,
    "title": "Ratings and Reality Shows",
    "difficulty": "hard",
    "category": [
      "data structures",
      "two pointers"
    ]
  },
  {
    "id": 10311,
    "title": "Solution for Cube",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10312,
    "title": "Cubes for Masha",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10313,
    "title": "Div. 64",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10314,
    "title": "Symmetric Projections",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 10315,
    "title": "Maximum Element",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 10316,
    "title": "Restoration of string",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "implementation"
    ]
  },
  {
    "id": 10317,
    "title": "Petya and Catacombs",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "tree",
      "union find"
    ]
  },
  {
    "id": 10318,
    "title": "Vlad and Cafes",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 10319,
    "title": "ACM ICPC",
    "difficulty": "easy",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 10320,
    "title": "Anti-Palindromize",
    "difficulty": "hard",
    "category": [
      "graph",
      "greedy",
      "max flow"
    ]
  },
  {
    "id": 10321,
    "title": "Binary Matrix",
    "difficulty": "hard",
    "category": [
      "union find"
    ]
  },
  {
    "id": 10322,
    "title": "Boxes And Balls",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 10323,
    "title": "Bertown Subway",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "greedy",
      "math"
    ]
  },
  {
    "id": 10324,
    "title": "Japanese Crosswords Strike Back",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10325,
    "title": "Book Reading",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10326,
    "title": "Quadcopter Competition",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 10327,
    "title": "Berland.Taxi",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 10328,
    "title": "Road Widening",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10329,
    "title": "Renovation",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10330,
    "title": "Photo Processing",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming"
    ]
  },
  {
    "id": 10331,
    "title": "Palindromic Cut",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 10332,
    "title": "Orientation of Edges",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 10333,
    "title": "Lost in Transliteration",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10334,
    "title": "Field of Wonders",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 10335,
    "title": "Packmen Strike Back",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 10336,
    "title": "Downloading B++",
    "difficulty": "hard",
    "category": [
      "binary search",
      "implementation"
    ]
  },
  {
    "id": 10337,
    "title": "Berland Army",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy"
    ]
  },
  {
    "id": 10338,
    "title": "Automatic Door",
    "difficulty": "hard",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10339,
    "title": "Table Tennis",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 10340,
    "title": "Borya's Diagnosis",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10341,
    "title": "Numbers on the blackboard",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 10342,
    "title": "Magic Breeding",
    "difficulty": "hard",
    "category": [
      "bit manipulation"
    ]
  },
  {
    "id": 10343,
    "title": "Tournament",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph"
    ]
  },
  {
    "id": 10344,
    "title": "Teams Formation",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 10345,
    "title": "Short Program",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms"
    ]
  },
  {
    "id": 10346,
    "title": "Ann and Books",
    "difficulty": "hard",
    "category": [
      "data structures",
      "hash table",
      "max flow"
    ]
  },
  {
    "id": 10347,
    "title": "Danil and a Part-time Job",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "tree"
    ]
  },
  {
    "id": 10348,
    "title": "Olya and Energy Drinks",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 10349,
    "title": "Slava and tanks",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 10350,
    "title": "Nikita and string",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 10351,
    "title": "Alex and broken contest",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 10352,
    "title": "Divisiblity of Differences",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10353,
    "title": "Trip For Meal",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 10354,
    "title": "Royal Questions",
    "difficulty": "hard",
    "category": [
      "graph",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 10355,
    "title": "Delivery Club",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 10356,
    "title": "High Cry",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "combinatorics",
      "data structures",
      "divide and conquer"
    ]
  },
  {
    "id": 10357,
    "title": "National Property",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "graph",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 10358,
    "title": "Sorting the Coins",
    "difficulty": "medium",
    "category": [
      "implementation",
      "sorting",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 10359,
    "title": "Classroom Watch",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 10360,
    "title": "Forbidden Indices",
    "difficulty": "hard",
    "category": [
      "string",
      "string suffix structures",
      "union find"
    ]
  },
  {
    "id": 10361,
    "title": "Awards For Contestants",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 10362,
    "title": "Merge Sort",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "divide and conquer"
    ]
  },
  {
    "id": 10363,
    "title": "Strange Game On Matrix",
    "difficulty": "medium",
    "category": [
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 10364,
    "title": "Balanced Substring",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 10365,
    "title": "Chores",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10366,
    "title": "Restore the Tree",
    "difficulty": "hard",
    "category": [
      "graph",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 10367,
    "title": "Paths",
    "difficulty": "hard",
    "category": [
      "data structures",
      "number theory"
    ]
  },
  {
    "id": 10368,
    "title": "Points, Lines and Ready-made Titles",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 10369,
    "title": "Something with XOR Queries",
    "difficulty": "hard",
    "category": [
      "brute force",
      "interactive",
      "probability"
    ]
  },
  {
    "id": 10370,
    "title": "Maximum splitting",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10371,
    "title": "Maximum of Maximums of Minimums",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 10372,
    "title": "Search for Pretty Integers",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10373,
    "title": "The Untended Antiquity",
    "difficulty": "hard",
    "category": [
      "data structures",
      "hash table"
    ]
  },
  {
    "id": 10374,
    "title": "The Overdosing Ubiquity",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 10375,
    "title": "The Intriguing Obsession",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 10376,
    "title": "The Eternal Immortality",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 10377,
    "title": "The Artful Expedient",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10378,
    "title": "El Toll Caves",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 10379,
    "title": "Yet Another Minimization Problem",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "dynamic programming"
    ]
  },
  {
    "id": 10380,
    "title": "Policeman and a Tree",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "tree"
    ]
  },
  {
    "id": 10381,
    "title": "Huge Strings",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "implementation",
      "string"
    ]
  },
  {
    "id": 10382,
    "title": "Qualification Rounds",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "dynamic programming"
    ]
  },
  {
    "id": 10383,
    "title": "Race Against Time",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10384,
    "title": "Bark to Unlock",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 10385,
    "title": "Between the Offices",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10386,
    "title": "Flowers and Chocolate",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "matrix"
    ]
  },
  {
    "id": 10387,
    "title": "Egg Roulette",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "divide and conquer",
      "math",
      "meet in the middle"
    ]
  },
  {
    "id": 10388,
    "title": "Hex Dyslexia",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "graph"
    ]
  },
  {
    "id": 10389,
    "title": "Buy Low Sell High",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 10390,
    "title": "Gotta Go Fast",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming"
    ]
  },
  {
    "id": 10391,
    "title": "Ordering Pizza",
    "difficulty": "hard",
    "category": [
      "binary search",
      "sorting",
      "ternary search"
    ]
  },
  {
    "id": 10392,
    "title": "Save the problem!",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 10393,
    "title": "Cities Excursions",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 10394,
    "title": "Fire",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 10395,
    "title": "Make a Permutation!",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10396,
    "title": "Bus",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10397,
    "title": "Polycarp and Letters",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 10398,
    "title": "Fair Game",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 10399,
    "title": "Graphic Settings",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10400,
    "title": "Almost Permutation",
    "difficulty": "hard",
    "category": [
      "max flow"
    ]
  },
  {
    "id": 10401,
    "title": "Turn Off The TV",
    "difficulty": "hard",
    "category": [
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 10402,
    "title": "Yet Another Array Queries Problem",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 10403,
    "title": "1-2-3",
    "difficulty": "medium",
    "category": [
      "graph",
      "implementation"
    ]
  },
  {
    "id": 10404,
    "title": "Kayaking",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10405,
    "title": "Quasi-palindrome",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10406,
    "title": "Mahmoud and Ehab and the final stage",
    "difficulty": "hard",
    "category": [
      "data structures",
      "string"
    ]
  },
  {
    "id": 10407,
    "title": "Mahmoud and Ehab and the function",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 10408,
    "title": "Mahmoud and Ehab and the binary string",
    "difficulty": "hard",
    "category": [
      "binary search",
      "divide and conquer",
      "interactive"
    ]
  },
  {
    "id": 10409,
    "title": "Mahmoud and Ehab and the xor",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 10410,
    "title": "Mahmoud and Ehab and the bipartiteness",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 10411,
    "title": "Mahmoud and Ehab and the MEX",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10412,
    "title": "Arkady and a Nobody-men",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 10413,
    "title": "Circle of Numbers",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 10414,
    "title": "Ordering T-Shirts",
    "difficulty": "hard",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 10415,
    "title": "Desk Disorder",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "graph",
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 10416,
    "title": "Third Month Insanity",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "probability",
      "tree"
    ]
  },
  {
    "id": 10417,
    "title": "Pie Rules",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "game theory"
    ]
  },
  {
    "id": 10418,
    "title": "Lazy Security Guard",
    "difficulty": "easy",
    "category": [
      "brute force",
      "geometry",
      "math"
    ]
  },
  {
    "id": 10419,
    "title": "Declined Finalists",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10420,
    "title": "Wizard's Tour",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 10421,
    "title": "Tests Renumeration",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10422,
    "title": "Polycarp's phone book",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 10423,
    "title": "Did you mean...",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10424,
    "title": "Which floor?",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10425,
    "title": "k-rounding",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10426,
    "title": "To Play or not to Play",
    "difficulty": "hard",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 10427,
    "title": "Satellites",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10428,
    "title": "Masha and Cactus",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 10429,
    "title": "Eleventh Birthday",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 10430,
    "title": "Similar Words",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "hash table",
      "string",
      "tree"
    ]
  },
  {
    "id": 10431,
    "title": "Set Theory",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms"
    ]
  },
  {
    "id": 10432,
    "title": "Harry Vs Voldemort",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 10433,
    "title": "Nagini",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 10434,
    "title": "Salazar Slytherin's Locket",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 10435,
    "title": "Rowena Ravenclaw's Diadem",
    "difficulty": "hard",
    "category": [
      "tree"
    ]
  },
  {
    "id": 10436,
    "title": "Helga Hufflepuff's Cup",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 10437,
    "title": "Marvolo Gaunt's Ring",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 10438,
    "title": "Tom Riddle's Diary",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 10439,
    "title": "Maxim Buys an Apartment",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 10440,
    "title": "Fraction",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 10441,
    "title": "Lada Malina",
    "difficulty": "hard",
    "category": [
      "data structures",
      "geometry"
    ]
  },
  {
    "id": 10442,
    "title": "Michael and Charging Stations",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 10443,
    "title": "Boredom",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 10444,
    "title": "Jury Meeting",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 10445,
    "title": "Planning",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 10446,
    "title": "Dating",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 10447,
    "title": "Bob and stages",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "geometry"
    ]
  },
  {
    "id": 10448,
    "title": "Bathroom terminal",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10449,
    "title": "Product transformation",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10450,
    "title": "Casinos and travel",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 10451,
    "title": "Exploration plan",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph matching",
      "max flow",
      "shortest path"
    ]
  },
  {
    "id": 10452,
    "title": "Property",
    "difficulty": "hard",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10453,
    "title": "Neural Network country",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 10454,
    "title": "Digits",
    "difficulty": "hard",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10455,
    "title": "Arpa and an exam about geometry",
    "difficulty": "medium",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 10456,
    "title": "Arpa and a research in Mexican wave",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 10457,
    "title": "Rainbow Balls",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 10458,
    "title": "Random Elections",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "divide and conquer",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 10459,
    "title": "Tournament Construction",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph",
      "greedy",
      "math"
    ]
  },
  {
    "id": 10460,
    "title": "Arpa and a game with Mojtaba",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "game theory"
    ]
  },
  {
    "id": 10461,
    "title": "Arpa and a list of numbers",
    "difficulty": "hard",
    "category": [
      "implementation",
      "number theory"
    ]
  },
  {
    "id": 10462,
    "title": "Five Dimensional Points",
    "difficulty": "medium",
    "category": [
      "brute force",
      "geometry",
      "math"
    ]
  },
  {
    "id": 10463,
    "title": "Tell Your World",
    "difficulty": "medium",
    "category": [
      "brute force",
      "geometry"
    ]
  },
  {
    "id": 10464,
    "title": "Odds and Ends",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10465,
    "title": "Days of Floral Colours",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "divide and conquer",
      "dynamic programming",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 10466,
    "title": "Shake It!",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph",
      "max flow"
    ]
  },
  {
    "id": 10467,
    "title": "Goodbye Souvenir",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer"
    ]
  },
  {
    "id": 10468,
    "title": "Rooter's Song",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "geometry",
      "implementation",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 10469,
    "title": "From Y to Y",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 10470,
    "title": "Weather Tomorrow",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 10471,
    "title": "Berland SU Computer Network",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 10472,
    "title": "Travel Cards",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 10473,
    "title": "Students Initiation",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph",
      "max flow"
    ]
  },
  {
    "id": 10474,
    "title": "Noise Level",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10475,
    "title": "Load Testing",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 10476,
    "title": "University Classes",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10477,
    "title": "Berland Elections",
    "difficulty": "hard",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10478,
    "title": "Packmen",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming"
    ]
  },
  {
    "id": 10479,
    "title": "Dog Show",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 10480,
    "title": "Sum of Nestings",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 10481,
    "title": "Preparing for Merge Sort",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 10482,
    "title": "Union of Doubly Linked Lists",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10483,
    "title": "Random Query",
    "difficulty": "medium",
    "category": [
      "data structures",
      "math",
      "probability",
      "two pointers"
    ]
  },
  {
    "id": 10484,
    "title": "Chemistry in Berland",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 10485,
    "title": "Monitor",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 10486,
    "title": "Four Segments",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 10487,
    "title": "Math Show",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 10488,
    "title": "Curriculum Vitae",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10489,
    "title": "Shortest Path Problem?",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 10490,
    "title": "Guards In The Storehouse",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 10491,
    "title": "Fire in the City",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 10492,
    "title": "Driving Test",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 10493,
    "title": "Two TVs",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10494,
    "title": "Luba And The Ticket",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10495,
    "title": "Chess Tourney",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 10496,
    "title": "Rectangles",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 10497,
    "title": "Diversity",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 10498,
    "title": "Maximum Flow",
    "difficulty": "hard",
    "category": [
      "graph",
      "max flow"
    ]
  },
  {
    "id": 10499,
    "title": "Dynamic Shortest Path",
    "difficulty": "hard",
    "category": [
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 10500,
    "title": "Upgrading Tree",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "math",
      "tree"
    ]
  },
  {
    "id": 10501,
    "title": "Interactive LowerBound",
    "difficulty": "hard",
    "category": [
      "brute force",
      "interactive",
      "probability"
    ]
  },
  {
    "id": 10502,
    "title": "Sorting by Subsequences",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "implementation",
      "math",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 10503,
    "title": "Nikita and game",
    "difficulty": "hard",
    "category": [
      "binary search",
      "divide and conquer",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 10504,
    "title": "Vitya and Strange Lesson",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 10505,
    "title": "Ilya And The Tree",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "math",
      "number theory",
      "tree"
    ]
  },
  {
    "id": 10506,
    "title": "Gleb And Pizza",
    "difficulty": "easy",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 10507,
    "title": "Kirill And The Game",
    "difficulty": "medium",
    "category": [
      "brute force",
      "two pointers"
    ]
  },
  {
    "id": 10508,
    "title": "Godsend",
    "difficulty": "easy",
    "category": [
      "game theory",
      "math"
    ]
  },
  {
    "id": 10509,
    "title": "Generous Kefa",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10510,
    "title": "In a Trap",
    "difficulty": "hard",
    "category": [
      "tree"
    ]
  },
  {
    "id": 10511,
    "title": "Destiny",
    "difficulty": "hard",
    "category": [
      "data structures",
      "probability"
    ]
  },
  {
    "id": 10512,
    "title": "On the Bench",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 10513,
    "title": "Leha and another game about graph",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 10514,
    "title": "Leha and Function",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "greedy",
      "math",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 10515,
    "title": "Mother of Dragons",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph",
      "math",
      "meet in the middle"
    ]
  },
  {
    "id": 10516,
    "title": "Winter is here",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10517,
    "title": "Journey",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "probability",
      "tree"
    ]
  },
  {
    "id": 10518,
    "title": "Game of the Rows",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10519,
    "title": "Arya and Bran",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10520,
    "title": "Expected Earnings",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10521,
    "title": "Convex Countour",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 10522,
    "title": "Airplane Arrangements",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 10523,
    "title": "Future Failure",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory"
    ]
  },
  {
    "id": 10524,
    "title": "Diverging Directions",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 10525,
    "title": "Binary Blocks",
    "difficulty": "medium",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 10526,
    "title": "Functions On The Segments",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 10527,
    "title": "Prefix Sums",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "combinatorics",
      "math",
      "matrix"
    ]
  },
  {
    "id": 10528,
    "title": "Vasya's Function",
    "difficulty": "hard",
    "category": [
      "binary search",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10529,
    "title": "Round Subset",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 10530,
    "title": "Two Seals",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10531,
    "title": "Flag of Berland",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10532,
    "title": "Text Volume",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10533,
    "title": "Roads in the Kingdom",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 10534,
    "title": "The penguin's game",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "interactive"
    ]
  },
  {
    "id": 10535,
    "title": "Palindromic characteristics",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "hash table",
      "string"
    ]
  },
  {
    "id": 10536,
    "title": "Star sky",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 10537,
    "title": "The number on the board",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 10538,
    "title": "Key races",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 10539,
    "title": "The Festive Evening",
    "difficulty": "easy",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 10540,
    "title": "The Useless Toy",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10541,
    "title": "Caramel Clouds",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 10542,
    "title": "Red-Black Cobweb",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 10543,
    "title": "Ever-Hungry Krakozyabra",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "greedy",
      "math"
    ]
  },
  {
    "id": 10544,
    "title": "The Bakery",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 10545,
    "title": "The Meaningless Game",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 10546,
    "title": "Vasya and Shifts",
    "difficulty": "hard",
    "category": [
      "matrix"
    ]
  },
  {
    "id": 10547,
    "title": "Misha, Grisha and Underground",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 10548,
    "title": "Strange Radiation",
    "difficulty": "hard",
    "category": [
      "binary search",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10549,
    "title": "Petya and Exam",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 10550,
    "title": "Sasha and Sticks",
    "difficulty": "easy",
    "category": [
      "game theory",
      "math"
    ]
  },
  {
    "id": 10551,
    "title": "Jury Marks",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms"
    ]
  },
  {
    "id": 10552,
    "title": "Keyboard Layouts",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 10553,
    "title": "Unimodal Array",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10554,
    "title": "Perpetual Motion Machine",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph",
      "implementation",
      "math",
      "tree"
    ]
  },
  {
    "id": 10555,
    "title": "Singer House",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph",
      "tree"
    ]
  },
  {
    "id": 10556,
    "title": "Bamboo Partition",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "implementation",
      "math",
      "number theory",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 10557,
    "title": "Cards Sorting",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 10558,
    "title": "Office Keys",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10559,
    "title": "Black Square",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10560,
    "title": "Restaurant Tables",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10561,
    "title": "Dirty Arkady's Kitchen",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 10562,
    "title": "Rusty String",
    "difficulty": "hard",
    "category": [
      "fast fourier transform",
      "math",
      "string"
    ]
  },
  {
    "id": 10563,
    "title": "Best Edge Weight",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 10564,
    "title": "DNA Evolution",
    "difficulty": "hard",
    "category": [
      "data structures",
      "string"
    ]
  },
  {
    "id": 10565,
    "title": "High Load",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 10566,
    "title": "String Reconstruction",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "sorting",
      "string"
    ]
  },
  {
    "id": 10567,
    "title": "Tree Queries",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 10568,
    "title": "String Compression",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "hash table",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 10569,
    "title": "Minimal Labels",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 10570,
    "title": "Suitable Replacement",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10571,
    "title": "Multi-judge Solving",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10572,
    "title": "Five-In-a-Row",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10573,
    "title": "Binary Protocol",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10574,
    "title": "Madness",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 10575,
    "title": "Liar",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "hash table",
      "string suffix structures"
    ]
  },
  {
    "id": 10576,
    "title": "My pretty girl Noora",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10577,
    "title": "Hacker, pack your bags!",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 10578,
    "title": "Crossword solving",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 10579,
    "title": "I'm bored with life",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10580,
    "title": "Okabe and El Psy Kongroo",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 10581,
    "title": "Okabe and City",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 10582,
    "title": "Okabe and Boxes",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 10583,
    "title": "Okabe and Banana Trees",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 10584,
    "title": "Okabe and Future Gadget Laboratory",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10585,
    "title": "Mister B and Angle in Polygon",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "geometry",
      "math"
    ]
  },
  {
    "id": 10586,
    "title": "Mister B and Book Reading",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10587,
    "title": "Mister B and Flight to the Moon",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph"
    ]
  },
  {
    "id": 10588,
    "title": "Mister B and Astronomers",
    "difficulty": "hard",
    "category": [
      "number theory"
    ]
  },
  {
    "id": 10589,
    "title": "Mister B and Beacons on Field",
    "difficulty": "hard",
    "category": [
      "number theory"
    ]
  },
  {
    "id": 10590,
    "title": "Mister B and PR Shifts",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10591,
    "title": "Mister B and Boring Game",
    "difficulty": "hard",
    "category": [
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 10592,
    "title": "Four Melodies",
    "difficulty": "hard",
    "category": [
      "graph",
      "max flow"
    ]
  },
  {
    "id": 10593,
    "title": "Level Generation",
    "difficulty": "hard",
    "category": [
      "binary search",
      "math",
      "ternary search"
    ]
  },
  {
    "id": 10594,
    "title": "Card Game Again",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "number theory",
      "two pointers"
    ]
  },
  {
    "id": 10595,
    "title": "Multicolored Cars",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 10596,
    "title": "Sofa Thief",
    "difficulty": "hard",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10597,
    "title": "Permutation Game",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10598,
    "title": "Diplomas and Certificates",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 10599,
    "title": "MEX Queries",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "tree"
    ]
  },
  {
    "id": 10600,
    "title": "Choosing The Commander",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "tree"
    ]
  },
  {
    "id": 10601,
    "title": "Imbalanced Array",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 10602,
    "title": "Really Big Numbers",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 10603,
    "title": "Makes And The Product",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 10604,
    "title": "Treasure Hunt",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10605,
    "title": "Karen and Coffee",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 10606,
    "title": "Karen and Morning",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10607,
    "title": "Karen and Neighborhood",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 10608,
    "title": "Karen and Cards",
    "difficulty": "hard",
    "category": [
      "binary search",
      "combinatorics",
      "data structures",
      "geometry"
    ]
  },
  {
    "id": 10609,
    "title": "Karen and Supermarket",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 10610,
    "title": "Karen and Test",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 10611,
    "title": "Karen and Game",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10612,
    "title": "An unavoidable detour for home",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 10613,
    "title": "An overnight dance in discotheque",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "geometry",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 10614,
    "title": "An impassioned circulation of affection",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 10615,
    "title": "An express train to reveries",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 10616,
    "title": "An abandoned sentiment from past",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 10617,
    "title": "Bipartite Checking",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "union find"
    ]
  },
  {
    "id": 10618,
    "title": "Army Creation",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 10619,
    "title": "Two Melodies",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "max flow"
    ]
  },
  {
    "id": 10620,
    "title": "The Tag Game",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 10621,
    "title": "The Golden Age",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 10622,
    "title": "The Contest",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10623,
    "title": "Sagheer and Apple Tree",
    "difficulty": "hard",
    "category": [
      "game theory",
      "tree"
    ]
  },
  {
    "id": 10624,
    "title": "Sagheer and Kindergarten",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 10625,
    "title": "Sagheer and Nubian Market",
    "difficulty": "medium",
    "category": [
      "binary search",
      "sorting"
    ]
  },
  {
    "id": 10626,
    "title": "Sagheer, the Hausmeister",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 10627,
    "title": "Sagheer and Crossroads",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10628,
    "title": "Vladik and Entertaining Flags",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "union find"
    ]
  },
  {
    "id": 10629,
    "title": "Vladik and Favorite Game",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "interactive"
    ]
  },
  {
    "id": 10630,
    "title": "Vladik and Memorable Trip",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 10631,
    "title": "Vladik and Complicated Book",
    "difficulty": "medium",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 10632,
    "title": "Vladik and Courtesy",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10633,
    "title": "Summer sell-off",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10634,
    "title": "Straight <<A>>",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 10635,
    "title": "Surprise me!",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "math",
      "number theory",
      "tree"
    ]
  },
  {
    "id": 10636,
    "title": "Hitchhiking in the Baltic States",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 10637,
    "title": "Find a car",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "divide and conquer",
      "dynamic programming"
    ]
  },
  {
    "id": 10638,
    "title": "Glad to see you!",
    "difficulty": "hard",
    "category": [
      "binary search",
      "interactive"
    ]
  },
  {
    "id": 10639,
    "title": "Do you want a date?",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 10640,
    "title": "Anthem of Berland",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 10641,
    "title": "Card Game",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph",
      "max flow"
    ]
  },
  {
    "id": 10642,
    "title": "Selling Souvenirs",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy",
      "ternary search"
    ]
  },
  {
    "id": 10643,
    "title": "Array Division",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 10644,
    "title": "Tea Party",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10645,
    "title": "Average Sleep Time",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10646,
    "title": "Lucky Year",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10647,
    "title": "T-Shirt Hunt",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10648,
    "title": "Is it rated?",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 10649,
    "title": "3-palindrome",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 10650,
    "title": "Fake NP",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 10651,
    "title": "Fake bullions",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph",
      "graph traversal",
      "number theory"
    ]
  },
  {
    "id": 10652,
    "title": "The same permutation ",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 10653,
    "title": "Expected diameter of a tree",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "dynamic programming",
      "graph traversal",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 10654,
    "title": "Ice cream coloring",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 10655,
    "title": "Minimum number of steps",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10656,
    "title": "Find Amir",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 10657,
    "title": "Periodic RMQ Problem",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 10658,
    "title": "Coprime Subsequences",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "number theory"
    ]
  },
  {
    "id": 10659,
    "title": "Roma and Poker",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph"
    ]
  },
  {
    "id": 10660,
    "title": "Magazine Ad",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 10661,
    "title": "Maximal GCD",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 10662,
    "title": "Distances to Zero",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 10663,
    "title": "Maximal Binary Matrix",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 10664,
    "title": "April Fools' Problem (hard)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "max flow"
    ]
  },
  {
    "id": 10665,
    "title": "April Fools' Problem (medium)",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph",
      "max flow"
    ]
  },
  {
    "id": 10666,
    "title": "April Fools' Problem (easy)",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10667,
    "title": "Send the Fool Further! (hard)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "math",
      "tree"
    ]
  },
  {
    "id": 10668,
    "title": "Send the Fool Further! (medium)",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 10669,
    "title": "Send the Fool Further! (easy)",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 10670,
    "title": "Fake News (hard)",
    "difficulty": "hard",
    "category": [
      "string suffix structures"
    ]
  },
  {
    "id": 10671,
    "title": "Fake News (medium)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "string"
    ]
  },
  {
    "id": 10672,
    "title": "Fake News (easy)",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 10673,
    "title": "Marmots (hard)",
    "difficulty": "hard",
    "category": [
      "math",
      "probability"
    ]
  },
  {
    "id": 10674,
    "title": "Marmots (medium)",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 10675,
    "title": "Marmots (easy)",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 10676,
    "title": "Heidi and Library (hard)",
    "difficulty": "hard",
    "category": [
      "max flow"
    ]
  },
  {
    "id": 10677,
    "title": "Heidi and Library (medium)",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 10678,
    "title": "Heidi and Library (easy)",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 10679,
    "title": "Valued Keys",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "string"
    ]
  },
  {
    "id": 10680,
    "title": "Vicious Keyboard",
    "difficulty": "easy",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 10681,
    "title": "Cut the pie",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "geometry"
    ]
  },
  {
    "id": 10682,
    "title": "Beautiful fountains rows",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 10683,
    "title": "Aquarium decoration",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 10684,
    "title": "Field expansion",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "meet in the middle"
    ]
  },
  {
    "id": 10685,
    "title": "Fountains",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 10686,
    "title": "T-shirt buying",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 10687,
    "title": "Carrot Cakes",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10688,
    "title": "Mike and code of a permutation",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "graph",
      "sorting"
    ]
  },
  {
    "id": 10689,
    "title": "Mike and distribution",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "sorting"
    ]
  },
  {
    "id": 10690,
    "title": "Mike and gcd problem",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 10691,
    "title": "Mike and strings",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 10692,
    "title": "Mike and palindrome",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "string"
    ]
  },
  {
    "id": 10693,
    "title": "Mice and Holes",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10694,
    "title": "Array Queries",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 10695,
    "title": "Broken BST",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal"
    ]
  },
  {
    "id": 10696,
    "title": "Minimal string",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "string"
    ]
  },
  {
    "id": 10697,
    "title": "Odd sum",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10698,
    "title": "k-Factorization",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10699,
    "title": "Sequence Recovery",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 10700,
    "title": "Exam Cheating",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming"
    ]
  },
  {
    "id": 10701,
    "title": "Police Stations",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph",
      "graph traversal",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 10702,
    "title": "Bank Hacking",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 10703,
    "title": "Find The Bone",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10704,
    "title": "Buying A House",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10705,
    "title": "Replace All",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 10706,
    "title": "Leha and security system",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 10707,
    "title": "Choosing Carrot",
    "difficulty": "hard",
    "category": [
      "game theory",
      "math"
    ]
  },
  {
    "id": 10708,
    "title": "Labelling Cities",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "hash table"
    ]
  },
  {
    "id": 10709,
    "title": "Naming Company",
    "difficulty": "medium",
    "category": [
      "game theory",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10710,
    "title": "Cutting Carrot",
    "difficulty": "medium",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 10711,
    "title": "Bank Robbery",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10712,
    "title": "Oleg and chess",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "graph matching",
      "max flow"
    ]
  },
  {
    "id": 10713,
    "title": "Julia the snail",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "dynamic programming"
    ]
  },
  {
    "id": 10714,
    "title": "Problem of offices",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 10715,
    "title": "Presents in Bankopolis",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 10716,
    "title": "Mice problem",
    "difficulty": "hard",
    "category": [
      "geometry",
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 10717,
    "title": "Igor and his way to work",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "implementation",
      "shortest path"
    ]
  },
  {
    "id": 10718,
    "title": "Oleg and shares",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 10719,
    "title": "Mages and Monsters",
    "difficulty": "hard",
    "category": [
      "data structures",
      "geometry"
    ]
  },
  {
    "id": 10720,
    "title": "Colored Balls",
    "difficulty": "hard",
    "category": [
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10721,
    "title": "Paths in a Complete Binary Tree",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "tree"
    ]
  },
  {
    "id": 10722,
    "title": "Divide by Three",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10723,
    "title": "Counting-out Rhyme",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10724,
    "title": "New Bus Route",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 10725,
    "title": "Bear and Big Brother",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10726,
    "title": "Masha and geometric depression",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10727,
    "title": "Anastasia and pebbles",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 10728,
    "title": "New task",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 10729,
    "title": "Finding lines",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "divide and conquer",
      "interactive"
    ]
  },
  {
    "id": 10730,
    "title": "The Great Mixing",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 10731,
    "title": "Weird journey",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 10732,
    "title": "Functions again",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 10733,
    "title": "Not Afraid",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10734,
    "title": "The Monster",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10735,
    "title": "ALT",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "max flow",
      "tree"
    ]
  },
  {
    "id": 10736,
    "title": "Rap God",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "hash table",
      "string",
      "tree"
    ]
  },
  {
    "id": 10737,
    "title": "Till I Collapse",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer"
    ]
  },
  {
    "id": 10738,
    "title": "Legacy",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 10739,
    "title": "Berzerk",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory",
      "graph traversal"
    ]
  },
  {
    "id": 10740,
    "title": "Anton and Permutation",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures"
    ]
  },
  {
    "id": 10741,
    "title": "Anton and School - 2",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10742,
    "title": "Anton and Fairy Tale",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 10743,
    "title": "Anton and Classes",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10744,
    "title": "Anton and Polyhedrons",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 10745,
    "title": "BF Calculator",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 10746,
    "title": "Crunching Numbers Just for You",
    "difficulty": "hard",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 10747,
    "title": "Twisted Circuit",
    "difficulty": "hard",
    "category": [
      "brute force",
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 10748,
    "title": "Touchy-Feely Palindromes",
    "difficulty": "hard",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 10749,
    "title": "INTERCALC",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 10750,
    "title": "Kids' Riddle",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 10751,
    "title": "Numbers Joke",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 10752,
    "title": "Intranet of Buses",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 10753,
    "title": "Andryusha and Nervous Barriers",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 10754,
    "title": "Axel and Marston in Bitland",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "graph",
      "matrix"
    ]
  },
  {
    "id": 10755,
    "title": "Underground Lab",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 10756,
    "title": "Innokenty and a Football League",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "graph",
      "greedy",
      "implementation",
      "shortest path",
      "string"
    ]
  },
  {
    "id": 10757,
    "title": "Andryusha and Colored Balloons",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 10758,
    "title": "The Meeting Place Cannot Be Changed",
    "difficulty": "medium",
    "category": [
      "binary search"
    ]
  },
  {
    "id": 10759,
    "title": "Andryusha and Socks",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10760,
    "title": "Dishonest Sellers",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10761,
    "title": "Weird Rounding",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 10762,
    "title": "Pupils Redistribution",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 10763,
    "title": "Selling Numbers",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 10764,
    "title": "Parquet Re-laying",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 10765,
    "title": "Peterson Polyglot",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph traversal",
      "hash table",
      "string",
      "tree",
      "union find"
    ]
  },
  {
    "id": 10766,
    "title": "Bitwise Formula",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "graph traversal",
      "implementation",
      "parsing"
    ]
  },
  {
    "id": 10767,
    "title": "String Game",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "string"
    ]
  },
  {
    "id": 10768,
    "title": "Hanoi Factory",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10769,
    "title": "Cloud of Hashtags",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 10770,
    "title": "Alyona and Spreadsheet",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 10771,
    "title": "Game of Credit Cards",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10772,
    "title": "Shell Game",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10773,
    "title": "Sherlock and the Encrypted Data",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 10774,
    "title": "Sherlock's bet to Moriarty",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "divide and conquer",
      "geometry",
      "graph",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 10775,
    "title": "The Holmes Children",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 10776,
    "title": "The Door Problem",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 10777,
    "title": "Molly's Chemicals",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10778,
    "title": "Sherlock and his girlfriend",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "number theory"
    ]
  },
  {
    "id": 10779,
    "title": "A Serial Killer",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 10780,
    "title": "University Schedule",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 10781,
    "title": "Bars",
    "difficulty": "hard",
    "category": [
      "binary search",
      "special problem"
    ]
  },
  {
    "id": 10782,
    "title": "Stepan and Vowels",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem",
      "string"
    ]
  },
  {
    "id": 10783,
    "title": "Stepan's Series",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "special problem"
    ]
  },
  {
    "id": 10784,
    "title": "Composing Of String",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "special problem"
    ]
  },
  {
    "id": 10785,
    "title": "Repairing Of String",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "special problem"
    ]
  },
  {
    "id": 10786,
    "title": "Perfectionist Arkadiy",
    "difficulty": "hard",
    "category": [
      "number theory",
      "special problem"
    ]
  },
  {
    "id": 10787,
    "title": "Pens And Days Of Week",
    "difficulty": "hard",
    "category": [
      "binary search",
      "number theory",
      "special problem"
    ]
  },
  {
    "id": 10788,
    "title": "Big Number and Remainder",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory",
      "special problem"
    ]
  },
  {
    "id": 10789,
    "title": "Lie or Truth",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation",
      "sorting",
      "special problem"
    ]
  },
  {
    "id": 10790,
    "title": "Maximum Number",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 10791,
    "title": "Significant Cups",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "special problem",
      "two pointers"
    ]
  },
  {
    "id": 10792,
    "title": "Amusement Park",
    "difficulty": "hard",
    "category": [
      "special problem",
      "ternary search"
    ]
  },
  {
    "id": 10793,
    "title": "Test Data Generation",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "divide and conquer",
      "dynamic programming",
      "fast fourier transform",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10794,
    "title": "Blog Post Rating",
    "difficulty": "hard",
    "category": [
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 10795,
    "title": "Perishable Roads",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 10796,
    "title": "Prairie Partition",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 10797,
    "title": "Dynamic Problem Scoring",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 10798,
    "title": "Success Rate",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 10799,
    "title": "Verifying Kingdom",
    "difficulty": "hard",
    "category": [
      "binary search",
      "divide and conquer",
      "interactive",
      "tree"
    ]
  },
  {
    "id": 10800,
    "title": "Varying Kibibits",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 10801,
    "title": "Vulnerable Kerbals",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10802,
    "title": "Volatile Kite",
    "difficulty": "medium",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 10803,
    "title": "Voltage Keepsake",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 10804,
    "title": "Bear and Isomorphic Points",
    "difficulty": "hard",
    "category": [
      "geometry",
      "two pointers"
    ]
  },
  {
    "id": 10805,
    "title": "Bear and Rectangle Strips",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 10806,
    "title": "Bear and Company",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 10807,
    "title": "Bear and Tree Jumps",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 10808,
    "title": "Bear and Different Names",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 10809,
    "title": "Bear and Friendship Condition",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 10810,
    "title": "Draw Brackets!",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 10811,
    "title": "Online Courses In BSU",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 10812,
    "title": "Maximize Sum of Digits",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math",
      "special problem"
    ]
  },
  {
    "id": 10813,
    "title": "New Password",
    "difficulty": "easy",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 10814,
    "title": "k-Interesting Pairs Of Integers",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "meet in the middle",
      "special problem"
    ]
  },
  {
    "id": 10815,
    "title": "Cycle In Maze",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "shortest path",
      "special problem"
    ]
  },
  {
    "id": 10816,
    "title": "News About Credit",
    "difficulty": "medium",
    "category": [
      "greedy",
      "special problem",
      "two pointers"
    ]
  },
  {
    "id": 10817,
    "title": "Year of University Entrance",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting",
      "special problem"
    ]
  },
  {
    "id": 10818,
    "title": "The Winds of Winter",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 10819,
    "title": "Barrels and boxes",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "math",
      "number theory",
      "probability"
    ]
  },
  {
    "id": 10820,
    "title": "Game of Stones",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "game theory"
    ]
  },
  {
    "id": 10821,
    "title": "Jon and Orbs",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 10822,
    "title": "Jon Snow and his Favourite Number",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 10823,
    "title": "Code For 1",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "divide and conquer",
      "graph traversal"
    ]
  },
  {
    "id": 10824,
    "title": "Oath of the Night's Watch",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "sorting"
    ]
  },
  {
    "id": 10825,
    "title": "Change-free",
    "difficulty": "hard",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 10826,
    "title": "Cartons of milk",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 10827,
    "title": "Garland",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 10828,
    "title": "The Queue",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 10829,
    "title": "Snacktower",
    "difficulty": "easy",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 10830,
    "title": "Mahmoud and a xor trip",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "graph traversal",
      "math",
      "tree"
    ]
  },
  {
    "id": 10831,
    "title": "Mahmoud and a Dictionary",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 10832,
    "title": "Mahmoud and a Message",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "string"
    ]
  },
  {
    "id": 10833,
    "title": "Mahmoud and a Triangle",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "geometry",
      "greedy",
      "math",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 10834,
    "title": "Mahmoud and Longest Uncommon Subsequence",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "string"
    ]
  },
  {
    "id": 10835,
    "title": "Math, math everywhere",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "math",
      "meet in the middle",
      "number theory"
    ]
  },
  {
    "id": 10836,
    "title": "Souvenirs",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 10837,
    "title": "Tree Folding",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "greedy",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 10838,
    "title": "Artsem and Saunders",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math",
      "union find"
    ]
  },
  {
    "id": 10839,
    "title": "Table Tennis Game 2",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 10840,
    "title": "Code obfuscation",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 10841,
    "title": "Neverending competitions",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 10842,
    "title": "Timofey and cubes",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 10843,
    "title": "Taymyr is calling you",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10844,
    "title": "Timofey and our friends animals",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "union find"
    ]
  },
  {
    "id": 10845,
    "title": "Timofey and a flat tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "hash table",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 10846,
    "title": "Timofey and remoduling",
    "difficulty": "hard",
    "category": [
      "brute force",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10847,
    "title": "Timofey and rectangles",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "geometry"
    ]
  },
  {
    "id": 10848,
    "title": "Timofey and a tree",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "implementation",
      "tree",
      "union find"
    ]
  },
  {
    "id": 10849,
    "title": "Tree nesting",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "graph",
      "tree"
    ]
  },
  {
    "id": 10850,
    "title": "Radio stations",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 10851,
    "title": "Maximum path",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10852,
    "title": "Two strings",
    "difficulty": "hard",
    "category": [
      "binary search",
      "hash table",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 10853,
    "title": "USB vs. PS/2",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 10854,
    "title": "k-th divisor",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 10855,
    "title": "Dasha and Photos",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 10856,
    "title": "Dasha and Puzzle",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 10857,
    "title": "Dasha and Very Difficult Problem",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10858,
    "title": "Dasha and Password",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 10859,
    "title": "Dasha and friends",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10860,
    "title": "Dasha and Stairs",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10861,
    "title": "Frodo and pillows",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 10862,
    "title": "Petr and a calendar",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 10863,
    "title": "Geometrical Progression",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10864,
    "title": "Broken Tree",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 10865,
    "title": "Ability To Convert",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 10866,
    "title": "Unfair Poll",
    "difficulty": "medium",
    "category": [
      "binary search",
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10867,
    "title": "Blown Garland",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "number theory"
    ]
  },
  {
    "id": 10868,
    "title": "Holiday Of Equality",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 10869,
    "title": "Can Bash Save the Day?",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "graph",
      "tree"
    ]
  },
  {
    "id": 10870,
    "title": "Team Rocket Rises Again",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 10871,
    "title": "Bash Plays with Functions",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "number theory"
    ]
  },
  {
    "id": 10872,
    "title": "Felicity's Big Secret Revealed",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 10873,
    "title": "Felicity is Coming!",
    "difficulty": "hard",
    "category": [
      "data structures",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 10874,
    "title": "Bash's Big Day",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10875,
    "title": "Gotta Catch Em' All!",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10876,
    "title": "Long number",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory",
      "parsing"
    ]
  },
  {
    "id": 10877,
    "title": "Byteland coins",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 10878,
    "title": "Bacterial Melee",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "string suffix structures"
    ]
  },
  {
    "id": 10879,
    "title": "Nikita and stack",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 10880,
    "title": "Travel Card",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming"
    ]
  },
  {
    "id": 10881,
    "title": "Pavel and barbecue",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph traversal"
    ]
  },
  {
    "id": 10882,
    "title": "PolandBall and Many Other Balls",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "divide and conquer",
      "dynamic programming",
      "fast fourier transform",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10883,
    "title": "PolandBall and Gifts",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 10884,
    "title": "PolandBall and White-Red graph",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 10885,
    "title": "PolandBall and Polygon",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 10886,
    "title": "PolandBall and Forest",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "interactive",
      "tree",
      "union find"
    ]
  },
  {
    "id": 10887,
    "title": "PolandBall and Game",
    "difficulty": "easy",
    "category": [
      "binary search",
      "data structures",
      "game theory",
      "greedy",
      "sorting",
      "string"
    ]
  },
  {
    "id": 10888,
    "title": "PolandBall and Hypothesis",
    "difficulty": "easy",
    "category": [
      "brute force",
      "graph",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10889,
    "title": "Dasha and cyclic table",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "fast fourier transform",
      "string",
      "tree"
    ]
  },
  {
    "id": 10890,
    "title": "Fedor and coupons",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10891,
    "title": "Vladik and chat",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "dynamic programming",
      "implementation",
      "string"
    ]
  },
  {
    "id": 10892,
    "title": "Ilya and tic-tac-toe game",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10893,
    "title": "Lesha and array splitting",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10894,
    "title": "Interactive Bulls and Cows (Hard)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "interactive"
    ]
  },
  {
    "id": 10895,
    "title": "Interactive Bulls and Cows (Easy)",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 10896,
    "title": "Santa Claus and Candies",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 10897,
    "title": "New Year and Snowy Grid",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "interactive",
      "union find"
    ]
  },
  {
    "id": 10898,
    "title": "New Year and Binary Tree Paths",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 10899,
    "title": "New Year and Finding Roots",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation",
      "interactive",
      "tree"
    ]
  },
  {
    "id": 10900,
    "title": "New Year and Old Subsequence",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 10901,
    "title": "New Year and Fireworks",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 10902,
    "title": "New Year and Rating",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "math"
    ]
  },
  {
    "id": 10903,
    "title": "New Year and North Pole",
    "difficulty": "medium",
    "category": [
      "geometry",
      "implementation"
    ]
  },
  {
    "id": 10904,
    "title": "New Year and Hurry",
    "difficulty": "easy",
    "category": [
      "binary search",
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10905,
    "title": "Inversions After Shuffle",
    "difficulty": "hard",
    "category": [
      "data structures",
      "probability"
    ]
  },
  {
    "id": 10906,
    "title": "Leaving Auction",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 10907,
    "title": "Voting",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 10908,
    "title": "Parallelogram is Back",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "geometry"
    ]
  },
  {
    "id": 10909,
    "title": "Bachgold Problem",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10910,
    "title": "Santa Clauses and a Soccer Championship",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 10911,
    "title": "Santa Claus and Tangerines",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 10912,
    "title": "Santa Claus and a Palindrome",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 10913,
    "title": "Santa Claus and Robot",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 10914,
    "title": "Santa Claus and Keyboard Check",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 10915,
    "title": "Santa Claus and a Place in a Class",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 10916,
    "title": "Igor and Interesting Numbers",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 10917,
    "title": "Comments",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "implementation",
      "parsing",
      "string"
    ]
  },
  {
    "id": 10918,
    "title": "Winter Is Coming",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10919,
    "title": "Servers",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10920,
    "title": "Mammoth's Genome Decoding",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 10921,
    "title": "Display Size",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 10922,
    "title": "New Roads",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "tree"
    ]
  },
  {
    "id": 10923,
    "title": "Music in Car",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 10924,
    "title": "Numbers Exchange",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10925,
    "title": "Green and Black Tea",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 10926,
    "title": "Tram",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10927,
    "title": "Decoding",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 10928,
    "title": "Compote",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 10929,
    "title": "Hongcow Solves A Puzzle",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10930,
    "title": "Hongcow Learns the Cyclic Shift",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 10931,
    "title": "Hongcow Masters the Cyclic Shift",
    "difficulty": "hard",
    "category": [
      "string",
      "two pointers"
    ]
  },
  {
    "id": 10932,
    "title": "Hongcow Draws a Circle",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 10933,
    "title": "Hongcow Buys a Deck of Cards",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 10934,
    "title": "Hongcow's Game",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "divide and conquer",
      "interactive"
    ]
  },
  {
    "id": 10935,
    "title": "Hongcow Builds A Nation",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 10936,
    "title": "Vladik and cards",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 10937,
    "title": "Chloe and pleasant prizes",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 10938,
    "title": "Vladik and fractions",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10939,
    "title": "Chloe and the sequence ",
    "difficulty": "medium",
    "category": [
      "binary search",
      "bit manipulation",
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 10940,
    "title": "Vladik and flights",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10941,
    "title": "Arpa’s obvious problem and Mehrdad’s terrible solution",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10942,
    "title": "Arpa’s hard exam and Mehrdad’s naive cheat",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10943,
    "title": "Arpa’s abnormal DNA and Mehrdad’s deep interest",
    "difficulty": "hard",
    "category": [
      "data structures",
      "string suffix structures"
    ]
  },
  {
    "id": 10944,
    "title": "Arpa’s letter-marked tree and Mehrdad’s Dokhtar-kosh paths",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 10945,
    "title": "Arpa’s overnight party and Mehrdad’s silent entering",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 10946,
    "title": "Arpa's weak amphitheater and Mehrdad's valuable Hoses",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 10947,
    "title": "Arpa's loud Owf and Mehrdad's evil plan",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 10948,
    "title": "Alyona and flowers",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 10949,
    "title": "Alyona and copybooks",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 10950,
    "title": "Gosha is hunting",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "math",
      "max flow",
      "probability",
      "sorting"
    ]
  },
  {
    "id": 10951,
    "title": "Recover a functional graph",
    "difficulty": "hard",
    "category": [
      "graph matching"
    ]
  },
  {
    "id": 10952,
    "title": "Alyona and towers",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 10953,
    "title": "Alyona and a tree",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 10954,
    "title": "Alyona and mex",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 10955,
    "title": "Dirty plates",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 10956,
    "title": "Tanya is 5!",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph matching",
      "greedy",
      "scheduling"
    ]
  },
  {
    "id": 10957,
    "title": "Chess Championship",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "max flow"
    ]
  },
  {
    "id": 10958,
    "title": "Permutations",
    "difficulty": "hard",
    "category": [
      "math",
      "matrix"
    ]
  },
  {
    "id": 10959,
    "title": "Ostap and Tree",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 10960,
    "title": "Taxes",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 10961,
    "title": "Tennis Championship",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 10962,
    "title": "Urbanization",
    "difficulty": "easy",
    "category": [
      "greedy",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 10963,
    "title": "Ostap and Grasshopper",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 10964,
    "title": "Anton and School",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10965,
    "title": "Anton and Tree",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 10966,
    "title": "Anton and Chess",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10967,
    "title": "Anton and Making Potions",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 10968,
    "title": "Anton and Digits",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10969,
    "title": "Anton and Danik",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 10970,
    "title": "Drivers Dissatisfaction",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "tree",
      "union find"
    ]
  },
  {
    "id": 10971,
    "title": "Sleep in Class",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 10972,
    "title": "Kostya the Sculptor",
    "difficulty": "medium",
    "category": [
      "data structures",
      "hash table"
    ]
  },
  {
    "id": 10973,
    "title": "Epidemic in Monstropolis",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 10974,
    "title": "Parade",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 10975,
    "title": "Grasshopper And the String",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10976,
    "title": "Tourist Reform",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 10977,
    "title": "Sockets",
    "difficulty": "hard",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10978,
    "title": "Exams",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10979,
    "title": "Sanatorium",
    "difficulty": "medium",
    "category": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10980,
    "title": "Cormen --- The Best Friend Of a Man",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 10981,
    "title": "Buy a Shovel",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10982,
    "title": "Video Cards",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 10983,
    "title": "Funny Game",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory"
    ]
  },
  {
    "id": 10984,
    "title": "80-th Level Archeology",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 10985,
    "title": "Socks",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 10986,
    "title": "Coupons and Discounts",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 10987,
    "title": "Night at the Museum",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 10988,
    "title": "Expression Queries",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 10989,
    "title": "Roads Orientation Problem",
    "difficulty": "hard",
    "category": [
      "graph"
    ]
  },
  {
    "id": 10990,
    "title": "Bottles",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 10991,
    "title": "Olympiad in Programming and Sports",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "greedy",
      "max flow"
    ]
  },
  {
    "id": 10992,
    "title": "Delete Them",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 10993,
    "title": "Car Repair Shop",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 10994,
    "title": "Ber Patio",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 10995,
    "title": "Award Ceremony",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 10996,
    "title": "Running Over The Bridges",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 10997,
    "title": "Bulmart",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph traversal"
    ]
  },
  {
    "id": 10998,
    "title": "Minimum and Maximum",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "interactive"
    ]
  },
  {
    "id": 10999,
    "title": "Toda 2",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 11000,
    "title": "Financiers Game",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 11001,
    "title": "Subordinates",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "graph",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 11002,
    "title": "Sea Battle",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 11003,
    "title": "Road to Cinema",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 11004,
    "title": "Spotlights",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 11005,
    "title": "Interview with Oleg",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 11006,
    "title": "Polycarp's problems",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 11007,
    "title": "Games on a CD",
    "difficulty": "hard",
    "category": [
      "data structures",
      "hash table",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 11008,
    "title": "T-shirts Distribution",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "max flow"
    ]
  },
  {
    "id": 11009,
    "title": "Guess the Array",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "interactive",
      "math"
    ]
  },
  {
    "id": 11010,
    "title": "Bill Total Value",
    "difficulty": "medium",
    "category": [
      "implementation",
      "parsing",
      "string"
    ]
  },
  {
    "id": 11011,
    "title": "Transformation: from A to B",
    "difficulty": "easy",
    "category": [
      "brute force",
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 11012,
    "title": "Messages on a Tree",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 11013,
    "title": "Family Photos",
    "difficulty": "hard",
    "category": [
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 11014,
    "title": "Too Much Money",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 11015,
    "title": "Contest Balloons",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 11016,
    "title": "Hidden Word",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation",
      "string"
    ]
  },
  {
    "id": 11017,
    "title": "Food on the Plane",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11018,
    "title": "Jumping Ball",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11019,
    "title": "Xor-matic Number of the Graph",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "graph",
      "math",
      "number theory",
      "tree"
    ]
  },
  {
    "id": 11020,
    "title": "Uniformly Branched Trees",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 11021,
    "title": "Goods transportation",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "max flow"
    ]
  },
  {
    "id": 11022,
    "title": "Dense Subsequence",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "string"
    ]
  },
  {
    "id": 11023,
    "title": "Ray Tracing",
    "difficulty": "medium",
    "category": [
      "greedy",
      "hash table",
      "implementation",
      "math",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 11024,
    "title": "Batch Sort",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11025,
    "title": "Checking the Calendar",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11026,
    "title": "st-Spanning Tree",
    "difficulty": "hard",
    "category": [
      "graph",
      "greedy",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 11027,
    "title": "One-Way Reform",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy",
      "max flow"
    ]
  },
  {
    "id": 11028,
    "title": "Lakes in Berland",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 11029,
    "title": "Polycarp at the Radio",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 11030,
    "title": "Text Document Analysis",
    "difficulty": "easy",
    "category": [
      "implementation",
      "parsing",
      "string"
    ]
  },
  {
    "id": 11031,
    "title": "The New Year: Meeting Friends",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 11032,
    "title": "Cyclic Cipher",
    "difficulty": "hard",
    "category": [
      "chinese remainder theorem",
      "data structures",
      "implementation",
      "number theory",
      "two pointers"
    ]
  },
  {
    "id": 11033,
    "title": "Research Rover",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 11034,
    "title": "Generating Sets",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph traversal",
      "greedy",
      "string",
      "tree"
    ]
  },
  {
    "id": 11035,
    "title": "Destroying Array",
    "difficulty": "medium",
    "category": [
      "data structures",
      "union find"
    ]
  },
  {
    "id": 11036,
    "title": "Verse Pattern",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 11037,
    "title": "Broken Clock",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 11038,
    "title": "Road to Home",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming"
    ]
  },
  {
    "id": 11039,
    "title": "Maxim and Array",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "math"
    ]
  },
  {
    "id": 11040,
    "title": "Journey",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph"
    ]
  },
  {
    "id": 11041,
    "title": "Passwords",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math",
      "sorting",
      "string"
    ]
  },
  {
    "id": 11042,
    "title": "One-dimensional Japanese Crossword",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11043,
    "title": "Array Covering",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 11044,
    "title": "Cipher",
    "difficulty": "hard",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11045,
    "title": "Slalom",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 11046,
    "title": "Homework",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 11047,
    "title": "Cactusophobia",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "max flow"
    ]
  },
  {
    "id": 11048,
    "title": "Closing ceremony",
    "difficulty": "hard",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 11049,
    "title": "Anatoly and Cockroaches",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 11050,
    "title": "Vitya in the Countryside",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11051,
    "title": "Matvey's Birthday",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "graph"
    ]
  },
  {
    "id": 11052,
    "title": "Andrew and Chemistry",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 11053,
    "title": "Sasha and Array",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math",
      "matrix"
    ]
  },
  {
    "id": 11054,
    "title": "Efim and Strange Grade",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11055,
    "title": "Cowboy Beblop at his computer",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 11056,
    "title": "Pokermon League challenge",
    "difficulty": "hard",
    "category": [
      "math",
      "probability"
    ]
  },
  {
    "id": 11057,
    "title": "Underfail",
    "difficulty": "hard",
    "category": [
      "max flow"
    ]
  },
  {
    "id": 11058,
    "title": "Heroes of Making Magic III",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 11059,
    "title": "Paint it really, really dark gray",
    "difficulty": "hard",
    "category": [
      "graph traversal"
    ]
  },
  {
    "id": 11060,
    "title": "Dexterina’s Lab",
    "difficulty": "hard",
    "category": [
      "game theory",
      "matrix",
      "probability"
    ]
  },
  {
    "id": 11061,
    "title": "Potions Homework",
    "difficulty": "medium",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 11062,
    "title": "R3D3’s Summer Adventure",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 11063,
    "title": "Festival Organization",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11064,
    "title": "Complete the Word",
    "difficulty": "medium",
    "category": [
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 11065,
    "title": "Crazy Computer",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11066,
    "title": "Complete the Permutations",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "fast fourier transform",
      "graph",
      "math"
    ]
  },
  {
    "id": 11067,
    "title": "Create a Maze",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 11068,
    "title": "Digit Tree",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 11069,
    "title": "Complete The Graph",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 11070,
    "title": "Plus and Square Root",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 11071,
    "title": "Filya and Homework",
    "difficulty": "medium",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 11072,
    "title": "Meeting of Old Friends",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11073,
    "title": "Sonya Partymaker",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming"
    ]
  },
  {
    "id": 11074,
    "title": "Animals and Puzzle",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 11075,
    "title": "Sonya and Problem Wihtout a Legend",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 11076,
    "title": "Searching Rectangles",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "interactive"
    ]
  },
  {
    "id": 11077,
    "title": "Sonya and Queries",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 11078,
    "title": "Memory and Casinos",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math",
      "probability"
    ]
  },
  {
    "id": 11079,
    "title": "Memory and Scores",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 11080,
    "title": "Memory and De-Evolution",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 11081,
    "title": "Memory and Trident",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 11082,
    "title": "Memory and Crow",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11083,
    "title": "ZS and The Birthday Paradox",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory",
      "probability"
    ]
  },
  {
    "id": 11084,
    "title": "Directed Roads",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "graph",
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 11085,
    "title": "Coloring Trees",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 11086,
    "title": "Chris and Magic Square",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 11087,
    "title": "Bus to Udayland",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 11088,
    "title": "String Set Queries",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "hash table",
      "interactive",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 11089,
    "title": "Generate a String",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal"
    ]
  },
  {
    "id": 11090,
    "title": "Two Arithmetic Progressions",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 11091,
    "title": "Magic Odd Square",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 11092,
    "title": "Optimal Point on a Line",
    "difficulty": "medium",
    "category": [
      "brute force",
      "sorting"
    ]
  },
  {
    "id": 11093,
    "title": "King Moves",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11094,
    "title": "Checkpoints",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 11095,
    "title": "Juicer",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11096,
    "title": "Student's Camp",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 11097,
    "title": "Incorrect Flow",
    "difficulty": "hard",
    "category": [
      "max flow"
    ]
  },
  {
    "id": 11098,
    "title": "Centroids",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 11099,
    "title": "Recover the String",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11100,
    "title": "Letters Cyclic Shift",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 11101,
    "title": "Garlands",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 11102,
    "title": "Persistent Bookcase ",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 11103,
    "title": "Pythagorean Triples",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 11104,
    "title": "Bakery",
    "difficulty": "medium",
    "category": [
      "graph"
    ]
  },
  {
    "id": 11105,
    "title": "Brain's Photos",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11106,
    "title": "Working routine",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 11107,
    "title": "Vasiliy's Multiset",
    "difficulty": "medium",
    "category": [
      "binary search",
      "bit manipulation",
      "data structures",
      "tree"
    ]
  },
  {
    "id": 11108,
    "title": "Hard problem",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 11109,
    "title": "Interesting drink",
    "difficulty": "easy",
    "category": [
      "binary search",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 11110,
    "title": "Beru-taxi",
    "difficulty": "easy",
    "category": [
      "brute force",
      "geometry",
      "implementation"
    ]
  },
  {
    "id": 11111,
    "title": "Spider Man",
    "difficulty": "easy",
    "category": [
      "game theory",
      "math"
    ]
  },
  {
    "id": 11112,
    "title": "Hulk",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11113,
    "title": "Iron Man",
    "difficulty": "hard",
    "category": [
      "data structures",
      "geometry",
      "tree"
    ]
  },
  {
    "id": 11114,
    "title": "Captain America",
    "difficulty": "hard",
    "category": [
      "greedy",
      "max flow"
    ]
  },
  {
    "id": 11115,
    "title": "Black Widow",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11116,
    "title": "Ant Man",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "greedy"
    ]
  },
  {
    "id": 11117,
    "title": "Thor",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 11118,
    "title": "Mishka and Divisors",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "number theory"
    ]
  },
  {
    "id": 11119,
    "title": "Mishka and Interesting sum",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 11120,
    "title": "Chris and Road",
    "difficulty": "hard",
    "category": [
      "geometry",
      "implementation"
    ]
  },
  {
    "id": 11121,
    "title": "Mishka and trip",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11122,
    "title": "Mishka and Game",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11123,
    "title": "T-Shirts",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 11124,
    "title": "Analysis of Pathes in Functional Graph",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph"
    ]
  },
  {
    "id": 11125,
    "title": "Road to Post Office",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 11126,
    "title": "Cellular Network",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 11127,
    "title": "Powers of Two",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11128,
    "title": "Maximum Increase",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 11129,
    "title": "They Are Everywhere",
    "difficulty": "medium",
    "category": [
      "binary search",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 11130,
    "title": "Cells Not Under Attack",
    "difficulty": "medium",
    "category": [
      "data structures",
      "math"
    ]
  },
  {
    "id": 11131,
    "title": "Cards",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 11132,
    "title": "Cool Slogans",
    "difficulty": "hard",
    "category": [
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 11133,
    "title": "Huffman Coding on Segment",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 11134,
    "title": "Break Up",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 11135,
    "title": "Connecting Universities",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 11136,
    "title": "As Fast As Possible",
    "difficulty": "hard",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 11137,
    "title": "One Bomb",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11138,
    "title": "Launch of Collider",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11139,
    "title": "Coprime Permutation",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "number theory"
    ]
  },
  {
    "id": 11140,
    "title": "Cron",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 11141,
    "title": "Limak and Shooting Points",
    "difficulty": "hard",
    "category": [
      "brute force",
      "geometry",
      "math"
    ]
  },
  {
    "id": 11142,
    "title": "LRU",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 11143,
    "title": "Fix a Tree",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 11144,
    "title": "Vacations",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 11145,
    "title": "Barnicle",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "math",
      "string"
    ]
  },
  {
    "id": 11146,
    "title": "Pineapple Incident",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11147,
    "title": "...Dary!",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry",
      "two pointers"
    ]
  },
  {
    "id": 11148,
    "title": "...Wait for it...",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree",
      "union find"
    ]
  },
  {
    "id": 11149,
    "title": "Legen...",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "matrix",
      "string"
    ]
  },
  {
    "id": 11150,
    "title": "PLEASE",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "implementation",
      "math",
      "matrix"
    ]
  },
  {
    "id": 11151,
    "title": "Puzzles",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "math",
      "probability",
      "tree"
    ]
  },
  {
    "id": 11152,
    "title": "Lorenzo Von Matterhorn",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 11153,
    "title": "Couple Cover",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "number theory"
    ]
  },
  {
    "id": 11154,
    "title": "Xor-sequences",
    "difficulty": "hard",
    "category": [
      "matrix"
    ]
  },
  {
    "id": 11155,
    "title": "Swaps in Permutation",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "math",
      "union find"
    ]
  },
  {
    "id": 11156,
    "title": "Exponential notation",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 11157,
    "title": "s-palindrome",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 11158,
    "title": "Fashion in Berland",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11159,
    "title": "Tree of Life (hard)",
    "difficulty": "hard",
    "category": [
      "tree"
    ]
  },
  {
    "id": 11160,
    "title": "Tree of Life (medium)",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "hash table",
      "tree"
    ]
  },
  {
    "id": 11161,
    "title": "Tree of Life (easy)",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 11162,
    "title": "Photographs (II)",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 11163,
    "title": "Photographs (I)",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 11164,
    "title": "The Wall (hard)",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 11165,
    "title": "The Wall (medium)",
    "difficulty": "medium",
    "category": [
      "combinatorics"
    ]
  },
  {
    "id": 11166,
    "title": "The Wall (easy)",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 11167,
    "title": "Brain Network (hard)",
    "difficulty": "hard",
    "category": [
      "tree"
    ]
  },
  {
    "id": 11168,
    "title": "Brain Network (medium)",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 11169,
    "title": "Brain Network (easy)",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 11170,
    "title": "Recover Polygon (hard)",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 11171,
    "title": "Recover Polygon (medium)",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 11172,
    "title": "Recover Polygon (easy)",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 11173,
    "title": "Collective Mindsets (hard)",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 11174,
    "title": "Collective Mindsets (medium)",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 11175,
    "title": "Collective Mindsets (easy)",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 11176,
    "title": "Mike and Geometry Problem",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "dynamic programming",
      "geometry",
      "implementation"
    ]
  },
  {
    "id": 11177,
    "title": "Friends and Subsequences",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 11178,
    "title": "Mike and Chocolate Thieves",
    "difficulty": "medium",
    "category": [
      "binary search",
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 11179,
    "title": "Mike and Shortcuts",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 11180,
    "title": "Mike and Cellphone",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 11181,
    "title": "Lovely Palindromes",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 11182,
    "title": "Opponents",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11183,
    "title": "TOF",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 11184,
    "title": "Dividing Kingdom II",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "graph",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 11185,
    "title": "The Values You Can Make",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 11186,
    "title": "Remainders Game",
    "difficulty": "medium",
    "category": [
      "chinese remainder theorem",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11187,
    "title": "NP-Hard Problem",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 11188,
    "title": "Little Robber Girl's Zoo",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 11189,
    "title": "Free Ice Cream",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 11190,
    "title": "Travelling Through the Snow Queen's Kingdom",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "divide and conquer",
      "graph"
    ]
  },
  {
    "id": 11191,
    "title": "Kay and Eternity",
    "difficulty": "hard",
    "category": [
      "brute force",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 11192,
    "title": "Optimal Point",
    "difficulty": "hard",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 11193,
    "title": "Kay and Snowflake",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 11194,
    "title": "Robbers' watch",
    "difficulty": "medium",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 11195,
    "title": "The Hero with Bombs",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11196,
    "title": "Loader",
    "difficulty": "hard",
    "category": [
      "graph",
      "special problem"
    ]
  },
  {
    "id": 11197,
    "title": "Exchange of Books",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11198,
    "title": "The Fraction",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11199,
    "title": "Reformat the String",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11200,
    "title": "Hammer throwing",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11201,
    "title": "Chocolate Bar",
    "difficulty": "medium",
    "category": [
      "math",
      "special problem"
    ]
  },
  {
    "id": 11202,
    "title": "Symmetric Difference",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11203,
    "title": "The Teacher of Physical Education",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11204,
    "title": "The Check of the Point",
    "difficulty": "medium",
    "category": [
      "geometry",
      "special problem"
    ]
  },
  {
    "id": 11205,
    "title": "Alyona and Triangles",
    "difficulty": "hard",
    "category": [
      "geometry",
      "two pointers"
    ]
  },
  {
    "id": 11206,
    "title": "Alyona and Strings",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 11207,
    "title": "Alyona and the Tree",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 11208,
    "title": "Alyona and Mex",
    "difficulty": "medium",
    "category": [
      "sorting"
    ]
  },
  {
    "id": 11209,
    "title": "Alyona and Numbers",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11210,
    "title": "Runaway to a Shadow",
    "difficulty": "hard",
    "category": [
      "geometry",
      "sorting"
    ]
  },
  {
    "id": 11211,
    "title": "Gifts by the List",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 11212,
    "title": "Heap Operations",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 11213,
    "title": "Economy Game",
    "difficulty": "medium",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 11214,
    "title": "A Good Contest",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11215,
    "title": "Bear and Finding Criminals",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 11216,
    "title": "Bear and Five Cards",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 11217,
    "title": "Bear and Bad Powers of 42",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 11218,
    "title": "Bear and Chase",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph",
      "graph traversal",
      "implementation",
      "math",
      "probability"
    ]
  },
  {
    "id": 11219,
    "title": "Bear and Square Grid",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 11220,
    "title": "Bear and Tower of Cubes",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 11221,
    "title": "Bear and Prime 100",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "interactive",
      "math"
    ]
  },
  {
    "id": 11222,
    "title": "Lena and Queries",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "geometry"
    ]
  },
  {
    "id": 11223,
    "title": "Another Sith Tournament",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 11224,
    "title": "Iterated Linear Function",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 11225,
    "title": "Joty and Chocolate",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11226,
    "title": "The Same Calendar",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11227,
    "title": "Johny Likes Numbers",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11228,
    "title": "Vanya and Balloons",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 11229,
    "title": "Vanya and Treasure",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 11230,
    "title": "Vanya and Label",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "combinatorics",
      "implementation",
      "string"
    ]
  },
  {
    "id": 11231,
    "title": "Vanya and Food Processor",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11232,
    "title": "Vanya and Fence",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11233,
    "title": "The Last Fight Between Human and AI",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 11234,
    "title": "Theseus and labyrinth",
    "difficulty": "hard",
    "category": [
      "graph",
      "implementation",
      "shortest path"
    ]
  },
  {
    "id": 11235,
    "title": "Vasya and String",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 11236,
    "title": "Pyramid of Glasses",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11237,
    "title": "Nicholas and Permutation",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 11238,
    "title": "Trains and Statistic",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 11239,
    "title": "Tree Construction",
    "difficulty": "medium",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 11240,
    "title": "Money Transfers",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 11241,
    "title": "Restoring Painting",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 11242,
    "title": "Infinite Sequence",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 11243,
    "title": "Problems for Round",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 11244,
    "title": "Bear and Game",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11245,
    "title": "Different is Good",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation",
      "string"
    ]
  },
  {
    "id": 11246,
    "title": "Summer Camp",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11247,
    "title": "Organizing a Race",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 11248,
    "title": "Roads in Yusland",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 11249,
    "title": "Ultimate Weirdness of an Array",
    "difficulty": "hard",
    "category": [
      "data structures",
      "number theory"
    ]
  },
  {
    "id": 11250,
    "title": "Robin Hood",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 11251,
    "title": "Recycling Bottles",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "geometry",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 11252,
    "title": "Restore a Number",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "string"
    ]
  },
  {
    "id": 11253,
    "title": "Correct Bracket Sequence Editor",
    "difficulty": "medium",
    "category": [
      "data structures",
      "string",
      "union find"
    ]
  },
  {
    "id": 11254,
    "title": "Magic Powder - 2",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation"
    ]
  },
  {
    "id": 11255,
    "title": "Magic Powder - 1",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 11256,
    "title": "Cinema",
    "difficulty": "medium",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 11257,
    "title": "Game of Robots",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11258,
    "title": "Holidays",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 11259,
    "title": "Little Artem and Presents",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 11260,
    "title": "Coat of Anticubism",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "geometry"
    ]
  },
  {
    "id": 11261,
    "title": "Pouring Rain",
    "difficulty": "easy",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 11262,
    "title": "Forensic Examination",
    "difficulty": "hard",
    "category": [
      "data structures",
      "string suffix structures"
    ]
  },
  {
    "id": 11263,
    "title": "Chain Reaction",
    "difficulty": "hard",
    "category": [
      "brute force",
      "geometry"
    ]
  },
  {
    "id": 11264,
    "title": "Codeword",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "string"
    ]
  },
  {
    "id": 11265,
    "title": "World Tour",
    "difficulty": "hard",
    "category": [
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 11266,
    "title": "Reberland Linguistics",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation",
      "string"
    ]
  },
  {
    "id": 11267,
    "title": "Four Divisors",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "math",
      "number theory",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 11268,
    "title": "Beautiful Subarrays",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "string",
      "tree"
    ]
  },
  {
    "id": 11269,
    "title": "Simple Subset",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 11270,
    "title": "Simple Strings",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "string"
    ]
  },
  {
    "id": 11271,
    "title": "Shopping",
    "difficulty": "medium",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 11272,
    "title": "Buses Between Cities",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11273,
    "title": "Complicated GCD",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 11274,
    "title": "Rebus",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "parsing"
    ]
  },
  {
    "id": 11275,
    "title": "To Hack or not to Hack",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 11276,
    "title": "International Olympiad",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11277,
    "title": "Binary Table",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "divide and conquer",
      "dynamic programming",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 11278,
    "title": "Graph Coloring",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 11279,
    "title": "Gambling Nim",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "math",
      "matrix",
      "probability"
    ]
  },
  {
    "id": 11280,
    "title": "Rotate Matrix",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11281,
    "title": "Hungarian Notation",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11282,
    "title": "Primes in Interval",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11283,
    "title": "Divisibility Check",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11284,
    "title": "Maximal Difference",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11285,
    "title": "Array Sum",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11286,
    "title": "Seasons",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11287,
    "title": "Lazy Caterer Sequence",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11288,
    "title": "Bear and Bowling 4",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "divide and conquer",
      "geometry",
      "ternary search"
    ]
  },
  {
    "id": 11289,
    "title": "Different Subsets For All Tuples",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 11290,
    "title": "Number of Parallelograms",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 11291,
    "title": "Hard Process",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 11292,
    "title": "Seating On Bus",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11293,
    "title": "Co-prime Array",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11294,
    "title": "Fence Divercity",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "number theory"
    ]
  },
  {
    "id": 11295,
    "title": "Polycarp and Hay",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 11296,
    "title": "New Reform",
    "difficulty": "medium",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 11297,
    "title": "Bicycle Race",
    "difficulty": "medium",
    "category": [
      "geometry",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11298,
    "title": "Tanya and Toys",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 11299,
    "title": "Qualifying Contest",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "sorting"
    ]
  },
  {
    "id": 11300,
    "title": "Round House",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11301,
    "title": "Bear and Reverse Radewoosh",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11302,
    "title": "You're a Professional",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11303,
    "title": "Ace It!",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11304,
    "title": "Out of Controls",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11305,
    "title": "Rosetta Problem",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11306,
    "title": "Without Text",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11307,
    "title": "Scrambled",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 11308,
    "title": "Da Vinci Powers",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11309,
    "title": "Move by Prime",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11310,
    "title": "Paper task",
    "difficulty": "hard",
    "category": [
      "data structures",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 11311,
    "title": "Bear and Forgotten Tree 2",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 11312,
    "title": "Delivery Bears",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph",
      "max flow"
    ]
  },
  {
    "id": 11313,
    "title": "Bear and Up-Down",
    "difficulty": "hard",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 11314,
    "title": "Bear and Compressing",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "graph traversal",
      "string"
    ]
  },
  {
    "id": 11315,
    "title": "Bear and Three Balls",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 11316,
    "title": "Ants on a Circle",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 11317,
    "title": "Pursuit For Artifacts",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 11318,
    "title": "Nested Segments",
    "difficulty": "medium",
    "category": [
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 11319,
    "title": "Foe Pairs",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 11320,
    "title": "z-sort",
    "difficulty": "easy",
    "category": [
      "sorting"
    ]
  },
  {
    "id": 11321,
    "title": "Gabriel and Caterpillar",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11322,
    "title": "Beautiful Paintings",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 11323,
    "title": "Joysticks",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11324,
    "title": "Clockwork Bomb",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "greedy",
      "tree",
      "union find"
    ]
  },
  {
    "id": 11325,
    "title": "Zip-line",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "hash table"
    ]
  },
  {
    "id": 11326,
    "title": "Table Compression",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 11327,
    "title": "Image Preview",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 11328,
    "title": "Watchmen",
    "difficulty": "medium",
    "category": [
      "data structures",
      "geometry",
      "math"
    ]
  },
  {
    "id": 11329,
    "title": "Автобус",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 11330,
    "title": "Дефрагментация памяти",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 11331,
    "title": "Печать условий",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 11332,
    "title": "Этажи",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 11333,
    "title": "Любимые числа Поликарпа",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 11334,
    "title": "Собери число",
    "difficulty": "hard",
    "category": [
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 11335,
    "title": "Собачки и миски",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 11336,
    "title": "Путь Робота",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 11337,
    "title": "Собери стол",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "sorting"
    ]
  },
  {
    "id": 11338,
    "title": "Наибольший подъем",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 11339,
    "title": "Armistice Area Apportionment",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry"
    ]
  },
  {
    "id": 11340,
    "title": "Cowslip Collections",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11341,
    "title": "Intellectual Inquiry",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "string"
    ]
  },
  {
    "id": 11342,
    "title": "Robot Rapping Results Report",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "graph"
    ]
  },
  {
    "id": 11343,
    "title": "Enduring Exodus",
    "difficulty": "medium",
    "category": [
      "binary search",
      "two pointers"
    ]
  },
  {
    "id": 11344,
    "title": "Mischievous Mess Makers",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 11345,
    "title": "Amity Assessment",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 11346,
    "title": "Hostname Aliases",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "implementation",
      "sorting",
      "special problem",
      "string"
    ]
  },
  {
    "id": 11347,
    "title": "Processing Queries",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "special problem",
      "two pointers"
    ]
  },
  {
    "id": 11348,
    "title": "Parliament of Berland",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "special problem"
    ]
  },
  {
    "id": 11349,
    "title": "Choosing Ads",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 11350,
    "title": "Bears and Juice",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "meet in the middle"
    ]
  },
  {
    "id": 11351,
    "title": "Bear and Destroying Subtrees",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "probability",
      "tree"
    ]
  },
  {
    "id": 11352,
    "title": "Bearish Fanpages",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 11353,
    "title": "Levels and Regions",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 11354,
    "title": "Bear and Two Paths",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph"
    ]
  },
  {
    "id": 11355,
    "title": "Bear and Colors",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11356,
    "title": "Little Artem and Graph",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 11357,
    "title": "Little Artem and 2-SAT",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 11358,
    "title": "Little Artem and Time Machine",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 11359,
    "title": "Little Artem and Random Variable",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "implementation",
      "math",
      "probability"
    ]
  },
  {
    "id": 11360,
    "title": "Little Artem and Dance",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 11361,
    "title": "Little Artem and Matrix",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11362,
    "title": "Little Artem and Grasshopper",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11363,
    "title": "Bear and Chemistry",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 11364,
    "title": "Bear and Paradox",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 11365,
    "title": "Bear and Contribution",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 11366,
    "title": "Bear and Polynomials",
    "difficulty": "hard",
    "category": [
      "hash table",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11367,
    "title": "Bear and Forgotten Tree 3",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "tree"
    ]
  },
  {
    "id": 11368,
    "title": "Bear and Displayed Friends",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11369,
    "title": "Three-dimensional Turtle Super Computer ",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 11370,
    "title": "Road Improvement",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "special problem",
      "tree"
    ]
  },
  {
    "id": 11371,
    "title": "Making Genome in Berland",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "special problem",
      "string"
    ]
  },
  {
    "id": 11372,
    "title": "Home Numbers",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math",
      "special problem"
    ]
  },
  {
    "id": 11373,
    "title": "Running with Obstacles",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 11374,
    "title": "Promocodes with Mistakes",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 11375,
    "title": "Chat Order",
    "difficulty": "medium",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "sorting",
      "special problem"
    ]
  },
  {
    "id": 11376,
    "title": "Voting for Photos",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 11377,
    "title": "Orchestra",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 11378,
    "title": "Island Puzzle",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 11379,
    "title": "Fibonacci-ish II",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 11380,
    "title": "Yash And Trees",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "graph traversal",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11381,
    "title": "The Chocolate Spree",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 11382,
    "title": "Startup Funding",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "probability",
      "two pointers"
    ]
  },
  {
    "id": 11383,
    "title": "Fibonacci-ish",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "hash table",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11384,
    "title": "Spy Syndrome 2",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "hash table",
      "implementation",
      "sorting",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 11385,
    "title": "A Trivial Problem",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11386,
    "title": "Ebony and Ivory",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11387,
    "title": "Magic Matrix",
    "difficulty": "hard",
    "category": [
      "brute force",
      "divide and conquer",
      "graph",
      "matrix",
      "tree"
    ]
  },
  {
    "id": 11388,
    "title": "Thief in a Shop",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "dynamic programming",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 11389,
    "title": "Longest Subsequence",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11390,
    "title": "The Smallest String Concatenation",
    "difficulty": "medium",
    "category": [
      "sorting",
      "string"
    ]
  },
  {
    "id": 11391,
    "title": "Alice, Bob, Two Teams",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms"
    ]
  },
  {
    "id": 11392,
    "title": "Grandma Laura and Apples",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 11393,
    "title": "Product Sum",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "geometry"
    ]
  },
  {
    "id": 11394,
    "title": "Messenger",
    "difficulty": "hard",
    "category": [
      "data structures",
      "hash table",
      "implementation",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 11395,
    "title": "Report",
    "difficulty": "medium",
    "category": [
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 11396,
    "title": "Print Check",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 11397,
    "title": "Interview",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 11398,
    "title": "Game",
    "difficulty": "medium",
    "category": [
      "game theory",
      "math"
    ]
  },
  {
    "id": 11399,
    "title": "Pyramids",
    "difficulty": "medium",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 11400,
    "title": "Area of a Star",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 11401,
    "title": "Arrow",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 11402,
    "title": "Forecast",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 11403,
    "title": "Turn",
    "difficulty": "medium",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 11404,
    "title": "Cracking the Code",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11405,
    "title": "Indivisibility",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 11406,
    "title": "Divisibility",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 11407,
    "title": "Parking Lot",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 11408,
    "title": "Benches",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 11409,
    "title": "Challenge Pennants",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 11410,
    "title": "Selection of Personnel",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 11411,
    "title": "A rectangle",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 11412,
    "title": "Hexagons!",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 11413,
    "title": "Lucky Numbers",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 11414,
    "title": "Moore's Law",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 11415,
    "title": "Again Twenty Five!",
    "difficulty": "easy",
    "category": [
      "number theory"
    ]
  },
  {
    "id": 11416,
    "title": "Famil Door and Roads",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "dynamic programming",
      "graph traversal",
      "probability",
      "tree"
    ]
  },
  {
    "id": 11417,
    "title": "Babaei and Birthday Cake",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 11418,
    "title": "Famil Door and Brackets",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 11419,
    "title": "Far Relative’s Problem",
    "difficulty": "easy",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 11420,
    "title": "Far Relative’s Birthday Cake",
    "difficulty": "easy",
    "category": [
      "brute force",
      "combinatorics",
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 11421,
    "title": "Bear and Fair Set",
    "difficulty": "hard",
    "category": [
      "graph",
      "max flow"
    ]
  },
  {
    "id": 11422,
    "title": "Zbazi in Zeydabad",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 11423,
    "title": "Magic Numbers",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 11424,
    "title": "Bear and String Distance",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 11425,
    "title": "New Skateboard",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 11426,
    "title": "Tennis Tournament",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11427,
    "title": "Island Puzzle",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 11428,
    "title": "Orchestra",
    "difficulty": "hard",
    "category": [
      "two pointers"
    ]
  },
  {
    "id": 11429,
    "title": "Preorder Test",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 11430,
    "title": "Package Delivery",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "greedy"
    ]
  },
  {
    "id": 11431,
    "title": "Factory Repairs",
    "difficulty": "medium",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 11432,
    "title": "XOR Equation",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 11433,
    "title": "Raffles",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 11434,
    "title": "Group Projects",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 11435,
    "title": "Simple Skewness",
    "difficulty": "hard",
    "category": [
      "binary search",
      "math",
      "ternary search"
    ]
  },
  {
    "id": 11436,
    "title": "Jerry's Protest",
    "difficulty": "medium",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming",
      "probability"
    ]
  },
  {
    "id": 11437,
    "title": "Block Towers",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11438,
    "title": "Cards",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 11439,
    "title": "Robot Sequence",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 11440,
    "title": "Frog Fights",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 11441,
    "title": "Finals in arithmetic",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11442,
    "title": "K-special Tables",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 11443,
    "title": "War of the Corporations",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "string"
    ]
  },
  {
    "id": 11444,
    "title": "Guest From the Past",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11445,
    "title": "Making a String",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 11446,
    "title": "Save Luke",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 11447,
    "title": "Transforming Sequence",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 11448,
    "title": "Birthday",
    "difficulty": "hard",
    "category": [
      "greedy",
      "math",
      "probability"
    ]
  },
  {
    "id": 11449,
    "title": "Electric Charges",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming"
    ]
  },
  {
    "id": 11450,
    "title": "Array GCD",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 11451,
    "title": "Graph and String",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph"
    ]
  },
  {
    "id": 11452,
    "title": "The Sum of the k-th Powers",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 11453,
    "title": "Ants in Leaves",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "greedy",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 11454,
    "title": "Optimal Number Permutation",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 11455,
    "title": "Not Equal on a Segment",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 11456,
    "title": "The Time",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11457,
    "title": "Infinite Sequence",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11458,
    "title": "Wet Shark and Blocks",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 11459,
    "title": "Rat Kwesh and Cheese",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 11460,
    "title": "Wet Shark and Flowers",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math",
      "number theory",
      "probability"
    ]
  },
  {
    "id": 11461,
    "title": "Wet Shark and Bishops",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "implementation"
    ]
  },
  {
    "id": 11462,
    "title": "Wet Shark and Odd and Even",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11463,
    "title": "Xors on Segments",
    "difficulty": "hard",
    "category": [
      "data structures",
      "string",
      "tree"
    ]
  },
  {
    "id": 11464,
    "title": "New Year Tree",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "tree"
    ]
  },
  {
    "id": 11465,
    "title": "Professor GukiZ and Two Arrays",
    "difficulty": "hard",
    "category": [
      "binary search",
      "two pointers"
    ]
  },
  {
    "id": 11466,
    "title": "Pearls in a Row",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 11467,
    "title": "Grandfather Dovlet’s calculator",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11468,
    "title": "Professor GukiZ's Robot",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11469,
    "title": "Combining Slimes",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "matrix",
      "probability"
    ]
  },
  {
    "id": 11470,
    "title": "Double Knapsack",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "two pointers"
    ]
  },
  {
    "id": 11471,
    "title": "Robot Arm",
    "difficulty": "hard",
    "category": [
      "data structures",
      "geometry"
    ]
  },
  {
    "id": 11472,
    "title": "Hamiltonian Spanning Tree",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph matching",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 11473,
    "title": "Constellation",
    "difficulty": "medium",
    "category": [
      "geometry",
      "implementation"
    ]
  },
  {
    "id": 11474,
    "title": "Guess the Permutation",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 11475,
    "title": "Slime Combining",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11476,
    "title": "XOR and Favorite Number",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 11477,
    "title": "Polyline",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 11478,
    "title": "Watering Flowers",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11479,
    "title": "Chocolate",
    "difficulty": "medium",
    "category": [
      "combinatorics"
    ]
  },
  {
    "id": 11480,
    "title": "Elephant",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 11481,
    "title": "Expensive Strings",
    "difficulty": "hard",
    "category": [
      "data structures",
      "sorting",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 11482,
    "title": "Sum of Remainders",
    "difficulty": "hard",
    "category": [
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11483,
    "title": "Longest k-Good Segment",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "two pointers"
    ]
  },
  {
    "id": 11484,
    "title": "The Labyrinth",
    "difficulty": "medium",
    "category": [
      "graph traversal"
    ]
  },
  {
    "id": 11485,
    "title": "Dinner with Emma",
    "difficulty": "easy",
    "category": [
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 11486,
    "title": "Comparing Two Long Integers",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 11487,
    "title": "Hexagons",
    "difficulty": "hard",
    "category": [
      "binary search",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11488,
    "title": "Multipliers",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 11489,
    "title": "Running Track",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "string",
      "tree"
    ]
  },
  {
    "id": 11490,
    "title": "Longtail Hedgehog",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph"
    ]
  },
  {
    "id": 11491,
    "title": "Bulbs",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11492,
    "title": "Gena's Code",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11493,
    "title": "Link/Cut Tree",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 11494,
    "title": "Puzzle Lover",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "hash table",
      "string"
    ]
  },
  {
    "id": 11495,
    "title": "Kingdom and its Cities",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "dynamic programming",
      "graph",
      "graph traversal",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 11496,
    "title": "Necklace",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 11497,
    "title": "Skills",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "dynamic programming",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 11498,
    "title": "Peter and Snow Blower",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry",
      "ternary search"
    ]
  },
  {
    "id": 11499,
    "title": "Simba on the Circle",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 11500,
    "title": "Square Root of Permutation",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "graph",
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 11501,
    "title": "The Union of k-Segments",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 11502,
    "title": "Replace To Make Regular Bracket Sequence",
    "difficulty": "medium",
    "category": [
      "data structures",
      "math",
      "parsing"
    ]
  },
  {
    "id": 11503,
    "title": "HDD is Outdated Technology",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11504,
    "title": "The Text Splitting",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 11505,
    "title": "New Year  and Forgotten Tree",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "max flow"
    ]
  },
  {
    "id": 11506,
    "title": "New Year and Cake",
    "difficulty": "hard",
    "category": [
      "geometry",
      "two pointers"
    ]
  },
  {
    "id": 11507,
    "title": "New Year and Cleaning",
    "difficulty": "hard",
    "category": [
      "binary search",
      "implementation"
    ]
  },
  {
    "id": 11508,
    "title": "New Year and Three Musketeers",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 11509,
    "title": "New Year and Ancient Prophecy",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "hash table",
      "string"
    ]
  },
  {
    "id": 11510,
    "title": "New Year and Domino",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 11511,
    "title": "New Year and Old Property",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 11512,
    "title": "New Year and Days",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11513,
    "title": "Alphabet Permutations",
    "difficulty": "hard",
    "category": [
      "data structures",
      "string"
    ]
  },
  {
    "id": 11514,
    "title": "Vika and Segments",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "geometry",
      "two pointers"
    ]
  },
  {
    "id": 11515,
    "title": "Harmony Analysis",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 11516,
    "title": "Vika and Squares",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 11517,
    "title": "Pasha and Stick",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 11518,
    "title": "Frogs and mosquitoes",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 11519,
    "title": "Minimum spanning tree for each edge",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 11520,
    "title": "Gadgets for dollars and pounds",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 11521,
    "title": "Load Balancing",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11522,
    "title": "The Best Gift",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 11523,
    "title": "USB Flash Drives",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 11524,
    "title": "Hamming Distance Sum",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "string"
    ]
  },
  {
    "id": 11525,
    "title": "Saitama Destroys Hotel",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11526,
    "title": "Cross Sum",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry"
    ]
  },
  {
    "id": 11527,
    "title": "Power Tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 11528,
    "title": "Marbles",
    "difficulty": "hard",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 11529,
    "title": "Zuma",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 11530,
    "title": "Chain Reaction",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming"
    ]
  },
  {
    "id": 11531,
    "title": "Testing Robots",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11532,
    "title": "Magic Spheres",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11533,
    "title": "Intergalaxy Trips",
    "difficulty": "hard",
    "category": [
      "probability",
      "shortest path"
    ]
  },
  {
    "id": 11534,
    "title": "Board Game",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal"
    ]
  },
  {
    "id": 11535,
    "title": "Freelancer's Dreams",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 11536,
    "title": "Lazy Student",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "graph"
    ]
  },
  {
    "id": 11537,
    "title": "Sorting Railway Cars",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 11538,
    "title": "More Cowbell",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 11539,
    "title": "Uncowed Forces",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11540,
    "title": "Pastoral Oddities",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "math",
      "tree",
      "union find"
    ]
  },
  {
    "id": 11541,
    "title": "Ruminations on Ruminants",
    "difficulty": "hard",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 11542,
    "title": "Lieges of Legendre",
    "difficulty": "hard",
    "category": [
      "game theory",
      "math"
    ]
  },
  {
    "id": 11543,
    "title": "Moodular Arithmetic",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "graph traversal",
      "math",
      "number theory",
      "union find"
    ]
  },
  {
    "id": 11544,
    "title": "Alternative Thinking",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 11545,
    "title": "Approximating a Constant Range",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 11546,
    "title": "Two Bases",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 11547,
    "title": "A Museum Robbery",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 11548,
    "title": "Acyclic Organic Compounds",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "hash table",
      "string",
      "tree",
      "union find"
    ]
  },
  {
    "id": 11549,
    "title": "Kleofáš and the n-thlon",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 11550,
    "title": "Lipshitz Sequence",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math"
    ]
  },
  {
    "id": 11551,
    "title": "The Two Routes",
    "difficulty": "medium",
    "category": [
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 11552,
    "title": "Edge coloring of bipartite graph",
    "difficulty": "hard",
    "category": [
      "graph"
    ]
  },
  {
    "id": 11553,
    "title": "Lomsat gelral",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 11554,
    "title": "Area of Two Circles' Intersection",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 11555,
    "title": "Make Palindrome",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "string"
    ]
  },
  {
    "id": 11556,
    "title": "Queries about less or equal elements",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 11557,
    "title": "Extract Numbers",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 11558,
    "title": "Sandy and Nuts",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 11559,
    "title": "Spongebob and Squares",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 11560,
    "title": "Day at the Beach",
    "difficulty": "medium",
    "category": [
      "sorting"
    ]
  },
  {
    "id": 11561,
    "title": "Spongebob and Joke",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11562,
    "title": "Patrick and Shopping",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11563,
    "title": "Cut Length",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 11564,
    "title": "Chocolate Bar",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 11565,
    "title": "Igor In the Museum",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 11566,
    "title": "Nearest vectors",
    "difficulty": "hard",
    "category": [
      "geometry",
      "sorting"
    ]
  },
  {
    "id": 11567,
    "title": "Queries on a String",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 11568,
    "title": "Tricky Sum",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 11569,
    "title": "Subsequences",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 11570,
    "title": "Restaurant",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 11571,
    "title": "Divisibility",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 11572,
    "title": "Wilbur and Strings",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "string"
    ]
  },
  {
    "id": 11573,
    "title": "Wilbur and Trees",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "probability",
      "sorting"
    ]
  },
  {
    "id": 11574,
    "title": "Wilbur and Points",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 11575,
    "title": "Wilbur and Array",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 11576,
    "title": "Wilbur and Swimming Pool",
    "difficulty": "easy",
    "category": [
      "geometry",
      "implementation"
    ]
  },
  {
    "id": 11577,
    "title": "Pasha and Phone",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 11578,
    "title": "Vitaly and Night",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 11579,
    "title": "Cutting the Line",
    "difficulty": "hard",
    "category": [
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 11580,
    "title": "REQ",
    "difficulty": "hard",
    "category": [
      "data structures",
      "number theory"
    ]
  },
  {
    "id": 11581,
    "title": "Edo and Magnets",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 11582,
    "title": "Max and Bike",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry"
    ]
  },
  {
    "id": 11583,
    "title": "Warrior and Archer",
    "difficulty": "hard",
    "category": [
      "game theory"
    ]
  },
  {
    "id": 11584,
    "title": "Strange Calculation and Cats",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 11585,
    "title": "Happy Tree Party",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "math",
      "tree"
    ]
  },
  {
    "id": 11586,
    "title": "Beautiful Function",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 11587,
    "title": "Anton and Lines",
    "difficulty": "medium",
    "category": [
      "geometry",
      "sorting"
    ]
  },
  {
    "id": 11588,
    "title": "2Char",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 11589,
    "title": "BCPC",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry",
      "two pointers"
    ]
  },
  {
    "id": 11590,
    "title": "Super M",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 11591,
    "title": "The Big Race",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 11592,
    "title": "The Monster and the Squirrel",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 11593,
    "title": "PawnChess",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11594,
    "title": "Rebranding",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 11595,
    "title": "Wizards' Duel",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11596,
    "title": "Birthday",
    "difficulty": "hard",
    "category": [
      "graph matching",
      "string"
    ]
  },
  {
    "id": 11597,
    "title": "Top Secret Task",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 11598,
    "title": "Three States",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 11599,
    "title": "Chip 'n Dale Rescue Rangers",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry",
      "math"
    ]
  },
  {
    "id": 11600,
    "title": "Median Smoothing",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11601,
    "title": "Duff in Love",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 11602,
    "title": "Duff and Meat",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 11603,
    "title": "Duff is Mad",
    "difficulty": "hard",
    "category": [
      "data structures",
      "string"
    ]
  },
  {
    "id": 11604,
    "title": "Duff as a Queen",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 11605,
    "title": "Duff in Mafia",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "binary search"
    ]
  },
  {
    "id": 11606,
    "title": "Duff in the Army",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 11607,
    "title": "Duff in Beach",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 11608,
    "title": "Duff and Weight Lifting",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 11609,
    "title": "Laurenty and Shop",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11610,
    "title": "Alena's Schedule",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11611,
    "title": "Digits of Number Pi",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "implementation",
      "string"
    ]
  },
  {
    "id": 11612,
    "title": "Present for Vitalik the Philatelist ",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11613,
    "title": "Lizard Era: Beginning",
    "difficulty": "hard",
    "category": [
      "meet in the middle"
    ]
  },
  {
    "id": 11614,
    "title": "Alice, Bob, Oranges and Apples",
    "difficulty": "hard",
    "category": [
      "number theory"
    ]
  },
  {
    "id": 11615,
    "title": "Phillip and Trains",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 11616,
    "title": "Gennady the Dentist",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 11617,
    "title": "Anton and Ira",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 11618,
    "title": "Dima and Lisa",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11619,
    "title": "Marina and Vasya",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "string"
    ]
  },
  {
    "id": 11620,
    "title": "Kolya and Tanya ",
    "difficulty": "medium",
    "category": [
      "combinatorics"
    ]
  },
  {
    "id": 11621,
    "title": "Olesya and Rodion",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 11622,
    "title": "Robot's Task",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 11623,
    "title": "Asphalting Roads",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11624,
    "title": "Boolean Function",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "parsing"
    ]
  },
  {
    "id": 11625,
    "title": "Number of Binominal Coefficients",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11626,
    "title": "Superior Periodic Subarrays",
    "difficulty": "hard",
    "category": [
      "number theory"
    ]
  },
  {
    "id": 11627,
    "title": "Once Again...",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 11628,
    "title": "GCD Table",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 11629,
    "title": "Zublicanes and Mumocrates",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "tree",
      "two pointers"
    ]
  },
  {
    "id": 11630,
    "title": "Kojiro and Furrari",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 11631,
    "title": "Three Logos",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "geometry",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11632,
    "title": "Developing Skills",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 11633,
    "title": "Luxurious Houses",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11634,
    "title": "Vasya the Hipster",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11635,
    "title": "Kefa and Watch",
    "difficulty": "hard",
    "category": [
      "data structures",
      "hash table",
      "string"
    ]
  },
  {
    "id": 11636,
    "title": "Kefa and Dishes",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 11637,
    "title": "Kefa and Park",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 11638,
    "title": "Kefa and Company",
    "difficulty": "medium",
    "category": [
      "binary search",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 11639,
    "title": "Kefa and First Steps",
    "difficulty": "easy",
    "category": [
      "brute force",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 11640,
    "title": "Finding Team Member",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 11641,
    "title": "Raising Bacteria",
    "difficulty": "easy",
    "category": [
      "bit manipulation"
    ]
  },
  {
    "id": 11642,
    "title": "Mirror Box",
    "difficulty": "hard",
    "category": [
      "matrix",
      "tree"
    ]
  },
  {
    "id": 11643,
    "title": "Walking!",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 11644,
    "title": "LCS Again",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 11645,
    "title": "Weakness and Poorness",
    "difficulty": "hard",
    "category": [
      "ternary search"
    ]
  },
  {
    "id": 11646,
    "title": "\"Or\" Game",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 11647,
    "title": "A Problem about Polyline",
    "difficulty": "medium",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 11648,
    "title": "Modulo Sum",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 11649,
    "title": "Multiplication Table",
    "difficulty": "easy",
    "category": [
      "implementation",
      "number theory"
    ]
  },
  {
    "id": 11650,
    "title": "Painting Edges",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 11651,
    "title": "Flights for Regular Customers",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 11652,
    "title": "Points on Plane",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "divide and conquer",
      "geometry",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 11653,
    "title": "Invariance of Tree",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 11654,
    "title": "Vasya and Petya's Game",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 11655,
    "title": "Robots protection",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 11656,
    "title": "Bots",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11657,
    "title": "Run for beer",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 11658,
    "title": "Bulbo",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 11659,
    "title": "Spectator Riots",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 11660,
    "title": "Tablecity",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 11661,
    "title": "Party",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "graph matching"
    ]
  },
  {
    "id": 11662,
    "title": "Bribes",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 11663,
    "title": "Fibonotci",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math",
      "matrix"
    ]
  },
  {
    "id": 11664,
    "title": "Bear and Three Musketeers",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph",
      "graph traversal",
      "hash table"
    ]
  },
  {
    "id": 11665,
    "title": "Bear and Elections",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 11666,
    "title": "Bear and Bowling",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 11667,
    "title": "Bear and Cavalry",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "dynamic programming"
    ]
  },
  {
    "id": 11668,
    "title": "Bear and Drawing",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 11669,
    "title": "Bear and Blocks",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 11670,
    "title": "Bear and Poker",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11671,
    "title": "Order Book",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 11672,
    "title": "Arrays",
    "difficulty": "easy",
    "category": [
      "sorting"
    ]
  },
  {
    "id": 11673,
    "title": "Geometric Progressions",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 11674,
    "title": "Campus",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "tree",
      "union find"
    ]
  },
  {
    "id": 11675,
    "title": "CNF 2",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 11676,
    "title": "Minimization",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 11677,
    "title": "Lengthening Sticks",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11678,
    "title": "Pig and Palindromes",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 11679,
    "title": "Tree Requests",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "constructive algorithms",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 11680,
    "title": "Replacement",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 11681,
    "title": "Simple Game",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "game theory",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11682,
    "title": "Elections",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11683,
    "title": "Inventory",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 11684,
    "title": "Music",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11685,
    "title": "Longest Increasing Subsequence",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 11686,
    "title": "Sign Posts",
    "difficulty": "hard",
    "category": [
      "brute force",
      "geometry",
      "math"
    ]
  },
  {
    "id": 11687,
    "title": "New Language",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "greedy"
    ]
  },
  {
    "id": 11688,
    "title": "Symmetric and Transitive",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 11689,
    "title": "Primes or Palindromes?",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11690,
    "title": "Mausoleum",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 11691,
    "title": "President and Roads",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "hash table",
      "shortest path"
    ]
  },
  {
    "id": 11692,
    "title": "One-Dimensional Battle Ships",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 11693,
    "title": "Geometric Progression",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 11694,
    "title": "Berland National Library",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11695,
    "title": "Lineland Mail",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 11696,
    "title": "Max and Min",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 11697,
    "title": "Clique in the Divisibility Graph",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11698,
    "title": "Restoring Map",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "tree"
    ]
  },
  {
    "id": 11699,
    "title": "Restructuring Company",
    "difficulty": "hard",
    "category": [
      "data structures",
      "union find"
    ]
  },
  {
    "id": 11700,
    "title": "Logistical Questions",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 11701,
    "title": "Replicating Processes",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 11702,
    "title": "Matching Names",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "string",
      "tree"
    ]
  },
  {
    "id": 11703,
    "title": "Gerald is into Art",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 11704,
    "title": "Currency System in Geraldion",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 11705,
    "title": "Gerald and Path",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 11706,
    "title": "Randomizer",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "geometry",
      "probability"
    ]
  },
  {
    "id": 11707,
    "title": "Gerald and Giant Chess",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11708,
    "title": "Equivalent Strings",
    "difficulty": "medium",
    "category": [
      "divide and conquer",
      "hash table",
      "sorting",
      "string"
    ]
  },
  {
    "id": 11709,
    "title": "Gerald's Hexagon",
    "difficulty": "medium",
    "category": [
      "brute force",
      "geometry",
      "math"
    ]
  },
  {
    "id": 11710,
    "title": "A Simple Task",
    "difficulty": "hard",
    "category": [
      "data structures",
      "sorting",
      "string"
    ]
  },
  {
    "id": 11711,
    "title": "Guess Your Way Out! II",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 11712,
    "title": "Amr and Chemistry",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph",
      "greedy",
      "math",
      "shortest path"
    ]
  },
  {
    "id": 11713,
    "title": "Amr and The Large Array",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11714,
    "title": "Lala Land and Apple Trees",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 11715,
    "title": "Ann and Half-Palindrome",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph",
      "string",
      "string suffix structures",
      "tree"
    ]
  },
  {
    "id": 11716,
    "title": "Vitaly and Cycle",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "graph",
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 11717,
    "title": "Arthur and Table",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 11718,
    "title": "Pasha and Tea",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 11719,
    "title": "Ilya and Diplomas",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11720,
    "title": "Case of Fake Numbers",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 11721,
    "title": "Case of the Zeros and Ones",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 11722,
    "title": "Case of Computer Network",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 11723,
    "title": "Case of a Top Secret",
    "difficulty": "hard",
    "category": [
      "binary search",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11724,
    "title": "Case of Chocolate",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 11725,
    "title": "Case of Fugitive",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 11726,
    "title": "Case of Matryoshkas",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11727,
    "title": "Ohana Cleans Up",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "string"
    ]
  },
  {
    "id": 11728,
    "title": "Kyoya and Photobooks",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math",
      "string"
    ]
  },
  {
    "id": 11729,
    "title": "Kyoya and Train",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "fast fourier transform",
      "graph",
      "math",
      "probability"
    ]
  },
  {
    "id": 11730,
    "title": "Nudist Beach",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph",
      "greedy"
    ]
  },
  {
    "id": 11731,
    "title": "Love Triangles",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 11732,
    "title": "Kyoya and Permutation",
    "difficulty": "hard",
    "category": [
      "binary search",
      "combinatorics",
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11733,
    "title": "Kyoya and Colored Balls",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 11734,
    "title": "Vanya and Brackets",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "implementation",
      "parsing",
      "string"
    ]
  },
  {
    "id": 11735,
    "title": "Vanya and Triangles",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "data structures",
      "geometry",
      "math",
      "sorting"
    ]
  },
  {
    "id": 11736,
    "title": "Vanya and Scales",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "math",
      "meet in the middle",
      "number theory"
    ]
  },
  {
    "id": 11737,
    "title": "Vanya and Books",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11738,
    "title": "Vanya and Table",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11739,
    "title": "GukiZ and GukiZiana",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 11740,
    "title": "GukiZ and Binary Operations",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "implementation",
      "math",
      "matrix",
      "number theory"
    ]
  },
  {
    "id": 11741,
    "title": "GukiZ hates Boxes",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 11742,
    "title": "ZgukistringZ",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation",
      "string"
    ]
  },
  {
    "id": 11743,
    "title": "GukiZ and Contest",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 11744,
    "title": "Brackets in Implications",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11745,
    "title": "Regular Bridge",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "implementation"
    ]
  },
  {
    "id": 11746,
    "title": "Divisibility by Eight",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 11747,
    "title": "Preparing Olympiad",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force"
    ]
  },
  {
    "id": 11748,
    "title": "Two Substrings",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 11749,
    "title": "Degenerate Matrix",
    "difficulty": "hard",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 11750,
    "title": "Happy Line",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 11751,
    "title": "Yura and Developers",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer"
    ]
  },
  {
    "id": 11752,
    "title": "Sasha Circle",
    "difficulty": "hard",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 11753,
    "title": "Haar Features",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 11754,
    "title": "The Game Of Parity",
    "difficulty": "hard",
    "category": [
      "game theory"
    ]
  },
  {
    "id": 11755,
    "title": "Looksery Party",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 11756,
    "title": "Face Detection",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 11757,
    "title": "Mike and Fun",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 11758,
    "title": "Mike and Fax",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 11759,
    "title": "Mike and Friends",
    "difficulty": "hard",
    "category": [
      "data structures",
      "string",
      "string suffix structures",
      "tree"
    ]
  },
  {
    "id": 11760,
    "title": "Mike and Fish",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 11761,
    "title": "Mike and Foam",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11762,
    "title": "Mike and Feet",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "union find"
    ]
  },
  {
    "id": 11763,
    "title": "Mike and Frog",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11764,
    "title": "Soldier and Traveling",
    "difficulty": "hard",
    "category": [
      "graph",
      "math",
      "max flow"
    ]
  },
  {
    "id": 11765,
    "title": "Soldier and Number Game",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11766,
    "title": "Soldier and Cards",
    "difficulty": "medium",
    "category": [
      "brute force",
      "game theory",
      "graph traversal"
    ]
  },
  {
    "id": 11767,
    "title": "Soldier and Badges",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 11768,
    "title": "Soldier and Bananas",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11769,
    "title": "Paths and Trees",
    "difficulty": "hard",
    "category": [
      "graph",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 11770,
    "title": "Queue",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 11771,
    "title": "Woodcutters",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 11772,
    "title": "Equidistant String",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 11773,
    "title": "Toy Cars",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11774,
    "title": "Sea and Islands",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 11775,
    "title": "Set of Strings",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 11776,
    "title": "Listening to Music",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures"
    ]
  },
  {
    "id": 11777,
    "title": "Road Improvement",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 11778,
    "title": "Remembering Strings",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 11779,
    "title": "Destroying Roads",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 11780,
    "title": "Writing Code",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 11781,
    "title": "Quest",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 11782,
    "title": "Playing on Graph",
    "difficulty": "hard",
    "category": [
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 11783,
    "title": "Superhero's Job",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "hash table",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11784,
    "title": "Idempotent functions",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "math"
    ]
  },
  {
    "id": 11785,
    "title": "Duck Hunt",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 11786,
    "title": "Place Your Ad Here",
    "difficulty": "hard",
    "category": [
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 11787,
    "title": "Infinite Inversions",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "implementation",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 11788,
    "title": "Bad Luck Island",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "probability"
    ]
  },
  {
    "id": 11789,
    "title": "Ice Cave",
    "difficulty": "hard",
    "category": [
      "graph traversal"
    ]
  },
  {
    "id": 11790,
    "title": "School Marks",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 11791,
    "title": "Combination Lock",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11792,
    "title": "Summer Dichotomy",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "data structures",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 11793,
    "title": "Berserk Robot ",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math",
      "sorting"
    ]
  },
  {
    "id": 11794,
    "title": "A Heap of Heaps",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "math",
      "sorting"
    ]
  },
  {
    "id": 11795,
    "title": "Demiurges Play Again",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "math",
      "tree"
    ]
  },
  {
    "id": 11796,
    "title": "Weird Chess",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 11797,
    "title": "Tourist's Notes",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11798,
    "title": "Quasi Binary",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 11799,
    "title": "Cutting Banner",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 11800,
    "title": "Tavas on the Path",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "tree"
    ]
  },
  {
    "id": 11801,
    "title": "Tavas in Kansas",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory"
    ]
  },
  {
    "id": 11802,
    "title": "Tavas and Pashmaks",
    "difficulty": "hard",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 11803,
    "title": "Tavas and Malekas",
    "difficulty": "hard",
    "category": [
      "greedy",
      "hash table",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 11804,
    "title": "Tavas and Karafs",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "math"
    ]
  },
  {
    "id": 11805,
    "title": "Tavas and SaDDas",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "brute force",
      "combinatorics",
      "implementation"
    ]
  },
  {
    "id": 11806,
    "title": "Tavas and Nafas",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 11807,
    "title": "Simplified Nonogram",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "hash table",
      "meet in the middle"
    ]
  },
  {
    "id": 11808,
    "title": "Berland Local Positioning System",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "hash table",
      "implementation"
    ]
  },
  {
    "id": 11809,
    "title": "Handshakes",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 11810,
    "title": "Polycarpus' Dice",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 11811,
    "title": "Covered Path",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 11812,
    "title": "Exam",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11813,
    "title": "Encoding",
    "difficulty": "hard",
    "category": [
      "hash table",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 11814,
    "title": "Correcting Mistakes",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy",
      "hash table",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 11815,
    "title": "Landmarks",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 11816,
    "title": "Board Game",
    "difficulty": "medium",
    "category": [
      "game theory",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11817,
    "title": "Work Group",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "string",
      "tree"
    ]
  },
  {
    "id": 11818,
    "title": "Berland Miners",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 11819,
    "title": "Different variables",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11820,
    "title": "Points in triangle",
    "difficulty": "hard",
    "category": [
      "geometry",
      "special problem"
    ]
  },
  {
    "id": 11821,
    "title": "Levenshtein distance",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11822,
    "title": "Jumping frogs",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11823,
    "title": "Sum and product",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11824,
    "title": "Set subtraction",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11825,
    "title": "Diophantine equation",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11826,
    "title": "String inside out",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11827,
    "title": "Quadratic equation",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 11828,
    "title": "Group Photo 2 (online mirror version)",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 11829,
    "title": "Triangles 3000",
    "difficulty": "hard",
    "category": [
      "geometry",
      "sorting"
    ]
  },
  {
    "id": 11830,
    "title": "Fuzzy Search",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "fast fourier transform"
    ]
  },
  {
    "id": 11831,
    "title": "Data Center Drama",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 11832,
    "title": "Clique Problem",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 11833,
    "title": "Glass Carving",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 11834,
    "title": "Error Correct System",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 11835,
    "title": "Playing with Paper",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 11836,
    "title": "Spiders Evil Plan",
    "difficulty": "hard",
    "category": [
      "greedy",
      "tree"
    ]
  },
  {
    "id": 11837,
    "title": "Pudding Monsters",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer"
    ]
  },
  {
    "id": 11838,
    "title": "Transmitting Levels",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 11839,
    "title": "Om Nom and Necklace",
    "difficulty": "hard",
    "category": [
      "hash table",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 11840,
    "title": "Om Nom and Candies",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 11841,
    "title": "Om Nom and Dark Park",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 11842,
    "title": "King of Thieves",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 11843,
    "title": "Anya and Cubes",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "math",
      "meet in the middle"
    ]
  },
  {
    "id": 11844,
    "title": "Arthur and Walls",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "graph",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 11845,
    "title": "Ilya and Sticks",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 11846,
    "title": "Pasha and String",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 11847,
    "title": "Vitaliy and Pie",
    "difficulty": "easy",
    "category": [
      "greedy",
      "hash table",
      "string"
    ]
  },
  {
    "id": 11848,
    "title": "And Yet Another Bracket Sequence",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "hash table",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 11849,
    "title": "Rooks and Rectangles",
    "difficulty": "hard",
    "category": [
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 11850,
    "title": "Social Network",
    "difficulty": "hard",
    "category": [
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 11851,
    "title": "The Art of Dealing with ATM",
    "difficulty": "hard",
    "category": [
      "binary search",
      "sorting"
    ]
  },
  {
    "id": 11852,
    "title": "Фото на память - 2 (round version)",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 11853,
    "title": "Возможно, вы знаете этих людей?",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11854,
    "title": "Statistics of Recompressing Videos",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 11855,
    "title": "Name Quest",
    "difficulty": "medium",
    "category": [
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 11856,
    "title": "Mean Requests",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 11857,
    "title": "Rotate, Flip and Zoom",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 11858,
    "title": "Closest Equals",
    "difficulty": "hard",
    "category": [
      "data structures",
      "special problem"
    ]
  },
  {
    "id": 11859,
    "title": "Chicken or Fish?",
    "difficulty": "hard",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 11860,
    "title": "Photo to Remember",
    "difficulty": "easy",
    "category": [
      "data structures",
      "dynamic programming",
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 11861,
    "title": "Reposts",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "special problem",
      "tree"
    ]
  },
  {
    "id": 11862,
    "title": "Cycling City",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 11863,
    "title": "Shop",
    "difficulty": "hard",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 11864,
    "title": "Pluses everywhere",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11865,
    "title": "Cubes",
    "difficulty": "hard",
    "category": [
      "game theory",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 11866,
    "title": "DNA Alignment",
    "difficulty": "medium",
    "category": [
      "math",
      "string"
    ]
  },
  {
    "id": 11867,
    "title": "Two Buttons",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "implementation",
      "math",
      "shortest path"
    ]
  },
  {
    "id": 11868,
    "title": "Pangram",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 11869,
    "title": "A and B and Lecture Rooms",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 11870,
    "title": "A and B and Interesting Substrings",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 11871,
    "title": "A and B and Team Training",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 11872,
    "title": "A and B and Compilation Errors",
    "difficulty": "easy",
    "category": [
      "data structures",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 11873,
    "title": "A and B and Chess",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11874,
    "title": "Pasha and Pipe",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "combinatorics",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 11875,
    "title": "Arthur and Questions",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation",
      "math",
      "ternary search"
    ]
  },
  {
    "id": 11876,
    "title": "Ilya and Escalator",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 11877,
    "title": "Anya and Smartphone",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 11878,
    "title": "Tanya and Postcard",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 11879,
    "title": "Vitaly and Strings",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "string"
    ]
  },
  {
    "id": 11880,
    "title": "Drazil and His Happy Friends",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 11881,
    "title": "Drazil and Morning Exercise",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "tree",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 11882,
    "title": "Drazil and Park",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 11883,
    "title": "Drazil and Tiles",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 11884,
    "title": "Drazil and Factorial",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 11885,
    "title": "Drazil and His Happy Friends",
    "difficulty": "medium",
    "category": [
      "brute force",
      "meet in the middle",
      "number theory",
      "union find"
    ]
  },
  {
    "id": 11886,
    "title": "Drazil and Date",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 11887,
    "title": "Darth Vader and Tree",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 11888,
    "title": "R2D2 and Droid Army",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "two pointers"
    ]
  },
  {
    "id": 11889,
    "title": "Watto and Mechanism",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "hash table",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 11890,
    "title": "Han Solo and Lazer Gun",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures",
      "geometry",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11891,
    "title": "Chewbaсca and Number",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 11892,
    "title": "Inversions problem",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 11893,
    "title": "Inversions problem",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "probability"
    ]
  },
  {
    "id": 11894,
    "title": "Inversions problem",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "graph traversal",
      "meet in the middle"
    ]
  },
  {
    "id": 11895,
    "title": "Scaygerboss",
    "difficulty": "hard",
    "category": [
      "max flow"
    ]
  },
  {
    "id": 11896,
    "title": "Scaygerboss",
    "difficulty": "hard",
    "category": [
      "max flow"
    ]
  },
  {
    "id": 11897,
    "title": "Subarray Cuts",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 11898,
    "title": "Subarray Cuts",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 11899,
    "title": "Constrained Tree",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures"
    ]
  },
  {
    "id": 11900,
    "title": "Constrained Tree",
    "difficulty": "hard",
    "category": [
      "graph traversal"
    ]
  },
  {
    "id": 11901,
    "title": "Second price auction",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "probability"
    ]
  },
  {
    "id": 11902,
    "title": "Permutations",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "divide and conquer",
      "math"
    ]
  },
  {
    "id": 11903,
    "title": "Permutations",
    "difficulty": "medium",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 11904,
    "title": "Game",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 11905,
    "title": "Fox And Polygon",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "divide and conquer"
    ]
  },
  {
    "id": 11906,
    "title": "Fox And Travelling",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 11907,
    "title": "Fox And Dinner",
    "difficulty": "hard",
    "category": [
      "max flow"
    ]
  },
  {
    "id": 11908,
    "title": "Fox And Jumping",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 11909,
    "title": "Fox And Names",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "sorting"
    ]
  },
  {
    "id": 11910,
    "title": "Fox And Two Dots",
    "difficulty": "medium",
    "category": [
      "graph traversal"
    ]
  },
  {
    "id": 11911,
    "title": "Fox And Snake",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11912,
    "title": "Progress Monitoring",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 11913,
    "title": "Pretty Song",
    "difficulty": "hard",
    "category": [
      "math",
      "string"
    ]
  },
  {
    "id": 11914,
    "title": "Restoring Numbers",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 11915,
    "title": "Sums of Digits",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 11916,
    "title": "Painting Pebbles",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 11917,
    "title": "Maximum in Table",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 11918,
    "title": "Arthur and Brackets",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 11919,
    "title": "Tanya and Password",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 11920,
    "title": "Anya and Ghosts",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 11921,
    "title": "Anton and currency you all know",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "string"
    ]
  },
  {
    "id": 11922,
    "title": "Pasha and Pixels",
    "difficulty": "easy",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 11923,
    "title": "Breaking Good",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 11924,
    "title": "The Maths Lecture",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 11925,
    "title": "Guess Your Way Out!",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math",
      "tree"
    ]
  },
  {
    "id": 11926,
    "title": "Amr and Pins",
    "difficulty": "medium",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 11927,
    "title": "Amr and Music",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 11928,
    "title": "Mr. Kitayuta's Gift",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "matrix",
      "string"
    ]
  },
  {
    "id": 11929,
    "title": "Mr. Kitayuta's Colorful Graph",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 11930,
    "title": "Mr. Kitayuta vs. Bamboos",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 11931,
    "title": "Mr. Kitayuta's Technology",
    "difficulty": "hard",
    "category": [
      "graph traversal"
    ]
  },
  {
    "id": 11932,
    "title": "Mr. Kitayuta, the Treasure Hunter",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "two pointers"
    ]
  },
  {
    "id": 11933,
    "title": "Mr. Kitayuta's Colorful Graph",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 11934,
    "title": "Mr. Kitayuta's Gift",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 11935,
    "title": "Misha and LCP on Tree",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph traversal",
      "hash table",
      "string suffix structures",
      "tree"
    ]
  },
  {
    "id": 11936,
    "title": "Misha and XOR",
    "difficulty": "hard",
    "category": [
      "bit manipulation"
    ]
  },
  {
    "id": 11937,
    "title": "Misha and Palindrome Degree",
    "difficulty": "hard",
    "category": [
      "binary search",
      "combinatorics",
      "implementation"
    ]
  },
  {
    "id": 11938,
    "title": "Misha and Permutations Summation",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 11939,
    "title": "Misha and Forest",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 11940,
    "title": "Misha and Changing Handles",
    "difficulty": "easy",
    "category": [
      "data structures",
      "string",
      "union find"
    ]
  },
  {
    "id": 11941,
    "title": "Contest",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11942,
    "title": "New Year Running",
    "difficulty": "hard",
    "category": [
      "number theory",
      "tree"
    ]
  },
  {
    "id": 11943,
    "title": "New Year Shopping",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "dynamic programming"
    ]
  },
  {
    "id": 11944,
    "title": "New Year Domino",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "union find"
    ]
  },
  {
    "id": 11945,
    "title": "New Year Santa Network",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 11946,
    "title": "New Year Book Reading",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11947,
    "title": "New Year Permutation",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "math",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 11948,
    "title": "New Year Transportation",
    "difficulty": "easy",
    "category": [
      "graph",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 11949,
    "title": "Lecture",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 11950,
    "title": "Watching a movie",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 11951,
    "title": "Stairs and Lines",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 11952,
    "title": "Traffic Jams in the Land",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "number theory"
    ]
  },
  {
    "id": 11953,
    "title": "Array and Operations",
    "difficulty": "hard",
    "category": [
      "graph matching",
      "max flow",
      "number theory"
    ]
  },
  {
    "id": 11954,
    "title": "Name That Tune",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "probability",
      "two pointers"
    ]
  },
  {
    "id": 11955,
    "title": "Crazy Town",
    "difficulty": "medium",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 11956,
    "title": "Subsequences Return",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 11957,
    "title": "Gears",
    "difficulty": "hard",
    "category": [
      "brute force",
      "geometry",
      "math"
    ]
  },
  {
    "id": 11958,
    "title": "Distributing Parts ",
    "difficulty": "hard",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 11959,
    "title": "Tennis Game",
    "difficulty": "hard",
    "category": [
      "binary search"
    ]
  },
  {
    "id": 11960,
    "title": "Removing Columns",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 11961,
    "title": "Secret Combination",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 11962,
    "title": "Minimum Difficulty",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 11963,
    "title": "Modular Equations",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 11964,
    "title": "Digital Counter",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11965,
    "title": "Sharti",
    "difficulty": "hard",
    "category": [
      "data structures",
      "game theory"
    ]
  },
  {
    "id": 11966,
    "title": "Birthday",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 11967,
    "title": "Helping People",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "probability"
    ]
  },
  {
    "id": 11968,
    "title": "Obsessive String",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 11969,
    "title": "Treasure",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 11970,
    "title": "Vasya and Polynomial",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 11971,
    "title": "Vasya and Chess",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "game theory",
      "math"
    ]
  },
  {
    "id": 11972,
    "title": "Vasya and Basketball",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "implementation",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 11973,
    "title": "Vasya and Wrestling",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11974,
    "title": "Vasya and Football",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11975,
    "title": "Vanya and Field",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 11976,
    "title": "Vanya and Computer Game",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 11977,
    "title": "Vanya and Exams",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 11978,
    "title": "Vanya and Lanterns",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 11979,
    "title": "Vanya and Cubes",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 11980,
    "title": "Deciphering",
    "difficulty": "hard",
    "category": [
      "graph matching",
      "max flow"
    ]
  },
  {
    "id": 11981,
    "title": "New York Hotel",
    "difficulty": "hard",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 11982,
    "title": "Up the hill",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 11983,
    "title": "Treeland Tour",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 11984,
    "title": "Restoring Increasing Sequence",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 11985,
    "title": "Chocolate",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph traversal",
      "math",
      "meet in the middle",
      "number theory"
    ]
  },
  {
    "id": 11986,
    "title": "Hacking Cypher",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math",
      "number theory",
      "string"
    ]
  },
  {
    "id": 11987,
    "title": "Queue",
    "difficulty": "medium",
    "category": [
      "implementation",
      "union find"
    ]
  },
  {
    "id": 11988,
    "title": "Team Olympiad",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 11989,
    "title": "Special Matrices",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 11990,
    "title": "Hiking",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming"
    ]
  },
  {
    "id": 11991,
    "title": "Unbearable Controversy of Being",
    "difficulty": "medium",
    "category": [
      "brute force",
      "combinatorics",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 11992,
    "title": "Given Length and Sum of Digits...",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 11993,
    "title": "BerSU Ball",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph matching",
      "graph traversal",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 11994,
    "title": "SwapSort",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 11995,
    "title": "Candy Boxes",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 11996,
    "title": "Giga Tower",
    "difficulty": "easy",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 11997,
    "title": "Tourists",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 11998,
    "title": "Conveyor Belts",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 11999,
    "title": "Prefix Product Sequence",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 12000,
    "title": "Strip",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 12001,
    "title": "Fight the Monster",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 12002,
    "title": "LIS of Sequence",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "hash table",
      "math"
    ]
  },
  {
    "id": 12003,
    "title": "Valid Sets",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "math",
      "tree"
    ]
  },
  {
    "id": 12004,
    "title": "Palindrome Transformation",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12005,
    "title": "OR in Matrix",
    "difficulty": "medium",
    "category": [
      "greedy",
      "hash table",
      "implementation"
    ]
  },
  {
    "id": 12006,
    "title": "Calculating Function",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 12007,
    "title": "Valuable Resources",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 12008,
    "title": "Factory",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math",
      "matrix"
    ]
  },
  {
    "id": 12009,
    "title": "Sign on Fence",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures"
    ]
  },
  {
    "id": 12010,
    "title": "Kindergarten",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 12011,
    "title": "Strange Sorting",
    "difficulty": "hard",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 12012,
    "title": "Maximum Value",
    "difficulty": "hard",
    "category": [
      "binary search",
      "math",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 12013,
    "title": "Bits",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "constructive algorithms"
    ]
  },
  {
    "id": 12014,
    "title": "Friends and Presents",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 12015,
    "title": "Counterexample ",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 12016,
    "title": "ELCA",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 12017,
    "title": "Random Function and Tree",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 12018,
    "title": "Game with Strings",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "probability"
    ]
  },
  {
    "id": 12019,
    "title": "Interesting Array",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "tree"
    ]
  },
  {
    "id": 12020,
    "title": "Diverse Permutation",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 12021,
    "title": "Parking Lot",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer"
    ]
  },
  {
    "id": 12022,
    "title": "Parcels",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph"
    ]
  },
  {
    "id": 12023,
    "title": "Riding in a Lift",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 12024,
    "title": "Long Jumps",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12025,
    "title": "Exams",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 12026,
    "title": "Towers",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12027,
    "title": "Expression",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 12028,
    "title": "Wavy numbers",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph traversal",
      "meet in the middle",
      "sorting"
    ]
  },
  {
    "id": 12029,
    "title": "Red-Green Towers",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12030,
    "title": "Table Decorations",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 12031,
    "title": "Random Teams",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 12032,
    "title": "Initial Bet",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12033,
    "title": "Dreamoon and Notepad",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12034,
    "title": "Dreamoon and Binary",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 12035,
    "title": "Dreamoon and Strings",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 12036,
    "title": "Dreamoon and Sets",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 12037,
    "title": "Dreamoon and Sums",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 12038,
    "title": "Dreamoon and WiFi",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "combinatorics",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 12039,
    "title": "Dreamoon and Stairs",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 12040,
    "title": "Meta-universe",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12041,
    "title": "Strongly Connected City 2",
    "difficulty": "hard",
    "category": [
      "graph traversal"
    ]
  },
  {
    "id": 12042,
    "title": "CGCDSSQ",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "math"
    ]
  },
  {
    "id": 12043,
    "title": "Kamal-ol-molk's Painting",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 12044,
    "title": "Strongly Connected City",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 12045,
    "title": "Bayan Bus",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12046,
    "title": "Ant colony",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math",
      "number theory"
    ]
  },
  {
    "id": 12047,
    "title": "Pillars",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 12048,
    "title": "Flowers",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12049,
    "title": "Captain Marmot",
    "difficulty": "hard",
    "category": [
      "brute force",
      "geometry"
    ]
  },
  {
    "id": 12050,
    "title": "Worms",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation"
    ]
  },
  {
    "id": 12051,
    "title": "Keyboard",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12052,
    "title": "Design Tutorial: Increase the Constraints",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "fast fourier transform"
    ]
  },
  {
    "id": 12053,
    "title": "Design Tutorial: Change the Goal",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math",
      "matrix"
    ]
  },
  {
    "id": 12054,
    "title": "Design Tutorial: Learn from a Game",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 12055,
    "title": "Design Tutorial: Inverse the Problem",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "shortest path",
      "tree",
      "union find"
    ]
  },
  {
    "id": 12056,
    "title": "Design Tutorial: Make It Nondeterministic",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 12057,
    "title": "Design Tutorial: Learn from Life",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 12058,
    "title": "Design Tutorial: Learn from Math",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 12059,
    "title": "MUH and Lots and Lots of Segments",
    "difficulty": "hard",
    "category": [
      "data structures",
      "union find"
    ]
  },
  {
    "id": 12060,
    "title": "MUH and Cube Walls",
    "difficulty": "medium",
    "category": [
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 12061,
    "title": "MUH and House of Cards",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 12062,
    "title": "MUH and Important Things",
    "difficulty": "medium",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12063,
    "title": "MUH and Sticks",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12064,
    "title": "Array Sorting",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 12065,
    "title": "Hamming Distance",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 12066,
    "title": "Pairwise Sums",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 12067,
    "title": "Chessboard",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 12068,
    "title": "Caesar Cipher",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 12069,
    "title": "Eval",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 12070,
    "title": "Hexakosioihexekontahexaphobia",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 12071,
    "title": "Crystal Ball Sequence",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 12072,
    "title": "Chat Online",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12073,
    "title": "I Wanna Be the Guy",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12074,
    "title": "Permanent",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph matching",
      "math",
      "meet in the middle"
    ]
  },
  {
    "id": 12075,
    "title": "Tree",
    "difficulty": "hard",
    "category": [
      "graph matching"
    ]
  },
  {
    "id": 12076,
    "title": "Hack it!",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 12077,
    "title": "Two Sets",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "graph matching",
      "graph traversal",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 12078,
    "title": "24 Game",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 12079,
    "title": "Alex and Complicated Task",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 12080,
    "title": "Fedor and Essay",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "hash table",
      "string"
    ]
  },
  {
    "id": 12081,
    "title": "George and Job",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 12082,
    "title": "Fedor and New Game",
    "difficulty": "easy",
    "category": [
      "bit manipulation",
      "brute force",
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 12083,
    "title": "George and Accommodation",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12084,
    "title": "Information Graph",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 12085,
    "title": "Increase Sequence",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 12086,
    "title": "Number of Ways",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 12087,
    "title": "Wonder Room",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 12088,
    "title": "Cheap Travel",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12089,
    "title": "Inbox (100500)",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12090,
    "title": "inc ARG",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12091,
    "title": "The Classic Problem",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 12092,
    "title": "World of Darkraft - 2",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "probability"
    ]
  },
  {
    "id": 12093,
    "title": "Substitutes in Number",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12094,
    "title": "Restore Cube ",
    "difficulty": "hard",
    "category": [
      "brute force",
      "geometry"
    ]
  },
  {
    "id": 12095,
    "title": "No to Palindromes!",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 12096,
    "title": "Caisa and Tree",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph traversal",
      "math",
      "number theory",
      "tree"
    ]
  },
  {
    "id": 12097,
    "title": "Gargari and Permutations",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 12098,
    "title": "Gargari and Bishops",
    "difficulty": "hard",
    "category": [
      "greedy",
      "hash table",
      "implementation"
    ]
  },
  {
    "id": 12099,
    "title": "Caisa and Pylons",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12100,
    "title": "Caisa and Sugar",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 12101,
    "title": "Appleman and Card Game",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 12102,
    "title": "Appleman and Easy Task",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 12103,
    "title": "Appleman and a Game",
    "difficulty": "hard",
    "category": [
      "binary search",
      "shortest path",
      "string"
    ]
  },
  {
    "id": 12104,
    "title": "Appleman and Complicated Task",
    "difficulty": "hard",
    "category": [
      "math",
      "union find"
    ]
  },
  {
    "id": 12105,
    "title": "Appleman and a Sheet of Paper",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 12106,
    "title": "Appleman and Tree",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 12107,
    "title": "Appleman and Toastman",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 12108,
    "title": "Roland and Rose",
    "difficulty": "hard",
    "category": [
      "brute force",
      "geometry",
      "math",
      "sorting"
    ]
  },
  {
    "id": 12109,
    "title": "Little Victor and Set",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 12110,
    "title": "Present",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 12111,
    "title": "Little Dima and Equation",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 12112,
    "title": "Vasya and Socks",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12113,
    "title": "Pashmak and Graph",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 12114,
    "title": "Pashmak and Parmida's problem",
    "difficulty": "medium",
    "category": [
      "data structures",
      "divide and conquer",
      "sorting"
    ]
  },
  {
    "id": 12115,
    "title": "Pashmak and Buses",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 12116,
    "title": "Pashmak and Flowers",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12117,
    "title": "Pashmak and Garden",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12118,
    "title": "An easy problem about trees",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 12119,
    "title": "Flow Optimality",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math",
      "max flow"
    ]
  },
  {
    "id": 12120,
    "title": "Bingo!",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "probability"
    ]
  },
  {
    "id": 12121,
    "title": "Elections",
    "difficulty": "hard",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 12122,
    "title": "Distributed Join",
    "difficulty": "hard",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 12123,
    "title": "Golden System",
    "difficulty": "medium",
    "category": [
      "math",
      "meet in the middle"
    ]
  },
  {
    "id": 12124,
    "title": "Fedya and Maths",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 12125,
    "title": "Laptops",
    "difficulty": "easy",
    "category": [
      "sorting"
    ]
  },
  {
    "id": 12126,
    "title": "Function",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12127,
    "title": "Serega and Fun",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12128,
    "title": "Civilization",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "ternary search",
      "tree",
      "union find"
    ]
  },
  {
    "id": 12129,
    "title": "A Lot of Games",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory",
      "graph traversal",
      "implementation",
      "string",
      "tree"
    ]
  },
  {
    "id": 12130,
    "title": "Boredom",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12131,
    "title": "Little Pony and Sort by Shift",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12132,
    "title": "Little Pony and Crystal Mine",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12133,
    "title": "Little Pony and Lord Tirek",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12134,
    "title": "Little Pony and Elements of Harmony",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 12135,
    "title": "Little Pony and Summer Sun Celebration",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 12136,
    "title": "Little Pony and Harmony Chest",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 12137,
    "title": "Little Pony and Expected Maximum",
    "difficulty": "medium",
    "category": [
      "probability"
    ]
  },
  {
    "id": 12138,
    "title": "Permutation",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "hash table"
    ]
  },
  {
    "id": 12139,
    "title": "Three strings",
    "difficulty": "hard",
    "category": [
      "data structures",
      "string",
      "string suffix structures",
      "union find"
    ]
  },
  {
    "id": 12140,
    "title": "Washer, Dryer, Folder",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12141,
    "title": "Magic Trick",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "probability"
    ]
  },
  {
    "id": 12142,
    "title": "4-point polyline",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "geometry",
      "tree"
    ]
  },
  {
    "id": 12143,
    "title": "Eevee",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 12144,
    "title": "Devu and Flowers",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "number theory"
    ]
  },
  {
    "id": 12145,
    "title": "Count Good Substrings",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 12146,
    "title": "Predict Outcome of the Game",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12147,
    "title": "Sort the Array",
    "difficulty": "medium",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12148,
    "title": "Game With Sticks",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12149,
    "title": "Jzzhu and Sequences",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 12150,
    "title": "Jzzhu and Children",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12151,
    "title": "Jzzhu and Squares",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 12152,
    "title": "Jzzhu and Numbers",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 12153,
    "title": "Jzzhu and Apples",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "number theory"
    ]
  },
  {
    "id": 12154,
    "title": "Jzzhu and Cities",
    "difficulty": "hard",
    "category": [
      "graph",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 12155,
    "title": "Jzzhu and Chocolate",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 12156,
    "title": "Divisors",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph traversal",
      "implementation",
      "number theory"
    ]
  },
  {
    "id": 12157,
    "title": "Multiplication Table",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force"
    ]
  },
  {
    "id": 12158,
    "title": "Painting Fence",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 12159,
    "title": "Suffix Structures",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 12160,
    "title": "Rewards",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12161,
    "title": "DZY Loves Strings",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12162,
    "title": "DZY Loves Hash",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12163,
    "title": "DZY Loves Bridges",
    "difficulty": "hard",
    "category": [
      "math",
      "matrix"
    ]
  },
  {
    "id": 12164,
    "title": "DZY Loves Games",
    "difficulty": "hard",
    "category": [
      "math",
      "matrix",
      "probability"
    ]
  },
  {
    "id": 12165,
    "title": "DZY Loves Fibonacci Numbers",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math",
      "number theory"
    ]
  },
  {
    "id": 12166,
    "title": "DZY Loves Modification",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 12167,
    "title": "DZY Loves Sequences",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 12168,
    "title": "DZY Loves Chemistry",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 12169,
    "title": "DZY Loves Chessboard",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 12170,
    "title": "DZY Loves Planting",
    "difficulty": "hard",
    "category": [
      "binary search",
      "tree",
      "union find"
    ]
  },
  {
    "id": 12171,
    "title": "DZY Loves Strings",
    "difficulty": "hard",
    "category": [
      "binary search",
      "hash table",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 12172,
    "title": "DZY Loves Colors",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12173,
    "title": "DZY Loves FFT",
    "difficulty": "hard",
    "category": [
      "probability"
    ]
  },
  {
    "id": 12174,
    "title": "DZY Loves Physics",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 12175,
    "title": "Kolya and Tandem Repeat",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 12176,
    "title": "Anton and Letters",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 12177,
    "title": "Gena and Second Distance",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 12178,
    "title": "Adam and Tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 12179,
    "title": "Artem and Array ",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 12180,
    "title": "Andrey and Problem",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "probability"
    ]
  },
  {
    "id": 12181,
    "title": "Borya and Hanabi",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 12182,
    "title": "Valera and Number",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 12183,
    "title": "Valera and Swaps",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "implementation",
      "math",
      "string suffix structures",
      "union find"
    ]
  },
  {
    "id": 12184,
    "title": "Valera and Tubes ",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 12185,
    "title": "Valera and Fruits",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12186,
    "title": "Valera and Antique Items",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12187,
    "title": "Berland Federalization",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 12188,
    "title": "One-Based Arithmetic",
    "difficulty": "medium",
    "category": [
      "brute force",
      "divide and conquer",
      "graph traversal"
    ]
  },
  {
    "id": 12189,
    "title": "Balancer",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12190,
    "title": "Forgotten Episode",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12191,
    "title": "Devu and Birthday Celebration",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 12192,
    "title": "Devu and his Brother",
    "difficulty": "medium",
    "category": [
      "binary search",
      "sorting",
      "ternary search",
      "two pointers"
    ]
  },
  {
    "id": 12193,
    "title": "Devu and Partitioning of the Array",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation",
      "number theory"
    ]
  },
  {
    "id": 12194,
    "title": "Devu, the Dumb Guy",
    "difficulty": "medium",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12195,
    "title": "Devu, the Singer and Churu, the Joker",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12196,
    "title": "The Child and Binary Tree",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "divide and conquer",
      "fast fourier transform",
      "number theory"
    ]
  },
  {
    "id": 12197,
    "title": "The Child and Sequence",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math"
    ]
  },
  {
    "id": 12198,
    "title": "The Child and Polygon",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "geometry"
    ]
  },
  {
    "id": 12199,
    "title": "The Child and Zoo",
    "difficulty": "hard",
    "category": [
      "sorting",
      "union find"
    ]
  },
  {
    "id": 12200,
    "title": "The Child and Toy",
    "difficulty": "medium",
    "category": [
      "graph",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 12201,
    "title": "The Child and Set",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12202,
    "title": "The Child and Homework",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12203,
    "title": "Banners",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 12204,
    "title": "Cardboard Box",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 12205,
    "title": "Pudding Monsters",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12206,
    "title": "Dungeons and Candies",
    "difficulty": "medium",
    "category": [
      "graph",
      "greedy",
      "tree",
      "union find"
    ]
  },
  {
    "id": 12207,
    "title": "Om Nom and Spiders",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 12208,
    "title": "Feed with Candy",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 12209,
    "title": "Special Graph",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 12210,
    "title": "Special Grid",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 12211,
    "title": "Cardiogram",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12212,
    "title": "Pasha Maximizes",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 12213,
    "title": "Queue on Bus Stop",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12214,
    "title": "Furukawa Nagisa's Tree",
    "difficulty": "hard",
    "category": [
      "binary search",
      "divide and conquer",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 12215,
    "title": "Nanami's Power Plant",
    "difficulty": "hard",
    "category": [
      "max flow"
    ]
  },
  {
    "id": 12216,
    "title": "Tachibana Kanade's Tofu",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12217,
    "title": "Nanami's Digital Board",
    "difficulty": "hard",
    "category": [
      "implementation",
      "union find"
    ]
  },
  {
    "id": 12218,
    "title": "Ryouko's Memory Note",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 12219,
    "title": "Kuriyama Mirai's Stones",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12220,
    "title": "Kitahara Haruki's Gift",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 12221,
    "title": "Square Tiling",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 12222,
    "title": "Prefixes and Suffixes",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string",
      "string suffix structures",
      "two pointers"
    ]
  },
  {
    "id": 12223,
    "title": "Prime Swaps",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 12224,
    "title": "Football Kit",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12225,
    "title": "Choosing Teams",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12226,
    "title": "Chemistry Experiment",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "ternary search"
    ]
  },
  {
    "id": 12227,
    "title": "Random Task",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 12228,
    "title": "k-Tree",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 12229,
    "title": "Shower Line",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 12230,
    "title": "Black Square",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12231,
    "title": "Balls Game",
    "difficulty": "medium",
    "category": [
      "brute force",
      "two pointers"
    ]
  },
  {
    "id": 12232,
    "title": "Points and Segments (easy)",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "sorting"
    ]
  },
  {
    "id": 12233,
    "title": "Points and Segments",
    "difficulty": "hard",
    "category": [
      "graph"
    ]
  },
  {
    "id": 12234,
    "title": "Tricky Function",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "geometry"
    ]
  },
  {
    "id": 12235,
    "title": "Guess the Tree",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "dynamic programming",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 12236,
    "title": "Working out",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12237,
    "title": "Xor-tree",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 12238,
    "title": "Police Patrol",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation",
      "math",
      "ternary search"
    ]
  },
  {
    "id": 12239,
    "title": "Match & Catch",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 12240,
    "title": "Checkposts",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "two pointers"
    ]
  },
  {
    "id": 12241,
    "title": "Prison Transfer",
    "difficulty": "easy",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 12242,
    "title": "Police Recruits",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12243,
    "title": "Sereja and Mirroring",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12244,
    "title": "Sereja and Mugs",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12245,
    "title": "Sereja and Sets",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12246,
    "title": "Sereja and Squares",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "hash table"
    ]
  },
  {
    "id": 12247,
    "title": "Sereja and Two Sequences",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 12248,
    "title": "Sereja and Table ",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "greedy"
    ]
  },
  {
    "id": 12249,
    "title": "Sereja and Swaps",
    "difficulty": "medium",
    "category": [
      "brute force",
      "sorting"
    ]
  },
  {
    "id": 12250,
    "title": "Colored Jenga",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "probability"
    ]
  },
  {
    "id": 12251,
    "title": "Biathlon Track",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 12252,
    "title": "Magic Formulas",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 12253,
    "title": "Megacity",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12254,
    "title": "Squats",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12255,
    "title": "Bug in Code",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 12256,
    "title": "Pasha and Hamsters",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 12257,
    "title": "Playing the ball",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 12258,
    "title": "Cup Trick",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12259,
    "title": "Bug in Code",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 12260,
    "title": "Online Meeting",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12261,
    "title": "Start Up",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12262,
    "title": "Tricky Password",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12263,
    "title": "Big Problems for Organizers",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "tree"
    ]
  },
  {
    "id": 12264,
    "title": "Square Table",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math",
      "probability"
    ]
  },
  {
    "id": 12265,
    "title": "Cunning Gena",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 12266,
    "title": "Football",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "implementation"
    ]
  },
  {
    "id": 12267,
    "title": "Crash",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12268,
    "title": "Elimination",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12269,
    "title": "President's Path",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 12270,
    "title": "Population Size",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12271,
    "title": "Booking System",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12272,
    "title": "Art Union",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 12273,
    "title": "Guess a number!",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 12274,
    "title": "Mashmokh and Tokens",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12275,
    "title": "Mashmokh and Lights",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12276,
    "title": "Mashmokh's Designed Problem",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12277,
    "title": "Mashmokh and Water Tanks",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "tree",
      "two pointers"
    ]
  },
  {
    "id": 12278,
    "title": "Mashmokh and Reverse Operation",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "divide and conquer"
    ]
  },
  {
    "id": 12279,
    "title": "Mashmokh and ACM",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "number theory"
    ]
  },
  {
    "id": 12280,
    "title": "Mashmokh and Numbers",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "number theory"
    ]
  },
  {
    "id": 12281,
    "title": "Maze 2D",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer"
    ]
  },
  {
    "id": 12282,
    "title": "2048",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 12283,
    "title": "Jeopardy!",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 12284,
    "title": "Spyke Chatting",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12285,
    "title": "Data Recovery",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12286,
    "title": "E-mail Addresses",
    "difficulty": "hard",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12287,
    "title": "Giving Awards",
    "difficulty": "hard",
    "category": [
      "graph traversal"
    ]
  },
  {
    "id": 12288,
    "title": "Pattern",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 12289,
    "title": "Network Configuration",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 12290,
    "title": "Poster",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12291,
    "title": "Kicker",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 12292,
    "title": "Multi-core Processor",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12293,
    "title": "Password Check",
    "difficulty": "easy",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 12294,
    "title": "Feed the Golorp",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 12295,
    "title": "A + B Strikes Back",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation",
      "special problem",
      "union find"
    ]
  },
  {
    "id": 12296,
    "title": "On a plane",
    "difficulty": "hard",
    "category": [
      "geometry",
      "special problem"
    ]
  },
  {
    "id": 12297,
    "title": "000001",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 12298,
    "title": "Dome",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 12299,
    "title": "Big Data",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 12300,
    "title": "Magnum Opus",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 12301,
    "title": "Mysterious Language",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 12302,
    "title": "The Great Game",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 12303,
    "title": "Garland",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12304,
    "title": "Line to Cashier",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12305,
    "title": "k-d-sequence",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12306,
    "title": "Largest Submatrix 3",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "hash table"
    ]
  },
  {
    "id": 12307,
    "title": "Curious Array",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12308,
    "title": "Long Path",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 12309,
    "title": "Triangle",
    "difficulty": "medium",
    "category": [
      "brute force",
      "geometry",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12310,
    "title": "Hamming Triples",
    "difficulty": "hard",
    "category": [
      "implementation",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 12311,
    "title": "Hill Climbing",
    "difficulty": "hard",
    "category": [
      "geometry",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 12312,
    "title": "Graph Cutting",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 12313,
    "title": "Toy Sum",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12314,
    "title": "Unusual Product",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 12315,
    "title": "Domino Effect",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 12316,
    "title": "Gravity Flip",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12317,
    "title": "Maze 1D",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12318,
    "title": "Minesweeper 1D",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 12319,
    "title": "Restore Graph",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "sorting"
    ]
  },
  {
    "id": 12320,
    "title": "Marathon",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 12321,
    "title": "Valera and X",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12322,
    "title": "Two Rooted Trees",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 12323,
    "title": "Beautiful Pairs of Numbers",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 12324,
    "title": "Strictly Positive Matrix",
    "difficulty": "hard",
    "category": [
      "graph",
      "math"
    ]
  },
  {
    "id": 12325,
    "title": "Upgrading Array",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 12326,
    "title": "Searching for Graph",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph"
    ]
  },
  {
    "id": 12327,
    "title": "Trees in a Row",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 12328,
    "title": "Nuts",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 12329,
    "title": "Olympic Games",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 12330,
    "title": "Roman and Numbers",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "combinatorics",
      "dynamic programming",
      "number theory"
    ]
  },
  {
    "id": 12331,
    "title": "Team",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12332,
    "title": "Sereja and Contests",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12333,
    "title": "Vanya and Cards",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 12334,
    "title": "Inna and Binary Logic",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "data structures"
    ]
  },
  {
    "id": 12335,
    "title": "Dima and Bacteria",
    "difficulty": "hard",
    "category": [
      "graph",
      "shortest path",
      "union find"
    ]
  },
  {
    "id": 12336,
    "title": "Inna and Huge Candy Matrix",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 12337,
    "title": "Inna and New Matrix of Candies",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "scheduling"
    ]
  },
  {
    "id": 12338,
    "title": "Inna and Choose Options",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12339,
    "title": "Red and Blue Balls",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 12340,
    "title": "Pages",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12341,
    "title": "Sorting Permutations",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 12342,
    "title": "Instant Messanger",
    "difficulty": "easy",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12343,
    "title": "Tree and Array",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 12344,
    "title": "Painting The Wall",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "probability"
    ]
  },
  {
    "id": 12345,
    "title": "Cards",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 12346,
    "title": "On Corruption and Numbers",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12347,
    "title": "On Segment's Own Points",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12348,
    "title": "On Iteration of One Well-Known Function",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 12349,
    "title": "On Sum of Number of Inversions in Permutations",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 12350,
    "title": "On Changing Tree",
    "difficulty": "easy",
    "category": [
      "data structures",
      "graph",
      "tree"
    ]
  },
  {
    "id": 12351,
    "title": "On Sum of Fractions",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 12352,
    "title": "On Number of Decompositions into Multipliers",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 12353,
    "title": "Lightbulb for Minister",
    "difficulty": "easy",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 12354,
    "title": "Physical Education and Buns",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12355,
    "title": "Dominoes",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 12356,
    "title": "Very Beautiful Number",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 12357,
    "title": "Counting Sticks",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 12358,
    "title": "Three matrices",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 12359,
    "title": "Nineteen",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 12360,
    "title": "Deleting Substrings",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 12361,
    "title": "Three Arrays",
    "difficulty": "easy",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12362,
    "title": "Yet Another Number Sequence",
    "difficulty": "easy",
    "category": [
      "combinatorics",
      "math",
      "matrix"
    ]
  },
  {
    "id": 12363,
    "title": "Tower of Hanoi",
    "difficulty": "easy",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12364,
    "title": "Blocked Points",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 12365,
    "title": "Stock Trading",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 12366,
    "title": "Stock Trading",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 12367,
    "title": "Stock Trading",
    "difficulty": "easy",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12368,
    "title": "Three Trees",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 12369,
    "title": "Three Trees",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 12370,
    "title": "Supercollider",
    "difficulty": "easy",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12371,
    "title": "Supercollider",
    "difficulty": "easy",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 12372,
    "title": "The Tournament",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 12373,
    "title": "The Tournament",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 12374,
    "title": "The Tournament",
    "difficulty": "easy",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 12375,
    "title": "Word Folding",
    "difficulty": "easy",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 12376,
    "title": "Genetic Engineering",
    "difficulty": "easy",
    "category": [
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 12377,
    "title": "Inna and Large Sweet Matrix",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 12378,
    "title": "Inna and Sweet Matrix",
    "difficulty": "easy",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 12379,
    "title": "Inna and Candy Boxes",
    "difficulty": "easy",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12380,
    "title": "Inna, Dima and Song",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12381,
    "title": "Inna and Alarm Clock",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12382,
    "title": "Fox and Cross",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12383,
    "title": "Fox and Number Game",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 12384,
    "title": "Fox and Meteor Shower",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 12385,
    "title": "Fox and Perfect Sets",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 12386,
    "title": "Fox and Card Game",
    "difficulty": "hard",
    "category": [
      "game theory",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 12387,
    "title": "Fox and Minimal path",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "graph",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12388,
    "title": "Fox and Box Accumulation",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 12389,
    "title": "George and Cards",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 12390,
    "title": "George and Interesting Graph",
    "difficulty": "hard",
    "category": [
      "graph matching"
    ]
  },
  {
    "id": 12391,
    "title": "George and Number",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12392,
    "title": "George and Round",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 12393,
    "title": "George and Sleep",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12394,
    "title": "Game with Points",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "implementation",
      "shortest path"
    ]
  },
  {
    "id": 12395,
    "title": "Diverse Substrings",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 12396,
    "title": "Fly, freebies, fly!",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 12397,
    "title": "Second-Price Auction",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12398,
    "title": "Bear in the Field",
    "difficulty": "hard",
    "category": [
      "math",
      "matrix"
    ]
  },
  {
    "id": 12399,
    "title": "Bear and Floodlight",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "geometry"
    ]
  },
  {
    "id": 12400,
    "title": "Bear and Prime Numbers",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "dynamic programming",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 12401,
    "title": "Bear and Strings",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "math",
      "string"
    ]
  },
  {
    "id": 12402,
    "title": "Bear and Raspberry",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12403,
    "title": "Multitasking",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 12404,
    "title": "Coder",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12405,
    "title": "Vowels",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "divide and conquer",
      "dynamic programming"
    ]
  },
  {
    "id": 12406,
    "title": "Antimatter",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12407,
    "title": "Propagating tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 12408,
    "title": "Volcanoes",
    "difficulty": "hard",
    "category": [
      "binary search",
      "implementation",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 12409,
    "title": "Milking cows",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 12410,
    "title": "Ksenia and Combinatorics",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 12411,
    "title": "Ksenia and Pawns",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 12412,
    "title": "Arithmetic Progression",
    "difficulty": "medium",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12413,
    "title": "Number Busters",
    "difficulty": "hard",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 12414,
    "title": "Ksenia and Pan Scales",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12415,
    "title": "Sereja and Stairs",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12416,
    "title": "Sereja and Dima",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 12417,
    "title": "Sereja and Dividing",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12418,
    "title": "Sereja and Cinema",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 12419,
    "title": "Sereja and Brackets",
    "difficulty": "hard",
    "category": [
      "data structures",
      "scheduling"
    ]
  },
  {
    "id": 12420,
    "title": "Sereja and Tree",
    "difficulty": "hard",
    "category": [
      "graph",
      "implementation"
    ]
  },
  {
    "id": 12421,
    "title": "Sereja and Prefixes",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force"
    ]
  },
  {
    "id": 12422,
    "title": "New Year Cactus",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12423,
    "title": "New Year Tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "tree"
    ]
  },
  {
    "id": 12424,
    "title": "New Year Tree Decorations",
    "difficulty": "hard",
    "category": [
      "geometry",
      "scheduling",
      "sorting"
    ]
  },
  {
    "id": 12425,
    "title": "New Year Letter",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 12426,
    "title": "New Year Ratings Change",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 12427,
    "title": "New Year Present",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 12428,
    "title": "New Year Candles",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12429,
    "title": "Semifinals",
    "difficulty": "medium",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12430,
    "title": "Playing with Dice",
    "difficulty": "easy",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 12431,
    "title": "Cookie Clicker",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "geometry"
    ]
  },
  {
    "id": 12432,
    "title": "Developing Game",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12433,
    "title": "Captains Mode",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "game theory"
    ]
  },
  {
    "id": 12434,
    "title": "Preparing for the Contest",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 12435,
    "title": "Maze",
    "difficulty": "medium",
    "category": [
      "graph traversal"
    ]
  },
  {
    "id": 12436,
    "title": "I.O.U.",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12437,
    "title": "Lever",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 12438,
    "title": "Red and Black Tree",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12439,
    "title": "Tree and Queries",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 12440,
    "title": "Circling Round Treasures",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "shortest path"
    ]
  },
  {
    "id": 12441,
    "title": "Maximum Submatrix 2",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12442,
    "title": "Divisible by Seven",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 12443,
    "title": "Inna and Babies",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "geometry",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 12444,
    "title": "Inna and Sequence ",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 12445,
    "title": "Inna and Dima",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 12446,
    "title": "Inna and Nine",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "greedy"
    ]
  },
  {
    "id": 12447,
    "title": "Inna and Pink Pony",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12448,
    "title": "Making Sequences is Fun",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12449,
    "title": "Collecting Beats is Fun",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12450,
    "title": "Drawing Circles is Fun",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "geometry"
    ]
  },
  {
    "id": 12451,
    "title": "Choosing Subtree is Fun",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph traversal",
      "tree",
      "two pointers"
    ]
  },
  {
    "id": 12452,
    "title": "Watching Fireworks is Fun",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 12453,
    "title": "Counting Rectangles is Fun",
    "difficulty": "hard",
    "category": [
      "brute force",
      "divide and conquer",
      "dynamic programming"
    ]
  },
  {
    "id": 12454,
    "title": "Counting Kangaroos is Fun",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 12455,
    "title": "Subway Innovation",
    "difficulty": "hard",
    "category": [
      "greedy",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 12456,
    "title": "Vessels",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation",
      "tree",
      "union find"
    ]
  },
  {
    "id": 12457,
    "title": "Hamburgers",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force"
    ]
  },
  {
    "id": 12458,
    "title": "Fox Dividing Cheese",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 12459,
    "title": "K-Periodic Array",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12460,
    "title": "Summer Reading",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 12461,
    "title": "Broken Monitor",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12462,
    "title": "Mittens",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 12463,
    "title": "Berland Bingo",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12464,
    "title": "Rook, Bishop and King",
    "difficulty": "easy",
    "category": [
      "graph",
      "math",
      "shortest path"
    ]
  },
  {
    "id": 12465,
    "title": "Valera and Queries",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 12466,
    "title": "Valera and Fools",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 12467,
    "title": "Valera and Elections",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 12468,
    "title": "Valera and Contest",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12469,
    "title": "Valera and Plates",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12470,
    "title": "Sereja and Suffixes",
    "difficulty": "easy",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 12471,
    "title": "Sereja and Coat Rack",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12472,
    "title": "Sereja and Intervals",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 12473,
    "title": "Sereja and Sets",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "graph traversal"
    ]
  },
  {
    "id": 12474,
    "title": "Sereja and the Arrangement of Numbers",
    "difficulty": "hard",
    "category": [
      "graph",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 12475,
    "title": "Sereja ans Anagrams",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 12476,
    "title": "Sereja and Algorithm ",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 12477,
    "title": "Dima and Magic Guitar",
    "difficulty": "hard",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12478,
    "title": "Dima and Trap Graph",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph traversal",
      "shortest path",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 12479,
    "title": "Dima and Salad",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12480,
    "title": "Dima and To-do List",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 12481,
    "title": "Dima and Guards",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12482,
    "title": "The Fibonacci Segment",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12483,
    "title": "Good Number",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12484,
    "title": "Empty Rectangles",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "two pointers"
    ]
  },
  {
    "id": 12485,
    "title": "Ghd",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math",
      "probability"
    ]
  },
  {
    "id": 12486,
    "title": "Beautiful Set",
    "difficulty": "hard",
    "category": [
      "brute force",
      "number theory"
    ]
  },
  {
    "id": 12487,
    "title": "Free Market",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 12488,
    "title": "Matrix",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 12489,
    "title": "Two Circles",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 12490,
    "title": "Renting Bikes",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 12491,
    "title": "Fixing Typos",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12492,
    "title": "Fence",
    "difficulty": "easy",
    "category": [
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 12493,
    "title": "Soroban",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12494,
    "title": "Petya and Pipes",
    "difficulty": "hard",
    "category": [
      "graph",
      "max flow",
      "shortest path"
    ]
  },
  {
    "id": 12495,
    "title": "Fools and Foolproof Roads",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 12496,
    "title": "Insertion Sort",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12497,
    "title": "Petya and Staircases",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12498,
    "title": "Two Semiknights Meet",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 12499,
    "title": "Levko and Permutation",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 12500,
    "title": "Levko and Table",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 12501,
    "title": "Levko and Game",
    "difficulty": "hard",
    "category": [
      "graph",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 12502,
    "title": "Levko and Sets",
    "difficulty": "hard",
    "category": [
      "number theory"
    ]
  },
  {
    "id": 12503,
    "title": "Levko and Strings",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 12504,
    "title": "Levko and Array",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming"
    ]
  },
  {
    "id": 12505,
    "title": "Levko and Array Recovery",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12506,
    "title": "Neatness",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph traversal"
    ]
  },
  {
    "id": 12507,
    "title": "Pair of Numbers",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 12508,
    "title": "Prime Number",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 12509,
    "title": "Permutation",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 12510,
    "title": "Table",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12511,
    "title": "Dima and Kicks",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 12512,
    "title": "Dima and Hares",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 12513,
    "title": "Dima and Containers",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12514,
    "title": "Dima and Text Messages",
    "difficulty": "medium",
    "category": [
      "brute force",
      "string"
    ]
  },
  {
    "id": 12515,
    "title": "Dima and Continuous Line",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 12516,
    "title": "Flag Day",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 12517,
    "title": "Group of Students",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12518,
    "title": "Xenia and String Problem",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "hash table",
      "implementation",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 12519,
    "title": "Bags and Coins",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "constructive algorithms",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 12520,
    "title": "Compartments",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12521,
    "title": "Xenia and Hamming",
    "difficulty": "hard",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 12522,
    "title": "Knight Tournament",
    "difficulty": "medium",
    "category": [
      "data structures",
      "union find"
    ]
  },
  {
    "id": 12523,
    "title": "Vasya and Public Transport",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12524,
    "title": "Vasya and Digital Root",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 12525,
    "title": "Lucky Number Representation",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph traversal"
    ]
  },
  {
    "id": 12526,
    "title": "Transferring Pyramid",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12527,
    "title": "Vasya and Beautiful Arrays",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "number theory"
    ]
  },
  {
    "id": 12528,
    "title": "Game with Strings",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "game theory"
    ]
  },
  {
    "id": 12529,
    "title": "Vasya and Robot",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "math"
    ]
  },
  {
    "id": 12530,
    "title": "Antichain",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph matching",
      "greedy"
    ]
  },
  {
    "id": 12531,
    "title": "Queue",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming"
    ]
  },
  {
    "id": 12532,
    "title": "Find Maximum",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 12533,
    "title": "Two Heaps",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "greedy",
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 12534,
    "title": "Domino",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 12535,
    "title": "Jeff and Periods",
    "difficulty": "medium",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12536,
    "title": "Jeff and Digits",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12537,
    "title": "Jeff and Permutation",
    "difficulty": "hard",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 12538,
    "title": "Jeff and Removing Periods",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12539,
    "title": "Jeff and Brackets",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 12540,
    "title": "Jeff and Furik",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "probability"
    ]
  },
  {
    "id": 12541,
    "title": "Jeff and Rounding",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12542,
    "title": "Wrong Floyd",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 12543,
    "title": "Looking for Owls",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "geometry",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 12544,
    "title": "Bombs",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12545,
    "title": "Resort",
    "difficulty": "medium",
    "category": [
      "graph"
    ]
  },
  {
    "id": 12546,
    "title": "TL",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12547,
    "title": "Color the Fence",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12548,
    "title": "Cinema Line",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12549,
    "title": "Pilgrims",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 12550,
    "title": "Turtles",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 12551,
    "title": "Subset Sums",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures"
    ]
  },
  {
    "id": 12552,
    "title": "Apple Tree",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "number theory",
      "tree"
    ]
  },
  {
    "id": 12553,
    "title": "Mafia",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math",
      "sorting"
    ]
  },
  {
    "id": 12554,
    "title": "Fixed Points",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12555,
    "title": "Difference Row",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12556,
    "title": "Doodle Jump",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 12557,
    "title": "Robot Control",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 12558,
    "title": "Number Transformation II",
    "difficulty": "hard",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 12559,
    "title": "Lucky Common Subsequence",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 12560,
    "title": "Alice and Bob",
    "difficulty": "medium",
    "category": [
      "game theory",
      "math",
      "number theory"
    ]
  },
  {
    "id": 12561,
    "title": "Suffix Subgroup",
    "difficulty": "hard",
    "category": [
      "special problem",
      "string"
    ]
  },
  {
    "id": 12562,
    "title": "Superstitions Inspection",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 12563,
    "title": "Black Cat Rush",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 12564,
    "title": "Chain Letter",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "special problem"
    ]
  },
  {
    "id": 12565,
    "title": "Counting Fridays",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 12566,
    "title": "Triskaidekaphobia",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 12567,
    "title": "Expecting Trouble",
    "difficulty": "medium",
    "category": [
      "probability",
      "special problem"
    ]
  },
  {
    "id": 12568,
    "title": "Simple Molecules",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph",
      "math"
    ]
  },
  {
    "id": 12569,
    "title": "Magnets",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12570,
    "title": "Pumping Stations",
    "difficulty": "hard",
    "category": [
      "brute force",
      "divide and conquer",
      "graph",
      "graph traversal",
      "greedy",
      "max flow",
      "tree"
    ]
  },
  {
    "id": 12571,
    "title": "Water Tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 12572,
    "title": "Read Time",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 12573,
    "title": "Alternating Current",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12574,
    "title": "Rational Resistance",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 12575,
    "title": "Xenia and Tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "tree"
    ]
  },
  {
    "id": 12576,
    "title": "Xenia and Dominoes",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "graph traversal"
    ]
  },
  {
    "id": 12577,
    "title": "Cupboard and Balloons",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 12578,
    "title": "Xenia and Spies",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12579,
    "title": "Xenia and Divisors",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12580,
    "title": "Candies Game",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 12581,
    "title": "Iahub and Xors",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12582,
    "title": "Iahub and Permutations",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 12583,
    "title": "Bubble Sort Graph",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 12584,
    "title": "Tourist Problem",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12585,
    "title": "Maximal Area Quadrilateral",
    "difficulty": "hard",
    "category": [
      "brute force",
      "geometry"
    ]
  },
  {
    "id": 12586,
    "title": "The Wall",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 12587,
    "title": "Three Swaps",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 12588,
    "title": "Xenia and Bit Operations",
    "difficulty": "medium",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 12589,
    "title": "Xenia and Weights",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph",
      "graph traversal",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 12590,
    "title": "Xenia and Ringroad",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12591,
    "title": "Helpful Maths",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "sorting",
      "string"
    ]
  },
  {
    "id": 12592,
    "title": "Optimize!",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12593,
    "title": "GCD Table",
    "difficulty": "hard",
    "category": [
      "chinese remainder theorem",
      "math",
      "number theory"
    ]
  },
  {
    "id": 12594,
    "title": "Divisor Tree",
    "difficulty": "hard",
    "category": [
      "brute force",
      "number theory",
      "tree"
    ]
  },
  {
    "id": 12595,
    "title": "Book of Evil",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 12596,
    "title": "Quiz",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "math",
      "matrix",
      "number theory"
    ]
  },
  {
    "id": 12597,
    "title": "Routine Problem",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "number theory"
    ]
  },
  {
    "id": 12598,
    "title": "Puzzles",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 12599,
    "title": "Vasily the Bear and Painting Square",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 12600,
    "title": "Vasily the Bear and Beautiful Strings",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 12601,
    "title": "Vasily the Bear and Sequence",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "implementation",
      "number theory"
    ]
  },
  {
    "id": 12602,
    "title": "Vasily the Bear and Fly",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 12603,
    "title": "Vasily the Bear and Triangle",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 12604,
    "title": "Buy One, Get One Free",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 12605,
    "title": "Counting Skyscrapers",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 12606,
    "title": "Rectangles and Square",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 12607,
    "title": "More Reclamation",
    "difficulty": "hard",
    "category": [
      "game theory"
    ]
  },
  {
    "id": 12608,
    "title": "Palindrome",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming"
    ]
  },
  {
    "id": 12609,
    "title": "Banana",
    "difficulty": "medium",
    "category": [
      "binary search",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 12610,
    "title": "Eight Point Sets",
    "difficulty": "medium",
    "category": [
      "sorting"
    ]
  },
  {
    "id": 12611,
    "title": "Candy Bags",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12612,
    "title": "Summer Earnings",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force",
      "geometry",
      "sorting"
    ]
  },
  {
    "id": 12613,
    "title": "Characteristics of Rectangles",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12614,
    "title": "Lucky Tickets",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms"
    ]
  },
  {
    "id": 12615,
    "title": "Chips",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 12616,
    "title": "Secrets",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 12617,
    "title": "Binary Key",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12618,
    "title": "Theft of Blueprints",
    "difficulty": "hard",
    "category": [
      "graph",
      "math"
    ]
  },
  {
    "id": 12619,
    "title": "Students' Revenge",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 12620,
    "title": "Maximum Absurdity",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 12621,
    "title": "Down the Hatch!",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12622,
    "title": "Deja Vu",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming"
    ]
  },
  {
    "id": 12623,
    "title": "Deja Vu",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "implementation"
    ]
  },
  {
    "id": 12624,
    "title": "Escaping on Beaveractor",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 12625,
    "title": "Escaping on Beaveractor",
    "difficulty": "hard",
    "category": [
      "graph"
    ]
  },
  {
    "id": 12626,
    "title": "Escaping on Beaveractor",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 12627,
    "title": "The Great Julya Calendar",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12628,
    "title": "The Great Julya Calendar",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12629,
    "title": "The Great Julya Calendar",
    "difficulty": "easy",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12630,
    "title": "Shave Beaver!",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12631,
    "title": "Shave Beaver!",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12632,
    "title": "Oh Sweet Beaverette",
    "difficulty": "medium",
    "category": [
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 12633,
    "title": "Oh Sweet Beaverette",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 12634,
    "title": "Road Construction",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph"
    ]
  },
  {
    "id": 12635,
    "title": "Cakeminator",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 12636,
    "title": "Evil",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 12637,
    "title": "The Evil Temple and the Moving Rocks",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 12638,
    "title": "Graph Reconstruction",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 12639,
    "title": "Biridian Forest",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 12640,
    "title": "Purification",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 12641,
    "title": "Sheldon and Ice Pieces",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 12642,
    "title": "IQ Test",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12643,
    "title": "Axis Walking",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "constructive algorithms",
      "dynamic programming",
      "meet in the middle"
    ]
  },
  {
    "id": 12644,
    "title": "Block Tower",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 12645,
    "title": "Magic Five",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 12646,
    "title": "Hungry Sequence",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 12647,
    "title": "Flipping Game",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 12648,
    "title": "The Red Button",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "graph",
      "graph traversal",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 12649,
    "title": "Reclamation",
    "difficulty": "hard",
    "category": [
      "union find"
    ]
  },
  {
    "id": 12650,
    "title": "Monsters and Diamonds",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 12651,
    "title": "Stadium and Games",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 12652,
    "title": "Square and Rectangles",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12653,
    "title": "Two permutations",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12654,
    "title": "Tournament-graph",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph"
    ]
  },
  {
    "id": 12655,
    "title": "Black-and-White Cube",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "constructive algorithms"
    ]
  },
  {
    "id": 12656,
    "title": "Ciel and Flowers",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 12657,
    "title": "Ciel and Dancing",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 12658,
    "title": "Ciel and Gondolas",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "dynamic programming"
    ]
  },
  {
    "id": 12659,
    "title": "Ciel and Flipboard",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 12660,
    "title": "Ciel the Commander",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "divide and conquer",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 12661,
    "title": "Ciel and Duel",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "max flow"
    ]
  },
  {
    "id": 12662,
    "title": "Ciel and Robot",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12663,
    "title": "Ping-Pong (Easy Version)",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 12664,
    "title": "Magic Numbers",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 12665,
    "title": "Ping-Pong",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12666,
    "title": "Have You Ever Heard About the Word?",
    "difficulty": "hard",
    "category": [
      "greedy",
      "hash table",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 12667,
    "title": "Kalila and Dimna in the Logging Industry",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "geometry"
    ]
  },
  {
    "id": 12668,
    "title": "Psychos in a Line",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 12669,
    "title": "Malek Dance Club",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 12670,
    "title": "Strings of Power",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 12671,
    "title": "Even Odds",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 12672,
    "title": "Princess and Her Shadow",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "shortest path"
    ]
  },
  {
    "id": 12673,
    "title": "Game with Powers",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory"
    ]
  },
  {
    "id": 12674,
    "title": "Balance",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 12675,
    "title": "Ants",
    "difficulty": "hard",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 12676,
    "title": "Perfect Pair",
    "difficulty": "medium",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 12677,
    "title": "Good Substrings",
    "difficulty": "hard",
    "category": [
      "string suffix structures"
    ]
  },
  {
    "id": 12678,
    "title": "Good Substrings",
    "difficulty": "hard",
    "category": [
      "string suffix structures"
    ]
  },
  {
    "id": 12679,
    "title": "Good Substrings",
    "difficulty": "medium",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 12680,
    "title": "Suns and Rays",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 12681,
    "title": "Suns and Rays",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 12682,
    "title": "Suns and Rays",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 12683,
    "title": "Summer Homework",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math"
    ]
  },
  {
    "id": 12684,
    "title": "Summer Homework",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math"
    ]
  },
  {
    "id": 12685,
    "title": "Summer Homework",
    "difficulty": "medium",
    "category": [
      "brute force",
      "data structures"
    ]
  },
  {
    "id": 12686,
    "title": "PE Lesson",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 12687,
    "title": "PE Lesson",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12688,
    "title": "PE Lesson",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 12689,
    "title": "Tidying Up",
    "difficulty": "hard",
    "category": [
      "graph matching",
      "max flow"
    ]
  },
  {
    "id": 12690,
    "title": "Tidying Up",
    "difficulty": "hard",
    "category": [
      "max flow"
    ]
  },
  {
    "id": 12691,
    "title": "EKG",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph traversal"
    ]
  },
  {
    "id": 12692,
    "title": "EKG",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph traversal"
    ]
  },
  {
    "id": 12693,
    "title": "Special Task",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 12694,
    "title": "Special Task",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 12695,
    "title": "Sereja and Array",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12696,
    "title": "Sereja and Bottles",
    "difficulty": "medium",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 12697,
    "title": "Sereja and Squares",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12698,
    "title": "Sereja and Straight Lines",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "geometry",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 12699,
    "title": "Sereja and Subsequences",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 12700,
    "title": "Sereja and Periods",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph traversal",
      "string"
    ]
  },
  {
    "id": 12701,
    "title": "Sereja and Contest",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12702,
    "title": "Ilya and Two Numbers",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 12703,
    "title": "Ilya and Roads",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12704,
    "title": "Ilya and Matrix",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12705,
    "title": "Ilya and Queries",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 12706,
    "title": "Ilya and Bank Account",
    "difficulty": "easy",
    "category": [
      "implementation",
      "number theory"
    ]
  },
  {
    "id": 12707,
    "title": "Archer",
    "difficulty": "medium",
    "category": [
      "math",
      "probability"
    ]
  },
  {
    "id": 12708,
    "title": "Whose sentence is it?",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 12709,
    "title": "Biologist",
    "difficulty": "hard",
    "category": [
      "max flow"
    ]
  },
  {
    "id": 12710,
    "title": "Interval Cubing",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math"
    ]
  },
  {
    "id": 12711,
    "title": "Fetch the Treasure",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 12712,
    "title": "Cats Transport",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 12713,
    "title": "The Closest Pair",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 12714,
    "title": "Sheep",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 12715,
    "title": "Tennis Rackets",
    "difficulty": "hard",
    "category": [
      "brute force",
      "geometry"
    ]
  },
  {
    "id": 12716,
    "title": "Memory for Arrays",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "greedy"
    ]
  },
  {
    "id": 12717,
    "title": "Context Advertising",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 12718,
    "title": "Morning run",
    "difficulty": "hard",
    "category": [
      "binary search",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 12719,
    "title": "Polygon",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "geometry"
    ]
  },
  {
    "id": 12720,
    "title": "White, Black and White Again",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "number theory"
    ]
  },
  {
    "id": 12721,
    "title": "Optimizer",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 12722,
    "title": "Candies",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12723,
    "title": "Playing with String",
    "difficulty": "hard",
    "category": [
      "game theory"
    ]
  },
  {
    "id": 12724,
    "title": "Olya and Graph",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 12725,
    "title": "Ivan and Powers of Two",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12726,
    "title": "Continued Fractions",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12727,
    "title": "Strange Addition",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 12728,
    "title": "Calendar",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 12729,
    "title": "Pythagorean Theorem II",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 12730,
    "title": "Random Ranking",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 12731,
    "title": "Rotatable Number",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 12732,
    "title": "Minimum Modular",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph",
      "math",
      "number theory"
    ]
  },
  {
    "id": 12733,
    "title": "Rectangle Puzzle II",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 12734,
    "title": "Lucky Permutation Triple",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12735,
    "title": "Eugeny and Play List",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 12736,
    "title": "Eugeny and Array",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12737,
    "title": "Yaroslav and Arrangements",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12738,
    "title": "Yaroslav and Divisors",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12739,
    "title": "Yaroslav and Algorithm",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 12740,
    "title": "Yaroslav and Time",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 12741,
    "title": "Yaroslav and Sequence",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 12742,
    "title": "Empire Strikes Back",
    "difficulty": "hard",
    "category": [
      "binary search",
      "math",
      "number theory"
    ]
  },
  {
    "id": 12743,
    "title": "Painting Square",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "fast fourier transform"
    ]
  },
  {
    "id": 12744,
    "title": "Beautiful Numbers",
    "difficulty": "medium",
    "category": [
      "brute force",
      "combinatorics"
    ]
  },
  {
    "id": 12745,
    "title": "Coach",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 12746,
    "title": "Array",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 12747,
    "title": "Ksusha the Squirrel",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 12748,
    "title": "Ksusha and Array",
    "difficulty": "easy",
    "category": [
      "brute force",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 12749,
    "title": "Sail",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12750,
    "title": "Snow Footprints",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12751,
    "title": "Mystic Carvings",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12752,
    "title": "Color the Carpet",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 12753,
    "title": "Splitting the Uniqueness",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 12754,
    "title": "Fish Weight",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 12755,
    "title": "Parity Game",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 12756,
    "title": "Yaroslav and Two Strings",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 12757,
    "title": "Yaroslav and Permutations",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 12758,
    "title": "Yaroslav and Points",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12759,
    "title": "Greg and Caves",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 12760,
    "title": "Greg and Friends",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 12761,
    "title": "Greg and Graph",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 12762,
    "title": "Greg and Array",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 12763,
    "title": "Shaass the Great",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "tree"
    ]
  },
  {
    "id": 12764,
    "title": "Shaass and Painter Robot",
    "difficulty": "hard",
    "category": [
      "brute force",
      "implementation",
      "number theory"
    ]
  },
  {
    "id": 12765,
    "title": "Shaass and Lights",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "number theory"
    ]
  },
  {
    "id": 12766,
    "title": "Shaass and Bookshelf",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 12767,
    "title": "Shaass and Oskols",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 12768,
    "title": "Close Vertices",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "tree"
    ]
  },
  {
    "id": 12769,
    "title": "Ksusha and Square",
    "difficulty": "hard",
    "category": [
      "geometry",
      "math",
      "probability",
      "two pointers"
    ]
  },
  {
    "id": 12770,
    "title": "Cube Problem",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 12771,
    "title": "Distinct Paths",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics"
    ]
  },
  {
    "id": 12772,
    "title": "Weird Game",
    "difficulty": "medium",
    "category": [
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 12773,
    "title": "Copying Data",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12774,
    "title": "Connected Components",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 12775,
    "title": "Beautiful IP Addresses",
    "difficulty": "hard",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 12776,
    "title": "Network Topology",
    "difficulty": "medium",
    "category": [
      "graph",
      "implementation"
    ]
  },
  {
    "id": 12777,
    "title": "SMSC",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12778,
    "title": "Tree-String Problem",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "hash table",
      "special problem",
      "string"
    ]
  },
  {
    "id": 12779,
    "title": "Parallel Programming",
    "difficulty": "medium",
    "category": [
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 12780,
    "title": "Network Mask",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 12781,
    "title": "Command Line Arguments",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem",
      "string"
    ]
  },
  {
    "id": 12782,
    "title": "Spyke Talks",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting",
      "special problem"
    ]
  },
  {
    "id": 12783,
    "title": "Greedy Petya",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 12784,
    "title": "HQ",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "special problem"
    ]
  },
  {
    "id": 12785,
    "title": "Orange",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 12786,
    "title": "WTF?",
    "difficulty": "medium",
    "category": [
      "graph matching",
      "implementation",
      "special problem",
      "tree"
    ]
  },
  {
    "id": 12787,
    "title": "QR code",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 12788,
    "title": "Mysterious strings",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 12789,
    "title": "Polo the Penguin and Matrix",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "implementation",
      "sorting",
      "ternary search"
    ]
  },
  {
    "id": 12790,
    "title": "Polo the Penguin and Segments ",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 12791,
    "title": "Polo the Penguin and Lucky Numbers",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12792,
    "title": "Polo the Penguin and Trees ",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 12793,
    "title": "Polo the Penguin and XOR operation",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 12794,
    "title": "Polo the Penguin and Houses ",
    "difficulty": "medium",
    "category": [
      "combinatorics"
    ]
  },
  {
    "id": 12795,
    "title": "Polo the Penguin and Strings",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 12796,
    "title": "Pipeline",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math"
    ]
  },
  {
    "id": 12797,
    "title": "IQ Test",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 12798,
    "title": "Ladies' Shop",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "fast fourier transform",
      "math"
    ]
  },
  {
    "id": 12799,
    "title": "Tourists",
    "difficulty": "hard",
    "category": [
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 12800,
    "title": "Main Sequence",
    "difficulty": "hard",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12801,
    "title": "Shifting",
    "difficulty": "hard",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12802,
    "title": "Lucky Permutation",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 12803,
    "title": "Positions in Permutations",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 12804,
    "title": "Permutation Sum",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "implementation",
      "meet in the middle"
    ]
  },
  {
    "id": 12805,
    "title": "Building Permutation",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12806,
    "title": "Find Marble",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12807,
    "title": "Slightly Decreasing Permutations",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12808,
    "title": "Cows and Poker Game",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 12809,
    "title": "Cows and Primitive Roots",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 12810,
    "title": "Cow Tennis Tournament",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "math"
    ]
  },
  {
    "id": 12811,
    "title": "Cows and Cool Sequences",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 12812,
    "title": "Coin Troubles",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12813,
    "title": "Cow Program",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 12814,
    "title": "Cows and Sequence",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 12815,
    "title": "Sausage Maximization",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures",
      "tree"
    ]
  },
  {
    "id": 12816,
    "title": "Yet Another Number Game",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory"
    ]
  },
  {
    "id": 12817,
    "title": "XOR and OR",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12818,
    "title": "Painting Eggs",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 12819,
    "title": "Bit++",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12820,
    "title": "Nearest Fraction",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 12821,
    "title": "Word Capitalization",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 12822,
    "title": "Sequence Transformation",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12823,
    "title": "k-Maximum Subsequence Sum",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "implementation",
      "max flow"
    ]
  },
  {
    "id": 12824,
    "title": "Game on Tree",
    "difficulty": "hard",
    "category": [
      "implementation",
      "math",
      "probability",
      "tree"
    ]
  },
  {
    "id": 12825,
    "title": "Maximum Xor Secondary",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 12826,
    "title": "Rectangle Puzzle",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 12827,
    "title": "Beautiful Decomposition",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory",
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 12828,
    "title": "The Minimum Number of Variables",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 12829,
    "title": "Ladder",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 12830,
    "title": "Books",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 12831,
    "title": "Point on Spiral",
    "difficulty": "medium",
    "category": [
      "brute force",
      "geometry",
      "implementation"
    ]
  },
  {
    "id": 12832,
    "title": "New Problem",
    "difficulty": "medium",
    "category": [
      "brute force",
      "string"
    ]
  },
  {
    "id": 12833,
    "title": "Circle Line",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12834,
    "title": "Binary Tree on Plane",
    "difficulty": "hard",
    "category": [
      "max flow",
      "tree"
    ]
  },
  {
    "id": 12835,
    "title": "Google Code Jam",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "probability"
    ]
  },
  {
    "id": 12836,
    "title": "Game",
    "difficulty": "hard",
    "category": [
      "game theory",
      "implementation"
    ]
  },
  {
    "id": 12837,
    "title": "Set of Points",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "geometry"
    ]
  },
  {
    "id": 12838,
    "title": "Learning Languages",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 12839,
    "title": "Little Girl and Problem on Trees",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "tree"
    ]
  },
  {
    "id": 12840,
    "title": "Little Girl and Maximum XOR",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12841,
    "title": "Little Girl and Maximum Sum",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12842,
    "title": "Little Girl and Game",
    "difficulty": "medium",
    "category": [
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 12843,
    "title": "Lunch Rush",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12844,
    "title": "Convex Shape",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 12845,
    "title": "Lights Out",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12846,
    "title": "Mirror Room",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 12847,
    "title": "Lovely Matrix",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 12848,
    "title": "The Last Hole!",
    "difficulty": "hard",
    "category": [
      "brute force",
      "geometry"
    ]
  },
  {
    "id": 12849,
    "title": "Zero Tree",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 12850,
    "title": "k-Multiple Free Set",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 12851,
    "title": "Dima and Game",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory"
    ]
  },
  {
    "id": 12852,
    "title": "Dima and Figure",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12853,
    "title": "Dima and Horses",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "graph"
    ]
  },
  {
    "id": 12854,
    "title": "Dima and Two Sequences",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math",
      "sorting"
    ]
  },
  {
    "id": 12855,
    "title": "Dima and Staircase",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 12856,
    "title": "Dima and Sequence",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 12857,
    "title": "Dima and Friends",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 12858,
    "title": "Three Horses",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 12859,
    "title": "Good Substrings",
    "difficulty": "medium",
    "category": [
      "data structures",
      "string"
    ]
  },
  {
    "id": 12860,
    "title": "Secret",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 12861,
    "title": "Prime Matrix",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 12862,
    "title": "Beautiful Year",
    "difficulty": "easy",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 12863,
    "title": "Multithreading",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12864,
    "title": "Fancy Fence",
    "difficulty": "easy",
    "category": [
      "geometry",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12865,
    "title": "String Theory",
    "difficulty": "hard",
    "category": [
      "geometry",
      "math",
      "string"
    ]
  },
  {
    "id": 12866,
    "title": "Maximum Waterfall",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph",
      "sorting"
    ]
  },
  {
    "id": 12867,
    "title": "Flawed Flow",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy",
      "max flow"
    ]
  },
  {
    "id": 12868,
    "title": "Greenhouse Effect",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12869,
    "title": "Magical Boxes",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 12870,
    "title": "Playlist",
    "difficulty": "hard",
    "category": [
      "math",
      "probability",
      "sorting"
    ]
  },
  {
    "id": 12871,
    "title": "Wall Bars",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12872,
    "title": "Beautiful Sets of Points",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 12873,
    "title": "Buttons",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 12874,
    "title": "Games",
    "difficulty": "easy",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 12875,
    "title": "Berland Traffic",
    "difficulty": "hard",
    "category": [
      "math",
      "matrix"
    ]
  },
  {
    "id": 12876,
    "title": "Dominoes",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 12877,
    "title": "Subtractions",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 12878,
    "title": "More Queries to Array...",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math"
    ]
  },
  {
    "id": 12879,
    "title": "BerDonalds",
    "difficulty": "hard",
    "category": [
      "graph",
      "math",
      "shortest path"
    ]
  },
  {
    "id": 12880,
    "title": "Below the Diagonal",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 12881,
    "title": "Queue at the School",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "graph matching",
      "implementation",
      "shortest path"
    ]
  },
  {
    "id": 12882,
    "title": "Stones on the Table",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12883,
    "title": "Roadside Trees (Simplified Edition)",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12884,
    "title": "Colorful Stones (Simplified Edition)",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12885,
    "title": "Roadside Trees",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 12886,
    "title": "Colorful Stones",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 12887,
    "title": "Choosing Balls",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12888,
    "title": "Good Sequences",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "number theory"
    ]
  },
  {
    "id": 12889,
    "title": "Escape from Stones",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 12890,
    "title": "Rhombus",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 12891,
    "title": "Cycle in Graph",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 12892,
    "title": "Circle of Numbers",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 12893,
    "title": "Squares",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12894,
    "title": "Beautiful Matrix",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12895,
    "title": "Roma and Changing Signs",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 12896,
    "title": "Roma and Lucky Numbers",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12897,
    "title": "Maxim and Calculator",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 12898,
    "title": "Maxim and Increasing Subsequence",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12899,
    "title": "Maxim and Matrix",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 12900,
    "title": "Maxim and Restaurant",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 12901,
    "title": "Maxim and Discounts",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 12902,
    "title": "Dividing Kingdom",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures"
    ]
  },
  {
    "id": 12903,
    "title": "Black and White Tree",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy",
      "tree",
      "union find"
    ]
  },
  {
    "id": 12904,
    "title": "Balls and Boxes",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12905,
    "title": "Ancient Prophesy",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 12906,
    "title": "Adding Digits",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 12907,
    "title": "Little Elephant and Magic Square",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 12908,
    "title": "Little Elephant and Chess",
    "difficulty": "easy",
    "category": [
      "brute force",
      "string"
    ]
  },
  {
    "id": 12909,
    "title": "Little Elephant and Tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 12910,
    "title": "Little Elephant and Broken Sorting",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 12911,
    "title": "Little Elephant and LCM",
    "difficulty": "hard",
    "category": [
      "binary search",
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 12912,
    "title": "Little Elephant and Elections",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 12913,
    "title": "Little Elephant and Bits",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 12914,
    "title": "Greedy Elevator",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 12915,
    "title": "Sum",
    "difficulty": "hard",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 12916,
    "title": "View Angle",
    "difficulty": "medium",
    "category": [
      "brute force",
      "geometry",
      "math"
    ]
  },
  {
    "id": 12917,
    "title": "Playing Cubes",
    "difficulty": "medium",
    "category": [
      "game theory",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12918,
    "title": "Sockets",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12919,
    "title": "Lucky Arrays",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12920,
    "title": "Liars and Serge",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 12921,
    "title": "Furlo and Rublo and Game",
    "difficulty": "hard",
    "category": [
      "game theory",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12922,
    "title": "Mr. Bender and Square",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12923,
    "title": "Almost Arithmetical Progression",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 12924,
    "title": "Code Parsing",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12925,
    "title": "Greg's Workout",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12926,
    "title": "Dormitory",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 12927,
    "title": "Rats",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph",
      "graph traversal",
      "implementation",
      "shortest path"
    ]
  },
  {
    "id": 12928,
    "title": "Anagram",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 12929,
    "title": "Jury Size",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 12930,
    "title": "Cards with Numbers",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "sorting"
    ]
  },
  {
    "id": 12931,
    "title": "Printer",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12932,
    "title": "Table with Letters - 2",
    "difficulty": "hard",
    "category": [
      "brute force",
      "two pointers"
    ]
  },
  {
    "id": 12933,
    "title": "Text Editor",
    "difficulty": "medium",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 12934,
    "title": "Physics Practical",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 12935,
    "title": "Boys and Girls",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 12936,
    "title": "Unsorting Array",
    "difficulty": "medium",
    "category": [
      "brute force",
      "sorting"
    ]
  },
  {
    "id": 12937,
    "title": "Little Xor",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 12938,
    "title": "Tree and Table",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 12939,
    "title": "Two Sets",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "math"
    ]
  },
  {
    "id": 12940,
    "title": "Number Transformation",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 12941,
    "title": "Playing with Permutations",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 12942,
    "title": "Points on Line",
    "difficulty": "medium",
    "category": [
      "binary search",
      "combinatorics",
      "two pointers"
    ]
  },
  {
    "id": 12943,
    "title": "Mad Joe",
    "difficulty": "hard",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 12944,
    "title": "Building Bridge",
    "difficulty": "hard",
    "category": [
      "geometry",
      "ternary search",
      "two pointers"
    ]
  },
  {
    "id": 12945,
    "title": "Movie Critics",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 12946,
    "title": "Restoring IPv6",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 12947,
    "title": "Paper Work",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 12948,
    "title": "Endless Matrix",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 12949,
    "title": "Donkey and Stars",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "geometry",
      "math",
      "sorting"
    ]
  },
  {
    "id": 12950,
    "title": "Piglet's Birthday",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 12951,
    "title": "Sweets for Everyone!",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12952,
    "title": "Robo-Footballer",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry"
    ]
  },
  {
    "id": 12953,
    "title": "Chilly Willy",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 12954,
    "title": "Cupboards",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12955,
    "title": "Blood Cousins Return",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "graph traversal",
      "sorting"
    ]
  },
  {
    "id": 12956,
    "title": "Colorful Graph",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 12957,
    "title": "Beauty Pageant",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 12958,
    "title": "Increase and Decrease",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 12959,
    "title": "Buggy Sorting",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 12960,
    "title": "Queries for Number of Palindromes",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "hash table",
      "string"
    ]
  },
  {
    "id": 12961,
    "title": "Suggested Friends",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph"
    ]
  },
  {
    "id": 12962,
    "title": "Log Stream Analysis",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 12963,
    "title": "Mishap in Club",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 12964,
    "title": "Restoring Table",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 12965,
    "title": "Game with Coins",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 12966,
    "title": "Internet Address",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 12967,
    "title": "System Administrator",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12968,
    "title": "Undoubtedly Lucky Numbers",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "graph traversal"
    ]
  },
  {
    "id": 12969,
    "title": "Dividing Orange",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 12970,
    "title": "Matrix",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12971,
    "title": "Cubes",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "geometry",
      "two pointers"
    ]
  },
  {
    "id": 12972,
    "title": "Colorado Potato Beetle",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 12973,
    "title": "Hydra",
    "difficulty": "hard",
    "category": [
      "graph",
      "sorting"
    ]
  },
  {
    "id": 12974,
    "title": "The Brand New Function",
    "difficulty": "medium",
    "category": [
      "bit manipulation"
    ]
  },
  {
    "id": 12975,
    "title": "XOR on Segment",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "data structures"
    ]
  },
  {
    "id": 12976,
    "title": "Dispute",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 12977,
    "title": "King's Path",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "hash table",
      "shortest path"
    ]
  },
  {
    "id": 12978,
    "title": "Big Segment",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 12979,
    "title": "Heads or Tails",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 12980,
    "title": "Challenging Balloons",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 12981,
    "title": "Race",
    "difficulty": "hard",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 12982,
    "title": "Flights",
    "difficulty": "hard",
    "category": [
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 12983,
    "title": "Numbers",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 12984,
    "title": "Mirror Box",
    "difficulty": "hard",
    "category": [
      "geometry",
      "implementation"
    ]
  },
  {
    "id": 12985,
    "title": "Friends",
    "difficulty": "hard",
    "category": [
      "binary search",
      "bit manipulation",
      "data structures",
      "math"
    ]
  },
  {
    "id": 12986,
    "title": "Old Peykan",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 12987,
    "title": "TorCoder",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 12988,
    "title": "Road Repairs",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 12989,
    "title": "Easy Tape Programming",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 12990,
    "title": "Two Bags of Potatoes",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 12991,
    "title": "Meeting Her",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 12992,
    "title": "Tape Programming",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 12993,
    "title": "World Eater Brothers",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 12994,
    "title": "Boring Partition",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 12995,
    "title": "Not Wool Sequences",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 12996,
    "title": "Build String",
    "difficulty": "hard",
    "category": [
      "graph",
      "max flow"
    ]
  },
  {
    "id": 12997,
    "title": "T-decomposition",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 12998,
    "title": "Primes on Interval",
    "difficulty": "medium",
    "category": [
      "binary search",
      "number theory",
      "two pointers"
    ]
  },
  {
    "id": 12999,
    "title": "Young Table",
    "difficulty": "medium",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 13000,
    "title": "Free Cash",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13001,
    "title": "Easy Number Challenge",
    "difficulty": "medium",
    "category": [
      "implementation",
      "number theory"
    ]
  },
  {
    "id": 13002,
    "title": "Boy or Girl",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "string"
    ]
  },
  {
    "id": 13003,
    "title": "Number Challenge",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 13004,
    "title": "Graph Game",
    "difficulty": "hard",
    "category": [
      "graph"
    ]
  },
  {
    "id": 13005,
    "title": "Cyclical Quest",
    "difficulty": "hard",
    "category": [
      "data structures",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 13006,
    "title": "Let's Play Osu!",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 13007,
    "title": "LCM Challenge",
    "difficulty": "medium",
    "category": [
      "number theory"
    ]
  },
  {
    "id": 13008,
    "title": "Merging Two Decks",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 13009,
    "title": "Practice",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "divide and conquer",
      "implementation"
    ]
  },
  {
    "id": 13010,
    "title": "Fence",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13011,
    "title": "Champions' League",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13012,
    "title": "Cinema",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13013,
    "title": "Weather",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 13014,
    "title": "Reading",
    "difficulty": "easy",
    "category": [
      "sorting"
    ]
  },
  {
    "id": 13015,
    "title": "Lefthanders and Righthanders ",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13016,
    "title": "Non-square Equation",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "math"
    ]
  },
  {
    "id": 13017,
    "title": "Perfect Permutation",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13018,
    "title": "Quick Tortoise",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "divide and conquer",
      "dynamic programming"
    ]
  },
  {
    "id": 13019,
    "title": "Fence",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "string suffix structures"
    ]
  },
  {
    "id": 13020,
    "title": "Doe Graphs",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "divide and conquer",
      "dynamic programming",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 13021,
    "title": "Table",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 13022,
    "title": "Cycles",
    "difficulty": "medium",
    "category": [
      "binary search",
      "constructive algorithms",
      "graph",
      "greedy"
    ]
  },
  {
    "id": 13023,
    "title": "Cactus",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 13024,
    "title": "Magic Box",
    "difficulty": "medium",
    "category": [
      "brute force",
      "geometry"
    ]
  },
  {
    "id": 13025,
    "title": "To Add or Not to Add",
    "difficulty": "medium",
    "category": [
      "binary search",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 13026,
    "title": "Magic, Wizardry and Wonders",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 13027,
    "title": "Team",
    "difficulty": "easy",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 13028,
    "title": "T-primes",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation",
      "math",
      "number theory"
    ]
  },
  {
    "id": 13029,
    "title": "Dragons",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 13030,
    "title": "Gifts",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 13031,
    "title": "Towers",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 13032,
    "title": "Triangles",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "graph",
      "math"
    ]
  },
  {
    "id": 13033,
    "title": "Planets",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 13034,
    "title": "Shifts",
    "difficulty": "medium",
    "category": [
      "brute force",
      "two pointers"
    ]
  },
  {
    "id": 13035,
    "title": "The Road to Berland is Paved With Good Intentions",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 13036,
    "title": "Zigzag",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 13037,
    "title": "Fractal Detector",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "hash table"
    ]
  },
  {
    "id": 13038,
    "title": "Two Tables",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13039,
    "title": "Is your horseshoe on the other hoof?",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13040,
    "title": "Effective Approach",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13041,
    "title": "Where do I Turn?",
    "difficulty": "medium",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 13042,
    "title": "Noble Knight's Path",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 13043,
    "title": "The table",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 13044,
    "title": "Anniversary",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation",
      "math",
      "matrix",
      "number theory"
    ]
  },
  {
    "id": 13045,
    "title": "Naughty Stone Piles",
    "difficulty": "hard",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13046,
    "title": "Flying Saucer Segments",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 13047,
    "title": "Unsolvable",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 13048,
    "title": "Snake",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "graph",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 13049,
    "title": "Barcode",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 13050,
    "title": "Well-known Numbers",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy",
      "number theory"
    ]
  },
  {
    "id": 13051,
    "title": "Dice Tower",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 13052,
    "title": "Array",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 13053,
    "title": "Parallelepiped",
    "difficulty": "easy",
    "category": [
      "brute force",
      "geometry",
      "math"
    ]
  },
  {
    "id": 13054,
    "title": "Planar Graph",
    "difficulty": "hard",
    "category": [
      "geometry",
      "graph",
      "max flow"
    ]
  },
  {
    "id": 13055,
    "title": "Spider",
    "difficulty": "hard",
    "category": [
      "geometry",
      "graph"
    ]
  },
  {
    "id": 13056,
    "title": "Partial Sums",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "number theory"
    ]
  },
  {
    "id": 13057,
    "title": "Two Strings",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 13058,
    "title": "Bracket Sequence",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation",
      "parsing"
    ]
  },
  {
    "id": 13059,
    "title": "Decoding Genome",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "matrix"
    ]
  },
  {
    "id": 13060,
    "title": "Olympiad",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 13061,
    "title": "Reducing Fractions",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math",
      "number theory",
      "sorting"
    ]
  },
  {
    "id": 13062,
    "title": "Cosmic Tables",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 13063,
    "title": "Shooshuns and Sequence ",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13064,
    "title": "Little Elephant and Numbers",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13065,
    "title": "Little Elephant and Function",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13066,
    "title": "Little Elephant and Inversions",
    "difficulty": "hard",
    "category": [
      "data structures",
      "two pointers"
    ]
  },
  {
    "id": 13067,
    "title": "Little Elephant and Triangle",
    "difficulty": "hard",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 13068,
    "title": "Little Elephant and Shifts",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 13069,
    "title": "Little Elephant and Array",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures"
    ]
  },
  {
    "id": 13070,
    "title": "Little Elephant and Problem",
    "difficulty": "medium",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 13071,
    "title": "Parking Lot",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 13072,
    "title": "Choosing Capital for Treeland",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 13073,
    "title": "Color Stripe",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 13074,
    "title": "Special Offer! Super Price 999 Bourles!",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13075,
    "title": "k-String",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 13076,
    "title": "Airport",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13077,
    "title": "Mountain Scenery",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 13078,
    "title": "Alien DNA",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree",
      "union find"
    ]
  },
  {
    "id": 13079,
    "title": "Bitonix' Patrol",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "combinatorics",
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 13080,
    "title": "Formurosa",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "dynamic programming",
      "parsing"
    ]
  },
  {
    "id": 13081,
    "title": "Blackboard Fibonacci",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 13082,
    "title": "Ice Skating",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 13083,
    "title": "Martian Luck",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 13084,
    "title": "Spider's Web",
    "difficulty": "medium",
    "category": [
      "binary search",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 13085,
    "title": "Hiring Staff",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13086,
    "title": "Forming Teams",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 13087,
    "title": "Tiling with Hexagons",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13088,
    "title": "Periodical Numbers",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "number theory"
    ]
  },
  {
    "id": 13089,
    "title": "Hot Days",
    "difficulty": "hard",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13090,
    "title": "Crosses",
    "difficulty": "hard",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13091,
    "title": "Olympic Medal",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 13092,
    "title": "Bicycle Chain",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13093,
    "title": "Hometask",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math"
    ]
  },
  {
    "id": 13094,
    "title": "System of Equations",
    "difficulty": "easy",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 13095,
    "title": "Two Permutations",
    "difficulty": "hard",
    "category": [
      "data structures",
      "hash table",
      "string"
    ]
  },
  {
    "id": 13096,
    "title": "Stars",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "geometry"
    ]
  },
  {
    "id": 13097,
    "title": "Relay Race",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13098,
    "title": "Numbers",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 13099,
    "title": "Game",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 13100,
    "title": "IT Restaurants",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 13101,
    "title": "Cutting a Fence",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "union find"
    ]
  },
  {
    "id": 13102,
    "title": "Cowboys",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 13103,
    "title": "Polycarpus is Looking for Good Substrings",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "hash table",
      "implementation"
    ]
  },
  {
    "id": 13104,
    "title": "Privatization",
    "difficulty": "hard",
    "category": [
      "graph",
      "max flow"
    ]
  },
  {
    "id": 13105,
    "title": "Trails and Glades",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy",
      "union find"
    ]
  },
  {
    "id": 13106,
    "title": "Pixels",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 13107,
    "title": "Multicolored Marbles",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 13108,
    "title": "Blood Cousins",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 13109,
    "title": "Prizes, Prizes, more Prizes",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13110,
    "title": "Police Station",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 13111,
    "title": "Solitaire",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal"
    ]
  },
  {
    "id": 13112,
    "title": "Dubstep",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 13113,
    "title": "The Beaver's Problem - 3",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 13114,
    "title": "The Beaver's Problem - 3",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 13115,
    "title": "The Beaver's Problem - 3",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 13116,
    "title": "The Beaver's Problem - 3",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 13117,
    "title": "The Beaver's Problem - 3",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 13118,
    "title": "The Beaver's Problem - 3",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 13119,
    "title": "The Beaver's Problem - 3",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 13120,
    "title": "The Beaver's Problem - 3",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 13121,
    "title": "The Beaver's Problem - 3",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 13122,
    "title": "The Beaver's Problem - 3",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 13123,
    "title": "Game with Two Trees",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 13124,
    "title": "Game with Two Trees",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 13125,
    "title": "Game with Two Trees",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 13126,
    "title": "Military Trainings",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 13127,
    "title": "Military Trainings",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 13128,
    "title": "Military Trainings",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 13129,
    "title": "Beaver's Calculator 1.0",
    "difficulty": "hard",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13130,
    "title": "Beaver's Calculator 1.0",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13131,
    "title": "Beaver's Calculator 1.0",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13132,
    "title": "Little Elephant and Sorting",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 13133,
    "title": "Little Elephant and Rozdil",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13134,
    "title": "Little Elephant and Strings",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation",
      "string suffix structures",
      "two pointers"
    ]
  },
  {
    "id": 13135,
    "title": "Little Elephant and Retro Strings",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13136,
    "title": "Little Elephant and Furik and Rubik",
    "difficulty": "hard",
    "category": [
      "math",
      "probability"
    ]
  },
  {
    "id": 13137,
    "title": "Little Elephant and Cards",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 13138,
    "title": "Little Elephant and Interval",
    "difficulty": "medium",
    "category": [
      "binary search",
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 13139,
    "title": "Transportation",
    "difficulty": "hard",
    "category": [
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 13140,
    "title": "Hit Ball",
    "difficulty": "medium",
    "category": [
      "geometry",
      "implementation",
      "math"
    ]
  },
  {
    "id": 13141,
    "title": "Photographer",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 13142,
    "title": "Game on Paper",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13143,
    "title": "Two Problems",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13144,
    "title": "Brand New Easy Problem",
    "difficulty": "medium",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 13145,
    "title": "LLPS",
    "difficulty": "easy",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force",
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 13146,
    "title": "Thoroughly Bureaucratic Organization",
    "difficulty": "hard",
    "category": [
      "binary search",
      "combinatorics"
    ]
  },
  {
    "id": 13147,
    "title": "Brand New Problem",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 13148,
    "title": "Fragile Bridges",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13149,
    "title": "Guess That Car!",
    "difficulty": "medium",
    "category": [
      "math",
      "ternary search"
    ]
  },
  {
    "id": 13150,
    "title": "Clear Symmetry",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 13151,
    "title": "Tractor College",
    "difficulty": "hard",
    "category": [
      "implementation",
      "math",
      "number theory",
      "ternary search"
    ]
  },
  {
    "id": 13152,
    "title": "Programming Language",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "implementation",
      "parsing"
    ]
  },
  {
    "id": 13153,
    "title": "Football Championship",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13154,
    "title": "Drinks",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13155,
    "title": "Cinema",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures"
    ]
  },
  {
    "id": 13156,
    "title": "Special Olympics",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 13157,
    "title": "Hexadecimal's theorem",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation",
      "number theory"
    ]
  },
  {
    "id": 13158,
    "title": "Gripping Story",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 13159,
    "title": "Cube Snake",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 13160,
    "title": "Delivering Carcinogen",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry"
    ]
  },
  {
    "id": 13161,
    "title": "Jumping on Walls",
    "difficulty": "medium",
    "category": [
      "shortest path"
    ]
  },
  {
    "id": 13162,
    "title": "About Bacteria",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13163,
    "title": "Limit",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 13164,
    "title": "Plate Game",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "game theory",
      "math"
    ]
  },
  {
    "id": 13165,
    "title": "Opening Portals",
    "difficulty": "hard",
    "category": [
      "graph",
      "shortest path",
      "union find"
    ]
  },
  {
    "id": 13166,
    "title": "The Next Good String",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "hash table",
      "string"
    ]
  },
  {
    "id": 13167,
    "title": "Paint Tree",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "divide and conquer",
      "geometry",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 13168,
    "title": "Infinite Maze",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 13169,
    "title": "Lexicographically Maximum Subsequence",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 13170,
    "title": "Building Forest",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "union find"
    ]
  },
  {
    "id": 13171,
    "title": "Analyzing Polyline",
    "difficulty": "hard",
    "category": [
      "geometry",
      "math",
      "sorting"
    ]
  },
  {
    "id": 13172,
    "title": "Try and Catch",
    "difficulty": "medium",
    "category": [
      "implementation",
      "parsing"
    ]
  },
  {
    "id": 13173,
    "title": "After Training",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation",
      "math"
    ]
  },
  {
    "id": 13174,
    "title": "Let's Watch Football",
    "difficulty": "easy",
    "category": [
      "binary search",
      "brute force",
      "math"
    ]
  },
  {
    "id": 13175,
    "title": "Square",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 13176,
    "title": "Exams",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13177,
    "title": "Fibonacci Number",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math",
      "matrix"
    ]
  },
  {
    "id": 13178,
    "title": "Two Segments",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 13179,
    "title": "Hamming Distance",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "math",
      "matrix"
    ]
  },
  {
    "id": 13180,
    "title": "Xor",
    "difficulty": "hard",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 13181,
    "title": "Cutting Figure",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "tree"
    ]
  },
  {
    "id": 13182,
    "title": "Walking in the Rain",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13183,
    "title": "Funky Numbers",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13184,
    "title": "Thwarting Demonstrations",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "tree"
    ]
  },
  {
    "id": 13185,
    "title": "Metro Scheme",
    "difficulty": "hard",
    "category": [
      "graph",
      "greedy"
    ]
  },
  {
    "id": 13186,
    "title": "Fools and Roads",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 13187,
    "title": "Demonstration",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13188,
    "title": "Dynasty Puzzles",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13189,
    "title": "Counter Attack",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "hash table",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 13190,
    "title": "Non-Secret Cypher",
    "difficulty": "hard",
    "category": [
      "two pointers"
    ]
  },
  {
    "id": 13191,
    "title": "STL",
    "difficulty": "medium",
    "category": [
      "graph traversal"
    ]
  },
  {
    "id": 13192,
    "title": "Surrounded",
    "difficulty": "medium",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 13193,
    "title": "Vasya and the Bus",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 13194,
    "title": "Counting Rhombi",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 13195,
    "title": "Cut Ribbon",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 13196,
    "title": "Stack",
    "difficulty": "medium",
    "category": [
      "implementation",
      "parsing",
      "special problem"
    ]
  },
  {
    "id": 13197,
    "title": "Array Sorting",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 13198,
    "title": "Binary Notation",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 13199,
    "title": "HQ9+",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 13200,
    "title": "Asterisks",
    "difficulty": "easy",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 13201,
    "title": "LCM",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math",
      "special problem"
    ]
  },
  {
    "id": 13202,
    "title": "A + Reverse B",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 13203,
    "title": "Hexagonal Numbers",
    "difficulty": "easy",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 13204,
    "title": "Heaven Tour",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 13205,
    "title": "BRT Contract ",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 13206,
    "title": "Weak Memory",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 13207,
    "title": "AlgoRace",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "shortest path"
    ]
  },
  {
    "id": 13208,
    "title": "Permutations",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13209,
    "title": "Growing Mushrooms",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 13210,
    "title": "Comparing Strings",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 13211,
    "title": "Soap Time! - 2",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 13212,
    "title": "Visit of the Great",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 13213,
    "title": "Clever Fat Rat",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13214,
    "title": "Mushroom Scientists",
    "difficulty": "medium",
    "category": [
      "math",
      "ternary search"
    ]
  },
  {
    "id": 13215,
    "title": "Plant",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 13216,
    "title": "Candy Shop",
    "difficulty": "hard",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13217,
    "title": "T-shirt",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "probability"
    ]
  },
  {
    "id": 13218,
    "title": "Cyclic Coloring",
    "difficulty": "hard",
    "category": [
      "graph traversal"
    ]
  },
  {
    "id": 13219,
    "title": "Zoo",
    "difficulty": "medium",
    "category": [
      "brute force",
      "geometry"
    ]
  },
  {
    "id": 13220,
    "title": "Headquarters",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 13221,
    "title": "Wooden Fence",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13222,
    "title": "Common Divisors",
    "difficulty": "medium",
    "category": [
      "brute force",
      "hash table",
      "implementation",
      "math",
      "string"
    ]
  },
  {
    "id": 13223,
    "title": "Optimal Sum",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 13224,
    "title": "Vasya's Calendar",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13225,
    "title": "Battlefield",
    "difficulty": "hard",
    "category": [
      "geometry",
      "graph",
      "implementation",
      "shortest path"
    ]
  },
  {
    "id": 13226,
    "title": "Number of Triplets",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force"
    ]
  },
  {
    "id": 13227,
    "title": "Series of Crimes",
    "difficulty": "easy",
    "category": [
      "brute force",
      "geometry",
      "implementation"
    ]
  },
  {
    "id": 13228,
    "title": "Mathematical Analysis Rocks!",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 13229,
    "title": "Cubes",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 13230,
    "title": "Name",
    "difficulty": "hard",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 13231,
    "title": "Letter",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13232,
    "title": "Divisibility Rules",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 13233,
    "title": "Defragmentation",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13234,
    "title": "Representative Sampling",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 13235,
    "title": "Representative Sampling",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "sorting",
      "string"
    ]
  },
  {
    "id": 13236,
    "title": "Representative Sampling",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 13237,
    "title": "The Beaver's Problem - 2",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 13238,
    "title": "The Beaver's Problem - 2",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 13239,
    "title": "The Beaver's Problem - 2",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 13240,
    "title": "Magic Squares",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 13241,
    "title": "Magic Squares",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 13242,
    "title": "Magic Squares",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 13243,
    "title": "Smart Beaver and Resolving Collisions",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 13244,
    "title": "Smart Beaver and Resolving Collisions",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 13245,
    "title": "Smart Beaver and Resolving Collisions",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 13246,
    "title": "Greedy Merchants",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 13247,
    "title": "Greedy Merchants",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 13248,
    "title": "Greedy Merchants",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 13249,
    "title": "Educational Game",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13250,
    "title": "Educational Game",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13251,
    "title": "Educational Game",
    "difficulty": "easy",
    "category": []
  },
  {
    "id": 13252,
    "title": "Fibonacci Strings",
    "difficulty": "hard",
    "category": [
      "matrix",
      "string"
    ]
  },
  {
    "id": 13253,
    "title": "Fibonacci Strings",
    "difficulty": "hard",
    "category": [
      "string"
    ]
  },
  {
    "id": 13254,
    "title": "Script Generation",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 13255,
    "title": "Script Generation",
    "difficulty": "medium",
    "category": []
  },
  {
    "id": 13256,
    "title": "Space Voyage",
    "difficulty": "hard",
    "category": [
      "binary search"
    ]
  },
  {
    "id": 13257,
    "title": "Space Voyage",
    "difficulty": "medium",
    "category": [
      "binary search"
    ]
  },
  {
    "id": 13258,
    "title": "Encrypting Messages",
    "difficulty": "medium",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 13259,
    "title": "Encrypting Messages",
    "difficulty": "medium",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 13260,
    "title": "Party",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 13261,
    "title": "Party",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 13262,
    "title": "Rectangular Game",
    "difficulty": "medium",
    "category": [
      "number theory"
    ]
  },
  {
    "id": 13263,
    "title": "Rectangular Game",
    "difficulty": "easy",
    "category": [
      "number theory"
    ]
  },
  {
    "id": 13264,
    "title": "Good Matrix Elements",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13265,
    "title": "Good Matrix Elements",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13266,
    "title": "Archaeology",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 13267,
    "title": "Hyper String",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13268,
    "title": "Playing with Superglue",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms"
    ]
  },
  {
    "id": 13269,
    "title": "Word Cut",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13270,
    "title": "Trading Business",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 13271,
    "title": "Gnomes of Might and Magic",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "implementation",
      "shortest path"
    ]
  },
  {
    "id": 13272,
    "title": "Power Defence",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "geometry",
      "greedy"
    ]
  },
  {
    "id": 13273,
    "title": "Plane of Tanks: Duel",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 13274,
    "title": "Geometry Horse",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 13275,
    "title": "Plane of Tanks: Pro",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13276,
    "title": "Robot Bicorn Attack",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13277,
    "title": "Range Increments",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 13278,
    "title": "File List",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 13279,
    "title": "Problem About Equation",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 13280,
    "title": "Camping Groups",
    "difficulty": "hard",
    "category": [
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 13281,
    "title": "Deputies",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 13282,
    "title": "Spiral Maximum",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 13283,
    "title": "Chamber of Secrets",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 13284,
    "title": "Rock-Paper-Scissors",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13285,
    "title": "BHTML+BCSS",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "parsing",
      "special problem"
    ]
  },
  {
    "id": 13286,
    "title": "Calendar Reform",
    "difficulty": "medium",
    "category": [
      "number theory",
      "special problem"
    ]
  },
  {
    "id": 13287,
    "title": "Bus",
    "difficulty": "medium",
    "category": [
      "implementation",
      "sorting",
      "special problem"
    ]
  },
  {
    "id": 13288,
    "title": "Pseudorandom Sequence Period",
    "difficulty": "medium",
    "category": [
      "implementation",
      "number theory",
      "special problem"
    ]
  },
  {
    "id": 13289,
    "title": "Phone Code",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 13290,
    "title": "A polyline",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 13291,
    "title": "Mysterious numbers - 2",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 13292,
    "title": "ucyhf",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "number theory",
      "special problem"
    ]
  },
  {
    "id": 13293,
    "title": "MYSTERIOUS LANGUAGE",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 13294,
    "title": "Broken checker",
    "difficulty": "medium",
    "category": [
      "brute force",
      "special problem"
    ]
  },
  {
    "id": 13295,
    "title": "A Piece of Cake",
    "difficulty": "hard",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 13296,
    "title": "Star",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "special problem"
    ]
  },
  {
    "id": 13297,
    "title": "Mysterious numbers - 1",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "special problem"
    ]
  },
  {
    "id": 13298,
    "title": "Replacing Digits",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13299,
    "title": "Chores",
    "difficulty": "easy",
    "category": [
      "sorting"
    ]
  },
  {
    "id": 13300,
    "title": "Wizards and Minimal Spell",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 13301,
    "title": "Wizards and Demonstration",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13302,
    "title": "Wizards and Bets",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "math",
      "matrix"
    ]
  },
  {
    "id": 13303,
    "title": "Wizards and Roads",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "graph",
      "graph matching",
      "greedy"
    ]
  },
  {
    "id": 13304,
    "title": "Wizards and Numbers",
    "difficulty": "hard",
    "category": [
      "game theory",
      "math"
    ]
  },
  {
    "id": 13305,
    "title": "Wizards and Huge Prize",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 13306,
    "title": "Wizards and Trolleybuses",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13307,
    "title": "Tetrahedron",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "math",
      "matrix"
    ]
  },
  {
    "id": 13308,
    "title": "Shoe Store",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph matching",
      "greedy",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 13309,
    "title": "Median",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 13310,
    "title": "Polygons",
    "difficulty": "hard",
    "category": [
      "geometry",
      "sorting"
    ]
  },
  {
    "id": 13311,
    "title": "Rank List",
    "difficulty": "easy",
    "category": [
      "binary search",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 13312,
    "title": "Compatible Numbers",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "dynamic programming",
      "graph traversal"
    ]
  },
  {
    "id": 13313,
    "title": "Beard Graph",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree",
      "union find"
    ]
  },
  {
    "id": 13314,
    "title": "Another Problem on Strings",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "dynamic programming",
      "math",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 13315,
    "title": "Burning Midnight Oil",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation"
    ]
  },
  {
    "id": 13316,
    "title": "Supercentral Point",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13317,
    "title": "Polycarpus and Tasks",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 13318,
    "title": "Minimum Diameter",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force"
    ]
  },
  {
    "id": 13319,
    "title": "Machine Programming",
    "difficulty": "hard",
    "category": [
      "graph",
      "max flow"
    ]
  },
  {
    "id": 13320,
    "title": "Ancient Berland Hieroglyphs",
    "difficulty": "hard",
    "category": [
      "two pointers"
    ]
  },
  {
    "id": 13321,
    "title": "Variable, or There and Back Again",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 13322,
    "title": "e-Government",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "graph traversal",
      "string",
      "tree"
    ]
  },
  {
    "id": 13323,
    "title": "Large Refrigerator",
    "difficulty": "hard",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 13324,
    "title": "Conveyor",
    "difficulty": "hard",
    "category": [
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 13325,
    "title": "Lemmings",
    "difficulty": "hard",
    "category": [
      "binary search"
    ]
  },
  {
    "id": 13326,
    "title": "Substring and Subsequence",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13327,
    "title": "Brackets",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 13328,
    "title": "Truncatable primes",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 13329,
    "title": "Alternating case",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 13330,
    "title": "Non-decimal sum",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 13331,
    "title": "Factorial zeros",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 13332,
    "title": "HQ9+",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 13333,
    "title": "Remove digits",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 13334,
    "title": "Prime factorization",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 13335,
    "title": "Binary notation",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 13336,
    "title": "Pentagonal numbers",
    "difficulty": "easy",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 13337,
    "title": "Polycarpus the Safecracker",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 13338,
    "title": "Distance in Tree",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 13339,
    "title": "Abracadabra",
    "difficulty": "hard",
    "category": [
      "divide and conquer"
    ]
  },
  {
    "id": 13340,
    "title": "Discounts",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 13341,
    "title": "Dress'em in Vests!",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 13342,
    "title": "Buses and People",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 13343,
    "title": "Edges in MST",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 13344,
    "title": "Find Pair",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math",
      "sorting"
    ]
  },
  {
    "id": 13345,
    "title": "Unlucky Ticket",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 13346,
    "title": "Twins",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 13347,
    "title": "Zebra Tower",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy",
      "sorting",
      "special problem"
    ]
  },
  {
    "id": 13348,
    "title": "Palindrome pairs",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "special problem",
      "string"
    ]
  },
  {
    "id": 13349,
    "title": "String Manipulation 1.0",
    "difficulty": "medium",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "special problem",
      "string"
    ]
  },
  {
    "id": 13350,
    "title": "Matchmaker",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting",
      "special problem"
    ]
  },
  {
    "id": 13351,
    "title": "Friends or Not",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 13352,
    "title": "Phone Talks",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "sorting",
      "special problem"
    ]
  },
  {
    "id": 13353,
    "title": "Ice Sculptures",
    "difficulty": "medium",
    "category": [
      "brute force",
      "number theory",
      "special problem"
    ]
  },
  {
    "id": 13354,
    "title": "Cd and pwd commands",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 13355,
    "title": "Taxi",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 13356,
    "title": "Next Round",
    "difficulty": "easy",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 13357,
    "title": "Trace",
    "difficulty": "easy",
    "category": [
      "geometry",
      "sorting"
    ]
  },
  {
    "id": 13358,
    "title": "Game Outcome",
    "difficulty": "easy",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 13359,
    "title": "Mrs. Hudson's Pancakes",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 13360,
    "title": "Clues",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "graph"
    ]
  },
  {
    "id": 13361,
    "title": "Cipher",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 13362,
    "title": "Suspects",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 13363,
    "title": "Message",
    "difficulty": "medium",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 13364,
    "title": "Combination",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 13365,
    "title": "I_love_\\%username\\%",
    "difficulty": "easy",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 13366,
    "title": "Martian Colony",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 13367,
    "title": "Flatland Fencing",
    "difficulty": "hard",
    "category": [
      "game theory",
      "math"
    ]
  },
  {
    "id": 13368,
    "title": "Double Profiles",
    "difficulty": "hard",
    "category": [
      "graph",
      "hash table",
      "sorting"
    ]
  },
  {
    "id": 13369,
    "title": "Colliders",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 13370,
    "title": "Hometask",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13371,
    "title": "Euclidean Distance",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 13372,
    "title": "Date Change",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 13373,
    "title": "Caesar Cipher",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 13374,
    "title": "Binary notation",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 13375,
    "title": "A + B",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 13376,
    "title": "Garden",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "graph",
      "tree"
    ]
  },
  {
    "id": 13377,
    "title": "Frames",
    "difficulty": "hard",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 13378,
    "title": "Pocket Book",
    "difficulty": "medium",
    "category": [
      "combinatorics"
    ]
  },
  {
    "id": 13379,
    "title": "Steps",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation"
    ]
  },
  {
    "id": 13380,
    "title": "Marks",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13381,
    "title": "Phone Numbers",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 13382,
    "title": "Soft Drinking",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13383,
    "title": "Freezing with Style",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "divide and conquer",
      "tree"
    ]
  },
  {
    "id": 13384,
    "title": "Mission Impassable",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 13385,
    "title": "Smart Cheater",
    "difficulty": "hard",
    "category": [
      "data structures",
      "math",
      "probability"
    ]
  },
  {
    "id": 13386,
    "title": "Quantity of Strings",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "graph",
      "graph traversal",
      "math"
    ]
  },
  {
    "id": 13387,
    "title": "Win or Freeze",
    "difficulty": "medium",
    "category": [
      "game theory",
      "math",
      "number theory"
    ]
  },
  {
    "id": 13388,
    "title": "Martian Strings",
    "difficulty": "hard",
    "category": [
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 13389,
    "title": "Coloring Brackets",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13390,
    "title": "Division into Teams",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 13391,
    "title": "Martian Clock",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13392,
    "title": "Business trip",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 13393,
    "title": "Porcelain",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13394,
    "title": "Bag of mice",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "game theory",
      "math",
      "probability"
    ]
  },
  {
    "id": 13395,
    "title": "Terse princess",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 13396,
    "title": "Escape",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13397,
    "title": "Insomnia cure",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 13398,
    "title": "Smile House",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph",
      "matrix"
    ]
  },
  {
    "id": 13399,
    "title": "Punctuation",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 13400,
    "title": "Lucky Mask",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13401,
    "title": "Lucky Ticket",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13402,
    "title": "Lucky Queries",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 13403,
    "title": "Lucky Pair",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 13404,
    "title": "Lucky Subsequence",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 13405,
    "title": "Lucky Number 2",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 13406,
    "title": "Lucky Conversion",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 13407,
    "title": "Competition",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 13408,
    "title": "Missile Silos",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 13409,
    "title": "Anagram Search",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 13410,
    "title": "Meeting",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13411,
    "title": "Arrival of the General",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13412,
    "title": "Help Kingdom of Far Far Away 2",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 13413,
    "title": "Help Vasilisa the Wise 2",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 13414,
    "title": "Help Greg the Dwarf 2",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 13415,
    "title": "Help Shrek and Donkey 2",
    "difficulty": "hard",
    "category": [
      "game theory"
    ]
  },
  {
    "id": 13416,
    "title": "Help Caretaker",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 13417,
    "title": "Help General",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 13418,
    "title": "Help Farmer",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 13419,
    "title": "Clearing Up",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "graph",
      "union find"
    ]
  },
  {
    "id": 13420,
    "title": "Take-off Ramps",
    "difficulty": "hard",
    "category": [
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 13421,
    "title": "Queue",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 13422,
    "title": "Hopscotch",
    "difficulty": "medium",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 13423,
    "title": "Amusing Joke",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting",
      "string"
    ]
  },
  {
    "id": 13424,
    "title": "New Year Snowflake",
    "difficulty": "hard",
    "category": [
      "geometry",
      "sorting"
    ]
  },
  {
    "id": 13425,
    "title": "New Year Garland",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 13426,
    "title": "New Year Contest",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 13427,
    "title": "New Year Snowmen",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 13428,
    "title": "New Year Cards",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 13429,
    "title": "New Year Table",
    "difficulty": "medium",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 13430,
    "title": "Wallpaper",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13431,
    "title": "Petr and Book",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13432,
    "title": "Hellish Constraints",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "two pointers"
    ]
  },
  {
    "id": 13433,
    "title": "World of Darkraft",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory"
    ]
  },
  {
    "id": 13434,
    "title": "Mushroom Gnomes - 2",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "probability",
      "sorting"
    ]
  },
  {
    "id": 13435,
    "title": "Digits Permutations",
    "difficulty": "hard",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13436,
    "title": "Literature Lesson",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13437,
    "title": "Last Chance",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation",
      "string"
    ]
  },
  {
    "id": 13438,
    "title": "Palindromes",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 13439,
    "title": "History",
    "difficulty": "medium",
    "category": [
      "sorting"
    ]
  },
  {
    "id": 13440,
    "title": "Permutation",
    "difficulty": "easy",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13441,
    "title": "Postcards and photos",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13442,
    "title": "Ternary Logic",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13443,
    "title": "Presents",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13444,
    "title": "Weak Subsequence",
    "difficulty": "hard",
    "category": [
      "combinatorics"
    ]
  },
  {
    "id": 13445,
    "title": "Cycle",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 13446,
    "title": "Zero-One",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 13447,
    "title": "Rectangle and Square",
    "difficulty": "medium",
    "category": [
      "brute force",
      "geometry",
      "math"
    ]
  },
  {
    "id": 13448,
    "title": "Replacement",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 13449,
    "title": "Swaps",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy"
    ]
  },
  {
    "id": 13450,
    "title": "Pairs of Numbers",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph traversal",
      "math",
      "number theory"
    ]
  },
  {
    "id": 13451,
    "title": "Average Numbers",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13452,
    "title": "Unary",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13453,
    "title": "HQ9+",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13454,
    "title": "Bits of merry old England",
    "difficulty": "hard",
    "category": [
      "graph",
      "max flow"
    ]
  },
  {
    "id": 13455,
    "title": "Constants in the language of Shakespeare",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 13456,
    "title": "Logo Turtle",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13457,
    "title": "Piet",
    "difficulty": "hard",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13458,
    "title": "Turing Tape",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13459,
    "title": "Present to Mom",
    "difficulty": "hard",
    "category": [
      "binary search",
      "two pointers"
    ]
  },
  {
    "id": 13460,
    "title": "Yet Another Task with Queens",
    "difficulty": "medium",
    "category": [
      "sorting"
    ]
  },
  {
    "id": 13461,
    "title": "Subway",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 13462,
    "title": "The World is a Theatre",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 13463,
    "title": "Opposites Attract",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13464,
    "title": "cAPS lOCK",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 13465,
    "title": "Date calculation",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 13466,
    "title": "Array sorting",
    "difficulty": "hard",
    "category": [
      "sorting",
      "special problem"
    ]
  },
  {
    "id": 13467,
    "title": "Balanced brackets",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 13468,
    "title": "CAPS LOCK ON",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 13469,
    "title": "Prime factorization",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 13470,
    "title": "Tribonacci numbers",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 13471,
    "title": "Exponentiation",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 13472,
    "title": "Decimal sum",
    "difficulty": "medium",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 13473,
    "title": "Gnikool Ssalg",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem",
      "string"
    ]
  },
  {
    "id": 13474,
    "title": "Hexagonal numbers",
    "difficulty": "easy",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 13475,
    "title": "Students and Shoelaces",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 13476,
    "title": "Cookies",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13477,
    "title": "Birthday",
    "difficulty": "hard",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 13478,
    "title": "Numbers",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 13479,
    "title": "Games with Rectangle",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 13480,
    "title": "String",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "hash table",
      "implementation",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 13481,
    "title": "Statues",
    "difficulty": "medium",
    "category": [
      "graph traversal"
    ]
  },
  {
    "id": 13482,
    "title": "Canvas Frames",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13483,
    "title": "Wasted Time",
    "difficulty": "easy",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 13484,
    "title": "Pills",
    "difficulty": "hard",
    "category": [
      "brute force",
      "max flow"
    ]
  },
  {
    "id": 13485,
    "title": "Fibonacci Sums",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 13486,
    "title": "E-reader Display",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 13487,
    "title": "Password",
    "difficulty": "medium",
    "category": [
      "binary search",
      "dynamic programming",
      "hash table",
      "string",
      "string suffix structures"
    ]
  },
  {
    "id": 13488,
    "title": "Hot Bath",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "math"
    ]
  },
  {
    "id": 13489,
    "title": "MST Company",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph"
    ]
  },
  {
    "id": 13490,
    "title": "Two progressions",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 13491,
    "title": "Hobbits' Party",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 13492,
    "title": "Simple XML",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13493,
    "title": "Measuring Lengths in Baden",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 13494,
    "title": "Permutations",
    "difficulty": "medium",
    "category": [
      "brute force",
      "combinatorics",
      "implementation"
    ]
  },
  {
    "id": 13495,
    "title": "The number of positions",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 13496,
    "title": "Maze",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "probability",
      "tree"
    ]
  },
  {
    "id": 13497,
    "title": "String",
    "difficulty": "hard",
    "category": [
      "string suffix structures"
    ]
  },
  {
    "id": 13498,
    "title": "Brackets",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 13499,
    "title": "Squares",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 13500,
    "title": "Prime Permutation",
    "difficulty": "medium",
    "category": [
      "implementation",
      "number theory",
      "string"
    ]
  },
  {
    "id": 13501,
    "title": "Lucky Substring",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13502,
    "title": "Lucky Division",
    "difficulty": "easy",
    "category": [
      "brute force",
      "number theory"
    ]
  },
  {
    "id": 13503,
    "title": "Lucky Array",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 13504,
    "title": "Lucky Segments",
    "difficulty": "hard",
    "category": [
      "binary search",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 13505,
    "title": "Lucky Permutation",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics",
      "number theory"
    ]
  },
  {
    "id": 13506,
    "title": "Lucky Transformation",
    "difficulty": "medium",
    "category": [
      "string"
    ]
  },
  {
    "id": 13507,
    "title": "Lucky Sum",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13508,
    "title": "Minimum Sum",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "geometry",
      "sorting"
    ]
  },
  {
    "id": 13509,
    "title": "Luck is in Numbers",
    "difficulty": "hard",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13510,
    "title": "Brevity is Soul of Wit",
    "difficulty": "medium",
    "category": [
      "graph matching"
    ]
  },
  {
    "id": 13511,
    "title": "Boom",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13512,
    "title": "Spiders",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 13513,
    "title": "Put Knight!",
    "difficulty": "medium",
    "category": [
      "game theory",
      "math"
    ]
  },
  {
    "id": 13514,
    "title": "Three Sons",
    "difficulty": "medium",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 13515,
    "title": "Winnie-the-Pooh and honey",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13516,
    "title": "Quiz League",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13517,
    "title": "Elevator",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 13518,
    "title": "Alternative Reality",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 13519,
    "title": "String Transformation",
    "difficulty": "hard",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 13520,
    "title": "Education Reform",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13521,
    "title": "Before Exam",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 13522,
    "title": "Epic Game",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13523,
    "title": "Bertown roads",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 13524,
    "title": "Caesar's Legions",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13525,
    "title": "Fancy Number",
    "difficulty": "hard",
    "category": [
      "brute force",
      "greedy",
      "sorting",
      "string"
    ]
  },
  {
    "id": 13526,
    "title": "Present from Lena",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 13527,
    "title": "String Task",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 13528,
    "title": "Tree or not Tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "graph",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 13529,
    "title": "Not Quick Transformation",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "math"
    ]
  },
  {
    "id": 13530,
    "title": "Cycle",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 13531,
    "title": "Very Interesting Game",
    "difficulty": "medium",
    "category": [
      "brute force",
      "number theory"
    ]
  },
  {
    "id": 13532,
    "title": "Elevator",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13533,
    "title": "Little Pigs and Wolves",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 13534,
    "title": "Tram",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13535,
    "title": "Linear Kingdom Races",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 13536,
    "title": "Unambiguous Arithmetic Expression",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "parsing"
    ]
  },
  {
    "id": 13537,
    "title": "Plumber",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 13538,
    "title": "Lawnmower",
    "difficulty": "medium",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 13539,
    "title": "Party",
    "difficulty": "easy",
    "category": [
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 13540,
    "title": "PFAST Inc.",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "graph"
    ]
  },
  {
    "id": 13541,
    "title": "Cifera",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 13542,
    "title": "Sleeping",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "implementation",
      "math"
    ]
  },
  {
    "id": 13543,
    "title": "Museum",
    "difficulty": "hard",
    "category": [
      "math",
      "matrix",
      "probability"
    ]
  },
  {
    "id": 13544,
    "title": "Double Happiness",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 13545,
    "title": "Petr#",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "hash table",
      "string"
    ]
  },
  {
    "id": 13546,
    "title": "Grammar Lessons",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 13547,
    "title": "Petya and Square",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13548,
    "title": "Petya and Strings",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 13549,
    "title": "Petya and Rectangle",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 13550,
    "title": "Petya and Coloring",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 13551,
    "title": "Petya and Spiders",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "union find"
    ]
  },
  {
    "id": 13552,
    "title": "Petya and Divisors",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "number theory"
    ]
  },
  {
    "id": 13553,
    "title": "Petya and Inequiations",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13554,
    "title": "Lucky String",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "string"
    ]
  },
  {
    "id": 13555,
    "title": "Nearly Lucky Number",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13556,
    "title": "Lucky Interval",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 13557,
    "title": "Lucky Sorting",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "sorting"
    ]
  },
  {
    "id": 13558,
    "title": "Lucky Tree",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "tree",
      "union find"
    ]
  },
  {
    "id": 13559,
    "title": "Lucky Probability",
    "difficulty": "hard",
    "category": [
      "brute force",
      "probability"
    ]
  },
  {
    "id": 13560,
    "title": "Lucky Sum of Digits",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13561,
    "title": "Datatypes",
    "difficulty": "medium",
    "category": [
      "math",
      "sorting"
    ]
  },
  {
    "id": 13562,
    "title": "Palindromic Times",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 13563,
    "title": "Darts",
    "difficulty": "hard",
    "category": [
      "geometry",
      "probability"
    ]
  },
  {
    "id": 13564,
    "title": "Crime Management",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "matrix"
    ]
  },
  {
    "id": 13565,
    "title": "Arrangement",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 13566,
    "title": "Basketball Team",
    "difficulty": "medium",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 13567,
    "title": "Dorm Water Supply",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 13568,
    "title": "Space Rescuers",
    "difficulty": "hard",
    "category": [
      "geometry",
      "ternary search"
    ]
  },
  {
    "id": 13569,
    "title": "Treasure Island",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13570,
    "title": "Buns",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13571,
    "title": "Choosing Laptop",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13572,
    "title": "Card Game",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13573,
    "title": "Lift and Throw",
    "difficulty": "hard",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 13574,
    "title": "Entertaining Geodetics",
    "difficulty": "hard",
    "category": [
      "brute force",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 13575,
    "title": "Item World",
    "difficulty": "hard",
    "category": [
      "brute force",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 13576,
    "title": "Dark Assembly",
    "difficulty": "medium",
    "category": [
      "brute force",
      "probability"
    ]
  },
  {
    "id": 13577,
    "title": "Transmigration",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13578,
    "title": "Blackjack",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13579,
    "title": "Buying Sets",
    "difficulty": "hard",
    "category": [
      "graph matching",
      "max flow"
    ]
  },
  {
    "id": 13580,
    "title": "Time to Raid Cowavans",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 13581,
    "title": "Russian Roulette",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 13582,
    "title": "Cthulhu",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 13583,
    "title": "Testing Pants for Sadness",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "math"
    ]
  },
  {
    "id": 13584,
    "title": "Sum of Digits",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13585,
    "title": "Clothes",
    "difficulty": "medium",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 13586,
    "title": "Candies and Stones",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "dynamic programming"
    ]
  },
  {
    "id": 13587,
    "title": "Castle",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "greedy",
      "probability",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 13588,
    "title": "Vectors",
    "difficulty": "hard",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13589,
    "title": "Buses",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 13590,
    "title": "Homework",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13591,
    "title": "Interval Coloring",
    "difficulty": "hard",
    "category": [
      "greedy",
      "math",
      "special problem"
    ]
  },
  {
    "id": 13592,
    "title": "Rotation",
    "difficulty": "medium",
    "category": [
      "geometry",
      "math",
      "special problem"
    ]
  },
  {
    "id": 13593,
    "title": "Battleship",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 13594,
    "title": "Name the album",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 13595,
    "title": "Polynom",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 13596,
    "title": "Lamps in a Line",
    "difficulty": "medium",
    "category": [
      "math",
      "special problem"
    ]
  },
  {
    "id": 13597,
    "title": "World of Mouth",
    "difficulty": "medium",
    "category": [
      "special problem",
      "string"
    ]
  },
  {
    "id": 13598,
    "title": "A+B",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 13599,
    "title": "Friendly Numbers",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 13600,
    "title": "Carpeting the Room",
    "difficulty": "easy",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 13601,
    "title": "Help Chef Gerasim",
    "difficulty": "medium",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 13602,
    "title": "Help Far Away Kingdom",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 13603,
    "title": "Help Shrek and Donkey",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory",
      "math",
      "probability"
    ]
  },
  {
    "id": 13604,
    "title": "Help Monks",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 13605,
    "title": "Help Greg the Dwarf",
    "difficulty": "hard",
    "category": [
      "geometry",
      "ternary search"
    ]
  },
  {
    "id": 13606,
    "title": "Help King",
    "difficulty": "hard",
    "category": [
      "implementation",
      "probability",
      "tree"
    ]
  },
  {
    "id": 13607,
    "title": "Help Victoria the Wise",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13608,
    "title": "Leaders",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "tree",
      "union find"
    ]
  },
  {
    "id": 13609,
    "title": "Robot in Basement",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13610,
    "title": "Winning Strategy",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph",
      "math",
      "shortest path"
    ]
  },
  {
    "id": 13611,
    "title": "Superset",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "divide and conquer"
    ]
  },
  {
    "id": 13612,
    "title": "Domino",
    "difficulty": "hard",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13613,
    "title": "Lucky Numbers (easy)",
    "difficulty": "medium",
    "category": [
      "binary search",
      "bit manipulation",
      "brute force"
    ]
  },
  {
    "id": 13614,
    "title": "Football",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 13615,
    "title": "Lucky Country",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "union find"
    ]
  },
  {
    "id": 13616,
    "title": "Horse Races",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 13617,
    "title": "Volleyball",
    "difficulty": "hard",
    "category": [
      "shortest path"
    ]
  },
  {
    "id": 13618,
    "title": "Lucky Numbers",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 13619,
    "title": "Hockey",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 13620,
    "title": "Friends",
    "difficulty": "medium",
    "category": [
      "graph",
      "implementation",
      "math"
    ]
  },
  {
    "id": 13621,
    "title": "Restoring Password",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 13622,
    "title": "Lostborn",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 13623,
    "title": "Flags",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "matrix"
    ]
  },
  {
    "id": 13624,
    "title": "Azembler",
    "difficulty": "hard",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13625,
    "title": "End of Exams",
    "difficulty": "hard",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13626,
    "title": "Frames",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13627,
    "title": "Binary Number",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13628,
    "title": "Chips",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13629,
    "title": "Igloo Skyscraper",
    "difficulty": "hard",
    "category": [
      "data structures",
      "geometry"
    ]
  },
  {
    "id": 13630,
    "title": "Grocer's Problem",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy"
    ]
  },
  {
    "id": 13631,
    "title": "Ski Base",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "graph",
      "union find"
    ]
  },
  {
    "id": 13632,
    "title": "Queue",
    "difficulty": "medium",
    "category": [
      "binary search",
      "data structures"
    ]
  },
  {
    "id": 13633,
    "title": "Newspaper Headline",
    "difficulty": "medium",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 13634,
    "title": "African Crossword",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 13635,
    "title": "Cableway",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 13636,
    "title": "Fire and Ice",
    "difficulty": "hard",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13637,
    "title": "Space mines",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 13638,
    "title": "Chip Play",
    "difficulty": "hard",
    "category": [
      "brute force",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 13639,
    "title": "Widget Library",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "implementation",
      "parsing"
    ]
  },
  {
    "id": 13640,
    "title": "Robbery",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13641,
    "title": "Keyboard",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13642,
    "title": "Chord",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13643,
    "title": "Mogohu-Rea Idol",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 13644,
    "title": "Beautiful Road",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "implementation",
      "sorting",
      "tree",
      "union find"
    ]
  },
  {
    "id": 13645,
    "title": "Interesting Game",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory",
      "math"
    ]
  },
  {
    "id": 13646,
    "title": "Vasya and Types",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 13647,
    "title": "Trains",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13648,
    "title": "Long sequence",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math",
      "matrix"
    ]
  },
  {
    "id": 13649,
    "title": "Powerful array",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 13650,
    "title": "Genetic engineering",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "string suffix structures",
      "tree"
    ]
  },
  {
    "id": 13651,
    "title": "Tetris revisited",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph matching",
      "greedy",
      "math"
    ]
  },
  {
    "id": 13652,
    "title": "Reflection",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 13653,
    "title": "Guard Towers",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry",
      "graph",
      "sorting",
      "union find"
    ]
  },
  {
    "id": 13654,
    "title": "Sum of Medians",
    "difficulty": "hard",
    "category": [
      "binary search",
      "brute force",
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 13655,
    "title": "Petya and Tree",
    "difficulty": "hard",
    "category": [
      "binary search",
      "graph traversal",
      "probability",
      "sorting",
      "tree"
    ]
  },
  {
    "id": 13656,
    "title": "Embassy Queue",
    "difficulty": "medium",
    "category": [
      "data structures",
      "greedy"
    ]
  },
  {
    "id": 13657,
    "title": "Domino",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 13658,
    "title": "Biathlon",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation"
    ]
  },
  {
    "id": 13659,
    "title": "Toy Army",
    "difficulty": "easy",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 13660,
    "title": "Two Subsequences",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 13661,
    "title": "Numbers",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 13662,
    "title": "Track",
    "difficulty": "hard",
    "category": [
      "graph",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 13663,
    "title": "Doctor",
    "difficulty": "medium",
    "category": [
      "binary search",
      "math",
      "sorting"
    ]
  },
  {
    "id": 13664,
    "title": "Magical Array",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 13665,
    "title": "Corridor",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 13666,
    "title": "Two out of Three",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13667,
    "title": "General Mobilization",
    "difficulty": "hard",
    "category": [
      "data structures",
      "graph traversal",
      "sorting"
    ]
  },
  {
    "id": 13668,
    "title": "Sets",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "hash table",
      "implementation"
    ]
  },
  {
    "id": 13669,
    "title": "Double Cola",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13670,
    "title": "Pairs",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "implementation",
      "tree",
      "union find"
    ]
  },
  {
    "id": 13671,
    "title": "Polycarp's Picture Gallery",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 13672,
    "title": "Average Score",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "sorting"
    ]
  },
  {
    "id": 13673,
    "title": "Sequence Formatting",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 13674,
    "title": "Plug-in",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13675,
    "title": "Depression",
    "difficulty": "medium",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 13676,
    "title": "Panoramix's Prediction",
    "difficulty": "easy",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 13677,
    "title": "Security System",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 13678,
    "title": "Password",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "shortest path"
    ]
  },
  {
    "id": 13679,
    "title": "Beaver",
    "difficulty": "medium",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "hash table",
      "string",
      "two pointers"
    ]
  },
  {
    "id": 13680,
    "title": "Colorful Field",
    "difficulty": "medium",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 13681,
    "title": "Bus Game",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13682,
    "title": "Evacuation",
    "difficulty": "hard",
    "category": [
      "graph",
      "max flow",
      "shortest path"
    ]
  },
  {
    "id": 13683,
    "title": "Archer's Shot",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry",
      "math",
      "two pointers"
    ]
  },
  {
    "id": 13684,
    "title": "Beaver Game",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory",
      "number theory"
    ]
  },
  {
    "id": 13685,
    "title": "Easter Eggs",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 13686,
    "title": "Haiku",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 13687,
    "title": "Martian Food",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 13688,
    "title": "Domino Carpet",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 13689,
    "title": "Beavermuncher-0xFF",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph traversal",
      "greedy",
      "tree",
      "union find"
    ]
  },
  {
    "id": 13690,
    "title": "Falling Anvils",
    "difficulty": "medium",
    "category": [
      "math",
      "probability"
    ]
  },
  {
    "id": 13691,
    "title": "Heroes",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13692,
    "title": "Tourist",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 13693,
    "title": "Points",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13694,
    "title": "Plus and xor",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy",
      "math"
    ]
  },
  {
    "id": 13695,
    "title": "Mutation",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 13696,
    "title": "Mice",
    "difficulty": "hard",
    "category": [
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 13697,
    "title": "Gift",
    "difficulty": "hard",
    "category": [
      "graph",
      "sorting",
      "tree",
      "union find"
    ]
  },
  {
    "id": 13698,
    "title": "Ship's Shortest Path",
    "difficulty": "hard",
    "category": [
      "geometry",
      "shortest path"
    ]
  },
  {
    "id": 13699,
    "title": "Big Maximum Sum",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming",
      "greedy",
      "implementation",
      "math",
      "tree"
    ]
  },
  {
    "id": 13700,
    "title": "Modified GCD",
    "difficulty": "medium",
    "category": [
      "binary search",
      "number theory"
    ]
  },
  {
    "id": 13701,
    "title": "Facetook Priority Wall",
    "difficulty": "medium",
    "category": [
      "implementation",
      "parsing",
      "string"
    ]
  },
  {
    "id": 13702,
    "title": "Life Without Zeros",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13703,
    "title": "Shift It!",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 13704,
    "title": "Hanger",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 13705,
    "title": "Chessboard Billiard",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "number theory",
      "union find"
    ]
  },
  {
    "id": 13706,
    "title": "Train",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "game theory",
      "greedy"
    ]
  },
  {
    "id": 13707,
    "title": "Room Leader",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13708,
    "title": "Plane of Tanks",
    "difficulty": "hard",
    "category": [
      "brute force",
      "geometry"
    ]
  },
  {
    "id": 13709,
    "title": "Morrowindows",
    "difficulty": "hard",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 13710,
    "title": "FreeDiv",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 13711,
    "title": "LionAge II",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13712,
    "title": "Need For Brake",
    "difficulty": "hard",
    "category": [
      "binary search",
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 13713,
    "title": "The Elder Trolls IV: Oblivon",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 13714,
    "title": "Goofy Numbers",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 13715,
    "title": "Reverse It!",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 13716,
    "title": "Fibonacci army",
    "difficulty": "easy",
    "category": [
      "dynamic programming",
      "special problem"
    ]
  },
  {
    "id": 13717,
    "title": "Oil",
    "difficulty": "hard",
    "category": [
      "greedy",
      "math",
      "special problem"
    ]
  },
  {
    "id": 13718,
    "title": "Ali goes shopping",
    "difficulty": "medium",
    "category": [
      "brute force",
      "special problem",
      "string"
    ]
  },
  {
    "id": 13719,
    "title": "Perse-script",
    "difficulty": "hard",
    "category": [
      "parsing",
      "special problem"
    ]
  },
  {
    "id": 13720,
    "title": "Extraordinarily Nice Numbers",
    "difficulty": "medium",
    "category": [
      "math",
      "special problem"
    ]
  },
  {
    "id": 13721,
    "title": "INI-file",
    "difficulty": "hard",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 13722,
    "title": "Goshtasp, Vishtasp and Eidi",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math",
      "special problem"
    ]
  },
  {
    "id": 13723,
    "title": "Nuclear Fusion",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 13724,
    "title": "Solitaire",
    "difficulty": "hard",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13725,
    "title": "Round Table Knights",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "math",
      "number theory"
    ]
  },
  {
    "id": 13726,
    "title": "Progress Bar",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13727,
    "title": "Way Too Long Words",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 13728,
    "title": "Information Reform",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "implementation",
      "tree"
    ]
  },
  {
    "id": 13729,
    "title": "Professor's task",
    "difficulty": "hard",
    "category": [
      "data structures",
      "geometry"
    ]
  },
  {
    "id": 13730,
    "title": "Lucky Tickets",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "sorting",
      "two pointers"
    ]
  },
  {
    "id": 13731,
    "title": "Text Messaging",
    "difficulty": "medium",
    "category": [
      "greedy",
      "parsing",
      "string"
    ]
  },
  {
    "id": 13732,
    "title": "Cookies",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 13733,
    "title": "Subsegments",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 13734,
    "title": "Dot",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory"
    ]
  },
  {
    "id": 13735,
    "title": "Game",
    "difficulty": "hard",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13736,
    "title": "Bets",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 13737,
    "title": "Young Physicist",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13738,
    "title": "Contact",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 13739,
    "title": "Half-decay tree",
    "difficulty": "hard",
    "category": [
      "data structures",
      "divide and conquer",
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 13740,
    "title": "Synchrophasotron",
    "difficulty": "hard",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 13741,
    "title": "Energy exchange",
    "difficulty": "medium",
    "category": [
      "binary search"
    ]
  },
  {
    "id": 13742,
    "title": "Irrational problem",
    "difficulty": "easy",
    "category": [
      "implementation",
      "number theory"
    ]
  },
  {
    "id": 13743,
    "title": "Save the City!",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 13744,
    "title": "Optical Experiment",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 13745,
    "title": "Sequence of Balls",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13746,
    "title": "Restoration of the Permutation",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13747,
    "title": "Partial Teacher",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "graph",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 13748,
    "title": "Petya and Post",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 13749,
    "title": "Petya and His Friends",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math",
      "number theory"
    ]
  },
  {
    "id": 13750,
    "title": "Petya and File System",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 13751,
    "title": "Petya and Countryside",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13752,
    "title": "Petya and Java",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 13753,
    "title": "Harry Potter and Moving Staircases",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 13754,
    "title": "Harry Potter and the Sorting Hat",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph traversal",
      "hash table"
    ]
  },
  {
    "id": 13755,
    "title": "Harry Potter and the Golden Snitch",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry"
    ]
  },
  {
    "id": 13756,
    "title": "Harry Potter and the History of Magic",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 13757,
    "title": "Harry Potter and Three Spells",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13758,
    "title": "Sort the Table",
    "difficulty": "hard",
    "category": [
      "sorting",
      "special problem"
    ]
  },
  {
    "id": 13759,
    "title": "Table Bowling",
    "difficulty": "hard",
    "category": [
      "sorting",
      "special problem"
    ]
  },
  {
    "id": 13760,
    "title": "Path Canonization",
    "difficulty": "hard",
    "category": [
      "special problem"
    ]
  },
  {
    "id": 13761,
    "title": "Domain",
    "difficulty": "hard",
    "category": [
      "parsing",
      "special problem"
    ]
  },
  {
    "id": 13762,
    "title": "Prime Segment",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math",
      "number theory",
      "special problem"
    ]
  },
  {
    "id": 13763,
    "title": "Presents",
    "difficulty": "medium",
    "category": [
      "greedy",
      "special problem"
    ]
  },
  {
    "id": 13764,
    "title": "Table",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "math",
      "special problem"
    ]
  },
  {
    "id": 13765,
    "title": "Expression",
    "difficulty": "medium",
    "category": [
      "parsing",
      "special problem"
    ]
  },
  {
    "id": 13766,
    "title": "Factorial",
    "difficulty": "medium",
    "category": [
      "implementation",
      "special problem"
    ]
  },
  {
    "id": 13767,
    "title": "Sweets Game",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "game theory",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 13768,
    "title": "Dividing Island",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 13769,
    "title": "Bulls and Cows",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13770,
    "title": "Settlers' Training",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13771,
    "title": "Sinking Ship",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting",
      "string"
    ]
  },
  {
    "id": 13772,
    "title": "World Evil",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "max flow"
    ]
  },
  {
    "id": 13773,
    "title": "Wormhouse",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 13774,
    "title": "Inquisition",
    "difficulty": "hard",
    "category": [
      "geometry",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 13775,
    "title": "Tyndex.Brome",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation"
    ]
  },
  {
    "id": 13776,
    "title": "A Student's Dream",
    "difficulty": "medium",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 13777,
    "title": "Enemy is weak",
    "difficulty": "hard",
    "category": [
      "data structures",
      "tree"
    ]
  },
  {
    "id": 13778,
    "title": "Eternal Victory",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "greedy",
      "shortest path",
      "tree"
    ]
  },
  {
    "id": 13779,
    "title": "Capture Valerian",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 13780,
    "title": "Hard Work",
    "difficulty": "medium",
    "category": [
      "string"
    ]
  },
  {
    "id": 13781,
    "title": "Ultra-Fast Mathematician",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13782,
    "title": "Mushroom Gnomes",
    "difficulty": "hard",
    "category": [
      "math",
      "matrix"
    ]
  },
  {
    "id": 13783,
    "title": "Savior",
    "difficulty": "hard",
    "category": [
      "brute force",
      "math",
      "union find"
    ]
  },
  {
    "id": 13784,
    "title": "Mushroom Strife",
    "difficulty": "hard",
    "category": [
      "brute force",
      "graph traversal"
    ]
  },
  {
    "id": 13785,
    "title": "Serial Time!",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 13786,
    "title": "Where Are My Flakes?",
    "difficulty": "medium",
    "category": [
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 13787,
    "title": "Shortest Path",
    "difficulty": "hard",
    "category": [
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 13788,
    "title": "Team Arrangement",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 13789,
    "title": "Title",
    "difficulty": "medium",
    "category": [
      "parsing"
    ]
  },
  {
    "id": 13790,
    "title": "Fortune Telling",
    "difficulty": "medium",
    "category": [
      "implementation",
      "number theory"
    ]
  },
  {
    "id": 13791,
    "title": "Word",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 13792,
    "title": "Expression",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13793,
    "title": "Calendar",
    "difficulty": "hard",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 13794,
    "title": "Trees",
    "difficulty": "medium",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 13795,
    "title": "Coins",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13796,
    "title": "Chat room",
    "difficulty": "easy",
    "category": [
      "greedy",
      "string"
    ]
  },
  {
    "id": 13797,
    "title": "Chess",
    "difficulty": "hard",
    "category": [
      "math",
      "shortest path"
    ]
  },
  {
    "id": 13798,
    "title": "Journey",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 13799,
    "title": "Array",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math"
    ]
  },
  {
    "id": 13800,
    "title": "Martian Architecture",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13801,
    "title": "Square Earth?",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 13802,
    "title": "Domino Principle",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 13803,
    "title": "Changing a String",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13804,
    "title": "Corporation Mail",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation",
      "parsing"
    ]
  },
  {
    "id": 13805,
    "title": "Spoilt Permutation",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13806,
    "title": "Bar",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13807,
    "title": "Very simple problem",
    "difficulty": "hard",
    "category": [
      "geometry",
      "two pointers"
    ]
  },
  {
    "id": 13808,
    "title": "Beautiful numbers",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "number theory"
    ]
  },
  {
    "id": 13809,
    "title": "Pie or die",
    "difficulty": "hard",
    "category": [
      "game theory"
    ]
  },
  {
    "id": 13810,
    "title": "Smallest number",
    "difficulty": "medium",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 13811,
    "title": "Flea travel",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13812,
    "title": "Vacuum Сleaner",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 13813,
    "title": "Writing a Song",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "string"
    ]
  },
  {
    "id": 13814,
    "title": "First Digit Law",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 13815,
    "title": "Cutting Jigsaw Puzzle",
    "difficulty": "medium",
    "category": [
      "hash table",
      "implementation"
    ]
  },
  {
    "id": 13816,
    "title": "Presents",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13817,
    "title": "Dead Ends",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 13818,
    "title": "Physical Education",
    "difficulty": "medium",
    "category": [
      "sorting"
    ]
  },
  {
    "id": 13819,
    "title": "Little Frog",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 13820,
    "title": "Blog Photo",
    "difficulty": "medium",
    "category": [
      "binary search",
      "implementation"
    ]
  },
  {
    "id": 13821,
    "title": "Autocomplete",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13822,
    "title": "Circular RMQ",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 13823,
    "title": "Right Triangles",
    "difficulty": "medium",
    "category": [
      "combinatorics"
    ]
  },
  {
    "id": 13824,
    "title": "123-sequence",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13825,
    "title": "Caterpillar",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 13826,
    "title": "Pentagon",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "graph",
      "matrix"
    ]
  },
  {
    "id": 13827,
    "title": "Geometrical problem",
    "difficulty": "hard",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13828,
    "title": "Three Base Stations",
    "difficulty": "medium",
    "category": [
      "binary search",
      "greedy"
    ]
  },
  {
    "id": 13829,
    "title": "bHTML Tables Analisys",
    "difficulty": "medium",
    "category": [
      "parsing"
    ]
  },
  {
    "id": 13830,
    "title": "Cheaterius's Problem",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13831,
    "title": "Square Equation Roots",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 13832,
    "title": "Bombing",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "probability"
    ]
  },
  {
    "id": 13833,
    "title": "Happy Farm 5",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 13834,
    "title": "Choosing Symbol Pairs",
    "difficulty": "medium",
    "category": [
      "string"
    ]
  },
  {
    "id": 13835,
    "title": "Domino piling",
    "difficulty": "easy",
    "category": [
      "greedy",
      "math"
    ]
  },
  {
    "id": 13836,
    "title": "Common ancestor",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13837,
    "title": "Game",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 13838,
    "title": "Disposition",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 13839,
    "title": "Sum",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 13840,
    "title": "Sleuth",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13841,
    "title": "Black and White",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 13842,
    "title": "Galaxy Union",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "tree",
      "two pointers"
    ]
  },
  {
    "id": 13843,
    "title": "Snow sellers",
    "difficulty": "hard",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 13844,
    "title": "Ivan the Fool VS Gorynych the Dragon",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory",
      "graph"
    ]
  },
  {
    "id": 13845,
    "title": "Permutations",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13846,
    "title": "The Race",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 13847,
    "title": "Land Lot",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13848,
    "title": "Rock-paper-scissors",
    "difficulty": "easy",
    "category": [
      "implementation",
      "scheduling"
    ]
  },
  {
    "id": 13849,
    "title": "Cannon",
    "difficulty": "hard",
    "category": [
      "data structures",
      "geometry",
      "sorting"
    ]
  },
  {
    "id": 13850,
    "title": "Safe",
    "difficulty": "hard",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 13851,
    "title": "Crossword",
    "difficulty": "hard",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13852,
    "title": "Coins",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13853,
    "title": "Triangular numbers",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 13854,
    "title": "Emperor's Problem",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 13855,
    "title": "Hercule Poirot Problem",
    "difficulty": "hard",
    "category": [
      "graph",
      "union find"
    ]
  },
  {
    "id": 13856,
    "title": "Comb",
    "difficulty": "hard",
    "category": [
      "data structures",
      "dynamic programming"
    ]
  },
  {
    "id": 13857,
    "title": "Parking Lot",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 13858,
    "title": "Hamsters and Tigers",
    "difficulty": "medium",
    "category": [
      "two pointers"
    ]
  },
  {
    "id": 13859,
    "title": "T-shirts from Sponsor",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13860,
    "title": "Ball Game",
    "difficulty": "easy",
    "category": [
      "brute force",
      "implementation"
    ]
  },
  {
    "id": 13861,
    "title": "Planting Trees",
    "difficulty": "medium",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 13862,
    "title": "TCMCF+++",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13863,
    "title": "Road Problem",
    "difficulty": "hard",
    "category": [
      "graph"
    ]
  },
  {
    "id": 13864,
    "title": "Prime Problem",
    "difficulty": "hard",
    "category": [
      "number theory"
    ]
  },
  {
    "id": 13865,
    "title": "Goats and Wolves",
    "difficulty": "hard",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13866,
    "title": "Director",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 13867,
    "title": "Event Dates",
    "difficulty": "hard",
    "category": [
      "greedy",
      "meet in the middle",
      "sorting"
    ]
  },
  {
    "id": 13868,
    "title": "Dancing Lessons",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 13869,
    "title": "School",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "union find"
    ]
  },
  {
    "id": 13870,
    "title": "Codecraft III",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13871,
    "title": "Triminoes",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 13872,
    "title": "Toys",
    "difficulty": "hard",
    "category": [
      "brute force",
      "combinatorics"
    ]
  },
  {
    "id": 13873,
    "title": "Phone Number",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13874,
    "title": "Shooting Gallery",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 13875,
    "title": "BerPaint",
    "difficulty": "hard",
    "category": [
      "geometry",
      "graph"
    ]
  },
  {
    "id": 13876,
    "title": "Anfisa the Monkey",
    "difficulty": "medium",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13877,
    "title": "Hyperdrive",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 13878,
    "title": "Holidays",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13879,
    "title": "Cola",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13880,
    "title": "Indian Summer",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13881,
    "title": "Race",
    "difficulty": "hard",
    "category": [
      "brute force",
      "implementation",
      "two pointers"
    ]
  },
  {
    "id": 13882,
    "title": "Journey",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms",
      "implementation"
    ]
  },
  {
    "id": 13883,
    "title": "Lucky Tickets",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13884,
    "title": "Letter",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 13885,
    "title": "Football",
    "difficulty": "easy",
    "category": [
      "string"
    ]
  },
  {
    "id": 13886,
    "title": "Baldman and the military",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 13887,
    "title": "Strange town",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "math"
    ]
  },
  {
    "id": 13888,
    "title": "Safe cracking",
    "difficulty": "hard",
    "category": [
      "brute force",
      "constructive algorithms"
    ]
  },
  {
    "id": 13889,
    "title": "Game of chess unfinished",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13890,
    "title": "Guilty --- to the kitchen!",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 13891,
    "title": "3-cycles",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "greedy"
    ]
  },
  {
    "id": 13892,
    "title": "Pawn",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13893,
    "title": "Email address",
    "difficulty": "medium",
    "category": [
      "implementation",
      "parsing"
    ]
  },
  {
    "id": 13894,
    "title": "Martian Dollar",
    "difficulty": "medium",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 13895,
    "title": "Translation",
    "difficulty": "easy",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 13896,
    "title": "Number Table",
    "difficulty": "hard",
    "category": [
      "combinatorics"
    ]
  },
  {
    "id": 13897,
    "title": "Interesting Sequence",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 13898,
    "title": "Berland Square",
    "difficulty": "hard",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 13899,
    "title": "Repaintings",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 13900,
    "title": "Find Color",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "geometry",
      "implementation",
      "math"
    ]
  },
  {
    "id": 13901,
    "title": "Testing",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 13902,
    "title": "Spelling Check",
    "difficulty": "medium",
    "category": [
      "hash table",
      "implementation",
      "string"
    ]
  },
  {
    "id": 13903,
    "title": "Tram",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 13904,
    "title": "Multiplication Table",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13905,
    "title": "Inverse Function",
    "difficulty": "hard",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13906,
    "title": "Pacifist frogs",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13907,
    "title": "What Has Dirichlet Got to Do with That?",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory"
    ]
  },
  {
    "id": 13908,
    "title": "Cubical Planet",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  },
  {
    "id": 13909,
    "title": "Moon Craters",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 13910,
    "title": "Company Income Growth",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13911,
    "title": "C*++ Calculations",
    "difficulty": "hard",
    "category": [
      "greedy",
      "parsing"
    ]
  },
  {
    "id": 13912,
    "title": "The Great Marathon",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13913,
    "title": "Queue",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 13914,
    "title": "Smart Boy",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "game theory",
      "string"
    ]
  },
  {
    "id": 13915,
    "title": "Let's Go Rolling!",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 13916,
    "title": "Vasya the Architect",
    "difficulty": "hard",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13917,
    "title": "Blinds",
    "difficulty": "medium",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 13918,
    "title": "Chess",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 13919,
    "title": "Army",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13920,
    "title": "Trial for Chief",
    "difficulty": "hard",
    "category": [
      "graph",
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 13921,
    "title": "Lesson Timetable",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 13922,
    "title": "Old Berland Language",
    "difficulty": "hard",
    "category": [
      "data structures",
      "greedy",
      "tree"
    ]
  },
  {
    "id": 13923,
    "title": "Computer Game",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 13924,
    "title": "Towers",
    "difficulty": "easy",
    "category": [
      "sorting"
    ]
  },
  {
    "id": 13925,
    "title": "Two Paths",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph",
      "implementation",
      "union find"
    ]
  },
  {
    "id": 13926,
    "title": "New Game with a Chess Piece",
    "difficulty": "hard",
    "category": [
      "game theory"
    ]
  },
  {
    "id": 13927,
    "title": "Bowls",
    "difficulty": "hard",
    "category": [
      "geometry",
      "implementation"
    ]
  },
  {
    "id": 13928,
    "title": "Fractal",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13929,
    "title": "Extra-terrestrial Intelligence",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13930,
    "title": "Parade",
    "difficulty": "hard",
    "category": [
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 13931,
    "title": "Animals",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 13932,
    "title": "Fire Again",
    "difficulty": "medium",
    "category": [
      "brute force",
      "graph traversal",
      "shortest path"
    ]
  },
  {
    "id": 13933,
    "title": "Warehouse",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13934,
    "title": "Shell Game",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13935,
    "title": "Collisions",
    "difficulty": "hard",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 13936,
    "title": "Road Map",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal"
    ]
  },
  {
    "id": 13937,
    "title": "Page Numbers",
    "difficulty": "medium",
    "category": [
      "implementation",
      "parsing",
      "sorting",
      "string"
    ]
  },
  {
    "id": 13938,
    "title": "Sale",
    "difficulty": "easy",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 13939,
    "title": "Reconnaissance 2",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13940,
    "title": "Helper",
    "difficulty": "hard",
    "category": []
  },
  {
    "id": 13941,
    "title": "Knights",
    "difficulty": "hard",
    "category": [
      "geometry",
      "graph",
      "shortest path",
      "sorting"
    ]
  },
  {
    "id": 13942,
    "title": "Wonderful Randomized Sum",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13943,
    "title": "String Problem",
    "difficulty": "medium",
    "category": [
      "shortest path"
    ]
  },
  {
    "id": 13944,
    "title": "What is for dinner?",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 13945,
    "title": "Hide-and-Seek",
    "difficulty": "hard",
    "category": [
      "geometry",
      "implementation"
    ]
  },
  {
    "id": 13946,
    "title": "Constellation",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13947,
    "title": "Flea",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 13948,
    "title": "Borze",
    "difficulty": "easy",
    "category": [
      "implementation",
      "parsing"
    ]
  },
  {
    "id": 13949,
    "title": "Reconnaissance",
    "difficulty": "easy",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 13950,
    "title": "TV Game",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13951,
    "title": "Chocolate",
    "difficulty": "hard",
    "category": [
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 13952,
    "title": "Schedule",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13953,
    "title": "Sysadmin Bob",
    "difficulty": "medium",
    "category": [
      "greedy",
      "implementation",
      "string"
    ]
  },
  {
    "id": 13954,
    "title": "Worms Evolution",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13955,
    "title": "Tricky and Clever Password",
    "difficulty": "hard",
    "category": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "hash table",
      "string"
    ]
  },
  {
    "id": 13956,
    "title": "King's Problem?",
    "difficulty": "hard",
    "category": [
      "geometry",
      "greedy"
    ]
  },
  {
    "id": 13957,
    "title": "Shooting Gallery",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "probability"
    ]
  },
  {
    "id": 13958,
    "title": "Codeforces World Finals",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13959,
    "title": "Accounting",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 13960,
    "title": "Quarrel",
    "difficulty": "hard",
    "category": [
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 13961,
    "title": "Ant on the Tree",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 13962,
    "title": "Mail Stamps",
    "difficulty": "medium",
    "category": [
      "data structures",
      "graph",
      "graph traversal",
      "implementation"
    ]
  },
  {
    "id": 13963,
    "title": "Traffic Lights",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13964,
    "title": "Spit Problem",
    "difficulty": "easy",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 13965,
    "title": "DravDe saves the world",
    "difficulty": "hard",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 13966,
    "title": "Don't fear, DravDe is kind",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "dynamic programming",
      "hash table"
    ]
  },
  {
    "id": 13967,
    "title": "Bath Queue",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming",
      "probability"
    ]
  },
  {
    "id": 13968,
    "title": "pSort",
    "difficulty": "medium",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 13969,
    "title": "Bender Problem",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13970,
    "title": "Number With The Given Amount Of Divisors",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "number theory"
    ]
  },
  {
    "id": 13971,
    "title": "Ring Road 2",
    "difficulty": "hard",
    "category": [
      "2-sat",
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 13972,
    "title": "Unordered Subsequence",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 13973,
    "title": "Tournament",
    "difficulty": "medium",
    "category": [
      "bit manipulation",
      "brute force",
      "graph traversal",
      "greedy"
    ]
  },
  {
    "id": 13974,
    "title": "Next Test",
    "difficulty": "medium",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 13975,
    "title": "Multithreading",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 13976,
    "title": "Tickets",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "math",
      "probability"
    ]
  },
  {
    "id": 13977,
    "title": "Parquet",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "constructive algorithms",
      "greedy",
      "implementation"
    ]
  },
  {
    "id": 13978,
    "title": "Regular Bracket Sequence",
    "difficulty": "medium",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 13979,
    "title": "Almost Prime",
    "difficulty": "easy",
    "category": [
      "number theory"
    ]
  },
  {
    "id": 13980,
    "title": "Test",
    "difficulty": "hard",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 13981,
    "title": "Roads not only in Berland",
    "difficulty": "hard",
    "category": [
      "graph",
      "tree",
      "union find"
    ]
  },
  {
    "id": 13982,
    "title": "Roads in Berland",
    "difficulty": "hard",
    "category": [
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 13983,
    "title": "Phone numbers",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13984,
    "title": "IQ test",
    "difficulty": "medium",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 13985,
    "title": "Berland collider",
    "difficulty": "hard",
    "category": [
      "binary search"
    ]
  },
  {
    "id": 13986,
    "title": "Broken robot",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math",
      "probability"
    ]
  },
  {
    "id": 13987,
    "title": "Sequence of points",
    "difficulty": "medium",
    "category": [
      "geometry",
      "implementation",
      "math"
    ]
  },
  {
    "id": 13988,
    "title": "F1 Champions",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 13989,
    "title": "Ring road",
    "difficulty": "medium",
    "category": [
      "graph"
    ]
  },
  {
    "id": 13990,
    "title": "Tree",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 13991,
    "title": "Tetragon",
    "difficulty": "hard",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 13992,
    "title": "Oranges and Apples",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "sorting"
    ]
  },
  {
    "id": 13993,
    "title": "Party",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "math"
    ]
  },
  {
    "id": 13994,
    "title": "You're Given a String...",
    "difficulty": "medium",
    "category": [
      "brute force",
      "greedy"
    ]
  },
  {
    "id": 13995,
    "title": "Scheme",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "tree"
    ]
  },
  {
    "id": 13996,
    "title": "Segments",
    "difficulty": "hard",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 13997,
    "title": "System Administrator",
    "difficulty": "medium",
    "category": [
      "graph"
    ]
  },
  {
    "id": 13998,
    "title": "Bargaining Table",
    "difficulty": "medium",
    "category": [
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 13999,
    "title": "Second Order Statistics",
    "difficulty": "easy",
    "category": [
      "brute force"
    ]
  },
  {
    "id": 14000,
    "title": "Traveling Graph",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "graph",
      "graph matching"
    ]
  },
  {
    "id": 14001,
    "title": "Stripe 2",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 14002,
    "title": "Intersection",
    "difficulty": "hard",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 14003,
    "title": "Jabber ID",
    "difficulty": "hard",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 14004,
    "title": "Dijkstra?",
    "difficulty": "hard",
    "category": [
      "graph",
      "shortest path"
    ]
  },
  {
    "id": 14005,
    "title": "Equation",
    "difficulty": "hard",
    "category": [
      "math"
    ]
  },
  {
    "id": 14006,
    "title": "BerOS file system",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 14007,
    "title": "Fairy",
    "difficulty": "hard",
    "category": [
      "divide and conquer",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 14008,
    "title": "Points",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 14009,
    "title": "Deletion of Repeats",
    "difficulty": "hard",
    "category": [
      "greedy",
      "hash table",
      "string suffix structures"
    ]
  },
  {
    "id": 14010,
    "title": "Checkout Assistant",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 14011,
    "title": "World Football Cup",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 14012,
    "title": "Flag 2",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 14013,
    "title": "Seller Bob",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 14014,
    "title": "Stripe",
    "difficulty": "medium",
    "category": [
      "data structures",
      "implementation"
    ]
  },
  {
    "id": 14015,
    "title": "Platforms",
    "difficulty": "medium",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 14016,
    "title": "Triangle",
    "difficulty": "medium",
    "category": [
      "brute force",
      "geometry"
    ]
  },
  {
    "id": 14017,
    "title": "Palisection",
    "difficulty": "hard",
    "category": [
      "string"
    ]
  },
  {
    "id": 14018,
    "title": "Notepad",
    "difficulty": "hard",
    "category": [
      "number theory"
    ]
  },
  {
    "id": 14019,
    "title": "Balance",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 14020,
    "title": "Hierarchy",
    "difficulty": "medium",
    "category": [
      "graph traversal",
      "greedy",
      "shortest path",
      "union find"
    ]
  },
  {
    "id": 14021,
    "title": "Noldbach problem",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math",
      "number theory"
    ]
  },
  {
    "id": 14022,
    "title": "Fish",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "probability"
    ]
  },
  {
    "id": 14023,
    "title": "Logging",
    "difficulty": "hard",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 14024,
    "title": "Monitor",
    "difficulty": "medium",
    "category": [
      "binary search",
      "number theory"
    ]
  },
  {
    "id": 14025,
    "title": "Burglar and Matches",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 14026,
    "title": "Flag",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 14027,
    "title": "Triangles",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "dynamic programming"
    ]
  },
  {
    "id": 14028,
    "title": "Map",
    "difficulty": "hard",
    "category": [
      "data structures",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 14029,
    "title": "Industrial Nim",
    "difficulty": "hard",
    "category": [
      "game theory"
    ]
  },
  {
    "id": 14030,
    "title": "Laser",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 14031,
    "title": "Cottage Village",
    "difficulty": "medium",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 14032,
    "title": "Camels",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 14033,
    "title": "Two Paths",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph",
      "graph traversal",
      "shortest path",
      "tree",
      "two pointers"
    ]
  },
  {
    "id": 14034,
    "title": "Four Segments",
    "difficulty": "medium",
    "category": [
      "brute force",
      "constructive algorithms",
      "geometry",
      "implementation",
      "math"
    ]
  },
  {
    "id": 14035,
    "title": "Young Photographer",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 14036,
    "title": "Letter",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 14037,
    "title": "Holes",
    "difficulty": "hard",
    "category": [
      "data structures",
      "union find"
    ]
  },
  {
    "id": 14038,
    "title": "Triangles",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "geometry"
    ]
  },
  {
    "id": 14039,
    "title": "Sequence",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 14040,
    "title": "Letter A",
    "difficulty": "hard",
    "category": [
      "geometry",
      "implementation"
    ]
  },
  {
    "id": 14041,
    "title": "Numbers",
    "difficulty": "easy",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 14042,
    "title": "Start of the session",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 14043,
    "title": "Ball",
    "difficulty": "hard",
    "category": [
      "data structures",
      "sorting"
    ]
  },
  {
    "id": 14044,
    "title": "Fruits",
    "difficulty": "easy",
    "category": [
      "greedy",
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 14045,
    "title": "Correct Solution?",
    "difficulty": "easy",
    "category": [
      "implementation",
      "sorting"
    ]
  },
  {
    "id": 14046,
    "title": "Super Agent",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 14047,
    "title": "Forward, march!",
    "difficulty": "hard",
    "category": [
      "binary search",
      "dynamic programming",
      "greedy"
    ]
  },
  {
    "id": 14048,
    "title": "A Simple Task",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming",
      "graph"
    ]
  },
  {
    "id": 14049,
    "title": "How Many Squares?",
    "difficulty": "hard",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 14050,
    "title": "Jumping Jack",
    "difficulty": "medium",
    "category": [
      "math"
    ]
  },
  {
    "id": 14051,
    "title": "Increasing Sequence",
    "difficulty": "easy",
    "category": [
      "constructive algorithms",
      "implementation",
      "math"
    ]
  },
  {
    "id": 14052,
    "title": "Greedy Change",
    "difficulty": "hard",
    "category": [
      "constructive algorithms"
    ]
  },
  {
    "id": 14053,
    "title": "LCIS",
    "difficulty": "hard",
    "category": [
      "dynamic programming"
    ]
  },
  {
    "id": 14054,
    "title": "Digital Root",
    "difficulty": "hard",
    "category": [
      "number theory"
    ]
  },
  {
    "id": 14055,
    "title": "Cinema Cashier",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "implementation"
    ]
  },
  {
    "id": 14056,
    "title": "Power Consumption Calculation",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 14057,
    "title": "Interestring graph and Apples",
    "difficulty": "hard",
    "category": [
      "graph",
      "graph traversal",
      "union find"
    ]
  },
  {
    "id": 14058,
    "title": "How many trees?",
    "difficulty": "hard",
    "category": [
      "combinatorics",
      "divide and conquer",
      "dynamic programming"
    ]
  },
  {
    "id": 14059,
    "title": "Hexadecimal's Numbers",
    "difficulty": "medium",
    "category": [
      "brute force",
      "implementation",
      "math"
    ]
  },
  {
    "id": 14060,
    "title": "Running Student",
    "difficulty": "medium",
    "category": [
      "brute force",
      "geometry",
      "implementation"
    ]
  },
  {
    "id": 14061,
    "title": "Die Roll",
    "difficulty": "easy",
    "category": [
      "math",
      "probability"
    ]
  },
  {
    "id": 14062,
    "title": "Beads",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "graph"
    ]
  },
  {
    "id": 14063,
    "title": "Two Friends",
    "difficulty": "hard",
    "category": [
      "binary search",
      "geometry"
    ]
  },
  {
    "id": 14064,
    "title": "Looking for Order",
    "difficulty": "hard",
    "category": [
      "bit manipulation",
      "dynamic programming"
    ]
  },
  {
    "id": 14065,
    "title": "Obsession with Robots",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "graph",
      "implementation"
    ]
  },
  {
    "id": 14066,
    "title": "Train and Peter",
    "difficulty": "medium",
    "category": [
      "string"
    ]
  },
  {
    "id": 14067,
    "title": "Defining Macros",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "implementation",
      "parsing"
    ]
  },
  {
    "id": 14068,
    "title": "Palindrome Degree",
    "difficulty": "hard",
    "category": [
      "hash table",
      "string"
    ]
  },
  {
    "id": 14069,
    "title": "Line",
    "difficulty": "medium",
    "category": [
      "math",
      "number theory"
    ]
  },
  {
    "id": 14070,
    "title": "Memory Manager",
    "difficulty": "medium",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 14071,
    "title": "Kalevitch and Chess",
    "difficulty": "easy",
    "category": [
      "brute force",
      "constructive algorithms"
    ]
  },
  {
    "id": 14072,
    "title": "Exposition",
    "difficulty": "hard",
    "category": [
      "binary search",
      "data structures",
      "tree",
      "two pointers",
      "union find"
    ]
  },
  {
    "id": 14073,
    "title": "Lizards and Basements 2",
    "difficulty": "hard",
    "category": [
      "brute force",
      "dynamic programming"
    ]
  },
  {
    "id": 14074,
    "title": "Alice, Bob and Chocolate",
    "difficulty": "medium",
    "category": [
      "greedy",
      "two pointers"
    ]
  },
  {
    "id": 14075,
    "title": "President's Office",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 14076,
    "title": "Triangle",
    "difficulty": "easy",
    "category": [
      "brute force",
      "geometry"
    ]
  },
  {
    "id": 14077,
    "title": "Bindian Signalizing",
    "difficulty": "hard",
    "category": [
      "data structures"
    ]
  },
  {
    "id": 14078,
    "title": "Follow Traffic Rules",
    "difficulty": "hard",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 14079,
    "title": "Longest Regular Bracket Sequence",
    "difficulty": "hard",
    "category": [
      "constructive algorithms",
      "data structures",
      "dynamic programming",
      "greedy",
      "sorting",
      "string"
    ]
  },
  {
    "id": 14080,
    "title": "Center Alignment",
    "difficulty": "medium",
    "category": [
      "implementation",
      "string"
    ]
  },
  {
    "id": 14081,
    "title": "Chat Servers Outgoing Traffic",
    "difficulty": "easy",
    "category": [
      "implementation"
    ]
  },
  {
    "id": 14082,
    "title": "Mysterious Present",
    "difficulty": "medium",
    "category": [
      "dynamic programming",
      "sorting"
    ]
  },
  {
    "id": 14083,
    "title": "Registration System",
    "difficulty": "medium",
    "category": [
      "data structures",
      "hash table",
      "implementation"
    ]
  },
  {
    "id": 14084,
    "title": "Before an Exam",
    "difficulty": "medium",
    "category": [
      "constructive algorithms",
      "greedy"
    ]
  },
  {
    "id": 14085,
    "title": "Watermelon",
    "difficulty": "easy",
    "category": [
      "brute force",
      "math"
    ]
  },
  {
    "id": 14086,
    "title": "Least Cost Bracket Sequence",
    "difficulty": "hard",
    "category": [
      "greedy"
    ]
  },
  {
    "id": 14087,
    "title": "Tic-tac-toe",
    "difficulty": "medium",
    "category": [
      "brute force",
      "game theory",
      "implementation"
    ]
  },
  {
    "id": 14088,
    "title": "Lorry",
    "difficulty": "hard",
    "category": [
      "greedy",
      "sorting"
    ]
  },
  {
    "id": 14089,
    "title": "Shortest path of the king",
    "difficulty": "easy",
    "category": [
      "greedy",
      "shortest path"
    ]
  },
  {
    "id": 14090,
    "title": "Commentator problem",
    "difficulty": "hard",
    "category": [
      "geometry"
    ]
  },
  {
    "id": 14091,
    "title": "The least round way",
    "difficulty": "hard",
    "category": [
      "dynamic programming",
      "math"
    ]
  },
  {
    "id": 14092,
    "title": "Winner",
    "difficulty": "medium",
    "category": [
      "hash table",
      "implementation"
    ]
  },
  {
    "id": 14093,
    "title": "Ancient Berland Circus",
    "difficulty": "hard",
    "category": [
      "geometry",
      "math"
    ]
  },
  {
    "id": 14094,
    "title": "Spreadsheet",
    "difficulty": "medium",
    "category": [
      "implementation",
      "math"
    ]
  },
  {
    "id": 14095,
    "title": "Theatre Square",
    "difficulty": "easy",
    "category": [
      "math"
    ]
  }
]